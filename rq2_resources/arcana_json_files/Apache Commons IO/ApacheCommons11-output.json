{"elements": {"nodes": [{"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()", "kind": "constructor", "sourceText": "TesterTrueFileFilter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "kind": "method", "sourceText": "public java.io.File determineWorkingDirectoryPath(final java.lang.String key, final java.lang.String defaultPath) {\r\n    // Look for a system property to specify the working directory\r\n    java.lang.String workingPathName = java.lang.System.getProperty(key, defaultPath);\r\n    return new java.io.File(workingPathName);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite", "labels": ["Structure"], "properties": {"docComment": "A basic test suite that tests all the IO input package.\r\n\r\n@author Stephen Colebourne\r\n", "simpleName": "PackageTestSuite", "qualifiedName": "org.apache.commons.io.input.PackageTestSuite", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.c_random", "labels": ["Variable"], "properties": {"sourceText": "private static java.util.Random c_random = new java.util.Random();", "visibility": "private", "simpleName": "c_random", "qualifiedName": "org.apache.commons.io.DemuxTestCase.c_random", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readBoolean()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readBoolean()\r\n */\r\npublic boolean readBoolean() throws java.io.IOException, java.io.EOFException {\r\n    return 0 == this.readByte();\r\n}", "docComment": "\r\n@see java.io.DataInput#readBoolean()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(int)\r\n */\r\npublic void write(int b) {\r\n    // to /dev/null\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename starts with the prefix.\r\n *\r\n * @param file\r\n * \t\tthe File to check\r\n * @return true if the filename starts with one of our prefixes\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    java.lang.String name = file.getName();\r\n    for (int i = 0; i < this.prefixes.length; i++) {\r\n        if (name.startsWith(this.prefixes[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename starts with the prefix.\r\n\r\n@param file\r\n\t\tthe File to check\r\n@return true if the filename starts with one of our prefixes\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "labels": ["Variable"], "properties": {"sourceText": "private boolean invoked;", "visibility": "private", "simpleName": "invoked", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.out", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The writer to decorate.\r\n */\r\nprivate java.io.Writer out;", "visibility": "private", "simpleName": "out", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.out", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToOutputStream_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "kind": "method", "sourceText": "public void testWrite_byteArrayToOutputStream_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(((byte[]) (null)), out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteByteArrayToFile()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()", "kind": "method", "sourceText": "public void testWriteByteArrayToFile() throws java.lang.Exception {\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"write.obj\");\r\n    byte[] data = new byte[]{ 11, 21, 31 };\r\n    org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data);\r\n    this.assertEqualContent(data, file);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedLong(byte[],int,long)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"long\" value to a byte array at a given offset. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param data\r\n * \t\ttarget byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @param value\r\n * \t\tvalue to write\r\n */\r\npublic static void writeSwappedLong(byte[] data, int offset, long value) {\r\n    data[offset + 0] = ((byte) ((value >> 0) & 0xff));\r\n    data[offset + 1] = ((byte) ((value >> 8) & 0xff));\r\n    data[offset + 2] = ((byte) ((value >> 16) & 0xff));\r\n    data[offset + 3] = ((byte) ((value >> 24) & 0xff));\r\n    data[offset + 4] = ((byte) ((value >> 32) & 0xff));\r\n    data[offset + 5] = ((byte) ((value >> 40) & 0xff));\r\n    data[offset + 6] = ((byte) ((value >> 48) & 0xff));\r\n    data[offset + 7] = ((byte) ((value >> 56) & 0xff));\r\n}", "docComment": "Writes a \"long\" value to a byte array at a given offset. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param data\r\n\t\ttarget byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@param value\r\n\t\tvalue to write\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "labels": ["Structure"], "properties": {"docComment": "Tests the CountingInputStream.\r\n\r\n@version $Id: CountingInputStreamTest.java 160202 2005-04-05 17:22:21Z roxspring $\r\n", "simpleName": "ClassLoaderObjectInputStreamTest", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "fileFilters", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "chr", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "kind": "method", "sourceText": "public void setUp() throws java.lang.Exception {\r\n    this.workingPath = this.determineWorkingDirectoryPath(this.getWorkingPathNamePropertyKey(), this.getDefaultWorkingPath());\r\n    this.file = new java.io.File(this.workingPath, (org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX + 1) + org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE);\r\n    this.trueFilters = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter[4];\r\n    this.falseFilters = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter[4];\r\n    this.trueFilters[1] = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter();\r\n    this.trueFilters[2] = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter();\r\n    this.trueFilters[3] = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter();\r\n    this.falseFilters[1] = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter();\r\n    this.falseFilters[2] = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter();\r\n    this.falseFilters[3] = new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "len", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileUtilsFileNewerTestCase(java.lang.String name) {\r\n    super(name);\r\n    this.m_testFile1 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file1-test.txt\");\r\n    this.m_testFile2 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file2-test.txt\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#setUp()\r\n */\r\nprotected void setUp() throws java.lang.Exception {\r\n    this.top.mkdirs();\r\n}", "docComment": "\r\n@see junit.framework.TestCase#setUp()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToWriter()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "kind": "method", "sourceText": "public void testCopy_readerToWriter() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    int count = org.apache.commons.io.CopyUtils.copy(reader, writer);\r\n    writer.flush();\r\n    this.assertEquals(\"The number of characters returned by copy is wrong\", this.inData.length, count);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).1", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).0", "labels": ["Variable"], "properties": {"simpleName": "out", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.InputStream,java.io.Writer,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Copy bytes from an <code>InputStream</code> to chars on a\r\n * <code>Writer</code> using the specified character encoding.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method uses {@link InputStreamReader}.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif the input or output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\r\n    if (encoding == null) {\r\n        org.apache.commons.io.IOUtils.copy(input, output);\r\n    } else {\r\n        java.io.InputStreamReader in = new java.io.InputStreamReader(input, encoding);\r\n        org.apache.commons.io.IOUtils.copy(in, output);\r\n    }\r\n}", "docComment": "Copy bytes from an <code>InputStream</code> to chars on a\r\n<code>Writer</code> using the specified character encoding.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method uses {@link InputStreamReader}.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif the input or output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "freeSpaceWindows(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Find free space on the Windows platform using the 'dir' command.\r\n *\r\n * @param path\r\n * \t\tthe path to get free space for, including the colon\r\n * @return the amount of free drive space on the drive\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\nlong freeSpaceWindows(java.lang.String path) throws java.io.IOException {\r\n    path = org.apache.commons.io.FilenameUtils.normalize(path);\r\n    if ((path.length() > 2) && (path.charAt(1) == ':')) {\r\n        path = path.substring(0, 2);// seems to make it work\r\n\r\n    }\r\n    // build and run the 'dir' command\r\n    java.lang.String[] cmdAttrbs = new java.lang.String[]{ \"cmd.exe\", \"/C\", \"dir /c \" + path };\r\n    // read in the output of the command to an ArrayList\r\n    java.io.BufferedReader in = null;\r\n    java.lang.String line = null;\r\n    java.util.ArrayList lines = new java.util.ArrayList();\r\n    try {\r\n        in = this.openProcessStream(cmdAttrbs);\r\n        line = in.readLine();\r\n        while (line != null) {\r\n            line = line.toLowerCase().trim();\r\n            lines.add(line);\r\n            line = in.readLine();\r\n        } \r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n    }\r\n    if (lines.size() == 0) {\r\n        // unknown problem, throw exception\r\n        throw new java.io.IOException(((\"Command line 'dir /c' did not return any info \" + \"for command '\") + cmdAttrbs[2]) + \"'\");\r\n    }\r\n    // now iterate over the lines we just read and find the LAST\r\n    // non-empty line (the free space bytes should be in the last element\r\n    // of the ArrayList anyway, but this will ensure it works even if it's\r\n    // not, still assuming it is on the last non-blank line)\r\n    long bytes = -1;\r\n    int i = lines.size() - 1;\r\n    int bytesStart = 0;\r\n    int bytesEnd = 0;\r\n    outerLoop : while (i > 0) {\r\n        line = ((java.lang.String) (lines.get(i)));\r\n        if (line.length() > 0) {\r\n            // found it, so now read from the end of the line to find the\r\n            // last numeric character on the line, then continue until we\r\n            // find the first non-numeric character, and everything between\r\n            // that and the last numeric character inclusive is our free\r\n            // space bytes count\r\n            int j = line.length() - 1;\r\n            innerLoop1 : while (j >= 0) {\r\n                char c = line.charAt(j);\r\n                if (java.lang.Character.isDigit(c)) {\r\n                    // found the last numeric character, this is the end of\r\n                    // the free space bytes count\r\n                    bytesEnd = j + 1;\r\n                    break innerLoop1;\r\n                }\r\n                j--;\r\n            } \r\n            innerLoop2 : while (j >= 0) {\r\n                char c = line.charAt(j);\r\n                if (((!java.lang.Character.isDigit(c)) && (c != ',')) && (c != '.')) {\r\n                    // found the next non-numeric character, this is the\r\n                    // beginning of the free space bytes count\r\n                    bytesStart = j + 1;\r\n                    break innerLoop2;\r\n                }\r\n                j--;\r\n            } \r\n            break outerLoop;\r\n        }\r\n    } \r\n    // remove commas and dots in the bytes count\r\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(line.substring(bytesStart, bytesEnd));\r\n    for (int k = 0; k < buf.length(); k++) {\r\n        if ((buf.charAt(k) == ',') || (buf.charAt(k) == '.')) {\r\n            buf.deleteCharAt(k--);\r\n        }\r\n    }\r\n    bytes = java.lang.Long.parseLong(buf.toString());\r\n    return bytes;\r\n}", "docComment": "Find free space on the Windows platform using the 'dir' command.\r\n\r\n@param path\r\n\t\tthe path to get free space for, including the colon\r\n@return the amount of free drive space on the drive\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedDouble(java.io.OutputStream,double)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"double\" value to an OutputStream. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param output\r\n * \t\ttarget OutputStream\r\n * @param value\r\n * \t\tvalue to write\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static void writeSwappedDouble(java.io.OutputStream output, double value) throws java.io.IOException {\r\n    org.apache.commons.io.EndianUtils.writeSwappedLong(output, java.lang.Double.doubleToLongBits(value));\r\n}", "docComment": "Writes a \"double\" value to an OutputStream. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param output\r\n\t\ttarget OutputStream\r\n@param value\r\n\t\tvalue to write\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "ioFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "static method", "sourceText": "/**\r\n * Returns a filter that NOTs the specified filter.\r\n *\r\n * @param filter\r\n * \t\tthe filter to invert\r\n * @return a filter that NOTs the specified filter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter) {\r\n    return new org.apache.commons.io.filefilter.NotFileFilter(filter);\r\n}", "docComment": "Returns a filter that NOTs the specified filter.\r\n\r\n@param filter\r\n\t\tthe filter to invert\r\n@return a filter that NOTs the specified filter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toCharArray(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "kind": "static method", "sourceText": "// read char[]\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Get the contents of an <code>InputStream</code> as a character array\r\n * using the default character encoding of the platform.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param is\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @return the requested character array\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static char[] toCharArray(java.io.InputStream is) throws java.io.IOException {\r\n    java.io.CharArrayWriter output = new java.io.CharArrayWriter();\r\n    org.apache.commons.io.IOUtils.copy(is, output);\r\n    return output.toCharArray();\r\n}", "docComment": "Get the contents of an <code>InputStream</code> as a character array\r\nusing the default character encoding of the platform.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param is\r\n\t\tthe <code>InputStream</code> to read from\r\n@return the requested character array\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "normalized", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToOutputStream_nullEncoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "kind": "method", "sourceText": "public void testWrite_stringToOutputStream_nullEncoding() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(str, out, null);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader(java.io.Reader)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.Reader)", "qualifiedName": "org.apache.commons.io.input.ProxyReader(java.io.Reader)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new ProxyReader.\r\n *\r\n * @param proxy\r\n * \t\tthe Reader to delegate to\r\n */\r\npublic ProxyReader(java.io.Reader proxy) {\r\n    super(proxy);\r\n    // the proxy is stored in a protected superclass variable named 'in'\r\n}", "docComment": "Constructs a new ProxyReader.\r\n\r\n@param proxy\r\n\t\tthe Reader to delegate to\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "lines", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "labels": ["Variable"], "properties": {"simpleName": "filter2", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "testFile", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[]).0", "labels": ["Variable"], "properties": {"simpleName": "chr", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).2", "labels": ["Variable"], "properties": {"simpleName": "invoked", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "contentEquals(java.io.InputStream,java.io.InputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "kind": "static method", "sourceText": "// content equals\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Compare the contents of two Streams to determine if they are equal or\r\n * not.\r\n * <p>\r\n * This method buffers the input internally using\r\n * <code>BufferedInputStream</code> if they are not already buffered.\r\n *\r\n * @param input1\r\n * \t\tthe first stream\r\n * @param input2\r\n * \t\tthe second stream\r\n * @return true if the content of the streams are equal or they both don't\r\nexist, false otherwise\r\n * @throws NullPointerException\r\n * \t\tif either input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n */\r\npublic static boolean contentEquals(java.io.InputStream input1, java.io.InputStream input2) throws java.io.IOException {\r\n    if (!(input1 instanceof java.io.BufferedInputStream)) {\r\n        input1 = new java.io.BufferedInputStream(input1);\r\n    }\r\n    if (!(input2 instanceof java.io.BufferedInputStream)) {\r\n        input2 = new java.io.BufferedInputStream(input2);\r\n    }\r\n    int ch = input1.read();\r\n    while ((-1) != ch) {\r\n        int ch2 = input2.read();\r\n        if (ch != ch2) {\r\n            return false;\r\n        }\r\n        ch = input1.read();\r\n    } \r\n    int ch2 = input2.read();\r\n    return ch2 == (-1);\r\n}", "docComment": "Compare the contents of two Streams to determine if they are equal or\r\nnot.\r\n<p>\r\nThis method buffers the input internally using\r\n<code>BufferedInputStream</code> if they are not already buffered.\r\n\r\n@param input1\r\n\t\tthe first stream\r\n@param input2\r\n\t\tthe second stream\r\n@return true if the content of the streams are equal or they both don't\r\nexist, false otherwise\r\n@throws NullPointerException\r\n\t\tif either input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "int", "labels": ["Primitive"], "properties": {"simpleName": "int", "qualifiedName": "int", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "system", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).1", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "checkFile(java.io.File,java.io.File)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "kind": "method", "sourceText": "protected void checkFile(java.io.File file, java.io.File referenceFile) throws java.lang.Exception {\r\n    this.assertTrue(\"Check existence of output file\", file.exists());\r\n    this.assertEqualContent(referenceFile, file);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter", "labels": ["Structure"], "properties": {"docComment": "Defines operations for conditional file filters.\r\n\r\n@since Commons IO 1.1\r\n@version $Revision$ $Date$\r\n@author Steven Caswell\r\n", "simpleName": "ConditionalFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter", "kind": "interface", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Construct a new wildcard filter for a single wildcard\r\n *\r\n * @param wildcard\r\n * \t\twildcard to match\r\n * @throws IllegalArgumentException\r\n * \t\tif the pattern is null\r\n */\r\npublic WildcardFilter(java.lang.String wildcard) {\r\n    super();\r\n    if (wildcard == null) {\r\n        throw new java.lang.IllegalArgumentException();\r\n    }\r\n    this.wildcards = new java.lang.String[]{ wildcard };\r\n}", "docComment": "Construct a new wildcard filter for a single wildcard\r\n\r\n@param wildcard\r\n\t\twildcard to match\r\n@throws IllegalArgumentException\r\n\t\tif the pattern is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.close()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#close()\r\n */\r\npublic void close() throws java.io.IOException {\r\n    this.out.close();\r\n}", "docComment": "\r\n@see java.io.Writer#close()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testMakeSVNAware()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "kind": "method", "sourceText": "public void testMakeSVNAware() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);\r\n    org.apache.commons.io.filefilter.IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(\"test-file1.txt\"));\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \".svn\");\r\n    file.mkdirs();\r\n    this.assertFiltering(filter1, file, false);\r\n    this.assertFiltering(filter2, file, false);\r\n    org.apache.commons.io.FileUtils.deleteDirectory(file);\r\n    file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"test-file1.txt\");\r\n    this.createFile(file, 0);\r\n    this.assertFiltering(filter1, file, true);\r\n    this.assertFiltering(filter2, file, true);\r\n    file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"test-file2.log\");\r\n    this.createFile(file, 0);\r\n    this.assertFiltering(filter1, file, true);\r\n    this.assertFiltering(filter2, file, false);\r\n    file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \".svn\");\r\n    this.createFile(file, 0);\r\n    this.assertFiltering(filter1, file, true);\r\n    this.assertFiltering(filter2, file, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToOutputStream_Encoding_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "kind": "method", "sourceText": "public void testWrite_stringToOutputStream_Encoding_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(((java.lang.String) (null)), out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEquals()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testEquals()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testEquals()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testEquals() {\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equals(null, null));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equals(null, \"\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equals(\"\", null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equals(\"\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equals(\"file.txt\", \"file.txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equals(\"file.txt\", \"FILE.TXT\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equals(\"a\\\\b\\\\file.txt\", \"a/b/file.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "filename2", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "filename2", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_3arg_nullSeparator()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "kind": "method", "sourceText": "public void testWriteLines_3arg_nullSeparator() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", new java.lang.StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    org.apache.commons.io.FileUtils.writeLines(file, \"US-ASCII\", list);\r\n    java.lang.String expected = ((((((((\"hello\" + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"world\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"this is\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"some text\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n    java.lang.String actual = org.apache.commons.io.FileUtils.readFileToString(file, \"US-ASCII\");\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedShort(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"short\" value from an InputStream. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param input\r\n * \t\tsource InputStream\r\n * @return the value just read\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static short readSwappedShort(java.io.InputStream input) throws java.io.IOException {\r\n    return ((short) (((org.apache.commons.io.EndianUtils.read(input) & 0xff) << 0) + ((org.apache.commons.io.EndianUtils.read(input) & 0xff) << 8)));\r\n}", "docComment": "Reads a \"short\" value from an InputStream. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param input\r\n\t\tsource InputStream\r\n@return the value just read\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "lockDir", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "testNumber", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).2", "labels": ["Variable"], "properties": {"simpleName": "instructions", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(int,java.io.File)", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "kind": "constructor", "sourceText": "// ----------------------------------------------------------- Constructors\r\n/**\r\n * Constructs an instance of this class which will trigger an event at the\r\n * specified threshold, and save data to a file beyond that point.\r\n *\r\n * @param threshold\r\n * \t\tThe number of bytes at which to trigger an event.\r\n * @param outputFile\r\n * \t\tThe file to which data is saved beyond the threshold.\r\n */\r\npublic DeferredFileOutputStream(int threshold, java.io.File outputFile) {\r\n    super(threshold);\r\n    this.outputFile = outputFile;\r\n    this.memoryOutputStream = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    this.currentOutputStream = this.memoryOutputStream;\r\n}", "docComment": "Constructs an instance of this class which will trigger an event at the\r\nspecified threshold, and save data to a file beyond that point.\r\n\r\n@param threshold\r\n\t\tThe number of bytes at which to trigger an event.\r\n@param outputFile\r\n\t\tThe file to which data is saved beyond the threshold.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "threshold", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toByteArray(java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>String</code> as a <code>byte[]</code>\r\n * using the default character encoding of the platform.\r\n * <p>\r\n * This is the same as {@link String#getBytes()}.\r\n *\r\n * @param input\r\n * \t\tthe <code>String</code> to convert\r\n * @return the requested byte array\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs (never occurs)\r\n * @deprecated Use {@link String#getBytes()}\r\n */\r\npublic static byte[] toByteArray(java.lang.String input) throws java.io.IOException {\r\n    return input.getBytes();\r\n}", "docComment": "Get the contents of a <code>String</code> as a <code>byte[]</code>\r\nusing the default character encoding of the platform.\r\n<p>\r\nThis is the same as {@link String#getBytes()}.\r\n\r\n@param input\r\n\t\tthe <code>String</code> to convert\r\n@return the requested byte array\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs (never occurs)\r\n@deprecated Use {@link String#getBytes()}\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(final java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.filefilter.AndFileFilterTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter()", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new instance of <code>OrFileFilter</code>.\r\n *\r\n * @since Commons IO 1.1\r\n */\r\npublic OrFileFilter() {\r\n    super();\r\n    this.fileFilters = new java.util.ArrayList();\r\n}", "docComment": "Constructs a new instance of <code>OrFileFilter</code>.\r\n\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toURLs(java.io.File[]).0", "labels": ["Variable"], "properties": {"simpleName": "files", "qualifiedName": "org.apache.commons.io.FileUtils.toURLs(java.io.File[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "deleteDirectory(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Recursively delete a directory.\r\n *\r\n * @param directory\r\n * \t\tdirectory to delete\r\n * @throws IOException\r\n * \t\tin case deletion is unsuccessful\r\n */\r\npublic static void deleteDirectory(java.io.File directory) throws java.io.IOException {\r\n    if (!directory.exists()) {\r\n        return;\r\n    }\r\n    org.apache.commons.io.FileUtils.cleanDirectory(directory);\r\n    if (!directory.delete()) {\r\n        java.lang.String message = (\"Unable to delete directory \" + directory) + \".\";\r\n        throw new java.io.IOException(message);\r\n    }\r\n}", "docComment": "Recursively delete a directory.\r\n\r\n@param directory\r\n\t\tdirectory to delete\r\n@throws IOException\r\n\t\tin case deletion is unsuccessful\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read(char[],int,int)", "qualifiedName": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#read(char[], int, int)\r\n */\r\npublic int read(char[] chr, int st, int end) throws java.io.IOException {\r\n    return this.in.read(chr, st, end);\r\n}", "docComment": "\r\n@see java.io.Reader#read(char[], int, int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "checkThreshold(int)", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "kind": "method", "sourceText": "// ------------------------------------------------------ Protected methods\r\n/**\r\n * Checks to see if writing the specified number of bytes would cause the\r\n * configured threshold to be exceeded. If so, triggers an event to allow\r\n * a concrete implementation to take action on this.\r\n *\r\n * @param count\r\n * \t\tThe number of bytes about to be written to the underlying\r\n * \t\toutput stream.\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\nprotected void checkThreshold(int count) throws java.io.IOException {\r\n    if ((!this.thresholdExceeded) && ((this.written + count) > this.threshold)) {\r\n        this.thresholdReached();\r\n        this.thresholdExceeded = true;\r\n    }\r\n}", "docComment": "Checks to see if writing the specified number of bytes would cause the\r\nconfigured threshold to be exceeded. If so, triggers an event to allow\r\na concrete implementation to take action on this.\r\n\r\n@param count\r\n\t\tThe number of bytes about to be written to the underlying\r\n\t\toutput stream.\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#tearDown()\r\n */\r\nprotected void tearDown() throws java.lang.Exception {\r\n    this.chmod(this.top, 775, true);\r\n    org.apache.commons.io.FileUtils.deleteDirectory(this.top);\r\n}", "docComment": "\r\n@see junit.framework.TestCase#tearDown()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testAtThreshold()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "kind": "method", "sourceText": "/**\r\n * Tests the case where the amount of data is exactly the same as the\r\n * threshold. The behavior should be the same as that for the amount of\r\n * data being below (i.e. not exceeding) the threshold.\r\n */\r\npublic void testAtThreshold() {\r\n    org.apache.commons.io.output.DeferredFileOutputStream dfos = new org.apache.commons.io.output.DeferredFileOutputStream(this.testBytes.length, null);\r\n    try {\r\n        dfos.write(this.testBytes, 0, this.testBytes.length);\r\n        dfos.close();\r\n    } catch (java.io.IOException e) {\r\n        this.fail(\"Unexpected IOException\");\r\n    }\r\n    this.assertTrue(dfos.isInMemory());\r\n    byte[] resultBytes = dfos.getData();\r\n    this.assertTrue(resultBytes.length == this.testBytes.length);\r\n    this.assertTrue(java.util.Arrays.equals(resultBytes, this.testBytes));\r\n}", "docComment": "Tests the case where the amount of data is exactly the same as the\r\nthreshold. The behavior should be the same as that for the amount of\r\ndata being below (i.e. not exceeding) the threshold.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedFloat(byte[],int)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"float\" value from a byte array at a given offset. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param data\r\n * \t\tsource byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @return the value read\r\n */\r\npublic static float readSwappedFloat(byte[] data, int offset) {\r\n    return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(data, offset));\r\n}", "docComment": "Reads a \"float\" value from a byte array at a given offset. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param data\r\n\t\tsource byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@return the value read\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).2", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the File should be accepted by this filter.\r\n * <p>\r\n * Defined in {@link java.io.FileFilter}.\r\n *\r\n * @param file\r\n * \t\tthe File to check\r\n * @return true if this file matches the test\r\n */\r\npublic boolean accept(java.io.File file);", "docComment": "Checks to see if the File should be accepted by this filter.\r\n<p>\r\nDefined in {@link java.io.FileFilter}.\r\n\r\n@param file\r\n\t\tthe File to check\r\n@return true if this file matches the test\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.names", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The filenames to search for\r\n */\r\nprivate java.lang.String[] names;", "visibility": "private", "simpleName": "names", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter.names", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getThreshold()", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()", "kind": "method", "sourceText": "// --------------------------------------------------------- Public methods\r\n/**\r\n * Returns the threshold, in bytes, at which an event will be triggered.\r\n *\r\n * @return The threshold point, in bytes.\r\n */\r\npublic int getThreshold() {\r\n    return this.threshold;\r\n}", "docComment": "Returns the threshold, in bytes, at which an event will be triggered.\r\n\r\n@return The threshold point, in bytes.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.tearDown()", "kind": "method", "sourceText": "protected void tearDown() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.skip(long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skip(long)", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.skip(long)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#skip(long)\r\n */\r\npublic long skip(long ln) throws java.io.IOException {\r\n    return this.in.skip(ln);\r\n}", "docComment": "\r\n@see java.io.InputStream#skip(long)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.AllIOTestSuite.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "fileFilters", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "names", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The list of file filters.\r\n */\r\nprivate java.util.List fileFilters;", "visibility": "private", "simpleName": "fileFilters", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyFile2()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "kind": "method", "sourceText": "public void testCopyFile2() throws java.lang.Exception {\r\n    java.io.File destination = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"copy2.txt\");\r\n    java.lang.Thread.sleep(org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY);\r\n    // This is to slow things down so we can catch if\r\n    // the lastModified date is not ok\r\n    org.apache.commons.io.FileUtils.copyFile(this.testFile1, destination);\r\n    this.assertTrue(\"Check Exist\", destination.exists());\r\n    this.assertTrue(\"Check Full copy\", destination.length() == org.apache.commons.io.FileUtilsTestCase.testFile2Size);\r\n    this.assertTrue(\"Check last modified date preserved\", this.testFile1.lastModified() == destination.lastModified());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output", "labels": ["Container"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.output", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "append", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "wildcards", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new instance of <code>OrFileFilter</code>\r\n * with the specified filters.\r\n *\r\n * @param fileFilters\r\n * \t\tthe file filters for this filter, copied, null ignored\r\n * @since Commons IO 1.1\r\n */\r\npublic OrFileFilter(final java.util.List fileFilters) {\r\n    super();\r\n    if (fileFilters == null) {\r\n        this.fileFilters = new java.util.ArrayList();\r\n    } else {\r\n        this.fileFilters = new java.util.ArrayList(fileFilters);\r\n    }\r\n}", "docComment": "Constructs a new instance of <code>OrFileFilter</code>\r\nwith the specified filters.\r\n\r\n@param fileFilters\r\n\t\tthe file filters for this filter, copied, null ignored\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.<init>1()", "labels": ["Script"], "properties": {"visibility": "default", "simpleName": "<init>1()", "qualifiedName": "org.apache.commons.io.FileCleaner.<init>1()", "kind": "object initializer", "sourceText": "/**\r\n * The static initializer that starts the reaper thread.\r\n */\r\nstatic {\r\n    org.apache.commons.io.FileCleaner.reaper.setPriority(java.lang.Thread.MAX_PRIORITY);\r\n    org.apache.commons.io.FileCleaner.reaper.setDaemon(true);\r\n    org.apache.commons.io.FileCleaner.reaper.start();\r\n}", "docComment": "The static initializer that starts the reaper thread.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsExtensionCollection()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()", "kind": "method", "sourceText": "public void testIsExtensionCollection() {\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(null, ((java.util.Collection) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", ((java.util.Collection) (null))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file\", ((java.util.Collection) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.util.ArrayList()));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\" }))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\", \"\" }))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\", \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", ((java.util.Collection) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.util.ArrayList()));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\" }))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\", \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", ((java.util.Collection) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.util.ArrayList()));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\" }))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\", \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", ((java.util.Collection) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.util.ArrayList()));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\" }))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\", \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", ((java.util.Collection) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.util.ArrayList()));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\" }))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"rtf\", \"txt\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"TXT\" }))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.util.ArrayList(java.util.Arrays.asList(new java.lang.String[]{ \"TXT\", \"RTF\" }))));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter", "labels": ["Variable"], "properties": {"sourceText": "// -----------------------------------------------------------------------\r\n/* Constructed on demand and then cached */\r\nprivate static org.apache.commons.io.filefilter.IOFileFilter cvsFilter;", "visibility": "private", "simpleName": "cvsFilter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.CopyUtilsTest(java.lang.String)", "kind": "constructor", "sourceText": "public CopyUtilsTest(java.lang.String testName) {\r\n    super(testName);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testForceDeleteDir()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()", "kind": "method", "sourceText": "// forceDelete\r\npublic void testForceDeleteDir() throws java.lang.Exception {\r\n    org.apache.commons.io.FileUtils.forceDelete(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().getParentFile());\r\n    this.assertTrue(\"Check No Exist\", !org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().getParentFile().exists());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The filename prefixes to search for\r\n */\r\nprivate java.lang.String[] prefixes;", "visibility": "private", "simpleName": "prefixes", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "ioFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream", "labels": ["Structure"], "properties": {"docComment": "Data written to this stream is forwarded to a stream that has been associated\r\nwith this thread.\r\n\r\n@author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\r\n@version $Revision$ $Date$\r\n", "simpleName": "DemuxInputStream", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The file to which output will be directed if the threshold is exceeded.\r\n */\r\nprivate java.io.File outputFile;", "visibility": "private", "simpleName": "outputFile", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedLong(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"long\" value from an InputStream. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param input\r\n * \t\tsource InputStream\r\n * @return the value just read\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static long readSwappedLong(java.io.InputStream input) throws java.io.IOException {\r\n    byte[] bytes = new byte[8];\r\n    input.read(bytes);\r\n    return org.apache.commons.io.EndianUtils.readSwappedLong(bytes, 0);\r\n}", "docComment": "Reads a \"long\" value from an InputStream. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param input\r\n\t\tsource InputStream\r\n@return the value just read\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCleanEmpty()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testCleanEmpty() throws java.lang.Exception {\r\n    this.assertEquals(0, this.top.list().length);\r\n    org.apache.commons.io.FileUtils.cleanDirectory(this.top);\r\n    this.assertEquals(0, this.top.list().length);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadLines()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadLines()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testReadLines()", "kind": "method", "sourceText": "public void testReadLines() throws java.lang.Exception {\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    try {\r\n        java.lang.String[] data = new java.lang.String[]{ \"hello\", \"/u1234\", \"\", \"this is\", \"some text\" };\r\n        this.createLineBasedFile(file, data);\r\n        java.util.List lines = org.apache.commons.io.FileUtils.readLines(file, \"UTF-8\");\r\n        this.assertEquals(java.util.Arrays.asList(data), lines);\r\n    } finally {\r\n        this.deleteFile(file);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils", "labels": ["Structure"], "properties": {"docComment": "Utility code for dealing with different endian systems.\r\n<p>\r\nDifferent computer architectures adopt different conventions for\r\nbyte ordering. In so-called \"Little Endian\" architectures (eg Intel),\r\nthe low-order byte is stored in memory at the lowest address, and\r\nsubsequent bytes at higher addresses. For \"Big Endian\" architectures\r\n(eg Motorola), the situation is reversed.\r\nThis class helps you solve this incompatability.\r\n<p>\r\nOrigin of code: Excalibur\r\n\r\n@author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\r\n@version $Id$\r\n@see org.apache.commons.io.input.SwappedDataInputStream\r\n", "simpleName": "EndianUtils", "qualifiedName": "org.apache.commons.io.EndianUtils", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(int)", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n *\r\n * @see java.io.Writer#write(int)\r\n */\r\npublic void write(int idx) throws java.io.IOException {\r\n    this.out.write(idx);\r\n}", "docComment": "\r\n@see java.io.Writer#write(int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.AllIOTestSuite()", "kind": "constructor", "sourceText": "AllIOTestSuite() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.FileUtilsTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "TesterTrueFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.markSupported()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "markSupported()", "qualifiedName": "org.apache.commons.io.input.ProxyReader.markSupported()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#markSupported()\r\n */\r\npublic boolean markSupported() {\r\n    return this.in.markSupported();\r\n}", "docComment": "\r\n@see java.io.Reader#markSupported()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "labels": ["Variable"], "properties": {"sourceText": "private byte[] bytes;", "visibility": "private", "simpleName": "bytes", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "equals(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Checks whether two filenames are equal exactly.\r\n * <p>\r\n * No processing is performed on the filenames other than comparison,\r\n * thus this is merely a null-safe case-sensitive equals.\r\n *\r\n * @param filename1\r\n * \t\tthe first filename to query, may be null\r\n * @param filename2\r\n * \t\tthe second filename to query, may be null\r\n * @return true if the filenames are equal, null equals null\r\n */\r\npublic static boolean equals(java.lang.String filename1, java.lang.String filename2) {\r\n    return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, false);\r\n}", "docComment": "Checks whether two filenames are equal exactly.\r\n<p>\r\nNo processing is performed on the filenames other than comparison,\r\nthus this is merely a null-safe case-sensitive equals.\r\n\r\n@param filename1\r\n\t\tthe first filename to query, may be null\r\n@param filename2\r\n\t\tthe second filename to query, may be null\r\n@return true if the filenames are equal, null equals null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "contentEquals(java.io.Reader,java.io.Reader)", "qualifiedName": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)", "kind": "static method", "sourceText": "/**\r\n * Compare the contents of two Readers to determine if they are equal or\r\n * not.\r\n * <p>\r\n * This method buffers the input internally using\r\n * <code>BufferedReader</code> if they are not already buffered.\r\n *\r\n * @param input1\r\n * \t\tthe first reader\r\n * @param input2\r\n * \t\tthe second reader\r\n * @return true if the content of the readers are equal or they both don't\r\nexist, false otherwise\r\n * @throws NullPointerException\r\n * \t\tif either input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static boolean contentEquals(java.io.Reader input1, java.io.Reader input2) throws java.io.IOException {\r\n    if (!(input1 instanceof java.io.BufferedReader)) {\r\n        input1 = new java.io.BufferedReader(input1);\r\n    }\r\n    if (!(input2 instanceof java.io.BufferedReader)) {\r\n        input2 = new java.io.BufferedReader(input2);\r\n    }\r\n    int ch = input1.read();\r\n    while ((-1) != ch) {\r\n        int ch2 = input2.read();\r\n        if (ch != ch2) {\r\n            return false;\r\n        }\r\n        ch = input1.read();\r\n    } \r\n    int ch2 = input2.read();\r\n    return ch2 == (-1);\r\n}", "docComment": "Compare the contents of two Readers to determine if they are equal or\r\nnot.\r\n<p>\r\nThis method buffers the input internally using\r\n<code>BufferedReader</code> if they are not already buffered.\r\n\r\n@param input1\r\n\t\tthe first reader\r\n@param input2\r\n\t\tthe second reader\r\n@return true if the content of the readers are equal or they both don't\r\nexist, false otherwise\r\n@throws NullPointerException\r\n\t\tif either input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.IOUtilsCopyTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(char[],int,int)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(char[], int, int)\r\n */\r\npublic void write(char[] chr, int st, int end) throws java.io.IOException {\r\n    this.out.write(chr, st, end);\r\n}", "docComment": "\r\n@see java.io.Writer#write(char[], int, int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_Writer_nullSeparator()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "kind": "method", "sourceText": "public void testWriteLines_Writer_nullSeparator() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", \"world\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.writeLines(list, ((java.lang.String) (null)), writer);\r\n    out.off();\r\n    writer.flush();\r\n    java.lang.String expected = ((\"hello\" + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"world\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n    java.lang.String actual = baout.toString();\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileFilterTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_stringToOutputStream()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "kind": "method", "sourceText": "public void testCopy_stringToOutputStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.CopyUtils.copy(str, out);\r\n    // Note: this method *does* flush. It is equivalent to:\r\n    // OutputStreamWriter _out = new OutputStreamWriter(fout);\r\n    // IOUtils.copy( str, _out, 4096 ); // copy( Reader, Writer, int );\r\n    // _out.flush();\r\n    // out = fout;\r\n    // note: we don't flush here; this IOUtils method does it for us\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "labels": ["Variable"], "properties": {"sourceText": "// ----------------------------------------------------------- Data members\r\n/**\r\n * The threshold at which the event will be triggered.\r\n */\r\nprivate int threshold;", "visibility": "private", "simpleName": "threshold", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "FilenameUtilsWildcardTestCase", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFileResults;", "visibility": "private", "simpleName": "testFileResults", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceOS_String_Windows()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()", "kind": "method", "sourceText": "public void testGetFreeSpaceOS_String_Windows() throws java.lang.Exception {\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        1() {\r\n            super();\r\n        }\r\n\r\n        protected long freeSpaceWindows(java.lang.String path) throws java.io.IOException {\r\n            return 12345L;\r\n        }\r\n    };\r\n    this.assertEquals(12345L, fsu.freeSpaceOS(\"\", 1));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToOutputStream_nullOut()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()", "kind": "method", "sourceText": "public void testCopy_inputStreamToOutputStream_nullOut() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(in, ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFalseResults;", "visibility": "private", "simpleName": "testFalseResults", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapDouble(double).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.swapDouble(double).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File m_testFile2;", "visibility": "private", "simpleName": "m_testFile2", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "testName", "qualifiedName": "org.apache.commons.io.CopyUtilsTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFilenameResults()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()", "kind": "method", "sourceText": "protected java.util.List getFilenameResults() {\r\n    return this.testFilenameResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter with a file encoding.\r\n *\r\n * @param file\r\n * \t\tthe file to write to, not null\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.io.File file, java.lang.String encoding) throws java.io.IOException {\r\n    this(file, encoding, false, null);\r\n}", "docComment": "Constructs a LockableFileWriter with a file encoding.\r\n\r\n@param file\r\n\t\tthe file to write to, not null\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[]).0", "labels": ["Variable"], "properties": {"simpleName": "urls", "qualifiedName": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFullPathNoEndSeparator()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()", "kind": "method", "sourceText": "public void testGetFullPathNoEndSeparator() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(null));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"noseperator.inthispath\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"a/b/c.txt\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"a/b/c\"));\r\n    this.assertEquals(\"a/b/c\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"a/b/c/\"));\r\n    this.assertEquals(\"a\\\\b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\":\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"1:/a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"1:\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"1:a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"///a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"//a\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"\"));\r\n    this.assertEquals(\"C:\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"C:\"));\r\n    this.assertEquals(\"C:/\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"C:/\"));\r\n    this.assertEquals(\"//server/\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"//server/\"));\r\n    this.assertEquals(\"~\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"~\"));\r\n    this.assertEquals(\"~/\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"~/\"));\r\n    this.assertEquals(\"~user\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"~user\"));\r\n    this.assertEquals(\"~user/\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"~user/\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"a/b/c.txt\"));\r\n    this.assertEquals(\"/a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"/a/b/c.txt\"));\r\n    this.assertEquals(\"C:\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"C:a\"));\r\n    this.assertEquals(\"C:a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"C:a/b/c.txt\"));\r\n    this.assertEquals(\"C:/a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"C:/a/b/c.txt\"));\r\n    this.assertEquals(\"//server/a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"//server/a/b/c.txt\"));\r\n    this.assertEquals(\"~/a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"~/a/b/c.txt\"));\r\n    this.assertEquals(\"~user/a/b\", org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\"~user/a/b/c.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.OutputStream,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a TeeOutputStream.\r\n *\r\n * @param out\r\n * \t\tthe main OutputStream\r\n * @param branch\r\n * \t\tthe second OutputStream\r\n */\r\npublic TeeOutputStream(java.io.OutputStream out, java.io.OutputStream branch) {\r\n    super(out);\r\n    this.branch = branch;\r\n}", "docComment": "Constructs a TeeOutputStream.\r\n\r\n@param out\r\n\t\tthe main OutputStream\r\n@param branch\r\n\t\tthe second OutputStream\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "kind": "method", "sourceText": "public void resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter[] filters) {\r\n    for (int i = 0; i < filters.length; i++) {\r\n        if (filters[i] != null) {\r\n            filters[i].reset();\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter", "labels": ["Structure"], "properties": {"docComment": "Filters files based on the suffix (what the filename ends with).\r\nThis is used in retrieving all the files of a particular type.\r\n<p>\r\nFor example, to retrieve and print all <code>*.java</code> files \r\nin the current directory:\r\n\r\n<pre>\r\nFile dir = new File(\".\");\r\nString[] files = dir.list( new SuffixFileFilter(\".java\") );\r\nfor (int i = 0; i &lt; files.length; i++) {\r\n    System.out.println(files[i]);\r\n}\r\n</pre>\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@author Federico Barbieri\r\n@author Serge Knystautas\r\n@author Peter Donald\r\n", "simpleName": "SuffixFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.tearDown()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#tearDown()\r\n */\r\nprotected void tearDown() throws java.lang.Exception {\r\n    org.apache.commons.io.FileUtils.deleteDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n}", "docComment": "\r\n@see junit.framework.TestCase#tearDown()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapDouble(double)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "swapDouble(double)", "qualifiedName": "org.apache.commons.io.EndianUtils.swapDouble(double)", "kind": "static method", "sourceText": "/**\r\n * Converts a \"double\" value between endian systems.\r\n *\r\n * @param value\r\n * \t\tvalue to convert\r\n * @return the converted value\r\n */\r\npublic static double swapDouble(double value) {\r\n    return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.swapLong(java.lang.Double.doubleToLongBits(value)));\r\n}", "docComment": "Converts a \"double\" value between endian systems.\r\n\r\n@param value\r\n\t\tvalue to convert\r\n@return the converted value\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).1", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "deleteDirectoryOnExit(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Recursively schedule directory for deletion on JVM exit.\r\n *\r\n * @param directory\r\n * \t\tdirectory to delete.\r\n * @throws IOException\r\n * \t\tin case deletion is unsuccessful\r\n */\r\nprivate static void deleteDirectoryOnExit(java.io.File directory) throws java.io.IOException {\r\n    if (!directory.exists()) {\r\n        return;\r\n    }\r\n    org.apache.commons.io.FileUtils.cleanDirectoryOnExit(directory);\r\n    directory.deleteOnExit();\r\n}", "docComment": "Recursively schedule directory for deletion on JVM exit.\r\n\r\n@param directory\r\n\t\tdirectory to delete.\r\n@throws IOException\r\n\t\tin case deletion is unsuccessful\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "len", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "WriterThread", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "lines", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeLines(java.io.File,java.lang.String,java.util.Collection)", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "kind": "static method", "sourceText": "/**\r\n * <p>\r\n * Writes the <code>toString()</code> value of each item in a collection to\r\n * the specified <code>File</code> line by line.\r\n * The specified character encoding and the default line ending will be used.\r\n * </p>\r\n * <p>\r\n * There is no writeLines method without encoding parameter because\r\n * the default encoding can differ between platforms and therefore results\r\n * in inconsistent results.\r\n * </p>\r\n *\r\n * @param file\r\n * \t\tthe file to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @param lines\r\n * \t\tthe lines to write, null entries produce blank lines\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @throws UnsupportedEncodingException\r\n * \t\tif the encoding is not supported by the VM\r\n * @since Commons IO 1.1\r\n */\r\npublic static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection lines) throws java.io.IOException {\r\n    org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, null);\r\n}", "docComment": "<p>\r\nWrites the <code>toString()</code> value of each item in a collection to\r\nthe specified <code>File</code> line by line.\r\nThe specified character encoding and the default line ending will be used.\r\n</p>\r\n<p>\r\nThere is no writeLines method without encoding parameter because\r\nthe default encoding can differ between platforms and therefore results\r\nin inconsistent results.\r\n</p>\r\n\r\n@param file\r\n\t\tthe file to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@param lines\r\n\t\tthe lines to write, null entries produce blank lines\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@throws UnsupportedEncodingException\r\n\t\tif the encoding is not supported by the VM\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_Writer()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWriteLines_Writer() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", new java.lang.StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.writeLines(list, \"*\", writer);\r\n    out.off();\r\n    writer.flush();\r\n    java.lang.String expected = \"hello*world**this is**some text*\";\r\n    java.lang.String actual = baout.toString();\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.Reader).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.readLines(java.io.Reader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testTrue()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()", "kind": "method", "sourceText": "public void testTrue() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();\r\n    this.assertFiltering(filter, new java.io.File(\"foo.test\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"foo\"), true);\r\n    this.assertFiltering(filter, null, true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFilters;", "visibility": "private", "simpleName": "testFilters", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).0", "labels": ["Variable"], "properties": {"simpleName": "input1", "qualifiedName": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean).0", "labels": ["Variable"], "properties": {"simpleName": "invoked", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.close()", "kind": "method", "sourceText": "/**\r\n * Closes both streams.\r\n *\r\n * @see java.io.OutputStream#close()\r\n */\r\npublic void close() throws java.io.IOException {\r\n    super.close();\r\n    this.branch.close();\r\n}", "docComment": "Closes both streams.\r\n\r\n@see java.io.OutputStream#close()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).2", "labels": ["Variable"], "properties": {"simpleName": "dirFilter", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).1", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsExtension()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testIsExtension() {\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(null, ((java.lang.String) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", ((java.lang.String) (null))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file\", ((java.lang.String) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", \"txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", \"rtf\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", ((java.lang.String) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", \"txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", \"rtf\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", ((java.lang.String) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", \"txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", \"rtf\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", ((java.lang.String) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", \"txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", \"rtf\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", ((java.lang.String) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", \"txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", \"rtf\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", \"TXT\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new instance of\r\n * <code>IOFileFilterAbstractTestCase</code>.\r\n */\r\npublic IOFileFilterAbstractTestCase(final java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "Constructs a new instance of\r\n<code>IOFileFilterAbstractTestCase</code>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyDirectory(java.io.File,java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Copies a whole directory to a new location preserving the file dates.\r\n * <p>\r\n * This method copies the specified directory and all its child\r\n * directories and files to the specified destination.\r\n * The destination is the new location and name of the directory.\r\n * If it already exists, the contents will be overwritten.\r\n *\r\n * @param srcDir\r\n * \t\tan existing directory to copy, must not be null\r\n * @param destDir\r\n * \t\tthe new directory, must not be null\r\n * @throws NullPointerException\r\n * \t\tif source or destination is null\r\n * @throws IOException\r\n * \t\tif source or destination is invalid\r\n * @throws IOException\r\n * \t\tif an IO error occurs during copying\r\n * @since Commons IO 1.1\r\n */\r\npublic static void copyDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\r\n    org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, true);\r\n}", "docComment": "Copies a whole directory to a new location preserving the file dates.\r\n<p>\r\nThis method copies the specified directory and all its child\r\ndirectories and files to the specified destination.\r\nThe destination is the new location and name of the directory.\r\nIf it already exists, the contents will be overwritten.\r\n\r\n@param srcDir\r\n\t\tan existing directory to copy, must not be null\r\n@param destDir\r\n\t\tthe new directory, must not be null\r\n@throws NullPointerException\r\n\t\tif source or destination is null\r\n@throws IOException\r\n\t\tif source or destination is invalid\r\n@throws IOException\r\n\t\tif an IO error occurs during copying\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean removeFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\r\n    return this.fileFilters.remove(ioFileFilter);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadFileToByteArray()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()", "kind": "method", "sourceText": "public void testReadFileToByteArray() throws java.lang.Exception {\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"read.txt\");\r\n    java.io.FileOutputStream out = new java.io.FileOutputStream(file);\r\n    out.write(11);\r\n    out.write(21);\r\n    out.write(31);\r\n    out.close();\r\n    byte[] data = org.apache.commons.io.FileUtils.readFileToByteArray(file);\r\n    this.assertEquals(3, data.length);\r\n    this.assertEquals(11, data[0]);\r\n    this.assertEquals(21, data[1]);\r\n    this.assertEquals(31, data[2]);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFullPathNoEndSeparator(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Gets the full path from a full filename, which is the prefix + path,\r\n * and also excluding the final directory separator.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The method is entirely text based, and returns the text before the\r\n * last forward or backslash.\r\n * <pre>\r\n * C:\\a\\b\\c.txt --> C:\\a\\b\r\n * ~/a/b/c.txt  --> ~/a/b\r\n * a.txt        --> \"\"\r\n * a/b/c        --> a/b\r\n * a/b/c/       --> a/b/c\r\n * C:           --> C:\r\n * C:\\          --> C:\\\r\n * ~            --> ~\r\n * ~/           --> ~\r\n * ~user        --> ~user\r\n * ~user/       --> ~user\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the path of the file, an empty string if none exists, null if invalid\r\n */\r\npublic static java.lang.String getFullPathNoEndSeparator(java.lang.String filename) {\r\n    return org.apache.commons.io.FilenameUtils.doGetFullPath(filename, false);\r\n}", "docComment": "Gets the full path from a full filename, which is the prefix + path,\r\nand also excluding the final directory separator.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe method is entirely text based, and returns the text before the\r\nlast forward or backslash.\r\n<pre>\r\nC:\\a\\b\\c.txt --> C:\\a\\b\r\n~/a/b/c.txt  --> ~/a/b\r\na.txt        --> \"\"\r\na/b/c        --> a/b\r\na/b/c/       --> a/b/c\r\nC:           --> C:\r\nC:\\          --> C:\\\r\n~            --> ~\r\n~/           --> ~\r\n~user        --> ~user\r\n~user/       --> ~user\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the path of the file, an empty string if none exists, null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNameFilter()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()", "kind": "method", "sourceText": "public void testNameFilter() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = new org.apache.commons.io.filefilter.NameFileFilter(new java.lang.String[]{ \"foo\", \"bar\" });\r\n    this.assertFiltering(filter, new java.io.File(\"foo\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"bar\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"fred\"), false);\r\n    // repeat for a List\r\n    java.util.ArrayList list = new java.util.ArrayList();\r\n    list.add(\"foo\");\r\n    list.add(\"bar\");\r\n    filter = new org.apache.commons.io.filefilter.NameFileFilter(list);\r\n    this.assertFiltering(filter, new java.io.File(\"foo\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"bar\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"fred\"), false);\r\n    filter = new org.apache.commons.io.filefilter.NameFileFilter(\"foo\");\r\n    this.assertFiltering(filter, new java.io.File(\"foo\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"FOO\"), false);// case-sensitive\r\n\r\n    this.assertFiltering(filter, new java.io.File(\"barfoo\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"foobar\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"fred\"), false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyDirectoryToNonExistingDest()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "kind": "method", "sourceText": "public void testCopyDirectoryToNonExistingDest() throws java.lang.Exception {\r\n    this.createFile(this.testFile1, 1234);\r\n    this.createFile(this.testFile2, 4321);\r\n    java.io.File srcDir = org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory();\r\n    java.io.File subDir = new java.io.File(srcDir, \"sub\");\r\n    subDir.mkdir();\r\n    java.io.File subFile = new java.io.File(subDir, \"A.txt\");\r\n    org.apache.commons.io.FileUtils.writeStringToFile(subFile, \"HELLO WORLD\", \"UTF8\");\r\n    java.io.File destDir = new java.io.File(java.lang.System.getProperty(\"java.io.tmpdir\"), \"tmp-FileUtilsTestCase\");\r\n    org.apache.commons.io.FileUtils.deleteDirectory(destDir);\r\n    org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);\r\n    this.assertTrue(\"Check exists\", destDir.exists());\r\n    this.assertEquals(\"Check size\", org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir), org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));\r\n    this.assertEquals(true, new java.io.File(destDir, \"sub/A.txt\").exists());\r\n    org.apache.commons.io.FileUtils.deleteDirectory(destDir);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFilters;", "visibility": "private", "simpleName": "testFilters", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new file filter that ANDs the result of two other filters.\r\n *\r\n * @param filter1\r\n * \t\tthe first filter, must not be null\r\n * @param filter2\r\n * \t\tthe second filter, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif either filter is null\r\n */\r\npublic AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\r\n    super();\r\n    if ((filter1 == null) || (filter2 == null)) {\r\n        throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\r\n    }\r\n    this.fileFilters = new java.util.ArrayList();\r\n    this.addFileFilter(filter1);\r\n    this.addFileFilter(filter2);\r\n}", "docComment": "Constructs a new file filter that ANDs the result of two other filters.\r\n\r\n@param filter1\r\n\t\tthe first filter, must not be null\r\n@param filter2\r\n\t\tthe second filter, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif either filter is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPathNoEndSeparator(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Gets the path from a full filename, which excludes the prefix, and\r\n * also excluding the final directory separator.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The method is entirely text based, and returns the text before the\r\n * last forward or backslash.\r\n * <pre>\r\n * C:\\a\\b\\c.txt --> a\\b\r\n * ~/a/b/c.txt  --> a/b\r\n * a.txt        --> \"\"\r\n * a/b/c        --> a/b\r\n * a/b/c/       --> a/b/c\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n * <p>\r\n * This method drops the prefix from the result.\r\n * See {@link #getFullPathNoEndSeparator(String)} for the method that retains the prefix.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the path of the file, an empty string if none exists, null if invalid\r\n */\r\npublic static java.lang.String getPathNoEndSeparator(java.lang.String filename) {\r\n    return org.apache.commons.io.FilenameUtils.doGetPath(filename, 0);\r\n}", "docComment": "Gets the path from a full filename, which excludes the prefix, and\r\nalso excluding the final directory separator.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe method is entirely text based, and returns the text before the\r\nlast forward or backslash.\r\n<pre>\r\nC:\\a\\b\\c.txt --> a\\b\r\n~/a/b/c.txt  --> a/b\r\na.txt        --> \"\"\r\na/b/c        --> a/b\r\na/b/c/       --> a/b/c\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n<p>\r\nThis method drops the prefix from the result.\r\nSee {@link #getFullPathNoEndSeparator(String)} for the method that retains the prefix.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the path of the file, an empty string if none exists, null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "labels": ["Variable"], "properties": {"sourceText": "private java.io.InputStream m_input;", "visibility": "private", "simpleName": "m_input", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testStringToOutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "kind": "method", "sourceText": "public void testStringToOutputStream() throws java.lang.Exception {\r\n    java.io.File destination = this.newFile(\"copy5.txt\");\r\n    java.io.FileReader fin = new java.io.FileReader(this.m_testFile);\r\n    java.lang.String str;\r\n    try {\r\n        // Create our String. Rely on testReaderToString() to make sure this is valid.\r\n        str = org.apache.commons.io.IOUtils.toString(fin);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n    java.io.FileOutputStream fout = new java.io.FileOutputStream(destination);\r\n    try {\r\n        org.apache.commons.io.CopyUtils.copy(str, fout);\r\n        // Note: this method *does* flush. It is equivalent to:\r\n        // OutputStreamWriter _out = new OutputStreamWriter(fout);\r\n        // CopyUtils.copy( str, _out, 4096 ); // copy( Reader, Writer, int );\r\n        // _out.flush();\r\n        // out = fout;\r\n        // note: we don't flush here; this IOUtils method does it for us\r\n        this.checkFile(destination, this.m_testFile);\r\n        this.checkWrite(fout);\r\n    } finally {\r\n        fout.close();\r\n    }\r\n    this.deleteFile(destination);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "defaultPath", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapFloat(float)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "swapFloat(float)", "qualifiedName": "org.apache.commons.io.EndianUtils.swapFloat(float)", "kind": "static method", "sourceText": "/**\r\n * Converts a \"float\" value between endian systems.\r\n *\r\n * @param value\r\n * \t\tvalue to convert\r\n * @return the converted value\r\n */\r\npublic static float swapFloat(float value) {\r\n    return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.swapInteger(java.lang.Float.floatToIntBits(value)));\r\n}", "docComment": "Converts a \"float\" value between endian systems.\r\n\r\n@param value\r\n\t\tvalue to convert\r\n@return the converted value\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "labels": ["Variable"], "properties": {"sourceText": "private java.io.OutputStream m_output;", "visibility": "private", "simpleName": "m_output", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter", "labels": ["Structure"], "properties": {"docComment": "A file filter that always returns true.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n", "simpleName": "TrueFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getTestFilters()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "kind": "method", "sourceText": "protected abstract java.util.List getTestFilters();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase", "labels": ["Structure"], "properties": {"docComment": "This is used to test FileUtils for correctness.\r\n\r\n@author Peter Donald\r\n@author Matthew Hawthorne\r\n@author Stephen Colebourne\r\n@version $Id$\r\n@see FileUtils\r\n", "simpleName": "FileUtilsTestCase", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "srcFile", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.setUp()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#setUp()\r\n */\r\nprotected void setUp() throws java.lang.Exception {\r\n    org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n    this.createFile(this.testFile1, org.apache.commons.io.FileUtilsTestCase.testFile1Size);\r\n    this.createFile(this.testFile2, org.apache.commons.io.FileUtilsTestCase.testFile2Size);\r\n    org.apache.commons.io.FileUtils.deleteDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n    org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n    this.createFile(this.testFile1, org.apache.commons.io.FileUtilsTestCase.testFile1Size);\r\n    this.createFile(this.testFile2, org.apache.commons.io.FileUtilsTestCase.testFile2Size);\r\n}", "docComment": "\r\n@see junit.framework.TestCase#setUp()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new file filter that NOTs the result of another filters.\r\n *\r\n * @param filter\r\n * \t\tthe filter, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the filter is null\r\n */\r\npublic NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter) {\r\n    super();\r\n    if (filter == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The filter must not be null\");\r\n    }\r\n    this.filter = filter;\r\n}", "docComment": "Constructs a new file filter that NOTs the result of another filters.\r\n\r\n@param filter\r\n\t\tthe filter, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the filter is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toByteArray()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.ByteArrayOutputStream#toByteArray()\r\n */\r\npublic synchronized byte[] toByteArray() {\r\n    int remaining = this.count;\r\n    int pos = 0;\r\n    byte newbuf[] = new byte[this.count];\r\n    for (int i = 0; i < this.buffers.size(); i++) {\r\n        byte[] buf = this.getBuffer(i);\r\n        int c = java.lang.Math.min(buf.length, remaining);\r\n        java.lang.System.arraycopy(buf, 0, newbuf, pos, c);\r\n        pos += c;\r\n        remaining -= c;\r\n        if (remaining == 0) {\r\n            break;\r\n        }\r\n    }\r\n    return newbuf;\r\n}", "docComment": "\r\n@see java.io.ByteArrayOutputStream#toByteArray()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "out", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getStream()", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "kind": "method", "sourceText": "// ------------------------------------------------------- Abstract methods\r\n/**\r\n * Returns the underlying output stream, to which the corresponding\r\n * <code>OutputStream</code> methods in this class will ultimately delegate.\r\n *\r\n * @return The underlying output stream.\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\nprotected abstract java.io.OutputStream getStream() throws java.io.IOException;", "docComment": "Returns the underlying output stream, to which the corresponding\r\n<code>OutputStream</code> methods in this class will ultimately delegate.\r\n\r\n@return The underlying output stream.\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks the filter.\r\n *\r\n * @param dir\r\n * \t\tthe directory\r\n * @param name\r\n * \t\tthe filename in the directory\r\n * @return true if the filter matches\r\n */\r\npublic boolean accept(java.io.File dir, java.lang.String name) {\r\n    if (this.filenameFilter != null) {\r\n        return this.filenameFilter.accept(dir, name);\r\n    } else {\r\n        return super.accept(dir, name);\r\n    }\r\n}", "docComment": "Checks the filter.\r\n\r\n@param dir\r\n\t\tthe directory\r\n@param name\r\n\t\tthe filename in the directory\r\n@return true if the filter matches\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "assertEqualContent(byte[],byte[])", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Assert that the contents of two byte arrays are the same.\r\n */\r\nprivate void assertEqualContent(byte[] b0, byte[] b1) throws java.io.IOException {\r\n    this.assertTrue(\"Content not equal according to java.util.Arrays#equals()\", java.util.Arrays.equals(b0, b1));\r\n}", "docComment": "Assert that the contents of two byte arrays are the same.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter", "labels": ["Structure"], "properties": {"docComment": "Filters filenames for a certain name.\r\n<p>\r\nFor example, to print all files and directories in the \r\ncurrent directory whose name is <code>Test</code>:\r\n\r\n<pre>\r\nFile dir = new File(\".\");\r\nString[] files = dir.list( new NameFileFilter(\"Test\") );\r\nfor ( int i = 0; i &lt; files.length; i++ ) {\r\n    System.out.println(files[i]);\r\n}\r\n</pre>\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@author Federico Barbieri\r\n@author Serge Knystautas\r\n@author Peter Donald\r\n", "simpleName": "NameFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(byte[],java.io.Writer)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// byte[] -> Writer\r\n// ----------------------------------------------------------------\r\n/**\r\n * Copy and convert bytes from a <code>byte[]</code> to chars on a\r\n * <code>Writer</code>.\r\n * The platform's default encoding is used for the byte-to-char conversion.\r\n *\r\n * @param input\r\n * \t\tthe byte array to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(byte[] input, java.io.Writer output) throws java.io.IOException {\r\n    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(input);\r\n    org.apache.commons.io.CopyUtils.copy(in, output);\r\n}", "docComment": "Copy and convert bytes from a <code>byte[]</code> to chars on a\r\n<code>Writer</code>.\r\nThe platform's default encoding is used for the byte-to-char conversion.\r\n\r\n@param input\r\n\t\tthe byte array to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.input.PackageTestSuite.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    junit.framework.TestSuite suite = new junit.framework.TestSuite(\"IO Utilities - input\");\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.input.CountingInputStreamTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.input.SwappedDataInputStreamTest.class));\r\n    return suite;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.XtestIsFileNewer()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "XtestIsFileNewer()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.XtestIsFileNewer()", "kind": "method", "sourceText": "// isFileNewer\r\n// TODO Finish test\r\npublic void XtestIsFileNewer() {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "filename2", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsFileNewerNoDate()", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()", "kind": "method", "sourceText": "/**\r\n * Tests the <code>isFileNewer(File, Date)</code> method without specifying a <code>Date</code>.\r\n * <br/>\r\n * The test is successfull if the method throws an <code>IllegalArgumentException</code>.\r\n */\r\npublic void testIsFileNewerNoDate() {\r\n    try {\r\n        org.apache.commons.io.FileUtils.isFileNewer(this.m_testFile1, ((java.util.Date) (null)));\r\n        this.fail(\"Date not specified\");\r\n    } catch (java.lang.IllegalArgumentException e) {\r\n    }\r\n}", "docComment": "Tests the <code>isFileNewer(File, Date)</code> method without specifying a <code>Date</code>.\r\n<br/>\r\nThe test is successfull if the method throws an <code>IllegalArgumentException</code>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).3", "labels": ["Variable"], "properties": {"simpleName": "lockDir", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "labels": ["Variable"], "properties": {"sourceText": "private static int testFile1Size;", "visibility": "private", "simpleName": "testFile1Size", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).0", "labels": ["Variable"], "properties": {"simpleName": "baout", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.read(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter_Encoding()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testCopy_inputStreamToWriter_Encoding() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.copy(in, writer, \"UTF8\");\r\n    out.off();\r\n    writer.flush();\r\n    this.assertTrue(\"Not all bytes were read\", in.available() == 0);\r\n    byte[] bytes = baout.toByteArray();\r\n    bytes = new java.lang.String(bytes, \"UTF8\").getBytes(\"US-ASCII\");\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, bytes));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader(java.io.Reader).0", "labels": ["Variable"], "properties": {"simpleName": "proxy", "qualifiedName": "org.apache.commons.io.input.ProxyReader(java.io.Reader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildFilterUsingConstructor(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "kind": "method", "sourceText": "protected org.apache.commons.io.filefilter.IOFileFilter buildFilterUsingConstructor(final java.util.List filters) {\r\n    return new org.apache.commons.io.filefilter.AndFileFilter(filters);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildFilterUsingAdd(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "kind": "method", "sourceText": "protected org.apache.commons.io.filefilter.IOFileFilter buildFilterUsingAdd(final java.util.List filters) {\r\n    org.apache.commons.io.filefilter.AndFileFilter filter = new org.apache.commons.io.filefilter.AndFileFilter();\r\n    for (int i = 0; i < filters.size(); i++) {\r\n        filter.addFileFilter(((org.apache.commons.io.filefilter.IOFileFilter) (filters.get(i))));\r\n    }\r\n    return filter;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.input.PackageTestSuite()", "kind": "constructor", "sourceText": "PackageTestSuite() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNameFilterNullArrayArgument()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()", "kind": "method", "sourceText": "public void testNameFilterNullArrayArgument() throws java.lang.Exception {\r\n    java.lang.String[] test = null;\r\n    try {\r\n        new org.apache.commons.io.filefilter.NameFileFilter(test);\r\n        this.fail(\"constructing a NameFileFilter with a null String[] argument should fail.\");\r\n    } catch (java.lang.IllegalArgumentException iae) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read()", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.read()", "kind": "method", "sourceText": "/**\r\n * Increases the count by 1 if a byte is successfully read.\r\n *\r\n * @see java.io.InputStream#read()\r\n */\r\npublic int read() throws java.io.IOException {\r\n    int found = super.read();\r\n    this.count += (found >= 0) ? 1 : 0;\r\n    return found;\r\n}", "docComment": "Increases the count by 1 if a byte is successfully read.\r\n\r\n@see java.io.InputStream#read()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "bindStream(java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "kind": "method", "sourceText": "/**\r\n * Bind the specified stream to the current thread.\r\n *\r\n * @param output\r\n * \t\tthe stream to bind\r\n * @return the OutputStream that was previously active\r\n */\r\npublic java.io.OutputStream bindStream(java.io.OutputStream output) {\r\n    java.io.OutputStream stream = this.getStream();\r\n    this.m_streams.set(output);\r\n    return stream;\r\n}", "docComment": "Bind the specified stream to the current thread.\r\n\r\n@param output\r\n\t\tthe stream to bind\r\n@return the OutputStream that was previously active\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "falseFileFilter()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "kind": "static method", "sourceText": "/**\r\n * Returns a filter that always returns false.\r\n *\r\n * @return a false filter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter falseFileFilter() {\r\n    return org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE;\r\n}", "docComment": "Returns a filter that always returns false.\r\n\r\n@return a false filter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "replaceAll(java.lang.String,java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "kind": "method", "sourceText": "private java.lang.String replaceAll(java.lang.String text, java.lang.String lookFor, java.lang.String replaceWith) {\r\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(text);\r\n    while (true) {\r\n        int idx = sb.toString().indexOf(lookFor);\r\n        if (idx < 0) {\r\n            break;\r\n        }\r\n        sb.replace(idx, idx + lookFor.length(), replaceWith);\r\n    } \r\n    return sb.toString();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.InputStream,java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "kind": "static method", "sourceText": "/**\r\n * Copy bytes from an <code>InputStream</code> to chars on a\r\n * <code>Writer</code> using the default character encoding of the platform.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n * <p>\r\n * This method uses {@link InputStreamReader}.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif the input or output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\r\n    java.io.InputStreamReader in = new java.io.InputStreamReader(input);\r\n    org.apache.commons.io.IOUtils.copy(in, output);\r\n}", "docComment": "Copy bytes from an <code>InputStream</code> to chars on a\r\n<code>Writer</code> using the default character encoding of the platform.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n<p>\r\nThis method uses {@link InputStreamReader}.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws NullPointerException\r\n\t\tif the input or output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadLong()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()", "kind": "method", "sourceText": "public void testReadLong() throws java.io.IOException {\r\n    this.assertEquals(0x807060504030201L, this.sdis.readLong());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).1", "labels": ["Variable"], "properties": {"simpleName": "extensions", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testConstructor_File_nullFile()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()", "kind": "method", "sourceText": "public void testConstructor_File_nullFile() throws java.io.IOException {\r\n    try {\r\n        new org.apache.commons.io.output.LockableFileWriter(((java.io.File) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n    this.assertEquals(false, this.lockFile.exists());\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getTestDirectory()", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "kind": "static method", "sourceText": "public static java.io.File getTestDirectory() {\r\n    if (org.apache.commons.io.testtools.FileBasedTestCase.testDir == null) {\r\n        org.apache.commons.io.testtools.FileBasedTestCase.testDir = new java.io.File(\"test/io/\").getAbsoluteFile();\r\n    }\r\n    return org.apache.commons.io.testtools.FileBasedTestCase.testDir;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testListFiles()", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "kind": "method", "sourceText": "public void testListFiles() throws java.lang.Exception {\r\n    java.util.Collection files;\r\n    java.util.Collection filenames;\r\n    org.apache.commons.io.filefilter.IOFileFilter fileFilter;\r\n    org.apache.commons.io.filefilter.IOFileFilter dirFilter;\r\n    // First, find non-recursively\r\n    fileFilter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();\r\n    files = org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), fileFilter, null);\r\n    filenames = this.filesToFilenames(files);\r\n    this.assertTrue(\"'dummy-build.xml' is missing\", filenames.contains(\"dummy-build.xml\"));\r\n    this.assertFalse(\"'dummy-index.html' shouldn't be found\", filenames.contains(\"dummy-index.html\"));\r\n    this.assertFalse(\"'Entries' shouldn't be found\", filenames.contains(\"Entries\"));\r\n    // Second, find recursively\r\n    fileFilter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();\r\n    dirFilter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(\"CVS\"));\r\n    files = org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), fileFilter, dirFilter);\r\n    filenames = this.filesToFilenames(files);\r\n    this.assertTrue(\"'dummy-build.xml' is missing\", filenames.contains(\"dummy-build.xml\"));\r\n    this.assertTrue(\"'dummy-index.html' is missing\", filenames.contains(\"dummy-index.html\"));\r\n    this.assertFalse(\"'Entries' shouldn't be found\", filenames.contains(\"Entries\"));\r\n    // Do the same as above but now with the filter coming from FileFilterUtils\r\n    fileFilter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();\r\n    dirFilter = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);\r\n    files = org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), fileFilter, dirFilter);\r\n    filenames = this.filesToFilenames(files);\r\n    this.assertTrue(\"'dummy-build.xml' is missing\", filenames.contains(\"dummy-build.xml\"));\r\n    this.assertTrue(\"'dummy-index.html' is missing\", filenames.contains(\"dummy-index.html\"));\r\n    this.assertFalse(\"'Entries' shouldn't be found\", filenames.contains(\"Entries\"));\r\n    // Again with the CVS filter but now with a non-null parameter\r\n    fileFilter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();\r\n    dirFilter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(\"sub\");\r\n    dirFilter = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(dirFilter);\r\n    files = org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), fileFilter, dirFilter);\r\n    filenames = this.filesToFilenames(files);\r\n    this.assertTrue(\"'dummy-build.xml' is missing\", filenames.contains(\"dummy-build.xml\"));\r\n    this.assertTrue(\"'dummy-index.html' is missing\", filenames.contains(\"dummy-index.html\"));\r\n    this.assertFalse(\"'Entries' shouldn't be found\", filenames.contains(\"Entries\"));\r\n    try {\r\n        org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), null, null);\r\n        this.fail(\"Expected error about null parameter\");\r\n    } catch (java.lang.Exception e) {\r\n        // fine\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "st", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "st", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[]).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#tearDown()\r\n */\r\nprotected void tearDown() throws java.lang.Exception {\r\n    this.m_testFile1.delete();\r\n    this.m_testFile2.delete();\r\n}", "docComment": "\r\n@see junit.framework.TestCase#tearDown()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toString(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "labels": ["Variable"], "properties": {"simpleName": "filter2", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T4", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String T4 = \"Thread4\";", "visibility": "private", "simpleName": "T4", "qualifiedName": "org.apache.commons.io.DemuxTestCase.T4", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "labels": ["Variable"], "properties": {"sourceText": "private java.lang.StringBuffer m_buffer = new java.lang.StringBuffer();", "visibility": "private", "simpleName": "m_buffer", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter_nullOut()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()", "kind": "method", "sourceText": "public void testCopy_inputStreamToWriter_nullOut() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(in, ((java.io.Writer) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIndexOfExtension()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()", "kind": "method", "sourceText": "public void testIndexOfExtension() {\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfExtension(null));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfExtension(\"file\"));\r\n    this.assertEquals(4, org.apache.commons.io.FilenameUtils.indexOfExtension(\"file.txt\"));\r\n    this.assertEquals(13, org.apache.commons.io.FilenameUtils.indexOfExtension(\"a.txt/b.txt/c.txt\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfExtension(\"a/b/c\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfExtension(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfExtension(\"a/b.notextension/c\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfExtension(\"a\\\\b.notextension\\\\c\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "off", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read(byte[],int,int)", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n * Increases the count by super.read(b, off, len)'s return count\r\n *\r\n * @see java.io.InputStream#read(byte[], int, int)\r\n */\r\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\r\n    int found = super.read(b, off, len);\r\n    this.count += (found >= 0) ? found : 0;\r\n    return found;\r\n}", "docComment": "Increases the count by super.read(b, off, len)'s return count\r\n\r\n@see java.io.InputStream#read(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testDelegateFileFilter()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()", "kind": "method", "sourceText": "public void testDelegateFileFilter() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.OrFileFilter orFilter = new org.apache.commons.io.filefilter.OrFileFilter();\r\n    java.io.File testFile = new java.io.File(\"test.txt\");\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = new org.apache.commons.io.filefilter.DelegateFileFilter(((java.io.FileFilter) (orFilter)));\r\n    this.assertFiltering(filter, testFile, false);\r\n    filter = new org.apache.commons.io.filefilter.DelegateFileFilter(((java.io.FilenameFilter) (orFilter)));\r\n    this.assertFiltering(filter, testFile, false);\r\n    try {\r\n        new org.apache.commons.io.filefilter.DelegateFileFilter(((java.io.FileFilter) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException iae) {\r\n    }\r\n    try {\r\n        new org.apache.commons.io.filefilter.DelegateFileFilter(((java.io.FilenameFilter) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException iae) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase", "labels": ["Structure"], "properties": {"docComment": "This is used to test FilenameUtils for correctness.\r\n\r\n@author Peter Donald\r\n@author Matthew Hawthorne\r\n@author Martin Cooper\r\n@version $Id$\r\n@see FilenameUtils\r\n", "simpleName": "FilenameUtilsTestCase", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename1", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedShort(byte[],int)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"short\" value from a byte array at a given offset. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param data\r\n * \t\tsource byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @return the value read\r\n */\r\npublic static short readSwappedShort(byte[] data, int offset) {\r\n    return ((short) (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8)));\r\n}", "docComment": "Reads a \"short\" value from a byte array at a given offset. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param data\r\n\t\tsource byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@return the value read\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testAboveThreshold()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "kind": "method", "sourceText": "/**\r\n * Tests the case where the amount of data exceeds the threshold, and is\r\n * therefore written to disk. The actual data written to disk is verified,\r\n * as is the file itself.\r\n */\r\npublic void testAboveThreshold() {\r\n    java.io.File testFile = new java.io.File(\"testAboveThreshold.dat\");\r\n    // Ensure that the test starts from a clean base.\r\n    testFile.delete();\r\n    org.apache.commons.io.output.DeferredFileOutputStream dfos = new org.apache.commons.io.output.DeferredFileOutputStream(this.testBytes.length - 5, testFile);\r\n    try {\r\n        dfos.write(this.testBytes, 0, this.testBytes.length);\r\n        dfos.close();\r\n    } catch (java.io.IOException e) {\r\n        this.fail(\"Unexpected IOException\");\r\n    }\r\n    this.assertFalse(dfos.isInMemory());\r\n    this.assertNull(dfos.getData());\r\n    this.verifyResultFile(testFile);\r\n    // Ensure that the test starts from a clean base.\r\n    testFile.delete();\r\n}", "docComment": "Tests the case where the amount of data exceeds the threshold, and is\r\ntherefore written to disk. The actual data written to disk is verified,\r\nas is the file itself.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_4arg_Writer_nullData()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()", "kind": "method", "sourceText": "public void testWriteLines_4arg_Writer_nullData() throws java.lang.Exception {\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    org.apache.commons.io.FileUtils.writeLines(file, \"US-ASCII\", ((java.util.List) (null)), \"*\");\r\n    this.assertEquals(\"Sizes differ\", 0, file.length());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getWorkingPathNamePropertyKey()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()", "kind": "method", "sourceText": "protected abstract java.lang.String getWorkingPathNamePropertyKey();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.Reader,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "kind": "static method", "sourceText": "/**\r\n * Copy chars from a <code>Reader</code> to bytes on an\r\n * <code>OutputStream</code> using the default character encoding of the\r\n * platform, and calling flush.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n * <p>\r\n * Due to the implementation of OutputStreamWriter, this method performs a\r\n * flush.\r\n * <p>\r\n * This method uses {@link OutputStreamWriter}.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif the input or output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void copy(java.io.Reader input, java.io.OutputStream output) throws java.io.IOException {\r\n    java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(output);\r\n    org.apache.commons.io.IOUtils.copy(input, out);\r\n    // XXX Unless anyone is planning on rewriting OutputStreamWriter, we\r\n    // have to flush here.\r\n    out.flush();\r\n}", "docComment": "Copy chars from a <code>Reader</code> to bytes on an\r\n<code>OutputStream</code> using the default character encoding of the\r\nplatform, and calling flush.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n<p>\r\nDue to the implementation of OutputStreamWriter, this method performs a\r\nflush.\r\n<p>\r\nThis method uses {@link OutputStreamWriter}.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws NullPointerException\r\n\t\tif the input or output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "st", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.FileUtilsCleanDirectoryTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.write(int)", "kind": "method", "sourceText": "/**\r\n * Writes byte to stream associated with current thread.\r\n *\r\n * @param ch\r\n * \t\tthe byte to write to stream\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\npublic void write(int ch) throws java.io.IOException {\r\n    java.io.OutputStream output = this.getStream();\r\n    if (null != output) {\r\n        output.write(ch);\r\n    }\r\n}", "docComment": "Writes byte to stream associated with current thread.\r\n\r\n@param ch\r\n\t\tthe byte to write to stream\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testEOF2()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()", "kind": "method", "sourceText": "public void testEOF2() throws java.lang.Exception {\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(new byte[2]);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    byte[] result = new byte[10];\r\n    int found = cis.read(result);\r\n    this.assertEquals(2, found);\r\n    this.assertEquals(2, cis.getCount());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testThrowsOnNullList()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()", "kind": "method", "sourceText": "public void testThrowsOnNullList() throws java.lang.Exception {\r\n    if (!this.chmod(this.top, 0, false)) {\r\n        // test wont work if we can't restrict permissions on the\r\n        // directory, so skip it.\r\n        return;\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.cleanDirectory(this.top);\r\n        this.fail(\"expected IOException\");\r\n    } catch (java.io.IOException e) {\r\n        this.assertEquals(\"Failed to list contents of \" + this.top.getAbsolutePath(), e.getMessage());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "source", "qualifiedName": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.input.PackageTestSuite.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeTo(java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "kind": "method", "sourceText": "/**\r\n * Writes the data from this output stream to the specified output stream,\r\n * after it has been closed.\r\n *\r\n * @param out\r\n * \t\toutput stream to write to.\r\n * @exception IOException\r\n * \t\tif this stream is not yet closed or an error occurs.\r\n */\r\npublic void writeTo(java.io.OutputStream out) throws java.io.IOException {\r\n    // we may only need to check if this is closed if we are working with a file\r\n    // but we should force the habit of closing wether we are working with\r\n    // a file or memory.\r\n    if (!this.closed) {\r\n        throw new java.io.IOException(\"Stream not closed\");\r\n    }\r\n    if (this.isInMemory()) {\r\n        this.memoryOutputStream.writeTo(out);\r\n    } else {\r\n        java.io.FileInputStream fis = new java.io.FileInputStream(this.outputFile);\r\n        try {\r\n            org.apache.commons.io.IOUtils.copy(fis, out);\r\n        } finally {\r\n            org.apache.commons.io.IOUtils.closeQuietly(fis);\r\n        }\r\n    }\r\n}", "docComment": "Writes the data from this output stream to the specified output stream,\r\nafter it has been closed.\r\n\r\n@param out\r\n\t\toutput stream to write to.\r\n@exception IOException\r\n\t\tif this stream is not yet closed or an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapInteger()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSwapInteger()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testSwapInteger()", "kind": "method", "sourceText": "public void testSwapInteger() {\r\n    this.assertEquals(0, org.apache.commons.io.EndianUtils.swapInteger(0));\r\n    this.assertEquals(0x4030201, org.apache.commons.io.EndianUtils.swapInteger(0x1020304));\r\n    this.assertEquals(0x1000000, org.apache.commons.io.EndianUtils.swapInteger(0x1));\r\n    this.assertEquals(0x1, org.apache.commons.io.EndianUtils.swapInteger(0x1000000));\r\n    this.assertEquals(0x11111111, org.apache.commons.io.EndianUtils.swapInteger(0x11111111));\r\n    this.assertEquals(0xabcdef10, org.apache.commons.io.EndianUtils.swapInteger(0x10efcdab));\r\n    this.assertEquals(0xab, org.apache.commons.io.EndianUtils.swapInteger(0xab000000));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.ONE_GB", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The number of bytes in a gigabyte.\r\n */\r\npublic static final long ONE_GB = org.apache.commons.io.FileUtils.ONE_KB * org.apache.commons.io.FileUtils.ONE_MB;", "visibility": "public", "simpleName": "ONE_GB", "qualifiedName": "org.apache.commons.io.FileUtils.ONE_GB", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.m_streams", "labels": ["Variable"], "properties": {"sourceText": "private java.lang.InheritableThreadLocal m_streams = new java.lang.InheritableThreadLocal();", "visibility": "private", "simpleName": "m_streams", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream.m_streams", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPath()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetPath()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetPath()", "kind": "method", "sourceText": "public void testGetPath() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(null));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"noseperator.inthispath\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"a/b/c.txt\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"a/b/c\"));\r\n    this.assertEquals(\"a/b/c/\", org.apache.commons.io.FilenameUtils.getPath(\"a/b/c/\"));\r\n    this.assertEquals(\"a\\\\b\\\\\", org.apache.commons.io.FilenameUtils.getPath(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(\":\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(\"1:/a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(\"1:\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(\"1:a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(\"///a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(\"//a\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"C:\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"C:/\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"//server/\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"~\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"~/\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"~user\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"~user/\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"a/b/c.txt\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"/a/b/c.txt\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"C:a\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"C:a/b/c.txt\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"C:/a/b/c.txt\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"//server/a/b/c.txt\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"~/a/b/c.txt\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getPath(\"~user/a/b/c.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.FILE_SIZE", "labels": ["Variable"], "properties": {"sourceText": "/* NOTE this is not particularly beautiful code. A better way to check for\nflush and close status would be to implement \"trojan horse\" wrapper\nimplementations of the various stream classes, which set a flag when\nrelevant methods are called. (JT)\n */\r\nprivate static final int FILE_SIZE = (1024 * 4) + 1;", "visibility": "private", "simpleName": "FILE_SIZE", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.FILE_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter", "labels": ["Structure"], "properties": {"docComment": "A {@link java.io.FileFilter} providing conditional OR logic across a list of\r\nfile filters. This filter returns <code>true</code> if any filters in the\r\nlist return <code>true</code>. Otherwise, it returns <code>false</code>.\r\nChecking of the file filter list stops when the first filter returns\r\n<code>true</code>.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Steven Caswell\r\n", "simpleName": "OrFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "msg", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(int)\r\n */\r\npublic void write(int idx) throws java.io.IOException {\r\n    this.out.write(idx);\r\n}", "docComment": "\r\n@see java.io.Writer#write(int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter_Encoding_nullIn()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()", "kind": "method", "sourceText": "public void testCopy_inputStreamToWriter_Encoding_nullIn() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(((java.io.InputStream) (null)), writer, \"UTF8\");\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "splitOnTokens(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Splits a string into a number of tokens.\r\n *\r\n * @param text\r\n * \t\tthe text to split\r\n * @return the tokens, never null\r\n */\r\nstatic java.lang.String[] splitOnTokens(java.lang.String text) {\r\n    // used by wildcardMatch\r\n    // package level so a unit test may run on this\r\n    if ((text.indexOf(\"?\") == (-1)) && (text.indexOf(\"*\") == (-1))) {\r\n        return new java.lang.String[]{ text };\r\n    }\r\n    char[] array = text.toCharArray();\r\n    java.util.ArrayList list = new java.util.ArrayList();\r\n    java.lang.StringBuffer buffer = new java.lang.StringBuffer();\r\n    for (int i = 0; i < array.length; i++) {\r\n        if ((array[i] == '?') || (array[i] == '*')) {\r\n            if (buffer.length() != 0) {\r\n                list.add(buffer.toString());\r\n                buffer.setLength(0);\r\n            }\r\n            if (array[i] == '?') {\r\n                list.add(\"?\");\r\n            } else if ((list.size() == 0) || ((i > 0) && (list.get(list.size() - 1).equals(\"*\") == false))) {\r\n                list.add(\"*\");\r\n            }\r\n        } else {\r\n            buffer.append(array[i]);\r\n        }\r\n    }\r\n    if (buffer.length() != 0) {\r\n        list.add(buffer.toString());\r\n    }\r\n    return ((java.lang.String[]) (list.toArray(new java.lang.String[0])));\r\n}", "docComment": "Splits a string into a number of tokens.\r\n\r\n@param text\r\n\t\tthe text to split\r\n@return the tokens, never null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Returns a filter that ANDs the two specified filters.\r\n *\r\n * @param filter1\r\n * \t\tthe first filter\r\n * @param filter2\r\n * \t\tthe second filter\r\n * @return a filter that ANDs the two specified filters\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\r\n    return new org.apache.commons.io.filefilter.AndFileFilter(filter1, filter2);\r\n}", "docComment": "Returns a filter that ANDs the two specified filters.\r\n\r\n@param filter1\r\n\t\tthe first filter\r\n@param filter2\r\n\t\tthe second filter\r\n@return a filter that ANDs the two specified filters\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "reset()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.ByteArrayOutputStream#reset()\r\n */\r\npublic synchronized void reset() {\r\n    this.count = 0;\r\n    this.filledBufferSum = 0;\r\n    this.currentBufferIndex = 0;\r\n    this.currentBuffer = this.getBuffer(this.currentBufferIndex);\r\n}", "docComment": "\r\n@see java.io.ByteArrayOutputStream#reset()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadFileToString()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadFileToString()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testReadFileToString()", "kind": "method", "sourceText": "public void testReadFileToString() throws java.lang.Exception {\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"read.obj\");\r\n    java.io.FileOutputStream out = new java.io.FileOutputStream(file);\r\n    byte[] text = \"Hello /u1234\".getBytes(\"UTF8\");\r\n    out.write(text);\r\n    out.close();\r\n    java.lang.String data = org.apache.commons.io.FileUtils.readFileToString(file, \"UTF8\");\r\n    this.assertEquals(\"Hello /u1234\", data);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testFile2", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File testFile2;", "visibility": "private", "simpleName": "testFile2", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testFile2", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\r\n    return this.fileFilters.remove(ioFileFilter);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream_nullOut()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()", "kind": "method", "sourceText": "public void testCopy_readerToOutputStream_nullOut() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(reader, ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "src", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.skip(long).0", "labels": ["Variable"], "properties": {"simpleName": "length", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.skip(long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "proxy", "qualifiedName": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "lockDir", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "labels": ["Structure"], "properties": {"docComment": "Helper class for checking behaviour of IO classes.\r\n\r\n@author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\r\n", "simpleName": "YellOnFlushAndCloseOutputStream", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new Suffix file filter for an array of suffixs.\r\n * <p>\r\n * The array is not cloned, so could be changed after constructing the\r\n * instance. This would be inadvisable however.\r\n *\r\n * @param suffixes\r\n * \t\tthe suffixes to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the suffix array is null\r\n */\r\npublic SuffixFileFilter(java.lang.String[] suffixes) {\r\n    super();\r\n    if (suffixes == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The array of suffixes must not be null\");\r\n    }\r\n    this.suffixes = suffixes;\r\n}", "docComment": "Constructs a new Suffix file filter for an array of suffixs.\r\n<p>\r\nThe array is not cloned, so could be changed after constructing the\r\ninstance. This would be inadvisable however.\r\n\r\n@param suffixes\r\n\t\tthe suffixes to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the suffix array is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testThrowsOnCannotDeleteFile()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "kind": "method", "sourceText": "public void testThrowsOnCannotDeleteFile() throws java.lang.Exception {\r\n    final java.io.File file = new java.io.File(this.top, \"restricted\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    if (!this.chmod(this.top, 500, false)) {\r\n        // test wont work if we can't restrict permissions on the\r\n        // directory, so skip it.\r\n        return;\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.cleanDirectory(this.top);\r\n        this.fail(\"expected IOException\");\r\n    } catch (java.io.IOException e) {\r\n        this.assertEquals(\"Unable to delete file: \" + file.getAbsolutePath(), e.getMessage());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.setUp()", "kind": "method", "sourceText": "public void setUp() {\r\n    this.file = new java.io.File(\"testlockfile\");\r\n    this.lockDir = new java.io.File(java.lang.System.getProperty(\"java.io.tmpdir\"));\r\n    this.lockFile = new java.io.File(this.lockDir, this.file.getName() + \".lck\");\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#setUp()\r\n */\r\nprotected void setUp() throws java.lang.Exception {\r\n    org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n    this.createFile(this.m_testFile1, org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE);\r\n    this.createFile(this.m_testFile2, org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE);\r\n}", "docComment": "\r\n@see junit.framework.TestCase#setUp()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.TestSuite suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.filefilter.OrFileFilterTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "b0", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFileFilters()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "kind": "method", "sourceText": "/**\r\n * Returns this conditional file filter's list of file filters.\r\n *\r\n * @return the file filter list\r\n * @since Commons IO 1.1\r\n */\r\npublic java.util.List getFileFilters();", "docComment": "Returns this conditional file filter's list of file filters.\r\n\r\n@return the file filter list\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "files", "qualifiedName": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "params", "qualifiedName": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The Windows separator character.\r\n */\r\nprivate static final char WINDOWS_SEPARATOR = '\\\\';", "visibility": "private", "simpleName": "WINDOWS_SEPARATOR", "qualifiedName": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "extensions", "qualifiedName": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testStream()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "kind": "method", "sourceText": "public void testStream() throws java.lang.Exception {\r\n    int written;\r\n    // The ByteArrayOutputStream is initialized with 32 bytes to match\r\n    // the original more closely for this test.\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream(32);\r\n    java.io.ByteArrayOutputStream ref = new java.io.ByteArrayOutputStream();\r\n    // First three writes\r\n    written = this.writeData(baout, ref, new int[]{ 4, 10, 22 });\r\n    this.checkStreams(baout, ref);\r\n    // Another two writes to see if there are any bad effects after toByteArray()\r\n    written = this.writeData(baout, ref, new int[]{ 20, 12 });\r\n    this.checkStreams(baout, ref);\r\n    // Now reset the streams\r\n    baout.reset();\r\n    ref.reset();\r\n    // Test again to see if reset() had any bad effects\r\n    written = this.writeData(baout, ref, new int[]{ 5, 47, 33, 60, 1, 0, 8 });\r\n    this.checkStreams(baout, ref);\r\n    // Write the commons Byte[]OutputStream to a java.io.Byte[]OutputStream\r\n    // and vice-versa to test the writeTo() method.\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout1 = new org.apache.commons.io.output.ByteArrayOutputStream(32);\r\n    ref.writeTo(baout1);\r\n    java.io.ByteArrayOutputStream ref1 = new java.io.ByteArrayOutputStream();\r\n    baout.writeTo(ref1);\r\n    this.checkStreams(baout1, ref1);\r\n    // Testing toString(String)\r\n    java.lang.String baoutString = baout.toString(\"ASCII\");\r\n    java.lang.String refString = ref.toString(\"ASCII\");\r\n    this.assertEquals(\"ASCII decoded String must be equal\", refString, baoutString);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_stringToWriter() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(str, writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase", "labels": ["Structure"], "properties": {"docComment": "JUnit tests for IOUtils copy methods.\r\n\r\n@author Jeff Turner\r\n@author Matthew Hawthorne\r\n@author Jeremias Maerki\r\n@author Stephen Colebourne\r\n@version $Id$\r\n@see IOUtils\r\n", "simpleName": "IOUtilsCopyTestCase", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).1", "labels": ["Variable"], "properties": {"simpleName": "array1", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The File filter\r\n */\r\nprivate java.io.FileFilter fileFilter;", "visibility": "private", "simpleName": "fileFilter", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "bindStream(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "kind": "method", "sourceText": "/**\r\n * Bind the specified stream to the current thread.\r\n *\r\n * @param input\r\n * \t\tthe stream to bind\r\n * @return the InputStream that was previously active\r\n */\r\npublic java.io.InputStream bindStream(java.io.InputStream input) {\r\n    java.io.InputStream oldValue = this.getStream();\r\n    this.m_streams.set(input);\r\n    return oldValue;\r\n}", "docComment": "Bind the specified stream to the current thread.\r\n\r\n@param input\r\n\t\tthe stream to bind\r\n@return the InputStream that was previously active\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "branch", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest", "labels": ["Structure"], "properties": {"docComment": "Tests the CountingInputStream.\r\n\r\n@author Henri Yandell\r\n@author Marcelo Liberato\r\n@author Stephen Colebourne\r\n@version $Id$\r\n", "simpleName": "CountingInputStreamTest", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "kind": "method", "sourceText": "private int writeData(org.apache.commons.io.output.ByteArrayOutputStream baout, java.io.ByteArrayOutputStream ref, int[] instructions) throws java.io.IOException {\r\n    int written = 0;\r\n    for (int i = 0; i < instructions.length; i++) {\r\n        written += this.writeData(baout, ref, instructions[i]);\r\n    }\r\n    return written;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "testName", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "wildcard", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.FileCleanerTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_InvalidResponse2()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()", "kind": "method", "sourceText": "public void testGetFreeSpaceUnix_String_InvalidResponse2() throws java.lang.Exception {\r\n    java.lang.String lines = \"Filesystem           1K-blocks      Used Available Use% Mounted on\\n\" + \"xxx:/home/users/s     14428928  12956424   nnnnnnn  90% /home/users/s\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        12() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    try {\r\n        fsu.freeSpaceUnix(\"/home/users/s\");\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String WORKING_PATH_NAME_PROPERTY_KEY = org.apache.commons.io.filefilter.OrFileFilterTestCase.class.getName() + \".workingDirectory\";", "visibility": "private", "simpleName": "WORKING_PATH_NAME_PROPERTY_KEY", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA4", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String DATA4 = \"Data for thread4\";", "visibility": "private", "simpleName": "DATA4", "qualifiedName": "org.apache.commons.io.DemuxTestCase.DATA4", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Checks whether two filenames are equal after both have been normalized\r\n * and using the case rules of the system.\r\n * <p>\r\n * Both filenames are first passed to {@link #normalize(String)}.\r\n * The check is then performed case-sensitive on Unix and\r\n * case-insensitive on Windows.\r\n *\r\n * @param filename1\r\n * \t\tthe first filename to query, may be null\r\n * @param filename2\r\n * \t\tthe second filename to query, may be null\r\n * @return true if the filenames are equal, null equals null\r\n */\r\npublic static boolean equalsNormalizedOnSystem(java.lang.String filename1, java.lang.String filename2) {\r\n    return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, true);\r\n}", "docComment": "Checks whether two filenames are equal after both have been normalized\r\nand using the case rules of the system.\r\n<p>\r\nBoth filenames are first passed to {@link #normalize(String)}.\r\nThe check is then performed case-sensitive on Unix and\r\ncase-insensitive on Windows.\r\n\r\n@param filename1\r\n\t\tthe first filename to query, may be null\r\n@param filename2\r\n\t\tthe second filename to query, may be null\r\n@return true if the filenames are equal, null equals null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.PackageTestSuite.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "str", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int).0", "labels": ["Variable"], "properties": {"simpleName": "count", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.InputStream,java.io.Writer)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// InputStream -> Writer\r\n// ----------------------------------------------------------------\r\n/**\r\n * Copy and convert bytes from an <code>InputStream</code> to chars on a\r\n * <code>Writer</code>.\r\n * The platform's default encoding is used for the byte-to-char conversion.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\r\n    java.io.InputStreamReader in = new java.io.InputStreamReader(input);\r\n    org.apache.commons.io.CopyUtils.copy(in, output);\r\n}", "docComment": "Copy and convert bytes from an <code>InputStream</code> to chars on a\r\n<code>Writer</code>.\r\nThe platform's default encoding is used for the byte-to-char conversion.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetExtension()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()", "kind": "method", "sourceText": "public void testGetExtension() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getExtension(null));\r\n    this.assertEquals(\"ext\", org.apache.commons.io.FilenameUtils.getExtension(\"file.ext\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getExtension(\"README\"));\r\n    this.assertEquals(\"com\", org.apache.commons.io.FilenameUtils.getExtension(\"domain.dot.com\"));\r\n    this.assertEquals(\"jpeg\", org.apache.commons.io.FilenameUtils.getExtension(\"image.jpeg\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getExtension(\"a.b/c\"));\r\n    this.assertEquals(\"txt\", org.apache.commons.io.FilenameUtils.getExtension(\"a.b/c.txt\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getExtension(\"a/b/c\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getExtension(\"a.b\\\\c\"));\r\n    this.assertEquals(\"txt\", org.apache.commons.io.FilenameUtils.getExtension(\"a.b\\\\c.txt\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getExtension(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getExtension(\"C:\\\\temp\\\\foo.bar\\\\README\"));\r\n    this.assertEquals(\"ext\", org.apache.commons.io.FilenameUtils.getExtension(\"../filename.ext\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.PackageTestSuite.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    junit.framework.TestSuite suite = new junit.framework.TestSuite(\"IO Utilities\");\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.CopyUtilsTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.DemuxTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.EndianUtilsTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.FilenameUtilsTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.FilenameUtilsWildcardTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.FileSystemUtilsTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.FileUtilsFileNewerTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.FileUtilsListFilesTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.FileUtilsCleanDirectoryTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.FileUtilsTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.filefilter.FileFilterTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.HexDumpTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.IOUtilsCopyTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.IOUtilsTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.IOUtilsWriteTestCase.class));\r\n    return suite;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testByteArrayToOutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "kind": "method", "sourceText": "public void testByteArrayToOutputStream() throws java.lang.Exception {\r\n    java.io.File destination = this.newFile(\"copy8.txt\");\r\n    java.io.FileInputStream fin = new java.io.FileInputStream(this.m_testFile);\r\n    byte[] in;\r\n    try {\r\n        // Create our byte[]. Rely on testInputStreamToByteArray() to make sure this is valid.\r\n        in = org.apache.commons.io.IOUtils.toByteArray(fin);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n    java.io.FileOutputStream fout = new java.io.FileOutputStream(destination);\r\n    try {\r\n        org.apache.commons.io.CopyUtils.copy(in, fout);\r\n        fout.flush();\r\n        this.checkFile(destination, this.m_testFile);\r\n        this.checkWrite(fout);\r\n    } finally {\r\n        fout.close();\r\n    }\r\n    this.deleteFile(destination);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testEOF3()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()", "kind": "method", "sourceText": "public void testEOF3() throws java.lang.Exception {\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(new byte[2]);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    byte[] result = new byte[10];\r\n    int found = cis.read(result, 0, 5);\r\n    this.assertEquals(2, found);\r\n    this.assertEquals(2, cis.getCount());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "testLockDir(java.io.File)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Tests that we can write to the lock directory.\r\n *\r\n * @param lockDir\r\n * \t\tthe File representing the lock directory\r\n * @throws IOException\r\n * \t\tif we cannot write to the lock directory\r\n * @throws IOException\r\n * \t\tif we cannot find the lock file\r\n */\r\nprivate void testLockDir(java.io.File lockDir) throws java.io.IOException {\r\n    if (!lockDir.exists()) {\r\n        throw new java.io.IOException(\"Could not find lockDir: \" + lockDir.getAbsolutePath());\r\n    }\r\n    if (!lockDir.canWrite()) {\r\n        throw new java.io.IOException(\"Could not write to lockDir: \" + lockDir.getAbsolutePath());\r\n    }\r\n}", "docComment": "Tests that we can write to the lock directory.\r\n\r\n@param lockDir\r\n\t\tthe File representing the lock directory\r\n@throws IOException\r\n\t\tif we cannot write to the lock directory\r\n@throws IOException\r\n\t\tif we cannot find the lock file\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readDouble()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readDouble()\r\n */\r\npublic double readDouble() throws java.io.IOException, java.io.EOFException {\r\n    return org.apache.commons.io.EndianUtils.readSwappedDouble(this.in);\r\n}", "docComment": "\r\n@see java.io.DataInput#readDouble()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[])", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "kind": "method", "sourceText": "/**\r\n * Writes <code>b.length</code> bytes from the specified byte array to this\r\n * output stream.\r\n *\r\n * @param b\r\n * \t\tThe array of bytes to be written.\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\npublic void write(byte[] b) throws java.io.IOException {\r\n    this.checkThreshold(b.length);\r\n    this.getStream().write(b);\r\n    this.written += b.length;\r\n}", "docComment": "Writes <code>b.length</code> bytes from the specified byte array to this\r\noutput stream.\r\n\r\n@param b\r\n\t\tThe array of bytes to be written.\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "f0", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int).0", "labels": ["Variable"], "properties": {"simpleName": "count", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker.delete()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "delete()", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker.delete()", "kind": "method", "sourceText": "/**\r\n * Deletes the file associated with this tracker instance.\r\n *\r\n * @return <code>true</code> if the file was deleted successfully;\r\n<code>false</code> otherwise.\r\n */\r\npublic boolean delete() {\r\n    return new java.io.File(this.path).delete();\r\n}", "docComment": "Deletes the file associated with this tracker instance.\r\n\r\n@return <code>true</code> if the file was deleted successfully;\r\n<code>false</code> otherwise.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testMatch2()", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()", "kind": "method", "sourceText": "// A separate set of tests, added to this batch\r\npublic void testMatch2() {\r\n    this.assertMatch(\"log.txt\", \"log.txt\", true);\r\n    this.assertMatch(\"log.txt1\", \"log.txt\", false);\r\n    this.assertMatch(\"log.txt\", \"log.txt*\", true);\r\n    this.assertMatch(\"log.txt\", \"log.txt*1\", false);\r\n    this.assertMatch(\"log.txt\", \"*log.txt*\", true);\r\n    this.assertMatch(\"log.txt\", \"*.txt\", true);\r\n    this.assertMatch(\"txt.log\", \"*.txt\", false);\r\n    this.assertMatch(\"config.ini\", \"*.ini\", true);\r\n    this.assertMatch(\"config.txt.bak\", \"con*.txt\", false);\r\n    this.assertMatch(\"log.txt9\", \"*.txt?\", true);\r\n    this.assertMatch(\"log.txt\", \"*.txt?\", false);\r\n    this.assertMatch(\"progtestcase.java~5~\", \"*test*.java~*~\", true);\r\n    this.assertMatch(\"progtestcase.java;5~\", \"*test*.java~*~\", false);\r\n    this.assertMatch(\"progtestcase.java~5\", \"*test*.java~*~\", false);\r\n    this.assertMatch(\"log.txt\", \"log.*\", true);\r\n    this.assertMatch(\"log.txt\", \"log?*\", true);\r\n    this.assertMatch(\"log.txt12\", \"log.txt??\", true);\r\n    this.assertMatch(\"log.log\", \"log**log\", true);\r\n    this.assertMatch(\"log.log\", \"log**\", true);\r\n    this.assertMatch(\"log.log\", \"log.**\", true);\r\n    this.assertMatch(\"log.log\", \"**.log\", true);\r\n    this.assertMatch(\"log.log\", \"**log\", true);\r\n    this.assertMatch(\"log.log\", \"log*log\", true);\r\n    this.assertMatch(\"log.log\", \"log*\", true);\r\n    this.assertMatch(\"log.log\", \"log.*\", true);\r\n    this.assertMatch(\"log.log\", \"*.log\", true);\r\n    this.assertMatch(\"log.log\", \"*log\", true);\r\n    this.assertMatch(\"log.log\", \"*log?\", false);\r\n    this.assertMatch(\"log.log\", \"*log?*\", true);\r\n    this.assertMatch(\"log.log.abc\", \"*log?abc\", true);\r\n    this.assertMatch(\"log.log.abc.log.abc\", \"*log?abc\", true);\r\n    this.assertMatch(\"log.log.abc.log.abc.d\", \"*log?abc?d\", true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFalseResults()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()", "kind": "method", "sourceText": "protected java.util.List getFalseResults() {\r\n    return this.testFalseResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "off", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.Reader,java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "kind": "static method", "sourceText": "// copy from Reader\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Copy chars from a <code>Reader</code> to a <code>Writer</code>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @return the number of characters copied\r\n * @throws NullPointerException\r\n * \t\tif the input or output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static int copy(java.io.Reader input, java.io.Writer output) throws java.io.IOException {\r\n    char[] buffer = new char[org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE];\r\n    int count = 0;\r\n    int n = 0;\r\n    while ((-1) != (n = input.read(buffer))) {\r\n        output.write(buffer, 0, n);\r\n        count += n;\r\n    } \r\n    return count;\r\n}", "docComment": "Copy chars from a <code>Reader</code> to a <code>Writer</code>.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@return the number of characters copied\r\n@throws NullPointerException\r\n\t\tif the input or output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapShort(short).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.swapShort(short).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX", "labels": ["Variable"], "properties": {"sourceText": "// NOTE: This class is focussed on InputStream, OutputStream, Reader and\r\n// Writer. Each method should take at least one of these as a parameter,\r\n// or return one of them.\r\n/**\r\n * The Unix directory separator character.\r\n */\r\npublic static final char DIR_SEPARATOR_UNIX = '/';", "visibility": "public", "simpleName": "DIR_SEPARATOR_UNIX", "qualifiedName": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.PackageTestSuite()", "kind": "constructor", "sourceText": "PackageTestSuite() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildFilterUsingConstructor(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "kind": "method", "sourceText": "protected abstract org.apache.commons.io.filefilter.IOFileFilter buildFilterUsingConstructor(java.util.List filters);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "replaceWith", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "labels": ["Variable"], "properties": {"sourceText": "protected org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter[] trueFilters;", "visibility": "protected", "simpleName": "trueFilters", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "st", "qualifiedName": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream", "labels": ["Structure"], "properties": {"docComment": "Classic splitter of OutputStream. Named after the unix 'tee' \r\ncommand. It allows a stream to be branched off so there \r\nare now two streams.\r\n\r\n@author <a href=\"mailto:bayard@apache.org\">Henri Yandell</a>\r\n@version $Id$\r\n", "simpleName": "TeeOutputStream", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.lang.String,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// String -> OutputStream\r\n// ----------------------------------------------------------------\r\n/**\r\n * Serialize chars from a <code>String</code> to bytes on an\r\n * <code>OutputStream</code>, and\r\n * flush the <code>OutputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>String</code> to read from\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(java.lang.String input, java.io.OutputStream output) throws java.io.IOException {\r\n    java.io.StringReader in = new java.io.StringReader(input);\r\n    java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(output);\r\n    org.apache.commons.io.CopyUtils.copy(in, out);\r\n    // XXX Unless anyone is planning on rewriting OutputStreamWriter, we\r\n    // have to flush here.\r\n    out.flush();\r\n}", "docComment": "Serialize chars from a <code>String</code> to bytes on an\r\n<code>OutputStream</code>, and\r\nflush the <code>OutputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>String</code> to read from\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String DEFAULT_WORKING_PATH = \"./OrFileFilterTestCase/\";", "visibility": "private", "simpleName": "DEFAULT_WORKING_PATH", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toHex(int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "toHex(int)", "qualifiedName": "org.apache.commons.io.HexDumpTest.toHex(int)", "kind": "method", "sourceText": "private char toHex(int n) {\r\n    char[] hexChars = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\r\n    return hexChars[n % 16];\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "srcDir", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testMatch()", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\n// Testing:\r\n// FilenameUtils.wildcardMatch(String,String)\r\npublic void testMatch() {\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.wildcardMatch(null, \"Foo\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo\", null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(null, null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo\", \"Foo\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo\", \"Fo*\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo\", \"Fo?\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo Bar and Catflap\", \"Fo*\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"New Bookmarks\", \"N?w ?o?k??r?s\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo\", \"Bar\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo Bar Foo\", \"F*o Bar*\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Adobe Acrobat Installer\", \"Ad*er\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo\", \"*Foo\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatch(\"Foo\", \"Foo*\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.wildcardMatch(\"FOO\", \"Foo*\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testEqualsNormalizedOnSystem()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()", "kind": "method", "sourceText": "public void testEqualsNormalizedOnSystem() {\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(null, null));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(null, \"\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(\"\", null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(\"\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(\"file.txt\", \"file.txt\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.WINDOWS, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(\"file.txt\", \"FILE.TXT\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(\"a\\\\b\\\\file.txt\", \"a/b/file.txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(\"a/b/\", \"a/b\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()", "kind": "method", "sourceText": "public void setUp() throws java.lang.Exception {\r\n    super.setUp();\r\n    this.setUpTestFilters();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.FileUtils()", "kind": "constructor", "sourceText": "/**\r\n * Instances should NOT be constructed in standard programming.\r\n */\r\npublic FileUtils() {\r\n    super();\r\n}", "docComment": "Instances should NOT be constructed in standard programming.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()", "kind": "method", "sourceText": "public void testWriteLines_OutputStream_nullStream() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", \"world\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    try {\r\n        org.apache.commons.io.IOUtils.writeLines(list, \"*\", ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename1", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new Suffix file filter for a single extension.\r\n *\r\n * @param suffix\r\n * \t\tthe suffix to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the suffix is null\r\n */\r\npublic SuffixFileFilter(java.lang.String suffix) {\r\n    super();\r\n    if (suffix == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The suffix must not be null\");\r\n    }\r\n    this.suffixes = new java.lang.String[]{ suffix };\r\n}", "docComment": "Constructs a new Suffix file filter for a single extension.\r\n\r\n@param suffix\r\n\t\tthe suffix to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the suffix is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.IOUtils()", "kind": "constructor", "sourceText": "/**\r\n * Instances should NOT be constructed in standard programming.\r\n */\r\npublic IOUtils() {\r\n    super();\r\n}", "docComment": "Instances should NOT be constructed in standard programming.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "kind": "constructor", "sourceText": "/**\r\n * Constructs an instance of this class from the supplied parameters.\r\n *\r\n * @param file\r\n * \t\tThe file to be tracked.\r\n * @param marker\r\n * \t\tThe marker object used to track the file.\r\n * @param queue\r\n * \t\tThe queue on to which the tracker will be pushed.\r\n */\r\npublic Tracker(java.io.File file, java.lang.Object marker, java.lang.ref.ReferenceQueue queue) {\r\n    this(file.getPath(), marker, queue);\r\n}", "docComment": "Constructs an instance of this class from the supplied parameters.\r\n\r\n@param file\r\n\t\tThe file to be tracked.\r\n@param marker\r\n\t\tThe marker object used to track the file.\r\n@param queue\r\n\t\tThe queue on to which the tracker will be pushed.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "generateTestData(java.io.OutputStream,long)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "kind": "method", "sourceText": "protected void generateTestData(java.io.OutputStream out, long size) throws java.io.IOException {\r\n    for (int i = 0; i < size; i++) {\r\n        // output.write((byte)'X');\r\n        // nice varied byte pattern compatible with Readers and Writers\r\n        out.write(((byte) ((i % 127) + 1)));\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSkipBytes()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()", "kind": "method", "sourceText": "public void testSkipBytes() throws java.io.IOException {\r\n    this.sdis.skipBytes(4);\r\n    this.assertEquals(((int) (0x8070605)), this.sdis.readInt());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA3", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String DATA3 = \"Data for thread3\";", "visibility": "private", "simpleName": "DATA3", "qualifiedName": "org.apache.commons.io.DemuxTestCase.DATA3", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * <p>\r\n * Writes a String to a file creating the file if it does not exist.\r\n * </p>\r\n * <p>\r\n * There is no writeStringToFile method without encoding parameter because\r\n * the default encoding can differ between platforms and therefore results\r\n * in inconsistent results.\r\n * </p>\r\n *\r\n * @param file\r\n * \t\tthe file to write\r\n * @param data\r\n * \t\tthe content to write to the file\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @throws UnsupportedEncodingException\r\n * \t\tif the encoding is not supported by the VM\r\n */\r\npublic static void writeStringToFile(java.io.File file, java.lang.String data, java.lang.String encoding) throws java.io.IOException {\r\n    java.io.OutputStream out = new java.io.FileOutputStream(file);\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(data, out, encoding);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(out);\r\n    }\r\n}", "docComment": "<p>\r\nWrites a String to a file creating the file if it does not exist.\r\n</p>\r\n<p>\r\nThere is no writeStringToFile method without encoding parameter because\r\nthe default encoding can differ between platforms and therefore results\r\nin inconsistent results.\r\n</p>\r\n\r\n@param file\r\n\t\tthe file to write\r\n@param data\r\n\t\tthe content to write to the file\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@throws UnsupportedEncodingException\r\n\t\tif the encoding is not supported by the VM\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testZeroLength2()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()", "kind": "method", "sourceText": "public void testZeroLength2() throws java.lang.Exception {\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(new byte[0]);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    byte[] result = new byte[10];\r\n    int found = cis.read(result);\r\n    this.assertEquals(-1, found);\r\n    this.assertEquals(0, cis.getCount());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "kind": "constructor", "sourceText": "ReaderThread(java.lang.String name, java.io.InputStream input, org.apache.commons.io.input.DemuxInputStream demux) {\r\n    super(name);\r\n    this.m_input = input;\r\n    this.m_demux = demux;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.close()", "kind": "method", "sourceText": "/**\r\n * Closes this output stream and releases any system resources associated\r\n * with this stream.\r\n *\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\npublic void close() throws java.io.IOException {\r\n    try {\r\n        this.flush();\r\n    } catch (java.io.IOException ignored) {\r\n        // ignore\r\n    }\r\n    this.getStream().close();\r\n}", "docComment": "Closes this output stream and releases any system resources associated\r\nwith this stream.\r\n\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapLong(long).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.swapLong(long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "verifyResultFile(java.io.File)", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Verifies that the specified file contains the same data as the original\r\n * test data.\r\n *\r\n * @param testFile\r\n * \t\tThe file containing the test output.\r\n */\r\nprivate void verifyResultFile(java.io.File testFile) {\r\n    try {\r\n        java.io.FileInputStream fis = new java.io.FileInputStream(testFile);\r\n        this.assertTrue(fis.available() == this.testBytes.length);\r\n        byte[] resultBytes = new byte[this.testBytes.length];\r\n        this.assertTrue(fis.read(resultBytes) == this.testBytes.length);\r\n        this.assertTrue(java.util.Arrays.equals(resultBytes, this.testBytes));\r\n        this.assertTrue(fis.read(resultBytes) == (-1));\r\n        try {\r\n            fis.close();\r\n        } catch (java.io.IOException e) {\r\n            // Ignore an exception on close\r\n        }\r\n    } catch (java.io.FileNotFoundException e) {\r\n        this.fail(\"Unexpected FileNotFoundException\");\r\n    } catch (java.io.IOException e) {\r\n        this.fail(\"Unexpected IOException\");\r\n    }\r\n}", "docComment": "Verifies that the specified file contains the same data as the original\r\ntest data.\r\n\r\n@param testFile\r\n\t\tThe file containing the test output.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_Writer_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()", "kind": "method", "sourceText": "public void testWriteLines_Writer_nullStream() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", \"world\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    try {\r\n        org.apache.commons.io.IOUtils.writeLines(list, \"*\", ((java.io.Writer) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyFile1()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "kind": "method", "sourceText": "// copyFile\r\npublic void testCopyFile1() throws java.lang.Exception {\r\n    java.io.File destination = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"copy1.txt\");\r\n    // Thread.sleep(LAST_MODIFIED_DELAY);\r\n    // This is to slow things down so we can catch if\r\n    // the lastModified date is not ok\r\n    org.apache.commons.io.FileUtils.copyFile(this.testFile1, destination);\r\n    this.assertTrue(\"Check Exist\", destination.exists());\r\n    this.assertTrue(\"Check Full copy\", destination.length() == org.apache.commons.io.FileUtilsTestCase.testFile1Size);\r\n    /* disabled: Thread.sleep doesn't work reliantly for this case\n    assertTrue(\"Check last modified date preserved\", \n    testFile1.lastModified() == destination.lastModified());\n     */\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testZeroLength3()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()", "kind": "method", "sourceText": "public void testZeroLength3() throws java.lang.Exception {\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(new byte[0]);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    byte[] result = new byte[10];\r\n    int found = cis.read(result, 0, 5);\r\n    this.assertEquals(-1, found);\r\n    this.assertEquals(0, cis.getCount());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "marker", "qualifiedName": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.HexDump()", "kind": "constructor", "sourceText": "/**\r\n * Instances should NOT be constructed in standard programming.\r\n */\r\npublic HexDump() {\r\n    super();\r\n}", "docComment": "Instances should NOT be constructed in standard programming.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "len", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)", "kind": "constructor", "sourceText": "public LockableFileWriterTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "byte", "labels": ["Primitive"], "properties": {"simpleName": "byte", "qualifiedName": "byte", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyURLToFile()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()", "kind": "method", "sourceText": "// copyURLToFile\r\npublic void testCopyURLToFile() throws java.lang.Exception {\r\n    // Creates file\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), this.getName());\r\n    file.deleteOnExit();\r\n    // Loads resource\r\n    java.lang.String resourceName = \"/java/lang/Object.class\";\r\n    org.apache.commons.io.FileUtils.copyURLToFile(this.getClass().getResource(resourceName), file);\r\n    // Tests that resuorce was copied correctly\r\n    java.io.FileInputStream fis = new java.io.FileInputStream(file);\r\n    try {\r\n        this.assertTrue(\"Content is not equal.\", org.apache.commons.io.IOUtils.contentEquals(this.getClass().getResourceAsStream(resourceName), fis));\r\n    } finally {\r\n        fis.close();\r\n    }\r\n    // TODO Maybe test copy to itself like for copyFile()\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReaderToString()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()", "kind": "method", "sourceText": "public void testReaderToString() throws java.lang.Exception {\r\n    java.io.FileReader fin = new java.io.FileReader(this.m_testFile);\r\n    try {\r\n        java.lang.String out = org.apache.commons.io.IOUtils.toString(fin);\r\n        this.assertNotNull(out);\r\n        this.assertTrue(((\"Wrong output size: out.length()=\" + out.length()) + \"!=\") + org.apache.commons.io.IOUtilsTestCase.FILE_SIZE, out.length() == org.apache.commons.io.IOUtilsTestCase.FILE_SIZE);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker", "labels": ["Structure"], "properties": {"docComment": "Inner class which acts as the reference for a file pending deletion.\r\n", "simpleName": "Tracker", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedFloat(byte[],int,float)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"float\" value to a byte array at a given offset. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param data\r\n * \t\ttarget byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @param value\r\n * \t\tvalue to write\r\n */\r\npublic static void writeSwappedFloat(byte[] data, int offset, float value) {\r\n    org.apache.commons.io.EndianUtils.writeSwappedInteger(data, offset, java.lang.Float.floatToIntBits(value));\r\n}", "docComment": "Writes a \"float\" value to a byte array at a given offset. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param data\r\n\t\ttarget byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@param value\r\n\t\tvalue to write\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testAnd()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "kind": "method", "sourceText": "public void testAnd() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter trueFilter = org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE;\r\n    org.apache.commons.io.filefilter.IOFileFilter falseFilter = org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE;\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.AndFileFilter(trueFilter, trueFilter), new java.io.File(\"foo.test\"), true);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.AndFileFilter(trueFilter, falseFilter), new java.io.File(\"foo.test\"), false);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.AndFileFilter(falseFilter, trueFilter), new java.io.File(\"foo.test\"), false);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.AndFileFilter(falseFilter, falseFilter), new java.io.File(\"foo.test\"), false);\r\n    java.util.List filters = new java.util.ArrayList();\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.AndFileFilter(filters), new java.io.File(\"test\"), false);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.AndFileFilter(), new java.io.File(\"test\"), false);\r\n    try {\r\n        new org.apache.commons.io.filefilter.AndFileFilter(falseFilter, null);\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    org.apache.commons.io.filefilter.AndFileFilter f = new org.apache.commons.io.filefilter.AndFileFilter(((java.util.List) (null)));\r\n    this.assertEquals(true, f.getFileFilters().isEmpty());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename starts with the prefix.\r\n *\r\n * @param file\r\n * \t\tthe File directory\r\n * @param name\r\n * \t\tthe filename\r\n * @return true if the filename starts with one of our prefixes\r\n */\r\npublic boolean accept(java.io.File file, java.lang.String name) {\r\n    for (int i = 0; i < this.prefixes.length; i++) {\r\n        if (name.startsWith(this.prefixes[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename starts with the prefix.\r\n\r\n@param file\r\n\t\tthe File directory\r\n@param name\r\n\t\tthe filename\r\n@return true if the filename starts with one of our prefixes\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileUtilsCleanDirectoryTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToOutputStream_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()", "kind": "method", "sourceText": "public void testWrite_stringToOutputStream_nullStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(str, ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.WINDOWS", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Operating system state flag for Windows.\r\n */\r\nprivate static final int WINDOWS = 1;", "visibility": "private", "simpleName": "WINDOWS", "qualifiedName": "org.apache.commons.io.FileSystemUtils.WINDOWS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.lockFile", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The lock file.\r\n */\r\nprivate java.io.File lockFile;", "visibility": "private", "simpleName": "lockFile", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.lockFile", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void addFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\r\n    this.fileFilters.add(ioFileFilter);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testOr()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "kind": "method", "sourceText": "public void testOr() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter trueFilter = org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE;\r\n    org.apache.commons.io.filefilter.IOFileFilter falseFilter = org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE;\r\n    java.io.File testFile = new java.io.File(\"foo.test\");\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.OrFileFilter(trueFilter, trueFilter), testFile, true);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.OrFileFilter(trueFilter, falseFilter), testFile, true);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.OrFileFilter(falseFilter, trueFilter), testFile, true);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.OrFileFilter(falseFilter, falseFilter), testFile, false);\r\n    this.assertFiltering(new org.apache.commons.io.filefilter.OrFileFilter(), testFile, false);\r\n    java.util.List filters = new java.util.ArrayList();\r\n    filters.add(trueFilter);\r\n    filters.add(falseFilter);\r\n    org.apache.commons.io.filefilter.OrFileFilter orFilter = new org.apache.commons.io.filefilter.OrFileFilter(filters);\r\n    this.assertFiltering(orFilter, testFile, true);\r\n    this.assertEquals(orFilter.getFileFilters(), filters);\r\n    orFilter.removeFileFilter(trueFilter);\r\n    this.assertFiltering(orFilter, testFile, false);\r\n    orFilter.setFileFilters(filters);\r\n    this.assertFiltering(orFilter, testFile, true);\r\n    this.assertTrue(orFilter.accept(testFile.getParentFile(), testFile.getName()));\r\n    orFilter.removeFileFilter(trueFilter);\r\n    this.assertTrue(!orFilter.accept(testFile.getParentFile(), testFile.getName()));\r\n    try {\r\n        new org.apache.commons.io.filefilter.OrFileFilter(falseFilter, null);\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    org.apache.commons.io.filefilter.OrFileFilter f = new org.apache.commons.io.filefilter.OrFileFilter(((java.util.List) (null)));\r\n    this.assertEquals(true, f.getFileFilters().isEmpty());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The Windows line separator string.\r\n */\r\npublic static final java.lang.String LINE_SEPARATOR_WINDOWS = \"\\r\\n\";", "visibility": "public", "simpleName": "LINE_SEPARATOR_WINDOWS", "qualifiedName": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long).0", "labels": ["Variable"], "properties": {"simpleName": "size", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFalseResults()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "kind": "method", "sourceText": "protected abstract java.util.List getFalseResults();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.FILE_SIZE", "labels": ["Variable"], "properties": {"sourceText": "private static final int FILE_SIZE = (1024 * 4) + 1;", "visibility": "private", "simpleName": "FILE_SIZE", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.FILE_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToWriter_Encoding_nullWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()", "kind": "method", "sourceText": "public void testWrite_byteArrayToWriter_Encoding_nullWriter() throws java.lang.Exception {\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(this.inData, ((java.io.Writer) (null)), \"UTF8\");\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(long).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.HexDump.dump(long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapLong(long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "swapLong(long)", "qualifiedName": "org.apache.commons.io.EndianUtils.swapLong(long)", "kind": "static method", "sourceText": "/**\r\n * Converts a \"long\" value between endian systems.\r\n *\r\n * @param value\r\n * \t\tvalue to convert\r\n * @return the converted value\r\n */\r\npublic static long swapLong(long value) {\r\n    return (((((((((value >> 0) & 0xff) << 56) + (((value >> 8) & 0xff) << 48)) + (((value >> 16) & 0xff) << 40)) + (((value >> 24) & 0xff) << 32)) + (((value >> 32) & 0xff) << 24)) + (((value >> 40) & 0xff) << 16)) + (((value >> 48) & 0xff) << 8)) + (((value >> 56) & 0xff) << 0);\r\n}", "docComment": "Converts a \"long\" value between endian systems.\r\n\r\n@param value\r\n\t\tvalue to convert\r\n@return the converted value\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_stringToWriter()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "kind": "method", "sourceText": "public void testCopy_stringToWriter() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.CopyUtils.copy(str, writer);\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySize()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testByteCountToDisplaySize()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySize()", "kind": "method", "sourceText": "// byteCountToDisplaySize\r\npublic void testByteCountToDisplaySize() {\r\n    this.assertEquals(org.apache.commons.io.FileUtils.byteCountToDisplaySize(0), \"0 bytes\");\r\n    this.assertEquals(org.apache.commons.io.FileUtils.byteCountToDisplaySize(1024), \"1 KB\");\r\n    this.assertEquals(org.apache.commons.io.FileUtils.byteCountToDisplaySize(1024 * 1024), \"1 MB\");\r\n    this.assertEquals(org.apache.commons.io.FileUtils.byteCountToDisplaySize((1024 * 1024) * 1024), \"1 GB\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToOutputStream_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()", "kind": "method", "sourceText": "public void testWrite_byteArrayToOutputStream_nullStream() throws java.lang.Exception {\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(this.inData, ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "asFileFilter(java.io.FileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Returns an <code>IOFileFilter</code> that wraps the\r\n * <code>FileFilter</code> instance.\r\n *\r\n * @param filter\r\n * \t\tthe filter to be wrapped\r\n * @return a new filter that implements IOFileFilter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter filter) {\r\n    return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\r\n}", "docComment": "Returns an <code>IOFileFilter</code> that wraps the\r\n<code>FileFilter</code> instance.\r\n\r\n@param filter\r\n\t\tthe filter to be wrapped\r\n@return a new filter that implements IOFileFilter\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteStringToFile2()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()", "kind": "method", "sourceText": "public void testWriteStringToFile2() throws java.lang.Exception {\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"write.txt\");\r\n    org.apache.commons.io.FileUtils.writeStringToFile(file, \"Hello /u1234\", null);\r\n    byte[] text = \"Hello /u1234\".getBytes();\r\n    this.assertEqualContent(text, file);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getBaseName(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Gets the base name, minus the full path and extension, from a full filename.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The text after the last forward or backslash and before the last dot is returned.\r\n * <pre>\r\n * a/b/c.txt --> c\r\n * a.txt     --> a\r\n * a/b/c     --> c\r\n * a/b/c/    --> \"\"\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the name of the file without the path, or an empty string if none exists\r\n */\r\npublic static java.lang.String getBaseName(java.lang.String filename) {\r\n    return org.apache.commons.io.FilenameUtils.removeExtension(org.apache.commons.io.FilenameUtils.getName(filename));\r\n}", "docComment": "Gets the base name, minus the full path and extension, from a full filename.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe text after the last forward or backslash and before the last dot is returned.\r\n<pre>\r\na/b/c.txt --> c\r\na.txt     --> a\r\na/b/c     --> c\r\na/b/c/    --> \"\"\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the name of the file without the path, or an empty string if none exists\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io", "labels": ["Container"], "properties": {"simpleName": "io", "qualifiedName": "org.apache.commons.io", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "ioFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).2", "labels": ["Variable"], "properties": {"simpleName": "lines", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE", "labels": ["Variable"], "properties": {"sourceText": "// Test data\r\n/**\r\n * Size of test directory.\r\n */\r\nprivate static final int TEST_DIRECTORY_SIZE = 0;", "visibility": "private", "simpleName": "TEST_DIRECTORY_SIZE", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean accept(final java.io.File file) {\r\n    for (java.util.Iterator iter = this.fileFilters.iterator(); iter.hasNext();) {\r\n        org.apache.commons.io.filefilter.IOFileFilter fileFilter = ((org.apache.commons.io.filefilter.IOFileFilter) (iter.next()));\r\n        if (fileFilter.accept(file)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest", "labels": ["Structure"], "properties": {"docComment": "JUnit tests for CopyUtils.\r\n\r\n@author Jeff Turner\r\n@author Matthew Hawthorne\r\n@author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\r\n@version $Id$\r\n@see CopyUtils\r\n", "simpleName": "CopyUtilsTest", "qualifiedName": "org.apache.commons.io.CopyUtilsTest", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedInteger(byte[],int)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"int\" value from a byte array at a given offset. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param data\r\n * \t\tsource byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @return the value read\r\n */\r\npublic static int readSwappedInteger(byte[] data, int offset) {\r\n    return ((int) (((((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8)) + ((data[offset + 2] & 0xff) << 16)) + ((data[offset + 3] & 0xff) << 24)));\r\n}", "docComment": "Reads a \"int\" value from a byte array at a given offset. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param data\r\n\t\tsource byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@return the value read\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getName(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getName(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.setUp()", "kind": "method", "sourceText": "public void setUp() {\r\n    org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite", "labels": ["Structure"], "properties": {"docComment": "A basic test suite that tests all the IO filefilter package.\r\n\r\n@author Stephen Colebourne\r\n", "simpleName": "PackageTestSuite", "qualifiedName": "org.apache.commons.io.filefilter.PackageTestSuite", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedLong(java.io.OutputStream,long)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"long\" value to an OutputStream. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param output\r\n * \t\ttarget OutputStream\r\n * @param value\r\n * \t\tvalue to write\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\r\n    output.write(((byte) ((value >> 0) & 0xff)));\r\n    output.write(((byte) ((value >> 8) & 0xff)));\r\n    output.write(((byte) ((value >> 16) & 0xff)));\r\n    output.write(((byte) ((value >> 24) & 0xff)));\r\n    output.write(((byte) ((value >> 32) & 0xff)));\r\n    output.write(((byte) ((value >> 40) & 0xff)));\r\n    output.write(((byte) ((value >> 48) & 0xff)));\r\n    output.write(((byte) ((value >> 56) & 0xff)));\r\n}", "docComment": "Writes a \"long\" value to an OutputStream. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param output\r\n\t\ttarget OutputStream\r\n@param value\r\n\t\tvalue to write\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).1", "labels": ["Variable"], "properties": {"simpleName": "marker", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.UNIX", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Operating system state flag for Unix.\r\n */\r\nprivate static final int UNIX = 2;", "visibility": "private", "simpleName": "UNIX", "qualifiedName": "org.apache.commons.io.FileSystemUtils.UNIX", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.setUp()", "kind": "method", "sourceText": "// ----------------------------------------------------------------\r\n// Setup\r\n// ----------------------------------------------------------------\r\npublic void setUp() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.ready()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "ready()", "qualifiedName": "org.apache.commons.io.input.ProxyReader.ready()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#ready()\r\n */\r\npublic boolean ready() throws java.io.IOException {\r\n    return this.in.ready();\r\n}", "docComment": "\r\n@see java.io.Reader#ready()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "lines", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a CountingOutputStream.\r\n *\r\n * @param out\r\n * \t\tthe OutputStream to write to\r\n */\r\npublic CountingOutputStream(java.io.OutputStream out) {\r\n    super(out);\r\n}", "docComment": "Constructs a CountingOutputStream.\r\n\r\n@param out\r\n\t\tthe OutputStream to write to\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[]).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapInteger(int).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.swapInteger(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testEOF1()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()", "kind": "method", "sourceText": "public void testEOF1() throws java.lang.Exception {\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(new byte[2]);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    int found = cis.read();\r\n    this.assertEquals(0, found);\r\n    this.assertEquals(1, cis.getCount());\r\n    found = cis.read();\r\n    this.assertEquals(0, found);\r\n    this.assertEquals(2, cis.getCount());\r\n    found = cis.read();\r\n    this.assertEquals(-1, found);\r\n    this.assertEquals(2, cis.getCount());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "ReaderThread", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "labels": ["Variable"], "properties": {"sourceText": "private byte[] inData = this.generateTestData(org.apache.commons.io.IOUtilsCopyTestCase.FILE_SIZE);", "visibility": "private", "simpleName": "inData", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream_nullIn()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()", "kind": "method", "sourceText": "public void testCopy_readerToOutputStream_nullIn() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(((java.io.Reader) (null)), out);\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "length", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSeparatorsToSystem()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()", "kind": "method", "sourceText": "public void testSeparatorsToSystem() {\r\n    if (org.apache.commons.io.FilenameUtilsTestCase.WINDOWS) {\r\n        this.assertEquals(null, org.apache.commons.io.FilenameUtils.separatorsToSystem(null));\r\n        this.assertEquals(\"\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"\\\\a\\\\b\\\\c\"));\r\n        this.assertEquals(\"\\\\a\\\\b\\\\c.txt\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"\\\\a\\\\b\\\\c.txt\"));\r\n        this.assertEquals(\"\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"\\\\a\\\\b/c\"));\r\n        this.assertEquals(\"\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"/a/b/c\"));\r\n        this.assertEquals(\"D:\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"D:/a/b/c\"));\r\n    } else {\r\n        this.assertEquals(null, org.apache.commons.io.FilenameUtils.separatorsToSystem(null));\r\n        this.assertEquals(\"/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"/a/b/c\"));\r\n        this.assertEquals(\"/a/b/c.txt\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"/a/b/c.txt\"));\r\n        this.assertEquals(\"/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"/a/b\\\\c\"));\r\n        this.assertEquals(\"/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"\\\\a\\\\b\\\\c\"));\r\n        this.assertEquals(\"D:/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToSystem(\"D:\\\\a\\\\b\\\\c\"));\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The class loader to use.\r\n */\r\nprivate java.lang.ClassLoader classLoader;", "visibility": "private", "simpleName": "classLoader", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doCopyFile(java.io.File,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "kind": "static method", "sourceText": "/**\r\n * Internal copy file method.\r\n *\r\n * @param srcFile\r\n * \t\tthe validated source file, not null\r\n * @param destFile\r\n * \t\tthe validated destination file, not null\r\n * @param preserveFileDate\r\n * \t\twhether to preserve the file date\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\nprivate static void doCopyFile(java.io.File srcFile, java.io.File destFile, boolean preserveFileDate) throws java.io.IOException {\r\n    if (destFile.exists() && destFile.isDirectory()) {\r\n        throw new java.io.IOException((\"Destination '\" + destFile) + \"' exists but is a directory\");\r\n    }\r\n    java.io.FileInputStream input = new java.io.FileInputStream(srcFile);\r\n    try {\r\n        java.io.FileOutputStream output = new java.io.FileOutputStream(destFile);\r\n        try {\r\n            org.apache.commons.io.IOUtils.copy(input, output);\r\n        } finally {\r\n            org.apache.commons.io.IOUtils.closeQuietly(output);\r\n        }\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(input);\r\n    }\r\n    if (srcFile.length() != destFile.length()) {\r\n        throw new java.io.IOException((((\"Failed to copy full contents from '\" + srcFile) + \"' to '\") + destFile) + \"'\");\r\n    }\r\n    if (preserveFileDate) {\r\n        destFile.setLastModified(srcFile.lastModified());\r\n    }\r\n}", "docComment": "Internal copy file method.\r\n\r\n@param srcFile\r\n\t\tthe validated source file, not null\r\n@param destFile\r\n\t\tthe validated destination file, not null\r\n@param preserveFileDate\r\n\t\twhether to preserve the file date\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "out", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "labels": ["Container", "Structure"], "properties": {"docComment": "", "simpleName": "IOFileFilterAbstractTestCase", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "kind": "abstract class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFiles1()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFiles1()", "kind": "method", "sourceText": "// toFiles\r\npublic void testToFiles1() throws java.lang.Exception {\r\n    java.net.URL[] urls = new java.net.URL[]{ new java.net.URL(\"file\", null, \"file1.txt\"), new java.net.URL(\"file\", null, \"file2.txt\") };\r\n    java.io.File[] files = org.apache.commons.io.FileUtils.toFiles(urls);\r\n    this.assertEquals(urls.length, files.length);\r\n    this.assertEquals(\"File: \" + files[0], true, files[0].toString().indexOf(\"file1.txt\") >= 0);\r\n    this.assertEquals(\"File: \" + files[1], true, files[1].toString().indexOf(\"file2.txt\") >= 0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "names", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Delay in milliseconds to make sure test for \"last modified date\" are accurate\r\n */\r\nprivate static final int LAST_MODIFIED_DELAY = 600;", "visibility": "private", "simpleName": "LAST_MODIFIED_DELAY", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedUnsignedShort(byte[],int)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "kind": "static method", "sourceText": "/**\r\n * Reads an unsigned short (16-bit) value from a byte array at a given\r\n * offset. The value is converted to the opposed endian system while\r\n * reading.\r\n *\r\n * @param data\r\n * \t\tsource byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @return the value read\r\n */\r\npublic static int readSwappedUnsignedShort(byte[] data, int offset) {\r\n    return ((int) (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8)));\r\n}", "docComment": "Reads an unsigned short (16-bit) value from a byte array at a given\r\noffset. The value is converted to the opposed endian system while\r\nreading.\r\n\r\n@param data\r\n\t\tsource byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@return the value read\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "bts", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.read(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).1", "labels": ["Variable"], "properties": {"simpleName": "actual", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedInteger(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"int\" value from an InputStream. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param input\r\n * \t\tsource InputStream\r\n * @return the value just read\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static int readSwappedInteger(java.io.InputStream input) throws java.io.IOException {\r\n    int value1 = org.apache.commons.io.EndianUtils.read(input);\r\n    int value2 = org.apache.commons.io.EndianUtils.read(input);\r\n    int value3 = org.apache.commons.io.EndianUtils.read(input);\r\n    int value4 = org.apache.commons.io.EndianUtils.read(input);\r\n    return ((int) (((((value1 & 0xff) << 0) + ((value2 & 0xff) << 8)) + ((value3 & 0xff) << 16)) + ((value4 & 0xff) << 24)));\r\n}", "docComment": "Reads a \"int\" value from an InputStream. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param input\r\n\t\tsource InputStream\r\n@return the value just read\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readFileToString(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * <p>\r\n * Reads the contents of a file into a String.\r\n * </p>\r\n * <p>\r\n * There is no readFileToString method without encoding parameter because\r\n * the default encoding can differ between platforms and therefore results\r\n * in inconsistent results.\r\n * </p>\r\n *\r\n * @param file\r\n * \t\tthe file to read\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @return The file contents or null if read failed.\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @throws UnsupportedEncodingException\r\n * \t\tif the encoding is not supported by the VM\r\n */\r\npublic static java.lang.String readFileToString(java.io.File file, java.lang.String encoding) throws java.io.IOException {\r\n    java.io.InputStream in = new java.io.FileInputStream(file);\r\n    try {\r\n        return org.apache.commons.io.IOUtils.toString(in, encoding);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n    }\r\n}", "docComment": "<p>\r\nReads the contents of a file into a String.\r\n</p>\r\n<p>\r\nThere is no readFileToString method without encoding parameter because\r\nthe default encoding can differ between platforms and therefore results\r\nin inconsistent results.\r\n</p>\r\n\r\n@param file\r\n\t\tthe file to read\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@return The file contents or null if read failed.\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@throws UnsupportedEncodingException\r\n\t\tif the encoding is not supported by the VM\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "suffix", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the File should be accepted by this filter.\r\n *\r\n * @param dir\r\n * \t\tthe directory File to check\r\n * @param name\r\n * \t\tthe filename within the directory to check\r\n * @return true if this file matches the test\r\n */\r\npublic boolean accept(java.io.File dir, java.lang.String name) {\r\n    return this.accept(new java.io.File(dir, name));\r\n}", "docComment": "Checks to see if the File should be accepted by this filter.\r\n\r\n@param dir\r\n\t\tthe directory File to check\r\n@param name\r\n\t\tthe filename within the directory to check\r\n@return true if this file matches the test\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(char[])", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(char[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(char[])\r\n */\r\npublic void write(char[] chr) throws java.io.IOException {\r\n    this.out.write(chr);\r\n}", "docComment": "\r\n@see java.io.Writer#write(char[])\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.Reader,java.io.Writer)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// Reader -> Writer\r\n// ----------------------------------------------------------------\r\n/**\r\n * Copy chars from a <code>Reader</code> to a <code>Writer</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @return the number of characters copied\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static int copy(java.io.Reader input, java.io.Writer output) throws java.io.IOException {\r\n    char[] buffer = new char[org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE];\r\n    int count = 0;\r\n    int n = 0;\r\n    while ((-1) != (n = input.read(buffer))) {\r\n        output.write(buffer, 0, n);\r\n        count += n;\r\n    } \r\n    return count;\r\n}", "docComment": "Copy chars from a <code>Reader</code> to a <code>Writer</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@return the number of characters copied\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FilenameUtilsWildcardTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getTestFilters()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()", "kind": "method", "sourceText": "protected java.util.List getTestFilters() {\r\n    return this.testFilters;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "createLineBasedFile(java.io.File,java.lang.String[])", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "kind": "method", "sourceText": "protected void createLineBasedFile(java.io.File file, java.lang.String[] data) throws java.io.IOException {\r\n    if (!file.getParentFile().exists()) {\r\n        throw new java.io.IOException((\"Cannot create file \" + file) + \" as the parent directory does not exist\");\r\n    }\r\n    java.io.PrintWriter output = new java.io.PrintWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file), \"UTF-8\"));\r\n    try {\r\n        for (int i = 0; i < data.length; i++) {\r\n            output.println(data[i]);\r\n        }\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(output);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFalseResults;", "visibility": "private", "simpleName": "testFalseResults", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "TesterFalseFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename matches.\r\n *\r\n * @param file\r\n * \t\tthe File to check\r\n * @return true if the filename matches\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    java.lang.String name = file.getName();\r\n    for (int i = 0; i < this.names.length; i++) {\r\n        if (name.equals(this.names[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename matches.\r\n\r\n@param file\r\n\t\tthe File to check\r\n@return true if the filename matches\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCounting()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "kind": "method", "sourceText": "public void testCounting() throws java.lang.Exception {\r\n    java.lang.String text = \"A piece of text\";\r\n    byte[] bytes = text.getBytes();\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(bytes);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    // have to declare this larger as we're going to read\r\n    // off the end of the stream and input stream seems\r\n    // to do bounds checking\r\n    byte[] result = new byte[21];\r\n    byte[] ba = new byte[5];\r\n    int found = cis.read(ba);\r\n    java.lang.System.arraycopy(ba, 0, result, 0, 5);\r\n    this.assertEquals(found, cis.getCount());\r\n    int value = cis.read();\r\n    found++;\r\n    result[5] = ((byte) (value));\r\n    this.assertEquals(found, cis.getCount());\r\n    found += cis.read(result, 6, 5);\r\n    this.assertEquals(found, cis.getCount());\r\n    found += cis.read(result, 11, 10);// off the end\r\n\r\n    this.assertEquals(found, cis.getCount());\r\n    // trim to get rid of the 6 empty values\r\n    java.lang.String textResult = new java.lang.String(result).trim();\r\n    this.assertEquals(textResult, text);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readFully(byte[],int,int)", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readFully(byte[], int, int)\r\n */\r\npublic void readFully(byte[] data, int offset, int length) throws java.io.IOException, java.io.EOFException {\r\n    int remaining = length;\r\n    while (remaining > 0) {\r\n        int location = offset + (length - remaining);\r\n        int count = this.read(data, location, remaining);\r\n        if ((-1) == count) {\r\n            throw new java.io.EOFException();\r\n        }\r\n        remaining -= count;\r\n    } \r\n}", "docComment": "\r\n@see java.io.DataInput#readFully(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToOutputStream_nullIn()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()", "kind": "method", "sourceText": "public void testCopy_inputStreamToOutputStream_nullIn() throws java.lang.Exception {\r\n    java.io.OutputStream out = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(((java.io.InputStream) (null)), out);\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "labels": ["Variable"], "properties": {"sourceText": "private boolean yellForClose;", "visibility": "private", "simpleName": "yellForClose", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "append", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.testFile", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File testFile;", "visibility": "private", "simpleName": "testFile", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase.testFile", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToURLs1()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()", "kind": "method", "sourceText": "// toURLs\r\npublic void testToURLs1() throws java.lang.Exception {\r\n    java.io.File[] files = new java.io.File[]{ new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file1.txt\"), new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file2.txt\") };\r\n    java.net.URL[] urls = org.apache.commons.io.FileUtils.toURLs(files);\r\n    this.assertEquals(files.length, urls.length);\r\n    this.assertEquals(true, urls[0].toExternalForm().startsWith(\"file:\"));\r\n    this.assertEquals(true, urls[0].toExternalForm().indexOf(\"file1.txt\") >= 0);\r\n    this.assertEquals(true, urls[1].toExternalForm().startsWith(\"file:\"));\r\n    this.assertEquals(true, urls[1].toExternalForm().indexOf(\"file2.txt\") >= 0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFalseResults()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()", "kind": "method", "sourceText": "protected java.util.List getFalseResults() {\r\n    return this.testFalseResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "bts", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.ByteArrayOutputStream#toString()\r\n */\r\npublic java.lang.String toString() {\r\n    return new java.lang.String(this.toByteArray());\r\n}", "docComment": "\r\n@see java.io.ByteArrayOutputStream#toString()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "preserveFileDate", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readInt()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readInt()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readInt()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readInt()\r\n */\r\npublic int readInt() throws java.io.IOException, java.io.EOFException {\r\n    return org.apache.commons.io.EndianUtils.readSwappedInteger(this.in);\r\n}", "docComment": "\r\n@see java.io.DataInput#readInt()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.ByteArrayOutputStream#toString(String)\r\n */\r\npublic java.lang.String toString(java.lang.String enc) throws java.io.UnsupportedEncodingException {\r\n    return new java.lang.String(this.toByteArray(), enc);\r\n}", "docComment": "\r\n@see java.io.ByteArrayOutputStream#toString(String)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter", "labels": ["Structure"], "properties": {"docComment": "This filter accepts <code>File</code>s that are directories.\r\n<p>\r\nFor example, here is how to print out a list of the \r\ncurrent directory's subdirectories:\r\n\r\n<pre>\r\nFile dir = new File(\".\");\r\nString[] files = dir.list( DirectoryFileFilter.INSTANCE );\r\nfor ( int i = 0; i &lt; files.length; i++ ) {\r\n    System.out.println(files[i]);\r\n}\r\n</pre>\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@author Peter Donald\r\n", "simpleName": "DirectoryFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.DirectoryFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename ends with the suffix.\r\n *\r\n * @param file\r\n * \t\tthe File to check\r\n * @return true if the filename ends with one of our suffixes\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    java.lang.String name = file.getName();\r\n    for (int i = 0; i < this.suffixes.length; i++) {\r\n        if (name.endsWith(this.suffixes[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename ends with the suffix.\r\n\r\n@param file\r\n\t\tthe File to check\r\n@return true if the filename ends with one of our suffixes\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter_Encoding_nullOut()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()", "kind": "method", "sourceText": "public void testCopy_inputStreamToWriter_Encoding_nullOut() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(in, ((java.io.Writer) (null)), \"UTF8\");\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.skip(long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skip(long)", "qualifiedName": "org.apache.commons.io.input.ProxyReader.skip(long)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#skip(long)\r\n */\r\npublic long skip(long ln) throws java.io.IOException {\r\n    return this.in.skip(ln);\r\n}", "docComment": "\r\n@see java.io.Reader#skip(long)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.output.PackageTestSuite.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readShort()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readShort()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readShort()\r\n */\r\npublic short readShort() throws java.io.IOException, java.io.EOFException {\r\n    return org.apache.commons.io.EndianUtils.readSwappedShort(this.in);\r\n}", "docComment": "\r\n@see java.io.DataInput#readShort()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "srcFile", "qualifiedName": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.m_streams", "labels": ["Variable"], "properties": {"sourceText": "private java.lang.InheritableThreadLocal m_streams = new java.lang.InheritableThreadLocal();", "visibility": "private", "simpleName": "m_streams", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.m_streams", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename1", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedDouble(byte[],int)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"double\" value from a byte array at a given offset. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param data\r\n * \t\tsource byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @return the value read\r\n */\r\npublic static double readSwappedDouble(byte[] data, int offset) {\r\n    return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(data, offset));\r\n}", "docComment": "Reads a \"double\" value from a byte array at a given offset. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param data\r\n\t\tsource byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@return the value read\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceOS_String_Unix()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()", "kind": "method", "sourceText": "public void testGetFreeSpaceOS_String_Unix() throws java.lang.Exception {\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        2() {\r\n            super();\r\n        }\r\n\r\n        protected long freeSpaceUnix(java.lang.String path) throws java.io.IOException {\r\n            return 12345L;\r\n        }\r\n    };\r\n    this.assertEquals(12345L, fsu.freeSpaceOS(\"\", 2));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "kind": "method", "sourceText": "private int writeData(org.apache.commons.io.output.ByteArrayOutputStream baout, java.io.ByteArrayOutputStream ref, int count) throws java.io.IOException {\r\n    if (count > org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA.length) {\r\n        throw new java.lang.IllegalArgumentException(\"Requesting too many bytes\");\r\n    }\r\n    if (count == 0) {\r\n        baout.write(100);\r\n        ref.write(100);\r\n        return 1;\r\n    } else {\r\n        baout.write(org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA, 0, count);\r\n        ref.write(org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA, 0, count);\r\n        return count;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File m_testFile;", "visibility": "private", "simpleName": "m_testFile", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toFile(java.net.URL)", "qualifiedName": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Convert from a <code>URL</code> to a <code>File</code>.\r\n * <p>\r\n * From version 1.1 this method will decode the URL.\r\n * Syntax such as <code>file:///my%20docs/file.txt</code> will be\r\n * correctly decoded to <code>/my docs/file.txt</code>.\r\n *\r\n * @param url\r\n * \t\tthe file URL to convert, null returns null\r\n * @return the equivalent <code>File</code> object, or <code>null</code>\r\nif the URL's protocol is not <code>file</code>\r\n * @throws IllegalArgumentException\r\n * \t\tif the file is incorrectly encoded\r\n */\r\npublic static java.io.File toFile(java.net.URL url) {\r\n    if ((url == null) || (!url.getProtocol().equals(\"file\"))) {\r\n        return null;\r\n    } else {\r\n        java.lang.String filename = url.getFile().replace('/', java.io.File.separatorChar);\r\n        int pos = 0;\r\n        while ((pos = filename.indexOf('%', pos)) >= 0) {\r\n            if ((pos + 2) < filename.length()) {\r\n                java.lang.String hexStr = filename.substring(pos + 1, pos + 3);\r\n                char ch = ((char) (java.lang.Integer.parseInt(hexStr, 16)));\r\n                filename = (filename.substring(0, pos) + ch) + filename.substring(pos + 3);\r\n            }\r\n        } \r\n        return new java.io.File(filename);\r\n    }\r\n}", "docComment": "Convert from a <code>URL</code> to a <code>File</code>.\r\n<p>\r\nFrom version 1.1 this method will decode the URL.\r\nSyntax such as <code>file:///my%20docs/file.txt</code> will be\r\ncorrectly decoded to <code>/my docs/file.txt</code>.\r\n\r\n@param url\r\n\t\tthe file URL to convert, null returns null\r\n@return the equivalent <code>File</code> object, or <code>null</code>\r\nif the URL's protocol is not <code>file</code>\r\n@throws IllegalArgumentException\r\n\t\tif the file is incorrectly encoded\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.m_outputMap", "labels": ["Variable"], "properties": {"sourceText": "private java.util.HashMap m_outputMap = new java.util.HashMap();", "visibility": "private", "simpleName": "m_outputMap", "qualifiedName": "org.apache.commons.io.DemuxTestCase.m_outputMap", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "kind": "method", "sourceText": "private void startReader(java.lang.String name, java.lang.String data, org.apache.commons.io.input.DemuxInputStream demux) throws java.lang.Exception {\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(data.getBytes());\r\n    org.apache.commons.io.DemuxTestCase.ReaderThread thread = new org.apache.commons.io.DemuxTestCase.ReaderThread(name, input, demux);\r\n    this.m_threadMap.put(name, thread);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testZeroLength1()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()", "kind": "method", "sourceText": "public void testZeroLength1() throws java.lang.Exception {\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(new byte[0]);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    int found = cis.read();\r\n    this.assertEquals(-1, found);\r\n    this.assertEquals(0, cis.getCount());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(char[],int,int)", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(char[], int, int)\r\n */\r\npublic void write(char[] chr, int st, int end) throws java.io.IOException {\r\n    this.out.write(chr, st, end);\r\n}", "docComment": "\r\n@see java.io.Writer#write(char[], int, int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadUnsignedShort()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()", "kind": "method", "sourceText": "public void testReadUnsignedShort() throws java.io.IOException {\r\n    this.assertEquals(((short) (0x201)), this.sdis.readUnsignedShort());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).2", "labels": ["Variable"], "properties": {"simpleName": "queue", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase", "labels": ["Container", "Structure"], "properties": {"docComment": "Basic unit tests for the multiplexing streams.\r\n\r\n@author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\r\n", "simpleName": "DemuxTestCase", "qualifiedName": "org.apache.commons.io.DemuxTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter()", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new instance of <code>AndFileFilter</code>.\r\n *\r\n * @since Commons IO 1.1\r\n */\r\npublic AndFileFilter() {\r\n    super();\r\n    this.fileFilters = new java.util.ArrayList();\r\n}", "docComment": "Constructs a new instance of <code>AndFileFilter</code>.\r\n\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "out", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedLong(byte[],int)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"long\" value from a byte array at a given offset. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param data\r\n * \t\tsource byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @return the value read\r\n */\r\npublic static long readSwappedLong(byte[] data, int offset) {\r\n    long low = ((long) (((((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8)) + ((data[offset + 2] & 0xff) << 16)) + ((data[offset + 3] & 0xff) << 24)));\r\n    long high = ((long) (((((data[offset + 4] & 0xff) << 0) + ((data[offset + 5] & 0xff) << 8)) + ((data[offset + 6] & 0xff) << 16)) + ((data[offset + 7] & 0xff) << 24)));\r\n    return low + (high << 32);\r\n}", "docComment": "Reads a \"long\" value from a byte array at a given offset. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param data\r\n\t\tsource byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@return the value read\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[])", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(byte[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[])\r\n */\r\npublic void write(byte[] b) throws java.io.IOException {\r\n    this.count += b.length;\r\n    super.write(b);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[])\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File file;", "visibility": "private", "simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.LCK", "labels": ["Variable"], "properties": {"sourceText": "// Cannot extend ProxyWriter, as requires writer to be\r\n// known when super() is called\r\n/**\r\n * The extension for the lock file.\r\n */\r\nprivate static final java.lang.String LCK = \".lck\";", "visibility": "private", "simpleName": "LCK", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.LCK", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToOutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testCopy_inputStreamToOutputStream() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    int count = org.apache.commons.io.IOUtils.copy(in, out);\r\n    this.assertTrue(\"Not all bytes were read\", in.available() == 0);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils", "labels": ["Structure"], "properties": {"docComment": "Useful utilities for working with file filters. It provides access to all\r\nfile filter implementations in this package so you don't have to import\r\nevery class you use.\r\n\r\n@since Commons IO 1.0\r\n@version $Id$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@author Jeremias Maerki\r\n@author Masato Tezuka\r\n", "simpleName": "FileFilterUtils", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testFile1", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File testFile1;", "visibility": "private", "simpleName": "testFile1", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testFile1", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedInteger(byte[],int,int)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"int\" value to a byte array at a given offset. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param data\r\n * \t\ttarget byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @param value\r\n * \t\tvalue to write\r\n */\r\npublic static void writeSwappedInteger(byte[] data, int offset, int value) {\r\n    data[offset + 0] = ((byte) ((value >> 0) & 0xff));\r\n    data[offset + 1] = ((byte) ((value >> 8) & 0xff));\r\n    data[offset + 2] = ((byte) ((value >> 16) & 0xff));\r\n    data[offset + 3] = ((byte) ((value >> 24) & 0xff));\r\n}", "docComment": "Writes a \"int\" value to a byte array at a given offset. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param data\r\n\t\ttarget byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@param value\r\n\t\tvalue to write\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader", "labels": ["Structure"], "properties": {"docComment": "A Proxy stream which acts as expected, that is it passes the method \r\ncalls on to the proxied stream and doesn't change which methods are \r\nbeing called. \r\n<p>\r\nIt is an alternative base class to FilterReader\r\nto increase reusability, because FilterReader changes the \r\nmethods being called, such as read(char[]) to read(char[], int, int).\r\n\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@version $Id$\r\n", "simpleName": "ProxyReader", "qualifiedName": "org.apache.commons.io.input.ProxyReader", "kind": "abstract class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean accept(final java.io.File file, final java.lang.String name) {\r\n    if (this.fileFilters.size() == 0) {\r\n        return false;\r\n    }\r\n    for (java.util.Iterator iter = this.fileFilters.iterator(); iter.hasNext();) {\r\n        org.apache.commons.io.filefilter.IOFileFilter fileFilter = ((org.apache.commons.io.filefilter.IOFileFilter) (iter.next()));\r\n        if (!fileFilter.accept(file, name)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.CopyUtilsTest.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "wildcardMatch(java.lang.String,java.lang.String,boolean)", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "kind": "static method", "sourceText": "/**\r\n * Checks a filename to see if it matches the specified wildcard matcher.\r\n * <p>\r\n * The wildcard matcher uses the characters '?' and '*' to represent a\r\n * single or multiple wildcard characters.\r\n *\r\n * @param filename\r\n * \t\tthe filename to match on\r\n * @param wildcardMatcher\r\n * \t\tthe wildcard string to match against\r\n * @param system\r\n * \t\twhether to use the system (windows or unix)\r\n * @return true if the filename matches the wilcard string\r\n */\r\nprivate static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher, boolean system) {\r\n    if ((filename == null) && (wildcardMatcher == null)) {\r\n        return true;\r\n    }\r\n    if ((filename == null) || (wildcardMatcher == null)) {\r\n        return false;\r\n    }\r\n    if (system && (org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR == org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR)) {\r\n        filename = filename.toLowerCase();\r\n        wildcardMatcher = wildcardMatcher.toLowerCase();\r\n    }\r\n    java.lang.String[] wcs = org.apache.commons.io.FilenameUtils.splitOnTokens(wildcardMatcher);\r\n    boolean anyChars = false;\r\n    int textIdx = 0;\r\n    int wcsIdx = 0;\r\n    java.util.Stack backtrack = new java.util.Stack();\r\n    // loop around a backtrack stack, to handle complex * matching\r\n    do {\r\n        if (backtrack.size() > 0) {\r\n            int[] array = ((int[]) (backtrack.pop()));\r\n            wcsIdx = array[0];\r\n            textIdx = array[1];\r\n            anyChars = true;\r\n        }\r\n        // loop whilst tokens and text left to process\r\n        while (wcsIdx < wcs.length) {\r\n            if (wcs[wcsIdx].equals(\"?\")) {\r\n                // ? so move to next text char\r\n                textIdx++;\r\n                anyChars = false;\r\n            } else if (wcs[wcsIdx].equals(\"*\")) {\r\n                // set any chars status\r\n                anyChars = true;\r\n                if (wcsIdx == (wcs.length - 1)) {\r\n                    textIdx = filename.length();\r\n                }\r\n            } else {\r\n                // matching text token\r\n                if (anyChars) {\r\n                    // any chars then try to locate text token\r\n                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\r\n                    if (textIdx == (-1)) {\r\n                        // token not found\r\n                        break;\r\n                    }\r\n                    int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\r\n                    if (repeat >= 0) {\r\n                        backtrack.push(new int[]{ wcsIdx, repeat });\r\n                    }\r\n                } else // matching from current position\r\n                if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\r\n                    // couldnt match token\r\n                    break;\r\n                }\r\n                // matched text token, move text index to end of matched token\r\n                textIdx += wcs[wcsIdx].length();\r\n                anyChars = false;\r\n            }\r\n            wcsIdx++;\r\n        } \r\n        // full match\r\n        if ((wcsIdx == wcs.length) && (textIdx == filename.length())) {\r\n            return true;\r\n        }\r\n    } while (backtrack.size() > 0 );\r\n    return false;\r\n}", "docComment": "Checks a filename to see if it matches the specified wildcard matcher.\r\n<p>\r\nThe wildcard matcher uses the characters '?' and '*' to represent a\r\nsingle or multiple wildcard characters.\r\n\r\n@param filename\r\n\t\tthe filename to match on\r\n@param wildcardMatcher\r\n\t\tthe wildcard string to match against\r\n@param system\r\n\t\twhether to use the system (windows or unix)\r\n@return true if the filename matches the wilcard string\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.<clinit>()", "labels": ["Script"], "properties": {"visibility": "default", "simpleName": "<clinit>()", "qualifiedName": "org.apache.commons.io.FileSystemUtils.<clinit>()", "kind": "class initializer", "sourceText": "static {\r\n    int os = org.apache.commons.io.FileSystemUtils.OTHER;\r\n    try {\r\n        java.lang.String osName = java.lang.System.getProperty(\"os.name\");\r\n        if (osName == null) {\r\n            throw new java.io.IOException(\"os.name not found\");\r\n        }\r\n        osName = osName.toLowerCase();\r\n        // match\r\n        if (osName.indexOf(\"windows\") != (-1)) {\r\n            os = org.apache.commons.io.FileSystemUtils.WINDOWS;\r\n        } else if ((((((((((((osName.indexOf(\"linux\") != (-1)) || (osName.indexOf(\"sun os\") != (-1))) || (osName.indexOf(\"sunos\") != (-1))) || (osName.indexOf(\"solaris\") != (-1))) || (osName.indexOf(\"mpe/ix\") != (-1))) || (osName.indexOf(\"hp-ux\") != (-1))) || (osName.indexOf(\"aix\") != (-1))) || (osName.indexOf(\"freebsd\") != (-1))) || (osName.indexOf(\"irix\") != (-1))) || (osName.indexOf(\"digital unix\") != (-1))) || (osName.indexOf(\"unix\") != (-1))) || (osName.indexOf(\"mac os x\") != (-1))) {\r\n            os = org.apache.commons.io.FileSystemUtils.UNIX;\r\n        } else {\r\n            os = org.apache.commons.io.FileSystemUtils.OTHER;\r\n        }\r\n    } catch (java.lang.Exception ex) {\r\n        os = org.apache.commons.io.FileSystemUtils.INIT_PROBLEM;\r\n    }\r\n    org.apache.commons.io.FileSystemUtils.OS = os;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.closed", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * True when close() has been called successfully.\r\n */\r\nprivate boolean closed = false;", "visibility": "private", "simpleName": "closed", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.closed", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "srcDir", "qualifiedName": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedFloat(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"float\" value from an InputStream. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param input\r\n * \t\tsource InputStream\r\n * @return the value just read\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static float readSwappedFloat(java.io.InputStream input) throws java.io.IOException {\r\n    return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(input));\r\n}", "docComment": "Reads a \"float\" value from an InputStream. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param input\r\n\t\tsource InputStream\r\n@return the value just read\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "directoryFileFilter()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "kind": "static method", "sourceText": "/**\r\n * Returns a filter that checks if the file is a directory.\r\n *\r\n * @return directory file filter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter() {\r\n    return org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE;\r\n}", "docComment": "Returns a filter that checks if the file is a directory.\r\n\r\n@return directory file filter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).3", "labels": ["Variable"], "properties": {"simpleName": "lineEnding", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).2", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "lines", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.IOUtilsWriteTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapInteger(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "swapInteger(int)", "qualifiedName": "org.apache.commons.io.EndianUtils.swapInteger(int)", "kind": "static method", "sourceText": "/**\r\n * Converts a \"int\" value between endian systems.\r\n *\r\n * @param value\r\n * \t\tvalue to convert\r\n * @return the converted value\r\n */\r\npublic static int swapInteger(int value) {\r\n    return (((((value >> 0) & 0xff) << 24) + (((value >> 8) & 0xff) << 16)) + (((value >> 16) & 0xff) << 8)) + (((value >> 24) & 0xff) << 0);\r\n}", "docComment": "Converts a \"int\" value between endian systems.\r\n\r\n@param value\r\n\t\tvalue to convert\r\n@return the converted value\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testInputStreamToCharArrayWithEncoding()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "kind": "method", "sourceText": "public void testInputStreamToCharArrayWithEncoding() throws java.lang.Exception {\r\n    java.io.FileInputStream fin = new java.io.FileInputStream(this.m_testFile);\r\n    try {\r\n        char[] out = org.apache.commons.io.IOUtils.toCharArray(fin, \"UTF-8\");\r\n        this.assertNotNull(out);\r\n        this.assertTrue(\"Not all chars were read\", fin.available() == 0);\r\n        this.assertTrue(((\"Wrong output size: out.length=\" + out.length) + \"!=\") + org.apache.commons.io.IOUtilsTestCase.FILE_SIZE, out.length == org.apache.commons.io.IOUtilsTestCase.FILE_SIZE);\r\n        this.assertEqualContent(out, this.m_testFile);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "static method", "sourceText": "/**\r\n * Returns an IOFileFilter that ignores CVS directories. You may optionally\r\n * pass in an existing IOFileFilter in which case it is extended to exclude\r\n * CVS directories.\r\n *\r\n * @param filter\r\n * \t\tIOFileFilter to wrap, null if a new IOFileFilter\r\n * \t\tshould be created\r\n * @return the requested (combined) filter\r\n * @since 1.1 (method existed but had bug in 1.0)\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\r\n    if (org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter == null) {\r\n        org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter(), org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(\"CVS\")));\r\n    }\r\n    if (filter == null) {\r\n        return org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter;\r\n    } else {\r\n        return org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(filter, org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter);\r\n    }\r\n}", "docComment": "Returns an IOFileFilter that ignores CVS directories. You may optionally\r\npass in an existing IOFileFilter in which case it is extended to exclude\r\nCVS directories.\r\n\r\n@param filter\r\n\t\tIOFileFilter to wrap, null if a new IOFileFilter\r\n\t\tshould be created\r\n@return the requested (combined) filter\r\n@since 1.1 (method existed but had bug in 1.0)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).2", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.close()", "kind": "method", "sourceText": "/**\r\n * Closes the file writer.\r\n *\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n */\r\npublic void close() throws java.io.IOException {\r\n    try {\r\n        this.out.close();\r\n    } finally {\r\n        this.lockFile.delete();\r\n    }\r\n}", "docComment": "Closes the file writer.\r\n\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "protected", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter()", "kind": "constructor", "sourceText": "/**\r\n * Restrictive consructor.\r\n */\r\nprotected TrueFileFilter() {\r\n    super();\r\n}", "docComment": "Restrictive consructor.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).3", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "public boolean accept(java.io.File file, java.lang.String str) {\r\n    this.setInvoked(true);\r\n    return super.accept(file, str);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "st", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "destination", "qualifiedName": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "assertMatch(java.lang.String,java.lang.String,boolean)", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "kind": "method", "sourceText": "private void assertMatch(java.lang.String text, java.lang.String wildcard, boolean expected) {\r\n    this.assertEquals((text + \" \") + wildcard, expected, org.apache.commons.io.FilenameUtils.wildcardMatch(text, wildcard));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "labels": ["Variable"], "properties": {"sourceText": "private org.apache.commons.io.output.DemuxOutputStream m_demux;", "visibility": "private", "simpleName": "m_demux", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String TEST_FILE_NAME_PREFIX = \"TestFile\";", "visibility": "private", "simpleName": "TEST_FILE_NAME_PREFIX", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String,boolean)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter.\r\n *\r\n * @param fileName\r\n * \t\tfile to write to, not null\r\n * @param append\r\n * \t\ttrue if content should be appended, false to overwrite\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.lang.String fileName, boolean append) throws java.io.IOException {\r\n    this(fileName, append, null);\r\n}", "docComment": "Constructs a LockableFileWriter.\r\n\r\n@param fileName\r\n\t\tfile to write to, not null\r\n@param append\r\n\t\ttrue if content should be appended, false to overwrite\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.FileCleaner()", "kind": "constructor", "sourceText": "FileCleaner() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readLine()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readLine()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readLine()", "kind": "method", "sourceText": "/**\r\n * Not currently supported.\r\n *\r\n * @see java.io.DataInput#readLine()\r\n */\r\npublic java.lang.String readLine() throws java.io.IOException, java.io.EOFException {\r\n    throw new java.lang.UnsupportedOperationException(\"Operation not supported: readLine()\");\r\n}", "docComment": "Not currently supported.\r\n\r\n@see java.io.DataInput#readLine()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#setUp()\r\n */\r\nprotected void setUp() throws java.lang.Exception {\r\n    java.io.File dir = this.getLocalTestDirectory();\r\n    if (dir.exists()) {\r\n        org.apache.commons.io.FileUtils.deleteDirectory(dir);\r\n    }\r\n    dir.mkdirs();\r\n    java.io.File file = new java.io.File(dir, \"dummy-build.xml\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    file = new java.io.File(dir, \"README\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    dir = new java.io.File(dir, \"subdir1\");\r\n    dir.mkdirs();\r\n    file = new java.io.File(dir, \"dummy-build.xml\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    file = new java.io.File(dir, \"dummy-readme.txt\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    dir = new java.io.File(dir, \"subsubdir1\");\r\n    dir.mkdirs();\r\n    file = new java.io.File(dir, \"dummy-file.txt\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    file = new java.io.File(dir, \"dummy-index.html\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    dir = dir.getParentFile();\r\n    dir = new java.io.File(dir, \"CVS\");\r\n    dir.mkdirs();\r\n    file = new java.io.File(dir, \"Entries\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    file = new java.io.File(dir, \"Repository\");\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n}", "docComment": "\r\n@see junit.framework.TestCase#setUp()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "run()", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "kind": "method", "sourceText": "public void run() {\r\n    this.m_demux.bindStream(this.m_output);\r\n    for (int i = 0; i < this.m_data.length; i++) {\r\n        try {\r\n            // System.out.println( \"Writing: \" + (char)m_data[ i ] );\r\n            this.m_demux.write(this.m_data[i]);\r\n            int sleepTime = java.lang.Math.abs(org.apache.commons.io.DemuxTestCase.c_random.nextInt() % 10);\r\n            java.lang.Thread.sleep(sleepTime);\r\n        } catch (java.lang.Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],int,int)", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n * Writes <code>len</code> bytes from the specified byte array starting at\r\n * offset <code>off</code> to this output stream.\r\n *\r\n * @param b\r\n * \t\tThe byte array from which the data will be written.\r\n * @param off\r\n * \t\tThe start offset in the byte array.\r\n * @param len\r\n * \t\tThe number of bytes to write.\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\npublic void write(byte[] b, int off, int len) throws java.io.IOException {\r\n    this.checkThreshold(len);\r\n    this.getStream().write(b, off, len);\r\n    this.written += len;\r\n}", "docComment": "Writes <code>len</code> bytes from the specified byte array starting at\r\noffset <code>off</code> to this output stream.\r\n\r\n@param b\r\n\t\tThe byte array from which the data will be written.\r\n@param off\r\n\t\tThe start offset in the byte array.\r\n@param len\r\n\t\tThe number of bytes to write.\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "labels": ["Variable"], "properties": {"sourceText": "private byte[] inData = this.generateTestData(org.apache.commons.io.IOUtilsWriteTestCase.FILE_SIZE);", "visibility": "private", "simpleName": "inData", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.IOUtilsCopyTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).1", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.EOL", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The line-separator (initializes to \"line.separator\" system property.\r\n */\r\npublic static final java.lang.String EOL = java.lang.System.getProperty(\"line.separator\");", "visibility": "public", "simpleName": "EOL", "qualifiedName": "org.apache.commons.io.HexDump.EOL", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "basePath", "qualifiedName": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter", "labels": ["Structure"], "properties": {"docComment": "FileWriter that will create and honor lock files to allow simple\r\ncross thread file lock handling.\r\n<p>\r\nThis class provides a simple alternative to <code>FileWriter</code>\r\nthat will use a lock file to prevent duplicate writes.\r\n<p>\r\nBy default, the file will be overwritten, but this may be changed to append.\r\nThe lock directory may be specified, but defaults to the system property\r\n<code>java.io.tmpdir</code>.\r\nThe encoding may also be specified, and defaults to the platform default.\r\n\r\n@author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\r\n@author <a href=\"mailto:ms@collab.net\">Michael Salmon</a>\r\n@author <a href=\"mailto:jon@collab.net\">Jon S. Stevens</a>\r\n@author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\r\n@author Stephen Colebourne\r\n@author Andy Lehane\r\n@version $Id$\r\n", "simpleName": "LockableFileWriter", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.tearDown()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#tearDown()\r\n */\r\nprotected void tearDown() throws java.lang.Exception {\r\n    org.apache.commons.io.FileUtils.deleteDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n}", "docComment": "\r\n@see junit.framework.TestCase#tearDown()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.EndianUtilsTest(java.lang.String)", "kind": "constructor", "sourceText": "public EndianUtilsTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[])", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(byte[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[])\r\n */\r\npublic void write(byte[] b) throws java.io.IOException {\r\n    // to /dev/null\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[])\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite", "labels": ["Structure"], "properties": {"docComment": "A basic test suite that tests all the IO component.\r\n\r\n@author Stephen Colebourne\r\n", "simpleName": "AllIOTestSuite", "qualifiedName": "org.apache.commons.io.AllIOTestSuite", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "cleanDirectoryOnExit(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Clean a directory without deleting it.\r\n *\r\n * @param directory\r\n * \t\tdirectory to clean.\r\n * @throws IOException\r\n * \t\tin case cleaning is unsuccessful\r\n */\r\nprivate static void cleanDirectoryOnExit(java.io.File directory) throws java.io.IOException {\r\n    if (!directory.exists()) {\r\n        java.lang.String message = directory + \" does not exist\";\r\n        throw new java.lang.IllegalArgumentException(message);\r\n    }\r\n    if (!directory.isDirectory()) {\r\n        java.lang.String message = directory + \" is not a directory\";\r\n        throw new java.lang.IllegalArgumentException(message);\r\n    }\r\n    java.io.File[] files = directory.listFiles();\r\n    if (files == null) {\r\n        // null if security restricted\r\n        throw new java.io.IOException(\"Failed to list contents of \" + directory);\r\n    }\r\n    java.io.IOException exception = null;\r\n    for (int i = 0; i < files.length; i++) {\r\n        java.io.File file = files[i];\r\n        try {\r\n            org.apache.commons.io.FileUtils.forceDeleteOnExit(file);\r\n        } catch (java.io.IOException ioe) {\r\n            exception = ioe;\r\n        }\r\n    }\r\n    if (null != exception) {\r\n        throw exception;\r\n    }\r\n}", "docComment": "Clean a directory without deleting it.\r\n\r\n@param directory\r\n\t\tdirectory to clean.\r\n@throws IOException\r\n\t\tin case cleaning is unsuccessful\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testInputStreamToCharArray()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "kind": "method", "sourceText": "public void testInputStreamToCharArray() throws java.lang.Exception {\r\n    java.io.FileInputStream fin = new java.io.FileInputStream(this.m_testFile);\r\n    try {\r\n        char[] out = org.apache.commons.io.IOUtils.toCharArray(fin);\r\n        this.assertNotNull(out);\r\n        this.assertTrue(\"Not all chars were read\", fin.available() == 0);\r\n        this.assertTrue(((\"Wrong output size: out.length=\" + out.length) + \"!=\") + org.apache.commons.io.IOUtilsTestCase.FILE_SIZE, out.length == org.apache.commons.io.IOUtilsTestCase.FILE_SIZE);\r\n        this.assertEqualContent(out, this.m_testFile);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testNormalize()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNormalize()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testNormalize()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testNormalize() throws java.lang.Exception {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(null));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\":\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"1:\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"1:\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"1:a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"\\\\\\\\\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"\\\\\\\\a\"));\r\n    this.assertEquals((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalize(\"a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalize(\"\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalize(\"C:\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((((((\"\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalize(\"\\\\\\\\server\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalize(\"~\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalize(\"~user\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"a/b/../c\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.normalize(\"a/b/../../c\"));\r\n    this.assertEquals(\"c\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"a/b/../../c/\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"a/b/../../../c\"));\r\n    this.assertEquals(\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"a/b/..\"));\r\n    this.assertEquals(\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"a/b/../\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalize(\"a/b/../..\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalize(\"a/b/../../\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"a/b/../../..\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"a/b/../c/../d\"));\r\n    this.assertEquals(((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"a/b/../c/../d/\"));\r\n    this.assertEquals((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"a/b//d\"));\r\n    this.assertEquals(((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"a/b/././.\"));\r\n    this.assertEquals(((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"a/b/./././\"));\r\n    this.assertEquals(\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"./a/\"));\r\n    this.assertEquals(\"a\", org.apache.commons.io.FilenameUtils.normalize(\"./a\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalize(\"./\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalize(\".\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"..\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalize(\"\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"/a\"));\r\n    this.assertEquals((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"/a/\"));\r\n    this.assertEquals(((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"/a/b/../c\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"/a/b/../../../c\"));\r\n    this.assertEquals((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"/a/b/..\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalize(\"/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"/a/b/../../..\"));\r\n    this.assertEquals(((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"/a/b/../c/../d\"));\r\n    this.assertEquals(((((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"/a/b//d\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"/a/b/././.\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"/./a\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalize(\"/./\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalize(\"/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"/..\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalize(\"/\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"~/a\"));\r\n    this.assertEquals(((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~/a/\"));\r\n    this.assertEquals((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/../c\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/../../../c\"));\r\n    this.assertEquals(((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/..\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/../../..\"));\r\n    this.assertEquals((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/../c/../d\"));\r\n    this.assertEquals((((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"~/a/b//d\"));\r\n    this.assertEquals(((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~/a/b/././.\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"~/./a\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~/./\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~/..\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~/\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"~user/a\"));\r\n    this.assertEquals(((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~user/a/\"));\r\n    this.assertEquals((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/../c\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/../../../c\"));\r\n    this.assertEquals(((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/..\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/../../..\"));\r\n    this.assertEquals((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/../c/../d\"));\r\n    this.assertEquals((((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b//d\"));\r\n    this.assertEquals(((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~user/a/b/././.\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"~user/./a\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"~user/./\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"~user/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~user/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"~user/..\"));\r\n    this.assertEquals(\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~user/\"));\r\n    this.assertEquals(\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"~user\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"C:/a\"));\r\n    this.assertEquals(((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"C:/a/\"));\r\n    this.assertEquals((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/../c\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/../../../c\"));\r\n    this.assertEquals(((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/..\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/../../..\"));\r\n    this.assertEquals((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/../c/../d\"));\r\n    this.assertEquals((((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b//d\"));\r\n    this.assertEquals(((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"C:/a/b/././.\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"C:/./a\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:/./\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:/..\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:/\"));\r\n    this.assertEquals(\"C:\" + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"C:a\"));\r\n    this.assertEquals((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"C:a/\"));\r\n    this.assertEquals(((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/../c\"));\r\n    this.assertEquals(\"C:\" + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/../../../c\"));\r\n    this.assertEquals((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/..\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/../../..\"));\r\n    this.assertEquals(((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/../c/../d\"));\r\n    this.assertEquals(((((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"C:a/b//d\"));\r\n    this.assertEquals((((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"C:a/b/././.\"));\r\n    this.assertEquals(\"C:\" + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"C:./a\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:./\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"C:..\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalize(\"C:\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"//server/a\"));\r\n    this.assertEquals(((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"//server/a/\"));\r\n    this.assertEquals((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/../c\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/../../../c\"));\r\n    this.assertEquals(((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/..\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/../../..\"));\r\n    this.assertEquals((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/../c/../d\"));\r\n    this.assertEquals((((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b//d\"));\r\n    this.assertEquals(((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalize(\"//server/a/b/././.\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalize(\"//server/./a\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"//server/./\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"//server/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"//server/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalize(\"//server/..\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalize(\"//server/\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "concat(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Concatenates a filename to a base path using normal command line style rules.\r\n * <p>\r\n * The effect is equivalent to resultant directory after changing\r\n * directory to the first argument, followed by changing directory to\r\n * the second argument.\r\n * <p>\r\n * The first argument is the base path, the second is the path to concatenate.\r\n * The returned path is always normalized via {@link #normalize(String)},\r\n * thus <code>..</code> is handled.\r\n * <p>\r\n * If <code>pathToAdd</code> is absolute (has an absolute prefix), then\r\n * it will be normalized and returned.\r\n * Otherwise, the paths will be joined, normalized and returned.\r\n * <p>\r\n * The output will be the same on both Unix and Windows except\r\n * for the separator character.\r\n * <pre>\r\n * /foo/ + bar          -->   /foo/bar\r\n * /foo + bar           -->   /foo/bar\r\n * /foo + /bar          -->   /bar\r\n * /foo + C:/bar        -->   C:/bar\r\n * /foo + C:bar         -->   C:bar (*)\r\n * /foo/a/ + ../bar     -->   foo/bar\r\n * /foo/ + ../../bar    -->   null\r\n * /foo/ + /bar         -->   /bar\r\n * /foo/.. + /bar       -->   /bar\r\n * /foo + bar/c.txt     -->   /foo/bar/c.txt\r\n * /foo/c.txt + bar     -->   /foo/c.txt/bar (!)\r\n * </pre>\r\n * (*) Note that the Windows relative drive prefix is unreliable when\r\n * used with this method.\r\n * (!) Note that the first parameter must be a path. If it ends with a name, then\r\n * the name will be built into the concatenated path. If this might be a problem,\r\n * use {@link #getFullPath(String)} on the base path argument.\r\n *\r\n * @param basePath\r\n * \t\tthe base path to attach to, always treated as a path\r\n * @param fullFilenameToAdd\r\n * \t\tthe filename (or path) to attach to the base\r\n * @return the concatenated path, or null if invalid\r\n */\r\npublic static java.lang.String concat(java.lang.String basePath, java.lang.String fullFilenameToAdd) {\r\n    int prefix = org.apache.commons.io.FilenameUtils.getPrefixLength(fullFilenameToAdd);\r\n    if (prefix < 0) {\r\n        return null;\r\n    }\r\n    if (prefix > 0) {\r\n        return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\r\n    }\r\n    if (basePath == null) {\r\n        return null;\r\n    }\r\n    int len = basePath.length();\r\n    if (len == 0) {\r\n        return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\r\n    }\r\n    char ch = basePath.charAt(len - 1);\r\n    if (org.apache.commons.io.FilenameUtils.isSeparator(ch)) {\r\n        return org.apache.commons.io.FilenameUtils.normalize(basePath + fullFilenameToAdd);\r\n    } else {\r\n        return org.apache.commons.io.FilenameUtils.normalize((basePath + '/') + fullFilenameToAdd);\r\n    }\r\n}", "docComment": "Concatenates a filename to a base path using normal command line style rules.\r\n<p>\r\nThe effect is equivalent to resultant directory after changing\r\ndirectory to the first argument, followed by changing directory to\r\nthe second argument.\r\n<p>\r\nThe first argument is the base path, the second is the path to concatenate.\r\nThe returned path is always normalized via {@link #normalize(String)},\r\nthus <code>..</code> is handled.\r\n<p>\r\nIf <code>pathToAdd</code> is absolute (has an absolute prefix), then\r\nit will be normalized and returned.\r\nOtherwise, the paths will be joined, normalized and returned.\r\n<p>\r\nThe output will be the same on both Unix and Windows except\r\nfor the separator character.\r\n<pre>\r\n/foo/ + bar          -->   /foo/bar\r\n/foo + bar           -->   /foo/bar\r\n/foo + /bar          -->   /bar\r\n/foo + C:/bar        -->   C:/bar\r\n/foo + C:bar         -->   C:bar (*)\r\n/foo/a/ + ../bar     -->   foo/bar\r\n/foo/ + ../../bar    -->   null\r\n/foo/ + /bar         -->   /bar\r\n/foo/.. + /bar       -->   /bar\r\n/foo + bar/c.txt     -->   /foo/bar/c.txt\r\n/foo/c.txt + bar     -->   /foo/c.txt/bar (!)\r\n</pre>\r\n(*) Note that the Windows relative drive prefix is unreliable when\r\nused with this method.\r\n(!) Note that the first parameter must be a path. If it ends with a name, then\r\nthe name will be built into the concatenated path. If this might be a problem,\r\nuse {@link #getFullPath(String)} on the base path argument.\r\n\r\n@param basePath\r\n\t\tthe base path to attach to, always treated as a path\r\n@param fullFilenameToAdd\r\n\t\tthe filename (or path) to attach to the base\r\n@return the concatenated path, or null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "openProcessStream(java.lang.String[])", "qualifiedName": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "kind": "method", "sourceText": "/**\r\n * Opens the stream to be operating system.\r\n *\r\n * @param params\r\n * \t\tthe command parameters\r\n * @return a reader\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\njava.io.BufferedReader openProcessStream(java.lang.String[] params) throws java.io.IOException {\r\n    java.lang.Process proc = java.lang.Runtime.getRuntime().exec(params);\r\n    return new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\r\n}", "docComment": "Opens the stream to be operating system.\r\n\r\n@param params\r\n\t\tthe command parameters\r\n@return a reader\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "contentEquals(java.io.File,java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "kind": "static method", "sourceText": "/**\r\n * <p>Compare the contents of two files to determine if they are equal or\r\n * not.</p>\r\n * <p>Code origin: Avalon</p>\r\n *\r\n * @param file1\r\n * \t\tthe first file\r\n * @param file2\r\n * \t\tthe second file\r\n * @return true if the content of the files are equal or they both don't\r\nexist, false otherwise\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic static boolean contentEquals(java.io.File file1, java.io.File file2) throws java.io.IOException {\r\n    boolean file1Exists = file1.exists();\r\n    if (file1Exists != file2.exists()) {\r\n        return false;\r\n    }\r\n    if (!file1Exists) {\r\n        // two not existing files are equal\r\n        return true;\r\n    }\r\n    if (file1.isDirectory() || file2.isDirectory()) {\r\n        // don't want to compare directory contents\r\n        throw new java.io.IOException(\"Can't compare directories, only files\");\r\n    }\r\n    java.io.InputStream input1 = null;\r\n    java.io.InputStream input2 = null;\r\n    try {\r\n        input1 = new java.io.FileInputStream(file1);\r\n        input2 = new java.io.FileInputStream(file2);\r\n        return org.apache.commons.io.IOUtils.contentEquals(input1, input2);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(input1);\r\n        org.apache.commons.io.IOUtils.closeQuietly(input2);\r\n    }\r\n}", "docComment": "<p>Compare the contents of two files to determine if they are equal or\r\nnot.</p>\r\n<p>Code origin: Avalon</p>\r\n\r\n@param file1\r\n\t\tthe first file\r\n@param file2\r\n\t\tthe second file\r\n@return true if the content of the files are equal or they both don't\r\nexist, false otherwise\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.Reader).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toString(java.io.Reader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getExtension(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Gets the extension of a filename.\r\n * <p>\r\n * This method returns the textual part of the filename after the last dot.\r\n * There must be no directory separator after the dot.\r\n * <pre>\r\n * foo.txt      --> \"txt\"\r\n * a/b/c.jpg    --> \"jpg\"\r\n * a/b.txt/c    --> \"\"\r\n * a/b/c        --> \"\"\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to retrieve the extension of.\r\n * @return the extension of the file or an empty string if none exists.\r\n */\r\npublic static java.lang.String getExtension(java.lang.String filename) {\r\n    if (filename == null) {\r\n        return null;\r\n    }\r\n    int index = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\r\n    if (index == (-1)) {\r\n        return \"\";\r\n    } else {\r\n        return filename.substring(index + 1);\r\n    }\r\n}", "docComment": "Gets the extension of a filename.\r\n<p>\r\nThis method returns the textual part of the filename after the last dot.\r\nThere must be no directory separator after the dot.\r\n<pre>\r\nfoo.txt      --> \"txt\"\r\na/b/c.jpg    --> \"jpg\"\r\na/b.txt/c    --> \"\"\r\na/b/c        --> \"\"\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to retrieve the extension of.\r\n@return the extension of the file or an empty string if none exists.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "kind": "method", "sourceText": "public void assertFiltering(final int testNumber, final org.apache.commons.io.filefilter.IOFileFilter filter, final java.io.File file, final boolean expected) throws java.lang.Exception {\r\n    // Note. This only tests the (File, String) version if the parent of\r\n    // the File passed in is not null\r\n    this.assertTrue(((((((\"test \" + testNumber) + \" Filter(File) \") + filter.getClass().getName()) + \" not \") + expected) + \" for \") + file, filter.accept(file) == expected);\r\n    if ((file != null) && (file.getParentFile() != null)) {\r\n        this.assertTrue(((((((\"test \" + testNumber) + \" Filter(File, String) \") + filter.getClass().getName()) + \" not \") + expected) + \" for \") + file, filter.accept(file.getParentFile(), file.getName()) == expected);\r\n    } else if (file == null) {\r\n        this.assertTrue((((((\"test \" + testNumber) + \" Filter(File, String) \") + filter.getClass().getName()) + \" not \") + expected) + \" for null\", filter.accept(file) == expected);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "kind": "static method", "sourceText": "/**\r\n * <p>Finds files within a given directory (and optionally its\r\n * subdirectories). All files found are filtered by an IOFileFilter.\r\n * </p>\r\n * <p>If your search should recurse into subdirectories you can pass in\r\n * an IOFileFilter for directories. You don't need to bind a\r\n * DirectoryFileFilter (via logical AND) to this filter. This method does\r\n * that for you.\r\n * </p>\r\n * <p>An example: If you want to search through all directories called\r\n * \"temp\" you pass in <code>FileFilterUtils.NameFileFilter(\"temp\")</code>\r\n * </p>\r\n * <p>Another common usage of this method is find files in a directory\r\n * tree but ignoring the directories generated CVS. You can simply pass\r\n * in <code>FileFilterUtils.makeCVSAware(null)</code>.\r\n * </p>\r\n *\r\n * @param directory\r\n * \t\tthe directory to search in\r\n * @param fileFilter\r\n * \t\tfilter to apply when finding files.\r\n * @param dirFilter\r\n * \t\toptional filter to apply when finding subdirectories.\r\n * \t\tIf this parameter is null, subdirectories will not be included in the\r\n * \t\tsearch. Use TrueFileFilter.INSTANCE to match all directories.\r\n * @return an collection of java.io.File with the matching files\r\n * @see org.apache.commons.io.filefilter.FileFilterUtils\r\n * @see org.apache.commons.io.filefilter.NameFileFilter\r\n */\r\npublic static java.util.Collection listFiles(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\r\n    if (!directory.isDirectory()) {\r\n        throw new java.lang.IllegalArgumentException(\"Parameter 'directory' is not a directory\");\r\n    }\r\n    if (fileFilter == null) {\r\n        throw new java.lang.NullPointerException(\"Parameter 'fileFilter' is null\");\r\n    }\r\n    // Setup effective file filter\r\n    org.apache.commons.io.filefilter.IOFileFilter effFileFilter = org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(fileFilter, org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE));\r\n    // Setup effective directory filter\r\n    org.apache.commons.io.filefilter.IOFileFilter effDirFilter;\r\n    if (dirFilter == null) {\r\n        effDirFilter = org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE;\r\n    } else {\r\n        effDirFilter = org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(dirFilter, org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);\r\n    }\r\n    // Find files\r\n    java.util.Collection files = new java.util.LinkedList();\r\n    org.apache.commons.io.FileUtils.innerListFiles(files, directory, org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(effFileFilter, effDirFilter));\r\n    return files;\r\n}", "docComment": "<p>Finds files within a given directory (and optionally its\r\nsubdirectories). All files found are filtered by an IOFileFilter.\r\n</p>\r\n<p>If your search should recurse into subdirectories you can pass in\r\nan IOFileFilter for directories. You don't need to bind a\r\nDirectoryFileFilter (via logical AND) to this filter. This method does\r\nthat for you.\r\n</p>\r\n<p>An example: If you want to search through all directories called\r\n\"temp\" you pass in <code>FileFilterUtils.NameFileFilter(\"temp\")</code>\r\n</p>\r\n<p>Another common usage of this method is find files in a directory\r\ntree but ignoring the directories generated CVS. You can simply pass\r\nin <code>FileFilterUtils.makeCVSAware(null)</code>.\r\n</p>\r\n\r\n@param directory\r\n\t\tthe directory to search in\r\n@param fileFilter\r\n\t\tfilter to apply when finding files.\r\n@param dirFilter\r\n\t\toptional filter to apply when finding subdirectories.\r\n\t\tIf this parameter is null, subdirectories will not be included in the\r\n\t\tsearch. Use TrueFileFilter.INSTANCE to match all directories.\r\n@return an collection of java.io.File with the matching files\r\n@see org.apache.commons.io.filefilter.FileFilterUtils\r\n@see org.apache.commons.io.filefilter.NameFileFilter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testStringToWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "kind": "method", "sourceText": "public void testStringToWriter() throws java.lang.Exception {\r\n    java.io.File destination = this.newFile(\"copy6.txt\");\r\n    java.io.FileReader fin = new java.io.FileReader(this.m_testFile);\r\n    java.lang.String str;\r\n    try {\r\n        // Create our String. Rely on testReaderToString() to make sure this is valid.\r\n        str = org.apache.commons.io.IOUtils.toString(fin);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n    java.io.FileWriter fout = new java.io.FileWriter(destination);\r\n    try {\r\n        org.apache.commons.io.CopyUtils.copy(str, fout);\r\n        fout.flush();\r\n        this.checkFile(destination, this.m_testFile);\r\n        this.checkWrite(fout);\r\n    } finally {\r\n        fout.close();\r\n    }\r\n    this.deleteFile(destination);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).0", "labels": ["Variable"], "properties": {"simpleName": "testNumber", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "AndFileFilterTestCase", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(String)\r\n */\r\npublic void write(java.lang.String str) throws java.io.IOException {\r\n    this.out.write(str);\r\n}", "docComment": "\r\n@see java.io.Writer#write(String)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream(int).0", "labels": ["Variable"], "properties": {"simpleName": "threshold", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.count", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The count of bytes that have passed.\r\n */\r\nprivate int count;", "visibility": "private", "simpleName": "count", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.count", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.read(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.read(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "labels": ["Variable"], "properties": {"simpleName": "fileFilter", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(final java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.filefilter.OrFileFilterTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isFileNewer(java.io.File,java.util.Date)", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "kind": "static method", "sourceText": "/**\r\n * Tests if the specified <code>File</code> is newer than the specified\r\n * <code>Date</code>.\r\n *\r\n * @param file\r\n * \t\tthe <code>File</code> of which the modification date must be\r\n * \t\tcompared.\r\n * @param date\r\n * \t\tthe date reference\r\n * @return true if the <code>File</code> exists and has been modified after\r\nthe given <code>Date</code>.\r\n */\r\npublic static boolean isFileNewer(java.io.File file, java.util.Date date) {\r\n    if (date == null) {\r\n        throw new java.lang.IllegalArgumentException(\"No specified date\");\r\n    }\r\n    return org.apache.commons.io.FileUtils.isFileNewer(file, date.getTime());\r\n}", "docComment": "Tests if the specified <code>File</code> is newer than the specified\r\n<code>Date</code>.\r\n\r\n@param file\r\n\t\tthe <code>File</code> of which the modification date must be\r\n\t\tcompared.\r\n@param date\r\n\t\tthe date reference\r\n@return true if the <code>File</code> exists and has been modified after\r\nthe given <code>Date</code>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()", "kind": "constructor", "sourceText": "TesterFalseFileFilter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter", "labels": ["Structure"], "properties": {"docComment": "A file filter that always returns false.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n", "simpleName": "FalseFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "labels": ["Structure"], "properties": {"docComment": "Test cases for FileUtils.cleanDirectory() method.\r\n\r\n@version $Id$\r\n@author Chris Eldredge\r\n", "simpleName": "FileUtilsCleanDirectoryTestCase", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toByteArray(java.io.Reader,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>Reader</code> as a <code>byte[]</code>\r\n * using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @return the requested byte array\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static byte[] toByteArray(java.io.Reader input, java.lang.String encoding) throws java.io.IOException {\r\n    org.apache.commons.io.output.ByteArrayOutputStream output = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.IOUtils.copy(input, output, encoding);\r\n    return output.toByteArray();\r\n}", "docComment": "Get the contents of a <code>Reader</code> as a <code>byte[]</code>\r\nusing the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@return the requested byte array\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "labels": ["Variable"], "properties": {"sourceText": "private int filledBufferSum;", "visibility": "private", "simpleName": "filledBufferSum", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "checkWrite(java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "kind": "method", "sourceText": "protected void checkWrite(java.io.OutputStream output) throws java.lang.Exception {\r\n    try {\r\n        new java.io.PrintStream(output).write(0);\r\n    } catch (java.lang.Throwable t) {\r\n        throw new junit.framework.AssertionFailedError((\"The copy() method closed the stream \" + \"when it shouldn't have. \") + t.getMessage());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream(int).0", "labels": ["Variable"], "properties": {"simpleName": "size", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "str", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedShort(java.io.OutputStream,short)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"short\" value to an OutputStream. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param output\r\n * \t\ttarget OutputStream\r\n * @param value\r\n * \t\tvalue to write\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static void writeSwappedShort(java.io.OutputStream output, short value) throws java.io.IOException {\r\n    output.write(((byte) ((value >> 0) & 0xff)));\r\n    output.write(((byte) ((value >> 8) & 0xff)));\r\n}", "docComment": "Writes a \"short\" value to an OutputStream. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param output\r\n\t\ttarget OutputStream\r\n@param value\r\n\t\tvalue to write\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename matches one of the wildcards.\r\n *\r\n * @param file\r\n * \t\tthe file to check\r\n * @return true if the filename matches one of the wildcards\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    if (file.isDirectory()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < this.wildcards.length; i++) {\r\n        if (org.apache.commons.io.FilenameUtils.wildcardMatch(file.getName(), this.wildcards[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename matches one of the wildcards.\r\n\r\n@param file\r\n\t\tthe file to check\r\n@return true if the filename matches one of the wildcards\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "labels": ["Variable"], "properties": {"sourceText": "private static int testFile2Size;", "visibility": "private", "simpleName": "testFile2Size", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.testDir", "labels": ["Variable"], "properties": {"sourceText": "private static java.io.File testDir;", "visibility": "private", "simpleName": "testDir", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.testDir", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getBuffer(int)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "kind": "method", "sourceText": "private byte[] getBuffer(int index) {\r\n    return ((byte[]) (this.buffers.get(index)));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.getCount()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getCount()", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.getCount()", "kind": "method", "sourceText": "/**\r\n * The number of bytes that have passed through this stream.\r\n *\r\n * @return the number of bytes accumulated\r\n */\r\npublic int getCount() {\r\n    return this.count;\r\n}", "docComment": "The number of bytes that have passed through this stream.\r\n\r\n@return the number of bytes accumulated\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetName()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetName()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetName()", "kind": "method", "sourceText": "public void testGetName() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getName(null));\r\n    this.assertEquals(\"noseperator.inthispath\", org.apache.commons.io.FilenameUtils.getName(\"noseperator.inthispath\"));\r\n    this.assertEquals(\"c.txt\", org.apache.commons.io.FilenameUtils.getName(\"a/b/c.txt\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.getName(\"a/b/c\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getName(\"a/b/c/\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.getName(\"a\\\\b\\\\c\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.String,int,int)", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(String, int, int)\r\n */\r\npublic void write(java.lang.String str, int st, int end) throws java.io.IOException {\r\n    this.out.write(str, st, end);\r\n}", "docComment": "\r\n@see java.io.Writer#write(String, int, int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input", "labels": ["Container"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.input", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetPrefixLength()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testGetPrefixLength() {\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.getPrefixLength(null));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.getPrefixLength(\":\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"1:\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"1:\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"1:a\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"\\\\\\\\\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"\\\\\\\\a\"));\r\n    this.assertEquals(0, org.apache.commons.io.FilenameUtils.getPrefixLength(\"\"));\r\n    this.assertEquals(1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"\\\\\"));\r\n    this.assertEquals(2, org.apache.commons.io.FilenameUtils.getPrefixLength(\"C:\"));\r\n    this.assertEquals(3, org.apache.commons.io.FilenameUtils.getPrefixLength(\"C:\\\\\"));\r\n    this.assertEquals(9, org.apache.commons.io.FilenameUtils.getPrefixLength(\"//server/\"));\r\n    this.assertEquals(2, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~\"));\r\n    this.assertEquals(2, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~/\"));\r\n    this.assertEquals(6, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~user\"));\r\n    this.assertEquals(6, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~user/\"));\r\n    this.assertEquals(0, org.apache.commons.io.FilenameUtils.getPrefixLength(\"a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(2, org.apache.commons.io.FilenameUtils.getPrefixLength(\"C:a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(3, org.apache.commons.io.FilenameUtils.getPrefixLength(\"C:\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(9, org.apache.commons.io.FilenameUtils.getPrefixLength(\"\\\\\\\\server\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(0, org.apache.commons.io.FilenameUtils.getPrefixLength(\"a/b/c.txt\"));\r\n    this.assertEquals(1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"/a/b/c.txt\"));\r\n    this.assertEquals(3, org.apache.commons.io.FilenameUtils.getPrefixLength(\"C:/a/b/c.txt\"));\r\n    this.assertEquals(9, org.apache.commons.io.FilenameUtils.getPrefixLength(\"//server/a/b/c.txt\"));\r\n    this.assertEquals(2, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~/a/b/c.txt\"));\r\n    this.assertEquals(6, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~user/a/b/c.txt\"));\r\n    this.assertEquals(0, org.apache.commons.io.FilenameUtils.getPrefixLength(\"a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(1, org.apache.commons.io.FilenameUtils.getPrefixLength(\"\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(2, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(6, org.apache.commons.io.FilenameUtils.getPrefixLength(\"~user\\\\a\\\\b\\\\c.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).1", "labels": ["Variable"], "properties": {"simpleName": "size", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Returns false.\r\n *\r\n * @param file\r\n * \t\tthe file to check\r\n * @return false\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    return false;\r\n}", "docComment": "Returns false.\r\n\r\n@param file\r\n\t\tthe file to check\r\n@return false\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)", "kind": "constructor", "sourceText": "public TeeOutputStreamTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceWindows_String_EmptyResponse()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()", "kind": "method", "sourceText": "public void testGetFreeSpaceWindows_String_EmptyResponse() throws java.lang.Exception {\r\n    java.lang.String lines = \"\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        6() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    try {\r\n        fsu.freeSpaceWindows(\"C:\");\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testEqualsNormalized()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testEqualsNormalized() {\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalized(null, null));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsNormalized(null, \"\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsNormalized(\"\", null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalized(\"\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalized(\"file.txt\", \"file.txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsNormalized(\"file.txt\", \"FILE.TXT\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsNormalized(\"a\\\\b\\\\file.txt\", \"a/b/file.txt\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsNormalized(\"a/b/\", \"a/b\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadSwappedUnsignedInteger()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()", "kind": "method", "sourceText": "public void testReadSwappedUnsignedInteger() throws java.io.IOException {\r\n    byte[] bytes = new byte[]{ 0x4, 0x3, 0x2, 0x1 };\r\n    this.assertEquals(0x1020304L, org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(bytes, 0));\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(bytes);\r\n    this.assertEquals(0x1020304L, org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(input));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_Encoding_nullSeparator()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "kind": "method", "sourceText": "public void testWriteLines_OutputStream_Encoding_nullSeparator() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", \"world\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.writeLines(list, ((java.lang.String) (null)), out, \"US-ASCII\");\r\n    out.off();\r\n    out.flush();\r\n    java.lang.String expected = ((\"hello\" + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"world\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n    java.lang.String actual = baout.toString();\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "removeExtension(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Removes the extension from a filename.\r\n * <p>\r\n * This method returns the textual part of the filename before the last dot.\r\n * There must be no directory separator after the dot.\r\n * <pre>\r\n * foo.txt    --> foo\r\n * a\\b\\c.jpg  --> a\\b\\c\r\n * a\\b\\c      --> a\\b\\c\r\n * a.b\\c      --> a.b\\c\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the filename minus the extension\r\n */\r\npublic static java.lang.String removeExtension(java.lang.String filename) {\r\n    if (filename == null) {\r\n        return null;\r\n    }\r\n    int index = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\r\n    if (index == (-1)) {\r\n        return filename;\r\n    } else {\r\n        return filename.substring(0, index);\r\n    }\r\n}", "docComment": "Removes the extension from a filename.\r\n<p>\r\nThis method returns the textual part of the filename before the last dot.\r\nThere must be no directory separator after the dot.\r\n<pre>\r\nfoo.txt    --> foo\r\na\\b\\c.jpg  --> a\\b\\c\r\na\\b\\c      --> a\\b\\c\r\na.b\\c      --> a.b\\c\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the filename minus the extension\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToOutputStream_Encoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_stringToOutputStream_Encoding() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(str, out, \"UTF16\");\r\n    out.off();\r\n    out.flush();\r\n    byte[] bytes = baout.toByteArray();\r\n    bytes = new java.lang.String(bytes, \"UTF16\").getBytes(\"US-ASCII\");\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, bytes));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter(java.io.Writer)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.Writer)", "qualifiedName": "org.apache.commons.io.output.ProxyWriter(java.io.Writer)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new ProxyWriter.\r\n *\r\n * @param proxy\r\n * \t\tthe Writer to delegate to\r\n */\r\npublic ProxyWriter(java.io.Writer proxy) {\r\n    super(proxy);\r\n    // the proxy is stored in a protected superclass variable named 'out'\r\n}", "docComment": "Constructs a new ProxyWriter.\r\n\r\n@param proxy\r\n\t\tthe Writer to delegate to\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "kind": "constructor", "sourceText": "/**\r\n * Constructs an instance of this class from the supplied parameters.\r\n *\r\n * @param path\r\n * \t\tThe full path to the file to be tracked.\r\n * @param marker\r\n * \t\tThe marker object used to track the file.\r\n * @param queue\r\n * \t\tThe queue on to which the tracker will be pushed.\r\n */\r\npublic Tracker(java.lang.String path, java.lang.Object marker, java.lang.ref.ReferenceQueue queue) {\r\n    super(marker, queue);\r\n    this.path = path;\r\n}", "docComment": "Constructs an instance of this class from the supplied parameters.\r\n\r\n@param path\r\n\t\tThe full path to the file to be tracked.\r\n@param marker\r\n\t\tThe marker object used to track the file.\r\n@param queue\r\n\t\tThe queue on to which the tracker will be pushed.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The Unix line separator string.\r\n */\r\npublic static final java.lang.String LINE_SEPARATOR_UNIX = \"\\n\";", "visibility": "public", "simpleName": "LINE_SEPARATOR_UNIX", "qualifiedName": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "waitFor(java.io.File,int)", "qualifiedName": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "kind": "static method", "sourceText": "/**\r\n * Waits for NFS to propagate a file creation, imposing a timeout.\r\n *\r\n * @param file\r\n * \t\tThe file\r\n * @param seconds\r\n * \t\tThe maximum time in seconds to wait.\r\n * @return True if file exists.\r\n * @todo Needs a clearer javadoc to see its real purpose for someone without\r\nNFS-knowledge.\r\n */\r\npublic static boolean waitFor(java.io.File file, int seconds) {\r\n    int timeout = 0;\r\n    int tick = 0;\r\n    while (!file.exists()) {\r\n        if ((tick++) >= 10) {\r\n            tick = 0;\r\n            if ((timeout++) > seconds) {\r\n                return false;\r\n            }\r\n        }\r\n        try {\r\n            java.lang.Thread.sleep(100);\r\n        } catch (java.lang.InterruptedException ignore) {\r\n        } catch (java.lang.Exception ex) {\r\n            break;\r\n        }\r\n    } \r\n    return true;\r\n}", "docComment": "Waits for NFS to propagate a file creation, imposing a timeout.\r\n\r\n@param file\r\n\t\tThe file\r\n@param seconds\r\n\t\tThe maximum time in seconds to wait.\r\n@return True if file exists.\r\n@todo Needs a clearer javadoc to see its real purpose for someone without\r\nNFS-knowledge.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The output stream to which data will be written at any given time. This\r\n * will always be one of <code>memoryOutputStream</code> or\r\n * <code>diskOutputStream</code>.\r\n */\r\nprivate java.io.OutputStream currentOutputStream;", "visibility": "private", "simpleName": "currentOutputStream", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testConstants()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testConstants() throws java.lang.Exception {\r\n    this.assertEquals('/', org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX);\r\n    this.assertEquals('\\\\', org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS);\r\n    this.assertEquals(\"\\n\", org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX);\r\n    this.assertEquals(\"\\r\\n\", org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS);\r\n    if (org.apache.commons.io.IOUtilsTestCase.WINDOWS) {\r\n        this.assertEquals('\\\\', org.apache.commons.io.IOUtils.DIR_SEPARATOR);\r\n        this.assertEquals(\"\\r\\n\", org.apache.commons.io.IOUtils.LINE_SEPARATOR);\r\n    } else {\r\n        this.assertEquals('/', org.apache.commons.io.IOUtils.DIR_SEPARATOR);\r\n        this.assertEquals(\"\\n\", org.apache.commons.io.IOUtils.LINE_SEPARATOR);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String WORKING_PATH_NAME_PROPERTY_KEY = org.apache.commons.io.filefilter.AndFileFilterTestCase.class.getName() + \".workingDirectory\";", "visibility": "private", "simpleName": "WORKING_PATH_NAME_PROPERTY_KEY", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "labels": ["Variable"], "properties": {"sourceText": "private org.apache.commons.io.input.DemuxInputStream m_demux;", "visibility": "private", "simpleName": "m_demux", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File lockFile;", "visibility": "private", "simpleName": "lockFile", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "chr", "qualifiedName": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.StringBuffer,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "kind": "static method", "sourceText": "/**\r\n * Writes chars from a <code>StringBuffer</code> to bytes on an\r\n * <code>OutputStream</code> using the default character encoding of the\r\n * platform.\r\n * <p>\r\n * This method uses {@link String#getBytes()}.\r\n *\r\n * @param data\r\n * \t\tthe <code>StringBuffer</code> to write, null ignored\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(data.toString().getBytes());\r\n    }\r\n}", "docComment": "Writes chars from a <code>StringBuffer</code> to bytes on an\r\n<code>OutputStream</code> using the default character encoding of the\r\nplatform.\r\n<p>\r\nThis method uses {@link String#getBytes()}.\r\n\r\n@param data\r\n\t\tthe <code>StringBuffer</code> to write, null ignored\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadInt()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()", "kind": "method", "sourceText": "public void testReadInt() throws java.io.IOException {\r\n    this.assertEquals(((int) (0x4030201)), this.sdis.readInt());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).2", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "threadName", "qualifiedName": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "filename1", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.String,int,int)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(String, int, int)\r\n */\r\npublic void write(java.lang.String str, int st, int end) throws java.io.IOException {\r\n    this.out.write(str, st, end);\r\n}", "docComment": "\r\n@see java.io.Writer#write(String, int, int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToOutputStream()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "kind": "method", "sourceText": "public void testCopy_inputStreamToOutputStream() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    int count = org.apache.commons.io.CopyUtils.copy(in, out);\r\n    this.assertTrue(\"Not all bytes were read\", in.available() == 0);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "str", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter", "labels": ["Structure"], "properties": {"docComment": "This filter produces a logical NOT of the filters specified.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Stephen Colebourne\r\n", "simpleName": "NotFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFileResults()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()", "kind": "method", "sourceText": "protected java.util.List getFileResults() {\r\n    return this.testFileResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "forceMkdir(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Make a directory, including any necessary but nonexistent parent\r\n * directories. If there already exists a file with specified name or\r\n * the directory cannot be created then an exception is thrown.\r\n *\r\n * @param directory\r\n * \t\tdirectory to create\r\n * @throws IOException\r\n * \t\tif the directory cannot be created.\r\n */\r\npublic static void forceMkdir(java.io.File directory) throws java.io.IOException {\r\n    if (directory.exists()) {\r\n        if (directory.isFile()) {\r\n            java.lang.String message = ((\"File \" + directory) + \" exists and is \") + \"not a directory. Unable to create directory.\";\r\n            throw new java.io.IOException(message);\r\n        }\r\n    } else if (!directory.mkdirs()) {\r\n        java.lang.String message = \"Unable to create directory \" + directory;\r\n        throw new java.io.IOException(message);\r\n    }\r\n}", "docComment": "Make a directory, including any necessary but nonexistent parent\r\ndirectories. If there already exists a file with specified name or\r\nthe directory cannot be created then an exception is thrown.\r\n\r\n@param directory\r\n\t\tdirectory to create\r\n@throws IOException\r\n\t\tif the directory cannot be created.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testByteArrayToString()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "kind": "method", "sourceText": "public void testByteArrayToString() throws java.lang.Exception {\r\n    java.io.FileInputStream fin = new java.io.FileInputStream(this.m_testFile);\r\n    try {\r\n        byte[] in = org.apache.commons.io.IOUtils.toByteArray(fin);\r\n        // Create our byte[]. Rely on testInputStreamToByteArray() to make sure this is valid.\r\n        java.lang.String str = org.apache.commons.io.IOUtils.toString(in);\r\n        this.assertEqualContent(in, str.getBytes());\r\n    } finally {\r\n        fin.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "freeSpaceOS(java.lang.String,int)", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "kind": "method", "sourceText": "/**\r\n * Returns the free space on a drive or volume in a cross-platform manner.\r\n * Note that some OS's are NOT currently supported, including OS/390.\r\n * <pre>\r\n * FileSystemUtils.freeSpace(\"C:\");  // Windows\r\n * FileSystemUtils.freeSpace(\"/volume\");  // *nix\r\n * </pre>\r\n * The free space is calculated via the command line.\r\n * It uses 'dir /-c' on Windows and 'df' on *nix.\r\n *\r\n * @param path\r\n * \t\tthe path to get free space for, not null, not empty on Unix\r\n * @param os\r\n * \t\tthe operating system code\r\n * @return the amount of free drive space on the drive or volume\r\n * @throws IllegalArgumentException\r\n * \t\tif the path is invalid\r\n * @throws IllegalStateException\r\n * \t\tif an error occurred in initialisation\r\n * @throws IOException\r\n * \t\tif an error occurs when finding the free space\r\n */\r\nlong freeSpaceOS(java.lang.String path, int os) throws java.io.IOException {\r\n    if (path == null) {\r\n        throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\r\n    }\r\n    switch (os) {\r\n        case org.apache.commons.io.FileSystemUtils.WINDOWS :\r\n            return this.freeSpaceWindows(path);\r\n        case org.apache.commons.io.FileSystemUtils.UNIX :\r\n            return this.freeSpaceUnix(path);\r\n        case org.apache.commons.io.FileSystemUtils.OTHER :\r\n            throw new java.lang.IllegalStateException(\"Unsupported operating system\");\r\n        default :\r\n            throw new java.lang.IllegalStateException(\"Exception caught when determining operating system\");\r\n    }\r\n}", "docComment": "Returns the free space on a drive or volume in a cross-platform manner.\r\nNote that some OS's are NOT currently supported, including OS/390.\r\n<pre>\r\nFileSystemUtils.freeSpace(\"C:\");  // Windows\r\nFileSystemUtils.freeSpace(\"/volume\");  // *nix\r\n</pre>\r\nThe free space is calculated via the command line.\r\nIt uses 'dir /-c' on Windows and 'df' on *nix.\r\n\r\n@param path\r\n\t\tthe path to get free space for, not null, not empty on Unix\r\n@param os\r\n\t\tthe operating system code\r\n@return the amount of free drive space on the drive or volume\r\n@throws IllegalArgumentException\r\n\t\tif the path is invalid\r\n@throws IllegalStateException\r\n\t\tif an error occurred in initialisation\r\n@throws IOException\r\n\t\tif an error occurs when finding the free space\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "off", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString(byte[],java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>byte[]</code> as a String\r\n * using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n *\r\n * @param input\r\n * \t\tthe byte array to read from\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @return the requested String\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs (never occurs)\r\n * @deprecated Use {@link String#String(byte[],String)}\r\n */\r\npublic static java.lang.String toString(byte[] input, java.lang.String encoding) throws java.io.IOException {\r\n    if (encoding == null) {\r\n        return new java.lang.String(input);\r\n    } else {\r\n        return new java.lang.String(input, encoding);\r\n    }\r\n}", "docComment": "Get the contents of a <code>byte[]</code> as a String\r\nusing the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n\r\n@param input\r\n\t\tthe byte array to read from\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@return the requested String\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs (never occurs)\r\n@deprecated Use {@link String#String(byte[],String)}\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "testName", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.buffers", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List buffers = new java.util.ArrayList();", "visibility": "private", "simpleName": "buffers", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.buffers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testThresholdReached()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "kind": "method", "sourceText": "/**\r\n * Tests the case where there are multiple writes beyond the threshold, to\r\n * ensure that the <code>thresholdReached()</code> method is only called\r\n * once, as the threshold is crossed for the first time.\r\n */\r\npublic void testThresholdReached() {\r\n    java.io.File testFile = new java.io.File(\"testThresholdReached.dat\");\r\n    // Ensure that the test starts from a clean base.\r\n    testFile.delete();\r\n    org.apache.commons.io.output.DeferredFileOutputStream dfos = new org.apache.commons.io.output.DeferredFileOutputStream(this.testBytes.length / 2, testFile);\r\n    int chunkSize = this.testBytes.length / 3;\r\n    try {\r\n        dfos.write(this.testBytes, 0, chunkSize);\r\n        dfos.write(this.testBytes, chunkSize, chunkSize);\r\n        dfos.write(this.testBytes, chunkSize * 2, this.testBytes.length - (chunkSize * 2));\r\n        dfos.close();\r\n    } catch (java.io.IOException e) {\r\n        this.fail(\"Unexpected IOException\");\r\n    }\r\n    this.assertFalse(dfos.isInMemory());\r\n    this.assertNull(dfos.getData());\r\n    this.verifyResultFile(testFile);\r\n    // Ensure that the test starts from a clean base.\r\n    testFile.delete();\r\n}", "docComment": "Tests the case where there are multiple writes beyond the threshold, to\r\nensure that the <code>thresholdReached()</code> method is only called\r\nonce, as the threshold is crossed for the first time.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "deleteFile(java.io.File)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "kind": "method", "sourceText": "protected void deleteFile(java.io.File file) throws java.lang.Exception {\r\n    if (file.exists()) {\r\n        this.assertTrue(\"Couldn't delete file: \" + file, file.delete());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream()", "kind": "constructor", "sourceText": "DemuxInputStream() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getDefaultWorkingPath()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()", "kind": "method", "sourceText": "protected abstract java.lang.String getDefaultWorkingPath();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The default buffer size to use.\r\n */\r\nprivate static final int DEFAULT_BUFFER_SIZE = 1024 * 4;", "visibility": "private", "simpleName": "DEFAULT_BUFFER_SIZE", "qualifiedName": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons", "labels": ["Container"], "properties": {"simpleName": "commons", "qualifiedName": "org.apache.commons", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "labels": ["Variable"], "properties": {"sourceText": "protected org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter[] falseFilters;", "visibility": "protected", "simpleName": "falseFilters", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadLine()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()", "kind": "method", "sourceText": "public void testReadLine() throws java.io.IOException {\r\n    try {\r\n        java.lang.String unexpected = this.sdis.readLine();\r\n        this.fail(\"readLine should be unsupported. \");\r\n    } catch (java.lang.UnsupportedOperationException uoe) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "classLoader", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream", "labels": ["Structure"], "properties": {"docComment": "A Proxy stream which acts as expected, that is it passes the method \r\ncalls on to the proxied stream and doesn't change which methods are \r\nbeing called. \r\n<p>\r\nIt is an alternative base class to FilterInputStream\r\nto increase reusability, because FilterInputStream changes the \r\nmethods being called, such as read(byte[]) to read(byte[], int, int).\r\n\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@version $Id$\r\n", "simpleName": "ProxyInputStream", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToWriter_Encoding_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "kind": "method", "sourceText": "public void testWrite_byteArrayToWriter_Encoding_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(((byte[]) (null)), writer, \"UTF8\");\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceOS_String_NullPath()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testGetFreeSpaceOS_String_NullPath() throws java.lang.Exception {\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils();\r\n    try {\r\n        fsu.freeSpaceOS(null, 1);\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteStringToFile1()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()", "kind": "method", "sourceText": "public void testWriteStringToFile1() throws java.lang.Exception {\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"write.txt\");\r\n    org.apache.commons.io.FileUtils.writeStringToFile(file, \"Hello /u1234\", \"UTF8\");\r\n    byte[] text = \"Hello /u1234\".getBytes(\"UTF8\");\r\n    this.assertEqualContent(text, file);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter1", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "kind": "method", "sourceText": "public boolean assertFileFiltering(final int testNumber, final org.apache.commons.io.filefilter.IOFileFilter filter, final java.io.File file, final boolean expected) throws java.lang.Exception {\r\n    this.assertTrue(((((((\"test \" + testNumber) + \" Filter(File) \") + filter.getClass().getName()) + \" not \") + expected) + \" for \") + file, filter.accept(file) == expected);\r\n    return true;// return is irrelevant\r\n\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildFilterUsingConstructor(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "kind": "method", "sourceText": "protected org.apache.commons.io.filefilter.IOFileFilter buildFilterUsingConstructor(final java.util.List filters) {\r\n    return new org.apache.commons.io.filefilter.OrFileFilter(filters);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceOS_String_InitError()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()", "kind": "method", "sourceText": "public void testGetFreeSpaceOS_String_InitError() throws java.lang.Exception {\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils();\r\n    try {\r\n        fsu.freeSpaceOS(\"\", -1);\r\n        this.fail();\r\n    } catch (java.lang.IllegalStateException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "sizeOfDirectory(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Recursively count size of a directory (sum of the length of all files).\r\n *\r\n * @param directory\r\n * \t\tdirectory to inspect\r\n * @return size of directory in bytes, 0 if directory is security restricted\r\n */\r\npublic static long sizeOfDirectory(java.io.File directory) {\r\n    if (!directory.exists()) {\r\n        java.lang.String message = directory + \" does not exist\";\r\n        throw new java.lang.IllegalArgumentException(message);\r\n    }\r\n    if (!directory.isDirectory()) {\r\n        java.lang.String message = directory + \" is not a directory\";\r\n        throw new java.lang.IllegalArgumentException(message);\r\n    }\r\n    long size = 0;\r\n    java.io.File[] files = directory.listFiles();\r\n    if (files == null) {\r\n        // null if security restricted\r\n        return 0L;\r\n    }\r\n    for (int i = 0; i < files.length; i++) {\r\n        java.io.File file = files[i];\r\n        if (file.isDirectory()) {\r\n            size += org.apache.commons.io.FileUtils.sizeOfDirectory(file);\r\n        } else {\r\n            size += file.length();\r\n        }\r\n    }\r\n    return size;\r\n}", "docComment": "Recursively count size of a directory (sum of the length of all files).\r\n\r\n@param directory\r\n\t\tdirectory to inspect\r\n@return size of directory in bytes, 0 if directory is security restricted\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase", "labels": ["Structure"], "properties": {"docComment": "Used to test FileFilterUtils.\r\n", "simpleName": "FileFilterTestCase", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skipBytes(int)", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#skipBytes(int)\r\n */\r\npublic int skipBytes(int count) throws java.io.IOException, java.io.EOFException {\r\n    return ((int) (this.in.skip(count)));\r\n}", "docComment": "\r\n@see java.io.DataInput#skipBytes(int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "kind": "static method", "sourceText": "/**\r\n * Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>\r\n * using the default character encoding of the platform.\r\n * <p>\r\n * This method uses {@link String#String(byte[])}.\r\n *\r\n * @param data\r\n * \t\tthe byte array to write, do not modify during output,\r\n * \t\tnull ignored\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(byte[] data, java.io.Writer output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(new java.lang.String(data));\r\n    }\r\n}", "docComment": "Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>\r\nusing the default character encoding of the platform.\r\n<p>\r\nThis method uses {@link String#String(byte[])}.\r\n\r\n@param data\r\n\t\tthe byte array to write, do not modify during output,\r\n\t\tnull ignored\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.FileSystemUtilsTestCase.suite());\r\n    // try {\r\n    // System.out.println(FileSystemUtils.getFreeSpace(\"C:\\\\\"));\r\n    // } catch (IOException ex) {\r\n    // ex.printStackTrace();\r\n    // }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyFile(java.io.File,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "kind": "static method", "sourceText": "/**\r\n * Copies a file to a new location.\r\n * <p>\r\n * This method copies the contents of the specified source file\r\n * to the specified destination file.\r\n * The directory holding the destination file is created if it does not exist.\r\n * If the destination file exists, then this method will overwrite it.\r\n *\r\n * @param srcFile\r\n * \t\tan existing file to copy, must not be null\r\n * @param destFile\r\n * \t\tthe new file, must not be null\r\n * @param preserveFileDate\r\n * \t\ttrue if the file date of the copy\r\n * \t\tshould be the same as the original\r\n * @throws NullPointerException\r\n * \t\tif source or destination is null\r\n * @throws IOException\r\n * \t\tif source or destination is invalid\r\n * @throws IOException\r\n * \t\tif an IO error occurs during copying\r\n * @see #copyFileToDirectory\r\n */\r\npublic static void copyFile(java.io.File srcFile, java.io.File destFile, boolean preserveFileDate) throws java.io.IOException {\r\n    if (srcFile == null) {\r\n        throw new java.lang.NullPointerException(\"Source must not be null\");\r\n    }\r\n    if (destFile == null) {\r\n        throw new java.lang.NullPointerException(\"Destination must not be null\");\r\n    }\r\n    if (srcFile.exists() == false) {\r\n        throw new java.io.FileNotFoundException((\"Source '\" + srcFile) + \"' does not exist\");\r\n    }\r\n    if (srcFile.isDirectory()) {\r\n        throw new java.io.IOException((\"Source '\" + srcFile) + \"' exists but is a directory\");\r\n    }\r\n    if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {\r\n        throw new java.io.IOException((((\"Source '\" + srcFile) + \"' and destination '\") + destFile) + \"' are the same\");\r\n    }\r\n    if ((destFile.getParentFile() != null) && (destFile.getParentFile().exists() == false)) {\r\n        if (destFile.getParentFile().mkdirs() == false) {\r\n            throw new java.io.IOException((\"Destination '\" + destFile) + \"' directory cannot be created\");\r\n        }\r\n    }\r\n    if (destFile.exists() && (destFile.canWrite() == false)) {\r\n        throw new java.io.IOException((\"Destination '\" + destFile) + \"' exists but is read-only\");\r\n    }\r\n    org.apache.commons.io.FileUtils.doCopyFile(srcFile, destFile, preserveFileDate);\r\n}", "docComment": "Copies a file to a new location.\r\n<p>\r\nThis method copies the contents of the specified source file\r\nto the specified destination file.\r\nThe directory holding the destination file is created if it does not exist.\r\nIf the destination file exists, then this method will overwrite it.\r\n\r\n@param srcFile\r\n\t\tan existing file to copy, must not be null\r\n@param destFile\r\n\t\tthe new file, must not be null\r\n@param preserveFileDate\r\n\t\ttrue if the file date of the copy\r\n\t\tshould be the same as the original\r\n@throws NullPointerException\r\n\t\tif source or destination is null\r\n@throws IOException\r\n\t\tif source or destination is invalid\r\n@throws IOException\r\n\t\tif an IO error occurs during copying\r\n@see #copyFileToDirectory\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyFileToDirectory(java.io.File,java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Copies a file to a directory preserving the file date.\r\n * <p>\r\n * This method copies the contents of the specified source file\r\n * to a file of the same name in the specified destination directory.\r\n * The destination directory is created if it does not exist.\r\n * If the destination file exists, then this method will overwrite it.\r\n *\r\n * @param srcFile\r\n * \t\tan existing file to copy, must not be null\r\n * @param destDir\r\n * \t\tthe directory to place the copy in, must not be null\r\n * @throws NullPointerException\r\n * \t\tif source or destination is null\r\n * @throws IOException\r\n * \t\tif source or destination is invalid\r\n * @throws IOException\r\n * \t\tif an IO error occurs during copying\r\n * @see #copyFile(File, File, boolean)\r\n */\r\npublic static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir) throws java.io.IOException {\r\n    if (destDir == null) {\r\n        throw new java.lang.NullPointerException(\"Destination must not be null\");\r\n    }\r\n    if (destDir.exists() && (destDir.isDirectory() == false)) {\r\n        throw new java.lang.IllegalArgumentException((\"Destination '\" + destDir) + \"' is not a directory\");\r\n    }\r\n    org.apache.commons.io.FileUtils.copyFile(srcFile, new java.io.File(destDir, srcFile.getName()), true);\r\n}", "docComment": "Copies a file to a directory preserving the file date.\r\n<p>\r\nThis method copies the contents of the specified source file\r\nto a file of the same name in the specified destination directory.\r\nThe destination directory is created if it does not exist.\r\nIf the destination file exists, then this method will overwrite it.\r\n\r\n@param srcFile\r\n\t\tan existing file to copy, must not be null\r\n@param destDir\r\n\t\tthe directory to place the copy in, must not be null\r\n@throws NullPointerException\r\n\t\tif source or destination is null\r\n@throws IOException\r\n\t\tif source or destination is invalid\r\n@throws IOException\r\n\t\tif an IO error occurs during copying\r\n@see #copyFile(File, File, boolean)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "in", "qualifiedName": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "labels": ["Structure"], "properties": {"docComment": "A special ObjectInputStream that loads a class based on a specified\r\n<code>ClassLoader</code> rather than the system default.\r\n<p>\r\nThis is useful in dynamic container environments.\r\n\r\n@author Paul Hammant\r\n@version $Id$\r\n@since Commons IO 1.1\r\n", "simpleName": "ClassLoaderObjectInputStream", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile3()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFile3()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFile3()", "kind": "method", "sourceText": "public void testToFile3() throws java.lang.Exception {\r\n    this.assertEquals(null, org.apache.commons.io.FileUtils.toFile(((java.net.URL) (null))));\r\n    this.assertEquals(null, org.apache.commons.io.FileUtils.toFile(new java.net.URL(\"http://jakarta.apache.org\")));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "b0", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).2", "labels": ["Variable"], "properties": {"simpleName": "array2", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new CountingInputStream.\r\n *\r\n * @param in\r\n * \t\tInputStream to delegate to\r\n */\r\npublic CountingInputStream(java.io.InputStream in) {\r\n    super(in);\r\n}", "docComment": "Constructs a new CountingInputStream.\r\n\r\n@param in\r\n\t\tInputStream to delegate to\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream", "labels": ["Structure"], "properties": {"docComment": "Data written to this stream is forwarded to a stream that has been associated\r\nwith this thread.\r\n\r\n@author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\r\n@version $Revision$ $Date$\r\n", "simpleName": "DemuxOutputStream", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)", "kind": "constructor", "sourceText": "/**\r\n *\r\n * @param proxy\r\n * \t\tInputStream to delegate to.\r\n */\r\npublic YellOnCloseInputStream(java.io.InputStream proxy) {\r\n    super(proxy);\r\n}", "docComment": "\r\n@param proxy\r\n\t\tInputStream to delegate to.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeTo(java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.ByteArrayOutputStream#writeTo(OutputStream)\r\n */\r\npublic synchronized void writeTo(java.io.OutputStream out) throws java.io.IOException {\r\n    int remaining = this.count;\r\n    for (int i = 0; i < this.buffers.size(); i++) {\r\n        byte[] buf = this.getBuffer(i);\r\n        int c = java.lang.Math.min(buf.length, remaining);\r\n        out.write(buf, 0, c);\r\n        remaining -= c;\r\n        if (remaining == 0) {\r\n            break;\r\n        }\r\n    }\r\n}", "docComment": "\r\n@see java.io.ByteArrayOutputStream#writeTo(OutputStream)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "kind": "static method", "sourceText": "/**\r\n * Returns a filter that ORs the two specified filters.\r\n *\r\n * @param filter1\r\n * \t\tthe first filter\r\n * @param filter2\r\n * \t\tthe second filter\r\n * @return a filter that ORs the two specified filters\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\r\n    return new org.apache.commons.io.filefilter.OrFileFilter(filter1, filter2);\r\n}", "docComment": "Returns a filter that ORs the two specified filters.\r\n\r\n@param filter1\r\n\t\tthe first filter\r\n@param filter2\r\n\t\tthe second filter\r\n@return a filter that ORs the two specified filters\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "byteCmp(byte[],byte[])", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "kind": "static method", "sourceText": "private static boolean byteCmp(byte[] src, byte[] cmp) {\r\n    for (int i = 0; i < cmp.length; i++) {\r\n        if (src[i] != cmp[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadFully()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()", "kind": "method", "sourceText": "public void testReadFully() throws java.io.IOException {\r\n    byte[] bytesIn = new byte[8];\r\n    this.sdis.readFully(bytesIn);\r\n    for (int i = 0; i < 8; i++) {\r\n        this.assertEquals(this.bytes[i], bytesIn[i]);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS", "labels": ["Variable"], "properties": {"sourceText": "private static final boolean WINDOWS = java.io.File.separatorChar == '\\\\';", "visibility": "private", "simpleName": "WINDOWS", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doGetPath(java.lang.String,int)", "qualifiedName": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "kind": "static method", "sourceText": "/**\r\n * Does the work of getting the path.\r\n *\r\n * @param filename\r\n * \t\tthe filename\r\n * @param separatorAdd\r\n * \t\t0 to omit the end separator, 1 to return it\r\n * @return the path\r\n */\r\nprivate static java.lang.String doGetPath(java.lang.String filename, int separatorAdd) {\r\n    if (filename == null) {\r\n        return null;\r\n    }\r\n    int prefix = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\r\n    if (prefix < 0) {\r\n        return null;\r\n    }\r\n    int index = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\r\n    if ((prefix >= filename.length()) || (index < 0)) {\r\n        return \"\";\r\n    }\r\n    return filename.substring(prefix, index + separatorAdd);\r\n}", "docComment": "Does the work of getting the path.\r\n\r\n@param filename\r\n\t\tthe filename\r\n@param separatorAdd\r\n\t\t0 to omit the end separator, 1 to return it\r\n@return the path\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsFileNewer()", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()", "kind": "method", "sourceText": "/**\r\n * Tests the <code>isFileNewer(File, *)</code> methods which a \"normal\" file.\r\n *\r\n * @see FileUtils#isFileNewer(File, long)\r\n * @see FileUtils#isFileNewer(File, Date)\r\n * @see FileUtils#isFileNewer(File, File)\r\n */\r\npublic void testIsFileNewer() {\r\n    if (!this.m_testFile1.exists()) {\r\n        throw new java.lang.IllegalStateException(\"The m_testFile1 should exist\");\r\n    }\r\n    long fileLastModified = this.m_testFile1.lastModified();\r\n    final long ONE_SECOND = 1000;\r\n    this.testIsFileNewer(\"one second earlier is not newer\", this.m_testFile1, fileLastModified + ONE_SECOND, false);\r\n    this.testIsFileNewer(\"same time is not newer\", this.m_testFile1, fileLastModified, false);\r\n    this.testIsFileNewer(\"one second later is newer\", this.m_testFile1, fileLastModified - ONE_SECOND, true);\r\n}", "docComment": "Tests the <code>isFileNewer(File, *)</code> methods which a \"normal\" file.\r\n\r\n@see FileUtils#isFileNewer(File, long)\r\n@see FileUtils#isFileNewer(File, Date)\r\n@see FileUtils#isFileNewer(File, File)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "destFile", "qualifiedName": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWildcard()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "kind": "method", "sourceText": "public void testWildcard() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = new org.apache.commons.io.filefilter.WildcardFilter(\"*.txt\");\r\n    java.util.List patternList = java.util.Arrays.asList(new java.lang.String[]{ \"*.txt\", \"*.xml\", \"*.gif\" });\r\n    org.apache.commons.io.filefilter.IOFileFilter listFilter = new org.apache.commons.io.filefilter.WildcardFilter(patternList);\r\n    java.io.File txtFile = new java.io.File(\"test.txt\");\r\n    java.io.File bmpFile = new java.io.File(\"test.bmp\");\r\n    java.io.File dir = new java.io.File(\"src/java\");\r\n    this.assertFiltering(filter, new java.io.File(\"log.txt\"), true);\r\n    // assertFiltering(filter, new File(\"log.txt.bak\"), false);\r\n    filter = new org.apache.commons.io.filefilter.WildcardFilter(\"log?.txt\");\r\n    this.assertFiltering(filter, new java.io.File(\"log1.txt\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"log12.txt\"), false);\r\n    filter = new org.apache.commons.io.filefilter.WildcardFilter(\"open??.????04\");\r\n    this.assertFiltering(filter, new java.io.File(\"openAB.102504\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"openA.102504\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"openXY.123103\"), false);\r\n    // assertFiltering(filter, new File(\"openAB.102504.old\"), false);\r\n    filter = new org.apache.commons.io.filefilter.WildcardFilter(new java.lang.String[]{ \"*.java\", \"*.class\" });\r\n    this.assertFiltering(filter, new java.io.File(\"Test.java\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"Test.class\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"Test.jsp\"), false);\r\n    this.assertFiltering(listFilter, new java.io.File(\"Test.txt\"), true);\r\n    this.assertFiltering(listFilter, new java.io.File(\"Test.xml\"), true);\r\n    this.assertFiltering(listFilter, new java.io.File(\"Test.gif\"), true);\r\n    this.assertFiltering(listFilter, new java.io.File(\"Test.bmp\"), false);\r\n    this.assertTrue(listFilter.accept(txtFile));\r\n    this.assertTrue(!listFilter.accept(bmpFile));\r\n    this.assertTrue(!listFilter.accept(dir));\r\n    this.assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));\r\n    this.assertTrue(!listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));\r\n    this.assertTrue(!listFilter.accept(dir.getParentFile(), dir.getName()));\r\n    try {\r\n        new org.apache.commons.io.filefilter.WildcardFilter(((java.lang.String) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    try {\r\n        new org.apache.commons.io.filefilter.WildcardFilter(((java.lang.String[]) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    try {\r\n        new org.apache.commons.io.filefilter.WildcardFilter(((java.util.List) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceWindows_String_NormalResponse()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()", "kind": "method", "sourceText": "public void testGetFreeSpaceWindows_String_NormalResponse() throws java.lang.Exception {\r\n    java.lang.String lines = \" Volume in drive C is HDD\\n\" + (((((((((\" Volume Serial Number is XXXX-YYYY\\n\" + \"\\n\") + \" Directory of C:\\\\Documents and Settings\\\\Xxxx\\n\") + \"\\n\") + \"19/08/2005  22:43    <DIR>          .\\n\") + \"19/08/2005  22:43    <DIR>          ..\\n\") + \"11/08/2005  01:07                81 build.properties\\n\") + \"17/08/2005  21:44    <DIR>          Desktop\\n\") + \"               7 File(s)        180,260 bytes\\n\") + \"              10 Dir(s)  41,411,551,232 bytes free\");\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        4() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            this.assertEquals(\"dir /c C:\", params[2]);\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    this.assertEquals(41411551232L, fsu.freeSpaceWindows(\"C:\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getDefaultWorkingPath()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()", "kind": "method", "sourceText": "protected java.lang.String getDefaultWorkingPath() {\r\n    return org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.<clinit>()", "labels": ["Script"], "properties": {"visibility": "default", "simpleName": "<clinit>()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.<clinit>()", "kind": "class initializer", "sourceText": "static {\r\n    org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA = new byte[64];\r\n    for (byte i = 0; i < 64; i++) {\r\n        org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA[i] = i;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(byte[],java.io.Writer,java.lang.String)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Copy and convert bytes from a <code>byte[]</code> to chars on a\r\n * <code>Writer</code>, using the specified encoding.\r\n *\r\n * @param input\r\n * \t\tthe byte array to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @param encoding\r\n * \t\tThe name of a supported character encoding. See the\r\n * \t\t<a href=\"http://www.iana.org/assignments/character-sets\">IANA\r\n * \t\tCharset Registry</a> for a list of valid encoding types.\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(byte[] input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\r\n    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(input);\r\n    org.apache.commons.io.CopyUtils.copy(in, output, encoding);\r\n}", "docComment": "Copy and convert bytes from a <code>byte[]</code> to chars on a\r\n<code>Writer</code>, using the specified encoding.\r\n\r\n@param input\r\n\t\tthe byte array to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@param encoding\r\n\t\tThe name of a supported character encoding. See the\r\n\t\t<a href=\"http://www.iana.org/assignments/character-sets\">IANA\r\n\t\tCharset Registry</a> for a list of valid encoding types.\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools", "labels": ["Container"], "properties": {"simpleName": "testtools", "qualifiedName": "org.apache.commons.io.testtools", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readLong()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readLong()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readLong()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readLong()\r\n */\r\npublic long readLong() throws java.io.IOException, java.io.EOFException {\r\n    return org.apache.commons.io.EndianUtils.readSwappedLong(this.in);\r\n}", "docComment": "\r\n@see java.io.DataInput#readLong()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream", "labels": ["Structure"], "properties": {"docComment": "A Proxy stream which acts as expected, that is it passes the method \r\ncalls on to the proxied stream and doesn't change which methods are \r\nbeing called. It is an alternative base class to FilterOutputStream\r\nto increase reusability.\r\n\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@version $Id$\r\n", "simpleName": "ProxyOutputStream", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).3", "labels": ["Variable"], "properties": {"simpleName": "demux", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWaitFor()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWaitFor()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWaitFor()", "kind": "method", "sourceText": "// waitFor\r\npublic void testWaitFor() {\r\n    org.apache.commons.io.FileUtils.waitFor(new java.io.File(\"\"), -1);\r\n    org.apache.commons.io.FileUtils.waitFor(new java.io.File(\"\"), 2);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testListFilesByExtension()", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()", "kind": "method", "sourceText": "public void testListFilesByExtension() throws java.lang.Exception {\r\n    java.lang.String[] extensions = new java.lang.String[]{ \"xml\", \"txt\" };\r\n    java.util.Collection files = org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), extensions, false);\r\n    this.assertEquals(1, files.size());\r\n    java.util.Collection filenames = this.filesToFilenames(files);\r\n    this.assertTrue(filenames.contains(\"dummy-build.xml\"));\r\n    this.assertFalse(filenames.contains(\"README\"));\r\n    this.assertFalse(filenames.contains(\"dummy-file.txt\"));\r\n    files = org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), extensions, true);\r\n    filenames = this.filesToFilenames(files);\r\n    this.assertEquals(4, filenames.size());\r\n    this.assertTrue(filenames.contains(\"dummy-file.txt\"));\r\n    this.assertFalse(filenames.contains(\"dummy-index.html\"));\r\n    files = org.apache.commons.io.FileUtils.listFiles(this.getLocalTestDirectory(), null, false);\r\n    this.assertEquals(2, files.size());\r\n    filenames = this.filesToFilenames(files);\r\n    this.assertTrue(filenames.contains(\"dummy-build.xml\"));\r\n    this.assertTrue(filenames.contains(\"README\"));\r\n    this.assertFalse(filenames.contains(\"dummy-file.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()", "kind": "method", "sourceText": "public void setUp() throws java.lang.Exception {\r\n    super.setUp();\r\n    this.setUpTestFilters();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public OrFileFilterTestCase(final java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceWindows_String_EmptyPath()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testGetFreeSpaceWindows_String_EmptyPath() throws java.lang.Exception {\r\n    java.lang.String lines = \" Volume in drive C is HDD\\n\" + (((((((((\" Volume Serial Number is XXXX-YYYY\\n\" + \"\\n\") + \" Directory of C:\\\\Documents and Settings\\\\Xxxx\\n\") + \"\\n\") + \"19/08/2005  22:43    <DIR>          .\\n\") + \"19/08/2005  22:43    <DIR>          ..\\n\") + \"11/08/2005  01:07                81 build.properties\\n\") + \"17/08/2005  21:44    <DIR>          Desktop\\n\") + \"               7 File(s)        180,260 bytes\\n\") + \"              10 Dir(s)  41,411,551,232 bytes free\");\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        3() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            this.assertEquals(\"dir /c \", params[2]);\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    this.assertEquals(41411551232L, fsu.freeSpaceWindows(\"\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testPrefix()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "kind": "method", "sourceText": "public void testPrefix() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = new org.apache.commons.io.filefilter.PrefixFileFilter(new java.lang.String[]{ \"foo\", \"bar\" });\r\n    java.io.File testFile = new java.io.File(\"test\");\r\n    java.io.File fredFile = new java.io.File(\"fred\");\r\n    this.assertFiltering(filter, new java.io.File(\"foo.test\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"FOO.test\"), false);// case-sensitive\r\n\r\n    this.assertFiltering(filter, new java.io.File(\"foo\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"bar\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"food/\"), true);\r\n    filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(\"bar\");\r\n    this.assertFiltering(filter, new java.io.File(\"barred\\\\\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"test\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"fo_o.test\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"abar.exe\"), false);\r\n    filter = new org.apache.commons.io.filefilter.PrefixFileFilter(\"tes\");\r\n    this.assertFiltering(filter, new java.io.File(\"test\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"fred\"), false);\r\n    this.assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));\r\n    this.assertTrue(!filter.accept(fredFile.getParentFile(), fredFile.getName()));\r\n    java.util.List prefixes = java.util.Arrays.asList(new java.lang.String[]{ \"foo\", \"fre\" });\r\n    org.apache.commons.io.filefilter.IOFileFilter listFilter = new org.apache.commons.io.filefilter.PrefixFileFilter(prefixes);\r\n    this.assertTrue(!listFilter.accept(testFile.getParentFile(), testFile.getName()));\r\n    this.assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));\r\n    try {\r\n        new org.apache.commons.io.filefilter.PrefixFileFilter(((java.lang.String) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    try {\r\n        new org.apache.commons.io.filefilter.PrefixFileFilter(((java.lang.String[]) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    try {\r\n        new org.apache.commons.io.filefilter.PrefixFileFilter(((java.util.List) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean accept(final java.io.File file) {\r\n    if (this.fileFilters.size() == 0) {\r\n        return false;\r\n    }\r\n    for (java.util.Iterator iter = this.fileFilters.iterator(); iter.hasNext();) {\r\n        org.apache.commons.io.filefilter.IOFileFilter fileFilter = ((org.apache.commons.io.filefilter.IOFileFilter) (iter.next()));\r\n        if (!fileFilter.accept(file)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToWriter_nullIn()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()", "kind": "method", "sourceText": "public void testCopy_readerToWriter_nullIn() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(((java.io.Reader) (null)), writer);\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int).0", "labels": ["Variable"], "properties": {"simpleName": "newcount", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).2", "labels": ["Variable"], "properties": {"simpleName": "invoked", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The default size of the buffer.\r\n */\r\nprivate static final int DEFAULT_BUFFER_SIZE = 1024 * 4;", "visibility": "private", "simpleName": "DEFAULT_BUFFER_SIZE", "qualifiedName": "org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "srcFile", "qualifiedName": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "method", "sourceText": "/**\r\n * Adds the specified file filter to the list of file filters at the end of\r\n * the list.\r\n *\r\n * @param ioFileFilter\r\n * \t\tthe filter to be added\r\n * @since Commons IO 1.1\r\n */\r\npublic void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter ioFileFilter);", "docComment": "Adds the specified file filter to the list of file filters at the end of\r\nthe list.\r\n\r\n@param ioFileFilter\r\n\t\tthe filter to be added\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "kind": "method", "sourceText": "public void assertTrueFiltersInvoked(final int testNumber, final org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter[] filters, final boolean[] invoked) {\r\n    for (int i = 1; i < filters.length; i++) {\r\n        this.assertEquals((((\"test \" + testNumber) + \" filter \") + i) + \" invoked\", invoked[i - 1], filters[i].isInvoked());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyDirectoryToExistingDest()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "kind": "method", "sourceText": "public void testCopyDirectoryToExistingDest() throws java.lang.Exception {\r\n    this.createFile(this.testFile1, 1234);\r\n    this.createFile(this.testFile2, 4321);\r\n    java.io.File srcDir = org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory();\r\n    java.io.File subDir = new java.io.File(srcDir, \"sub\");\r\n    subDir.mkdir();\r\n    java.io.File subFile = new java.io.File(subDir, \"A.txt\");\r\n    org.apache.commons.io.FileUtils.writeStringToFile(subFile, \"HELLO WORLD\", \"UTF8\");\r\n    java.io.File destDir = new java.io.File(java.lang.System.getProperty(\"java.io.tmpdir\"), \"tmp-FileUtilsTestCase\");\r\n    org.apache.commons.io.FileUtils.deleteDirectory(destDir);\r\n    destDir.mkdirs();\r\n    org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);\r\n    this.assertEquals(org.apache.commons.io.FileUtils.sizeOfDirectory(srcDir), org.apache.commons.io.FileUtils.sizeOfDirectory(destDir));\r\n    this.assertEquals(true, new java.io.File(destDir, \"sub/A.txt\").exists());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "setUpTestFilters()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "kind": "method", "sourceText": "private void setUpTestFilters() {\r\n    // filters\r\n    // tests\r\n    this.testFilters = new java.util.ArrayList();\r\n    this.testTrueResults = new java.util.ArrayList();\r\n    this.testFalseResults = new java.util.ArrayList();\r\n    this.testFileResults = new java.util.ArrayList();\r\n    this.testFilenameResults = new java.util.ArrayList();\r\n    // test 0 - add empty elements\r\n    {\r\n        this.testFilters.add(0, null);\r\n        this.testTrueResults.add(0, null);\r\n        this.testFalseResults.add(0, null);\r\n        this.testFileResults.add(0, null);\r\n        this.testFilenameResults.add(0, null);\r\n    }\r\n    // test 1 - Test conditional and with all filters returning true\r\n    {\r\n        // test 1 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        // test 1 true results\r\n        boolean[] trueResults = new boolean[]{ true, true, true };\r\n        // test 1 false results\r\n        boolean[] falseResults = new boolean[]{ false, false, false };\r\n        this.testFilters.add(1, filters);\r\n        this.testTrueResults.add(1, trueResults);\r\n        this.testFalseResults.add(1, falseResults);\r\n        this.testFileResults.add(1, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(1, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 2 - Test conditional and with first filter returning false\r\n    {\r\n        // test 2 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 2 true results\r\n        boolean[] trueResults = new boolean[]{ false, false, false };\r\n        // test 2 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(2, filters);\r\n        this.testTrueResults.add(2, trueResults);\r\n        this.testFalseResults.add(2, falseResults);\r\n        this.testFileResults.add(2, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(2, java.lang.Boolean.FALSE);\r\n    }\r\n    // test 3 - Test conditional and with second filter returning false\r\n    {\r\n        // test 3 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 3 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 3 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(3, filters);\r\n        this.testTrueResults.add(3, trueResults);\r\n        this.testFalseResults.add(3, falseResults);\r\n        this.testFileResults.add(3, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(3, java.lang.Boolean.FALSE);\r\n    }\r\n    // test 4 - Test conditional and with third filter returning false\r\n    {\r\n        // test 4 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 4 true results\r\n        boolean[] trueResults = new boolean[]{ true, true, false };\r\n        // test 4 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(4, filters);\r\n        this.testTrueResults.add(4, trueResults);\r\n        this.testFalseResults.add(4, falseResults);\r\n        this.testFileResults.add(4, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(4, java.lang.Boolean.FALSE);\r\n    }\r\n    // test 5 - Test conditional and with first and third filters returning false\r\n    {\r\n        // test 5 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        // test 5 true results\r\n        boolean[] trueResults = new boolean[]{ false, false, false };\r\n        // test 5 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(5, filters);\r\n        this.testTrueResults.add(5, trueResults);\r\n        this.testFalseResults.add(5, falseResults);\r\n        this.testFileResults.add(5, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(5, java.lang.Boolean.FALSE);\r\n    }\r\n    // test 6 - Test conditional and with second and third filters returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 6 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 6 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(6, filters);\r\n        this.testTrueResults.add(6, trueResults);\r\n        this.testFalseResults.add(6, falseResults);\r\n        this.testFileResults.add(6, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(6, java.lang.Boolean.FALSE);\r\n    }\r\n    // test 7 - Test conditional and with first and second filters returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[3]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        // test 7 true results\r\n        boolean[] trueResults = new boolean[]{ false, false, false };\r\n        // test 7 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(7, filters);\r\n        this.testTrueResults.add(7, trueResults);\r\n        this.testFalseResults.add(7, falseResults);\r\n        this.testFileResults.add(7, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(7, java.lang.Boolean.FALSE);\r\n    }\r\n    // test 8 - Test conditional and with fourth filters returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[1]);\r\n        // test 8 true results\r\n        boolean[] trueResults = new boolean[]{ true, true, true };\r\n        // test 8 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(8, filters);\r\n        this.testTrueResults.add(8, trueResults);\r\n        this.testFalseResults.add(8, falseResults);\r\n        this.testFileResults.add(8, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(8, java.lang.Boolean.FALSE);\r\n    }\r\n    // test 9 - Test conditional and with all filters returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 9 true results\r\n        boolean[] trueResults = new boolean[]{ false, false, false };\r\n        // test 9 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(9, filters);\r\n        this.testTrueResults.add(9, trueResults);\r\n        this.testFalseResults.add(9, falseResults);\r\n        this.testFileResults.add(9, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(9, java.lang.Boolean.FALSE);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "newFile(java.lang.String)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "kind": "method", "sourceText": "protected java.io.File newFile(java.lang.String filename) throws java.io.IOException {\r\n    java.io.File destination = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), filename);\r\n    /* assertTrue( filename + \"Test output data file shouldn't previously exist\",\n    !destination.exists() );\n     */\r\n    if (destination.exists()) {\r\n        org.apache.commons.io.FileUtils.forceDelete(destination);\r\n    }\r\n    return destination;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase", "labels": ["Structure"], "properties": {"docComment": "This is used to test FileCleaner for correctness.\r\n\r\n@author Noel Bergman\r\n@author Martin Cooper\r\n@version $Id$\r\n@see FileCleaner\r\n", "simpleName": "FileCleanerTestCase", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite", "labels": ["Structure"], "properties": {"docComment": "A basic test suite that tests all the IO package.\r\n\r\n@author Matthew Hawthorne\r\n@author Stephen Colebourne\r\n@see org.apache.commons.io\r\n", "simpleName": "PackageTestSuite", "qualifiedName": "org.apache.commons.io.PackageTestSuite", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.EndianUtilsTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isInMemory()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "kind": "method", "sourceText": "// --------------------------------------------------------- Public methods\r\n/**\r\n * Determines whether or not the data for this output stream has been\r\n * retained in memory.\r\n *\r\n * @return <code>true</code> if the data is available in memory;\r\n<code>false</code> otherwise.\r\n */\r\npublic boolean isInMemory() {\r\n    return !this.isThresholdExceeded();\r\n}", "docComment": "Determines whether or not the data for this output stream has been\r\nretained in memory.\r\n\r\n@return <code>true</code> if the data is available in memory;\r\n<code>false</code> otherwise.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "resolveClass(java.io.ObjectStreamClass)", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "kind": "method", "sourceText": "/**\r\n *\r\n * @inheritDoc  */\r\nprotected java.lang.Class resolveClass(java.io.ObjectStreamClass objectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException {\r\n    java.lang.Class clazz = java.lang.Class.forName(objectStreamClass.getName(), false, this.classLoader);\r\n    if (clazz != null) {\r\n        // the classloader knows of the class\r\n        return clazz;\r\n    } else {\r\n        // classloader knows not of class, let the super classloader do it\r\n        return super.resolveClass(objectStreamClass);\r\n    }\r\n}", "docComment": "\r\n@inheritDoc ", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Copy chars from a <code>Reader</code> to bytes on an\r\n * <code>OutputStream</code> using the specified character encoding, and\r\n * calling flush.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * Due to the implementation of OutputStreamWriter, this method performs a\r\n * flush.\r\n * <p>\r\n * This method uses {@link OutputStreamWriter}.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif the input or output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void copy(java.io.Reader input, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\r\n    if (encoding == null) {\r\n        org.apache.commons.io.IOUtils.copy(input, output);\r\n    } else {\r\n        java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(output, encoding);\r\n        org.apache.commons.io.IOUtils.copy(input, out);\r\n        // XXX Unless anyone is planning on rewriting OutputStreamWriter,\r\n        // we have to flush here.\r\n        out.flush();\r\n    }\r\n}", "docComment": "Copy chars from a <code>Reader</code> to bytes on an\r\n<code>OutputStream</code> using the specified character encoding, and\r\ncalling flush.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nDue to the implementation of OutputStreamWriter, this method performs a\r\nflush.\r\n<p>\r\nThis method uses {@link OutputStreamWriter}.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif the input or output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.output.PackageTestSuite()", "kind": "constructor", "sourceText": "PackageTestSuite() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readFloat()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readFloat()\r\n */\r\npublic float readFloat() throws java.io.IOException, java.io.EOFException {\r\n    return org.apache.commons.io.EndianUtils.readSwappedFloat(this.in);\r\n}", "docComment": "\r\n@see java.io.DataInput#readFloat()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.setUp()", "kind": "method", "sourceText": "// ----------------------------------------------------------------\r\n// Setup\r\n// ----------------------------------------------------------------\r\npublic void setUp() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "static method", "sourceText": "/**\r\n * Returns an IOFileFilter that ignores SVN directories. You may optionally\r\n * pass in an existing IOFileFilter in which case it is extended to exclude\r\n * SVN directories.\r\n *\r\n * @param filter\r\n * \t\tIOFileFilter to wrap, null if a new IOFileFilter\r\n * \t\tshould be created\r\n * @return the requested (combined) filter\r\n * @since 1.1\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\r\n    if (org.apache.commons.io.filefilter.FileFilterUtils.svnFilter == null) {\r\n        org.apache.commons.io.filefilter.FileFilterUtils.svnFilter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter(), org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(\".svn\")));\r\n    }\r\n    if (filter == null) {\r\n        return org.apache.commons.io.filefilter.FileFilterUtils.svnFilter;\r\n    } else {\r\n        return org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(filter, org.apache.commons.io.filefilter.FileFilterUtils.svnFilter);\r\n    }\r\n}", "docComment": "Returns an IOFileFilter that ignores SVN directories. You may optionally\r\npass in an existing IOFileFilter in which case it is extended to exclude\r\nSVN directories.\r\n\r\n@param filter\r\n\t\tIOFileFilter to wrap, null if a new IOFileFilter\r\n\t\tshould be created\r\n@return the requested (combined) filter\r\n@since 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "java.lang.String", "labels": ["Structure"], "properties": {"simpleName": "String", "qualifiedName": "java.lang.String", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils", "labels": ["Structure"], "properties": {"docComment": "General filename and filepath manipulation utilities.\r\n<p>\r\nWhen dealing with filenames you can hit problems when moving from a Windows\r\nbased development machine to a Unix based production machine.\r\nThis class aims to help avoid those problems.\r\n<p>\r\n<b>NOTE</b>: You may be able to avoid using this class entirely simply by\r\nusing JDK {@link java.io.File File} objects and the two argument constructor\r\n{@link java.io.File#File(java.io.File, java.lang.String) File(File,String)}.\r\n<p>\r\nMost methods on this class are designed to work the same on both Unix and Windows.\r\nThose that don't include 'System', 'Unix' or 'Windows' in their name.\r\n<p>\r\nMost methods recognise both separators (forward and back), and both\r\nsets of prefixes. See the javadoc of each method for details.\r\n<p>\r\nThis class defines six components within a filename\r\n(example C:\\dev\\project\\file.txt):\r\n<ul>\r\n<li>the prefix - C:\\</li>\r\n<li>the path - dev\\project\\</li>\r\n<li>the full path - C:\\dev\\project\\</li>\r\n<li>the name - file.txt</li>\r\n<li>the base name - file</li>\r\n<li>the extension - txt</li>\r\n</ul>\r\nNote that this class works best if directory filenames end with a separator.\r\nIf you omit the last separator, it is impossible to determine if the filename\r\ncorresponds to a file or a directory. As a result, we have chosen to say\r\nit corresponds to a file.\r\n<p>\r\nThis class only supports Unix and Windows style names.\r\nPrefixes are matched as follows:\r\n<pre>\r\nWindows:\r\na\\b\\c.txt           --> \"\"          --> relative\r\n\\a\\b\\c.txt          --> \"\\\"         --> current drive absolute\r\nC:a\\b\\c.txt         --> \"C:\"        --> drive relative\r\nC:\\a\\b\\c.txt        --> \"C:\\\"       --> absolute\r\n\\\\server\\a\\b\\c.txt  --> \"\\\\server\\\" --> UNC\r\n\r\nUnix:\r\na/b/c.txt           --> \"\"          --> relative\r\n/a/b/c.txt          --> \"/\"         --> absolute\r\n~/a/b/c.txt         --> \"~/\"        --> current user\r\n~                   --> \"~/\"        --> current user (slash added)\r\n~user/a/b/c.txt     --> \"~user/\"    --> named user\r\n~user               --> \"~user/\"    --> named user (slash added)\r\n</pre>\r\nBoth prefix styles are matched always, irrespective of the machine that you are\r\ncurrently running on.\r\n<p>\r\nOrigin of code: Excalibur, Alexandria, Tomcat, Commons-Utils.\r\n\r\n@author <a href=\"mailto:burton@relativity.yi.org\">Kevin A. Burton</A>\r\n@author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\r\n@author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\r\n@author <a href=\"mailto:Christoph.Reck@dlr.de\">Christoph.Reck</a>\r\n@author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\r\n@author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\r\n@author Matthew Hawthorne\r\n@author Martin Cooper\r\n@author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\r\n@author Stephen Colebourne\r\n@version $Id$\r\n@since Commons IO 1.1\r\n", "simpleName": "FilenameUtils", "qualifiedName": "org.apache.commons.io.FilenameUtils", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testContentEquals()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()", "kind": "method", "sourceText": "// public void testToURLs2() throws Exception {\r\n// File[] files = new File[] {\r\n// new File(getTestDirectory(), \"file1.txt\"),\r\n// null,\r\n// };\r\n// URL[] urls = FileUtils.toURLs(files);\r\n// \r\n// assertEquals(files.length, urls.length);\r\n// assertEquals(true, urls[0].toExternalForm().startsWith(\"file:\"));\r\n// assertEquals(true, urls[0].toExternalForm().indexOf(\"file1.txt\") > 0);\r\n// assertEquals(null, urls[1]);\r\n// }\r\n// \r\n// public void testToURLs3() throws Exception {\r\n// File[] files = null;\r\n// URL[] urls = FileUtils.toURLs(files);\r\n// \r\n// assertEquals(0, urls.length);\r\n// }\r\n// contentEquals\r\npublic void testContentEquals() throws java.lang.Exception {\r\n    // Non-existent files\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), this.getName());\r\n    this.assertTrue(org.apache.commons.io.FileUtils.contentEquals(file, file));\r\n    // Directories\r\n    try {\r\n        org.apache.commons.io.FileUtils.contentEquals(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n        this.fail(\"Comparing directories should fail with an IOException\");\r\n    } catch (java.io.IOException ioe) {\r\n        // expected\r\n    }\r\n    // Different files\r\n    java.io.File objFile1 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), this.getName() + \".object\");\r\n    objFile1.deleteOnExit();\r\n    org.apache.commons.io.FileUtils.copyURLToFile(this.getClass().getResource(\"/java/lang/Object.class\"), objFile1);\r\n    java.io.File objFile2 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), this.getName() + \".collection\");\r\n    objFile2.deleteOnExit();\r\n    org.apache.commons.io.FileUtils.copyURLToFile(this.getClass().getResource(\"/java/util/Collection.class\"), objFile2);\r\n    this.assertTrue(\"Files should not be equal.\", !org.apache.commons.io.FileUtils.contentEquals(objFile1, objFile2));\r\n    // Equal files\r\n    file.createNewFile();\r\n    this.assertTrue(org.apache.commons.io.FileUtils.contentEquals(file, file));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.ONE_KB", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The number of bytes in a kilobyte.\r\n */\r\npublic static final long ONE_KB = 1024;", "visibility": "public", "simpleName": "ONE_KB", "qualifiedName": "org.apache.commons.io.FileUtils.ONE_KB", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToOutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "kind": "method", "sourceText": "// ----------------------------------------------------------------\r\n// Tests\r\n// ----------------------------------------------------------------\r\n// -----------------------------------------------------------------------\r\npublic void testWrite_byteArrayToOutputStream() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(this.inData, out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "normalize(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Normalizes a path, removing double and single dot path steps.\r\n * <p>\r\n * This method normalizes a path to a standard format.\r\n * The input may contain separators in either Unix or Windows format.\r\n * The output will contain separators in the format of the system.\r\n * <p>\r\n * A trailing slash will be retained.\r\n * A double slash will be merged to a single slash (but UNC names are handled).\r\n * A single dot path segment will be removed.\r\n * A double dot will cause that path segment and the one before to be removed.\r\n * If the double dot has no parent path segment to work with, <code>null</code>\r\n * is returned.\r\n * <p>\r\n * The output will be the same on both Unix and Windows except\r\n * for the separator character.\r\n * <pre>\r\n * /foo//               -->   /foo/\r\n * /foo/./              -->   /foo/\r\n * /foo/../bar          -->   /bar\r\n * /foo/../bar/         -->   /bar/\r\n * /foo/../bar/../baz   -->   /baz\r\n * //foo//./bar         -->   /foo/bar\r\n * /../                 -->   null\r\n * ../foo               -->   null\r\n * foo/bar/..           -->   foo/\r\n * foo/../../bar        -->   null\r\n * foo/../bar           -->   bar\r\n * //server/foo/../bar  -->   //server/bar\r\n * //server/../bar      -->   null\r\n * C:\\foo\\..\\bar        -->   C:\\bar\r\n * C:\\..\\bar            -->   null\r\n * ~/foo/../bar/        -->   ~/bar/\r\n * ~/../bar             -->   null\r\n * </pre>\r\n * (Note the file separator returned will be correct for Windows/Unix)\r\n *\r\n * @param filename\r\n * \t\tthe filename to normalize, null returns null\r\n * @return the normalized filename, or null if invalid\r\n */\r\npublic static java.lang.String normalize(java.lang.String filename) {\r\n    return org.apache.commons.io.FilenameUtils.doNormalize(filename, true);\r\n}", "docComment": "Normalizes a path, removing double and single dot path steps.\r\n<p>\r\nThis method normalizes a path to a standard format.\r\nThe input may contain separators in either Unix or Windows format.\r\nThe output will contain separators in the format of the system.\r\n<p>\r\nA trailing slash will be retained.\r\nA double slash will be merged to a single slash (but UNC names are handled).\r\nA single dot path segment will be removed.\r\nA double dot will cause that path segment and the one before to be removed.\r\nIf the double dot has no parent path segment to work with, <code>null</code>\r\nis returned.\r\n<p>\r\nThe output will be the same on both Unix and Windows except\r\nfor the separator character.\r\n<pre>\r\n/foo//               -->   /foo/\r\n/foo/./              -->   /foo/\r\n/foo/../bar          -->   /bar\r\n/foo/../bar/         -->   /bar/\r\n/foo/../bar/../baz   -->   /baz\r\n//foo//./bar         -->   /foo/bar\r\n/../                 -->   null\r\n../foo               -->   null\r\nfoo/bar/..           -->   foo/\r\nfoo/../../bar        -->   null\r\nfoo/../bar           -->   bar\r\n//server/foo/../bar  -->   //server/bar\r\n//server/../bar      -->   null\r\nC:\\foo\\..\\bar        -->   C:\\bar\r\nC:\\..\\bar            -->   null\r\n~/foo/../bar/        -->   ~/bar/\r\n~/../bar             -->   null\r\n</pre>\r\n(Note the file separator returned will be correct for Windows/Unix)\r\n\r\n@param filename\r\n\t\tthe filename to normalize, null returns null\r\n@return the normalized filename, or null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite", "labels": ["Structure"], "properties": {"docComment": "A basic test suite that tests all the IO output package.\r\n\r\n@author Stephen Colebourne\r\n", "simpleName": "PackageTestSuite", "qualifiedName": "org.apache.commons.io.output.PackageTestSuite", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter_nullIn()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()", "kind": "method", "sourceText": "public void testCopy_inputStreamToWriter_nullIn() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(((java.io.InputStream) (null)), writer);\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toAscii(int).0", "labels": ["Variable"], "properties": {"simpleName": "c", "qualifiedName": "org.apache.commons.io.HexDumpTest.toAscii(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter", "labels": ["Structure"], "properties": {"docComment": "An interface which brings the FileFilter and FilenameFilter \r\ninterfaces together.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n", "simpleName": "IOFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilter", "kind": "interface", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "actual", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_NormalResponse()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()", "kind": "method", "sourceText": "public void testGetFreeSpaceUnix_String_NormalResponse() throws java.lang.Exception {\r\n    java.lang.String lines = \"Filesystem           1K-blocks      Used Available Use% Mounted on\\n\" + \"xxx:/home/users/s     14428928  12956424   1472504  90% /home/users/s\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        8() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    this.assertEquals(1472504L, fsu.freeSpaceUnix(\"/home/users/s\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "append", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSplitOnTokens()", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()", "kind": "method", "sourceText": "public void testSplitOnTokens() {\r\n    this.assertArrayEquals(new java.lang.String[]{ \"Ad\", \"*\", \"er\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"Ad*er\"));\r\n    this.assertArrayEquals(new java.lang.String[]{ \"Ad\", \"?\", \"er\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"Ad?er\"));\r\n    this.assertArrayEquals(new java.lang.String[]{ \"Test\", \"*\", \"?\", \"One\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"Test*?One\"));\r\n    this.assertArrayEquals(new java.lang.String[]{ \"*\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"****\"));\r\n    this.assertArrayEquals(new java.lang.String[]{ \"*\", \"?\", \"?\", \"*\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"*??*\"));\r\n    this.assertArrayEquals(new java.lang.String[]{ \"*\", \"?\", \"?\", \"*\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"*??*\"));\r\n    this.assertArrayEquals(new java.lang.String[]{ \"h\", \"?\", \"?\", \"*\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"h??*\"));\r\n    this.assertArrayEquals(new java.lang.String[]{ \"\" }, org.apache.commons.io.FilenameUtils.splitOnTokens(\"\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "kind": "method", "sourceText": "/**\r\n * Closes underlying output stream, and mark this as closed\r\n *\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\npublic void close() throws java.io.IOException {\r\n    super.close();\r\n    this.closed = true;\r\n}", "docComment": "Closes underlying output stream, and mark this as closed\r\n\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setFileFilters(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)", "kind": "method", "sourceText": "/**\r\n * Sets the list of file filters, replacing any previously configured\r\n * file filters on this filter.\r\n *\r\n * @param fileFilters\r\n * \t\tthe list of filters\r\n * @since Commons IO 1.1\r\n */\r\npublic void setFileFilters(java.util.List fileFilters);", "docComment": "Sets the list of file filters, replacing any previously configured\r\nfile filters on this filter.\r\n\r\n@param fileFilters\r\n\t\tthe list of filters\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "listFiles(java.io.File,java.lang.String[],boolean)", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "kind": "static method", "sourceText": "/**\r\n * Finds files within a given directory (and optionally its subdirectories)\r\n * which match an array of extensions.\r\n *\r\n * @param directory\r\n * \t\tthe directory to search in\r\n * @param extensions\r\n * \t\tan array of extensions, ex. {\"java\",\"xml\"}. If this\r\n * \t\tparameter is null, all files are returned.\r\n * @param recursive\r\n * \t\tIf true all subdirectories are searched, too.\r\n * @return an collection of java.io.File with the matching files\r\n */\r\npublic static java.util.Collection listFiles(java.io.File directory, java.lang.String[] extensions, boolean recursive) {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter;\r\n    if (extensions == null) {\r\n        filter = org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE;\r\n    } else {\r\n        java.lang.String[] suffixes = org.apache.commons.io.FileUtils.toSuffixes(extensions);\r\n        filter = new org.apache.commons.io.filefilter.SuffixFileFilter(suffixes);\r\n    }\r\n    return org.apache.commons.io.FileUtils.listFiles(directory, filter, recursive ? org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE : org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);\r\n}", "docComment": "Finds files within a given directory (and optionally its subdirectories)\r\nwhich match an array of extensions.\r\n\r\n@param directory\r\n\t\tthe directory to search in\r\n@param extensions\r\n\t\tan array of extensions, ex. {\"java\",\"xml\"}. If this\r\n\t\tparameter is null, all files are returned.\r\n@param recursive\r\n\t\tIf true all subdirectories are searched, too.\r\n@return an collection of java.io.File with the matching files\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "kind": "method", "sourceText": "public void testCopy_readerToOutputStream() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.CopyUtils.copy(reader, out);\r\n    // Note: this method *does* flush. It is equivalent to:\r\n    // OutputStreamWriter _out = new OutputStreamWriter(fout);\r\n    // IOUtils.copy( fin, _out, 4096 ); // copy( Reader, Writer, int );\r\n    // _out.flush();\r\n    // out = fout;\r\n    // Note: rely on the method to flush\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "extensions", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).1", "labels": ["Variable"], "properties": {"simpleName": "size", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.doJoin()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doJoin()", "qualifiedName": "org.apache.commons.io.DemuxTestCase.doJoin()", "kind": "method", "sourceText": "private void doJoin() throws java.lang.Exception {\r\n    java.util.Iterator iterator = this.m_threadMap.keySet().iterator();\r\n    while (iterator.hasNext()) {\r\n        java.lang.String name = ((java.lang.String) (iterator.next()));\r\n        java.lang.Thread thread = ((java.lang.Thread) (this.m_threadMap.get(name)));\r\n        thread.join();\r\n    } \r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "labels": ["Variable"], "properties": {"sourceText": "private org.apache.commons.io.input.SwappedDataInputStream sdis;", "visibility": "private", "simpleName": "sdis", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.tearDown()", "kind": "method", "sourceText": "public void tearDown() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.file", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File file;", "visibility": "private", "simpleName": "file", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.file", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream_Encoding_nullOut()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()", "kind": "method", "sourceText": "public void testCopy_readerToOutputStream_Encoding_nullOut() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(reader, ((java.io.OutputStream) (null)), \"UTF16\");\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).1", "labels": ["Variable"], "properties": {"simpleName": "input2", "qualifiedName": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase.tearDown()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#tearDown()\r\n */\r\nprotected void tearDown() throws java.lang.Exception {\r\n    org.apache.commons.io.FileUtils.deleteDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n}", "docComment": "\r\n@see junit.framework.TestCase#tearDown()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "testNumber", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyDirectory(java.io.File,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "kind": "static method", "sourceText": "/**\r\n * Copies a whole directory to a new location.\r\n * <p>\r\n * This method copies the contents of the specified source directory\r\n * to within the specified destination directory.\r\n * The destination directory is created if it does not exist.\r\n * If the destination directory did exist, then this method merges\r\n * the source with the destination, with the source taking precedence.\r\n *\r\n * @param srcDir\r\n * \t\tan existing directory to copy, must not be null\r\n * @param destDir\r\n * \t\tthe new directory, must not be null\r\n * @param preserveFileDate\r\n * \t\ttrue if the file date of the copy\r\n * \t\tshould be the same as the original\r\n * @throws NullPointerException\r\n * \t\tif source or destination is null\r\n * @throws IOException\r\n * \t\tif source or destination is invalid\r\n * @throws IOException\r\n * \t\tif an IO error occurs during copying\r\n * @since Commons IO 1.1\r\n */\r\npublic static void copyDirectory(java.io.File srcDir, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\r\n    if (srcDir == null) {\r\n        throw new java.lang.NullPointerException(\"Source must not be null\");\r\n    }\r\n    if (destDir == null) {\r\n        throw new java.lang.NullPointerException(\"Destination must not be null\");\r\n    }\r\n    if (srcDir.exists() == false) {\r\n        throw new java.io.FileNotFoundException((\"Source '\" + srcDir) + \"' does not exist\");\r\n    }\r\n    if (srcDir.isDirectory() == false) {\r\n        throw new java.io.IOException((\"Source '\" + srcDir) + \"' exists but is not a directory\");\r\n    }\r\n    if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {\r\n        throw new java.io.IOException((((\"Source '\" + srcDir) + \"' and destination '\") + destDir) + \"' are the same\");\r\n    }\r\n    org.apache.commons.io.FileUtils.doCopyDirectory(srcDir, destDir, preserveFileDate);\r\n}", "docComment": "Copies a whole directory to a new location.\r\n<p>\r\nThis method copies the contents of the specified source directory\r\nto within the specified destination directory.\r\nThe destination directory is created if it does not exist.\r\nIf the destination directory did exist, then this method merges\r\nthe source with the destination, with the source taking precedence.\r\n\r\n@param srcDir\r\n\t\tan existing directory to copy, must not be null\r\n@param destDir\r\n\t\tthe new directory, must not be null\r\n@param preserveFileDate\r\n\t\ttrue if the file date of the copy\r\n\t\tshould be the same as the original\r\n@throws NullPointerException\r\n\t\tif source or destination is null\r\n@throws IOException\r\n\t\tif source or destination is invalid\r\n@throws IOException\r\n\t\tif an IO error occurs during copying\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).1", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "kind": "constructor", "sourceText": "/**\r\n * Construct a new wildcard filter for a list of wildcards\r\n *\r\n * @param wildcards\r\n * \t\tlist of wildcards to match\r\n * @throws IllegalArgumentException\r\n * \t\tif the pattern list is null\r\n * @throws ClassCastException\r\n * \t\tif the list does not contain Strings\r\n */\r\npublic WildcardFilter(java.util.List wildcards) {\r\n    super();\r\n    if (wildcards == null) {\r\n        throw new java.lang.IllegalArgumentException();\r\n    }\r\n    this.wildcards = ((java.lang.String[]) (wildcards.toArray(new java.lang.String[wildcards.size()])));\r\n}", "docComment": "Construct a new wildcard filter for a list of wildcards\r\n\r\n@param wildcards\r\n\t\tlist of wildcards to match\r\n@throws IllegalArgumentException\r\n\t\tif the pattern list is null\r\n@throws ClassCastException\r\n\t\tif the list does not contain Strings\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).3", "labels": ["Variable"], "properties": {"simpleName": "index", "qualifiedName": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org", "labels": ["Container"], "properties": {"simpleName": "org", "qualifiedName": "org", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter", "labels": ["Container"], "properties": {"simpleName": "filefilter", "qualifiedName": "org.apache.commons.io.filefilter", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "wildcardMatcher", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readLines(java.io.InputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of an <code>InputStream</code> as a list of Strings,\r\n * one entry per line, using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from, not null\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @return the list of Strings, never null\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static java.util.List readLines(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\r\n    if (encoding == null) {\r\n        return org.apache.commons.io.IOUtils.readLines(input);\r\n    } else {\r\n        java.io.InputStreamReader reader = new java.io.InputStreamReader(input, encoding);\r\n        return org.apache.commons.io.IOUtils.readLines(reader);\r\n    }\r\n}", "docComment": "Get the contents of an <code>InputStream</code> as a list of Strings,\r\none entry per line, using the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from, not null\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@return the list of Strings, never null\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isExtension(java.lang.String,java.lang.String[])", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "kind": "static method", "sourceText": "/**\r\n * Checks whether the extension of the filename is one of those specified.\r\n * <p>\r\n * This method obtains the extension as the textual part of the filename\r\n * after the last dot. There must be no directory separator after the dot.\r\n * The extension check is case-sensitive on all platforms.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns false\r\n * @param extensions\r\n * \t\tthe extensions to check for, null checks for no extension\r\n * @return true if the filename is one of the extensions\r\n */\r\npublic static boolean isExtension(java.lang.String filename, java.lang.String[] extensions) {\r\n    if (filename == null) {\r\n        return false;\r\n    }\r\n    if ((extensions == null) || (extensions.length == 0)) {\r\n        return org.apache.commons.io.FilenameUtils.indexOfExtension(filename) == (-1);\r\n    }\r\n    java.lang.String fileExt = org.apache.commons.io.FilenameUtils.getExtension(filename);\r\n    for (int i = 0; i < extensions.length; i++) {\r\n        if (fileExt.equals(extensions[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks whether the extension of the filename is one of those specified.\r\n<p>\r\nThis method obtains the extension as the textual part of the filename\r\nafter the last dot. There must be no directory separator after the dot.\r\nThe extension check is case-sensitive on all platforms.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns false\r\n@param extensions\r\n\t\tthe extensions to check for, null checks for no extension\r\n@return true if the filename is one of the extensions\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "protected", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter()", "kind": "constructor", "sourceText": "/**\r\n * Restrictive consructor.\r\n */\r\nprotected FalseFileFilter() {\r\n    super();\r\n}", "docComment": "Restrictive consructor.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],int,int)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[], int, int)\r\n */\r\npublic synchronized void write(byte[] b, int off, int len) {\r\n    if (((((off < 0) || (off > b.length)) || (len < 0)) || ((off + len) > b.length)) || ((off + len) < 0)) {\r\n        throw new java.lang.IndexOutOfBoundsException();\r\n    } else if (len == 0) {\r\n        return;\r\n    }\r\n    int newcount = this.count + len;\r\n    int remaining = len;\r\n    int inBufferPos = this.count - this.filledBufferSum;\r\n    while (remaining > 0) {\r\n        int part = java.lang.Math.min(remaining, this.currentBuffer.length - inBufferPos);\r\n        java.lang.System.arraycopy(b, (off + len) - remaining, this.currentBuffer, inBufferPos, part);\r\n        remaining -= part;\r\n        if (remaining > 0) {\r\n            this.needNewBuffer(newcount);\r\n            inBufferPos = 0;\r\n        }\r\n    } \r\n    this.count = newcount;\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFile1", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File testFile1;", "visibility": "private", "simpleName": "testFile1", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testFile1", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public IOUtilsWriteTestCase(java.lang.String testName) {\r\n    super(testName);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public AndFileFilterTestCase(final java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "kind": "static method", "sourceText": "// read toString\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Get the contents of an <code>InputStream</code> as a String\r\n * using the default character encoding of the platform.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @return the requested String\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n */\r\npublic static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\r\n    java.io.StringWriter sw = new java.io.StringWriter();\r\n    org.apache.commons.io.IOUtils.copy(input, sw);\r\n    return sw.toString();\r\n}", "docComment": "Get the contents of an <code>InputStream</code> as a String\r\nusing the default character encoding of the platform.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@return the requested String\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(byte[],java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// byte[] -> OutputStream\r\n// ----------------------------------------------------------------\r\n/**\r\n * Copy bytes from a <code>byte[]</code> to an <code>OutputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe byte array to read from\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(byte[] input, java.io.OutputStream output) throws java.io.IOException {\r\n    output.write(input);\r\n}", "docComment": "Copy bytes from a <code>byte[]</code> to an <code>OutputStream</code>.\r\n\r\n@param input\r\n\t\tthe byte array to read from\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "assertArrayEquals(java.lang.Object[],java.lang.Object[])", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "kind": "method", "sourceText": "private void assertArrayEquals(java.lang.Object[] a1, java.lang.Object[] a2) {\r\n    this.assertEquals(a1.length, a2.length);\r\n    for (int i = 0; i < a1.length; i++) {\r\n        this.assertEquals(a1[i], a2[i]);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadUTF()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()", "kind": "method", "sourceText": "public void testReadUTF() throws java.io.IOException {\r\n    try {\r\n        java.lang.String unexpected = this.sdis.readUTF();\r\n        this.fail(\"readUTF should be unsupported. \");\r\n    } catch (java.lang.UnsupportedOperationException uoe) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "bts", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.CopyUtils()", "kind": "constructor", "sourceText": "/**\r\n * Instances should NOT be constructed in standard programming.\r\n */\r\npublic CopyUtils() {\r\n    super();\r\n}", "docComment": "Instances should NOT be constructed in standard programming.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.InputStream,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "kind": "static method", "sourceText": "// copy from InputStream\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Copy bytes from an <code>InputStream</code> to an\r\n * <code>OutputStream</code>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @return the number of bytes copied\r\n * @throws NullPointerException\r\n * \t\tif the input or output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\r\n    byte[] buffer = new byte[org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE];\r\n    int count = 0;\r\n    int n = 0;\r\n    while ((-1) != (n = input.read(buffer))) {\r\n        output.write(buffer, 0, n);\r\n        count += n;\r\n    } \r\n    return count;\r\n}", "docComment": "Copy bytes from an <code>InputStream</code> to an\r\n<code>OutputStream</code>.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@return the number of bytes copied\r\n@throws NullPointerException\r\n\t\tif the input or output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testConstructor_fileName_nullFile()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()", "kind": "method", "sourceText": "public void testConstructor_fileName_nullFile() throws java.io.IOException {\r\n    try {\r\n        new org.apache.commons.io.output.LockableFileWriter(((java.lang.String) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n    this.assertEquals(false, this.lockFile.exists());\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "prefix", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toFiles(java.net.URL[])", "qualifiedName": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "kind": "static method", "sourceText": "/**\r\n * Converts each of an array of <code>URL</code> to a <code>File</code>.\r\n * <p>\r\n * Returns an array of the same size as the input.\r\n * If the input is null, an empty array is returned.\r\n * If the input contains null, the output array contains null at the same\r\n * index.\r\n * <p>\r\n * This method will decode the URL.\r\n * Syntax such as <code>file:///my%20docs/file.txt</code> will be\r\n * correctly decoded to <code>/my docs/file.txt</code>.\r\n *\r\n * @param urls\r\n * \t\tthe file URLs to convert, null returns empty array\r\n * @return a non-null array of Files matching the input, with a null item\r\nif there was a null at that index in the input array\r\n * @throws IllegalArgumentException\r\n * \t\tif any file is not a URL file\r\n * @throws IllegalArgumentException\r\n * \t\tif any file is incorrectly encoded\r\n * @since Commons IO 1.1\r\n */\r\npublic static java.io.File[] toFiles(java.net.URL[] urls) {\r\n    if ((urls == null) || (urls.length == 0)) {\r\n        return org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY;\r\n    }\r\n    java.io.File[] files = new java.io.File[urls.length];\r\n    for (int i = 0; i < urls.length; i++) {\r\n        java.net.URL url = urls[i];\r\n        if (url != null) {\r\n            if (url.getProtocol().equals(\"file\") == false) {\r\n                throw new java.lang.IllegalArgumentException(\"URL could not be converted to a File: \" + url);\r\n            }\r\n            files[i] = org.apache.commons.io.FileUtils.toFile(url);\r\n        }\r\n    }\r\n    return files;\r\n}", "docComment": "Converts each of an array of <code>URL</code> to a <code>File</code>.\r\n<p>\r\nReturns an array of the same size as the input.\r\nIf the input is null, an empty array is returned.\r\nIf the input contains null, the output array contains null at the same\r\nindex.\r\n<p>\r\nThis method will decode the URL.\r\nSyntax such as <code>file:///my%20docs/file.txt</code> will be\r\ncorrectly decoded to <code>/my docs/file.txt</code>.\r\n\r\n@param urls\r\n\t\tthe file URLs to convert, null returns empty array\r\n@return a non-null array of Files matching the input, with a null item\r\nif there was a null at that index in the input array\r\n@throws IllegalArgumentException\r\n\t\tif any file is not a URL file\r\n@throws IllegalArgumentException\r\n\t\tif any file is incorrectly encoded\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.FileUtilsTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDelete(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.forceDelete(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFile2()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFile2()", "kind": "method", "sourceText": "public void testToFile2() throws java.lang.Exception {\r\n    java.net.URL url = new java.net.URL(\"file\", null, \"a/b/c/file%20n%61me.tx%74\");\r\n    java.io.File file = org.apache.commons.io.FileUtils.toFile(url);\r\n    this.assertEquals(true, file.toString().indexOf(\"file name.txt\") >= 0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils", "labels": ["Structure"], "properties": {"docComment": "General file manipulation utilities.\r\n<p>\r\nFacilities are provided in the following areas:\r\n<ul>\r\n<li>writing to a file\r\n<li>reading from a file\r\n<li>make a directory including parent directories\r\n<li>copying files and directories\r\n<li>deleting files and directories\r\n<li>converting to and from a URL\r\n<li>listing files and directories by filter and extension\r\n<li>comparing file content\r\n<li>file last changed date\r\n</ul>\r\n<p>\r\nOrigin of code: Excalibur, Alexandria, Commons-Utils\r\n\r\n@author <a href=\"mailto:burton@relativity.yi.org\">Kevin A. Burton</A>\r\n@author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\r\n@author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\r\n@author <a href=\"mailto:Christoph.Reck@dlr.de\">Christoph.Reck</a>\r\n@author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\r\n@author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\r\n@author Matthew Hawthorne\r\n@author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\r\n@author Stephen Colebourne\r\n@author Ian Springer\r\n@author Chris Eldredge\r\n@version $Id$\r\n", "simpleName": "FileUtils", "qualifiedName": "org.apache.commons.io.FileUtils", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.output.PackageTestSuite.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    junit.framework.TestSuite suite = new junit.framework.TestSuite(\"IO Utilities - output\");\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.output.ByteArrayOutputStreamTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.output.CountingOutputStreamTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.output.DeferredFileOutputStreamTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.output.LockableFileWriterTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.output.NullOutputStreamTest.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.output.TeeOutputStreamTest.class));\r\n    return suite;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "kind": "static method", "sourceText": "/**\r\n * Writes the <code>toString()</code> value of each item in a collection to\r\n * a <code>Writer</code> line by line, using the specified line ending.\r\n *\r\n * @param lines\r\n * \t\tthe lines to write, null entries produce blank lines\r\n * @param lineEnding\r\n * \t\tthe line separator to use, null is system default\r\n * @param writer\r\n * \t\tthe <code>Writer</code> to write to, not null, not closed\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void writeLines(java.util.Collection lines, java.lang.String lineEnding, java.io.Writer writer) throws java.io.IOException {\r\n    if (lines == null) {\r\n        return;\r\n    }\r\n    if (lineEnding == null) {\r\n        lineEnding = org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n    }\r\n    for (java.util.Iterator it = lines.iterator(); it.hasNext();) {\r\n        java.lang.Object line = it.next();\r\n        if (line != null) {\r\n            writer.write(line.toString());\r\n        }\r\n        writer.write(lineEnding);\r\n    }\r\n}", "docComment": "Writes the <code>toString()</code> value of each item in a collection to\r\na <code>Writer</code> line by line, using the specified line ending.\r\n\r\n@param lines\r\n\t\tthe lines to write, null entries produce blank lines\r\n@param lineEnding\r\n\t\tthe line separator to use, null is system default\r\n@param writer\r\n\t\tthe <code>Writer</code> to write to, not null, not closed\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "labels": ["Variable"], "properties": {"sourceText": "/* Note: this is not particularly beautiful code. A better way to check for\nflush and close status would be to implement \"trojan horse\" wrapper\nimplementations of the various stream classes, which set a flag when\nrelevant methods are called. (JT)\n */\r\nprivate static final int FILE_SIZE = (1024 * 4) + 1;", "visibility": "private", "simpleName": "FILE_SIZE", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readFully(byte[])", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readFully(byte[])\r\n */\r\npublic void readFully(byte[] data) throws java.io.IOException, java.io.EOFException {\r\n    this.readFully(data, 0, data.length);\r\n}", "docComment": "\r\n@see java.io.DataInput#readFully(byte[])\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The system separator character.\r\n */\r\nprivate static final char SYSTEM_SEPARATOR = java.io.File.separatorChar;", "visibility": "private", "simpleName": "SYSTEM_SEPARATOR", "qualifiedName": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "boolean", "labels": ["Primitive"], "properties": {"simpleName": "boolean", "qualifiedName": "boolean", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.tearDown()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.tearDown()", "kind": "method", "sourceText": "public void tearDown() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks to see if both filters are true.\r\n *\r\n * @param file\r\n * \t\tthe File directory\r\n * @param name\r\n * \t\tthe filename\r\n * @return true if the filter returns false\r\n */\r\npublic boolean accept(java.io.File file, java.lang.String name) {\r\n    return !this.filter.accept(file, name);\r\n}", "docComment": "Checks to see if both filters are true.\r\n\r\n@param file\r\n\t\tthe File directory\r\n@param name\r\n\t\tthe filename\r\n@return true if the filter returns false\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "str", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToWriter_Encoding_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "kind": "method", "sourceText": "public void testWrite_stringToWriter_Encoding_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(((java.lang.String) (null)), writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)", "kind": "constructor", "sourceText": "public CountingOutputStreamTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "outputFile", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Writes the <code>toString()</code> value of each item in a collection to\r\n * an <code>OutputStream</code> line by line, using the specified character\r\n * encoding and the specified line ending.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n *\r\n * @param lines\r\n * \t\tthe lines to write, null entries produce blank lines\r\n * @param lineEnding\r\n * \t\tthe line separator to use, null is system default\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to, not null, not closed\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif the output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void writeLines(java.util.Collection lines, java.lang.String lineEnding, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\r\n    if (encoding == null) {\r\n        org.apache.commons.io.IOUtils.writeLines(lines, lineEnding, output);\r\n    } else {\r\n        if (lines == null) {\r\n            return;\r\n        }\r\n        if (lineEnding == null) {\r\n            lineEnding = org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n        }\r\n        for (java.util.Iterator it = lines.iterator(); it.hasNext();) {\r\n            java.lang.Object line = it.next();\r\n            if (line != null) {\r\n                output.write(line.toString().getBytes(encoding));\r\n            }\r\n            output.write(lineEnding.getBytes(encoding));\r\n        }\r\n    }\r\n}", "docComment": "Writes the <code>toString()</code> value of each item in a collection to\r\nan <code>OutputStream</code> line by line, using the specified character\r\nencoding and the specified line ending.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n\r\n@param lines\r\n\t\tthe lines to write, null entries produce blank lines\r\n@param lineEnding\r\n\t\tthe line separator to use, null is system default\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to, not null, not closed\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif the output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "long", "labels": ["Primitive"], "properties": {"simpleName": "long", "qualifiedName": "long", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.FilenameUtils()", "kind": "constructor", "sourceText": "/**\r\n * Instances should NOT be constructed in standard programming.\r\n */\r\npublic FilenameUtils() {\r\n    super();\r\n}", "docComment": "Instances should NOT be constructed in standard programming.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testOutputStream()", "qualifiedName": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "kind": "method", "sourceText": "public void testOutputStream() throws java.lang.Exception {\r\n    org.apache.commons.io.output.DemuxOutputStream output = new org.apache.commons.io.output.DemuxOutputStream();\r\n    this.startWriter(org.apache.commons.io.DemuxTestCase.T1, org.apache.commons.io.DemuxTestCase.DATA1, output);\r\n    this.startWriter(org.apache.commons.io.DemuxTestCase.T2, org.apache.commons.io.DemuxTestCase.DATA2, output);\r\n    this.startWriter(org.apache.commons.io.DemuxTestCase.T3, org.apache.commons.io.DemuxTestCase.DATA3, output);\r\n    this.startWriter(org.apache.commons.io.DemuxTestCase.T4, org.apache.commons.io.DemuxTestCase.DATA4, output);\r\n    this.doStart();\r\n    this.doJoin();\r\n    this.assertEquals(\"Data1\", org.apache.commons.io.DemuxTestCase.DATA1, this.getOutput(org.apache.commons.io.DemuxTestCase.T1));\r\n    this.assertEquals(\"Data2\", org.apache.commons.io.DemuxTestCase.DATA2, this.getOutput(org.apache.commons.io.DemuxTestCase.T2));\r\n    this.assertEquals(\"Data3\", org.apache.commons.io.DemuxTestCase.DATA3, this.getOutput(org.apache.commons.io.DemuxTestCase.T3));\r\n    this.assertEquals(\"Data4\", org.apache.commons.io.DemuxTestCase.DATA4, this.getOutput(org.apache.commons.io.DemuxTestCase.T4));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isInvoked()", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "kind": "method", "sourceText": "public boolean isInvoked() {\r\n    return this.invoked;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readByte()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readByte()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readByte()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readByte()\r\n */\r\npublic byte readByte() throws java.io.IOException, java.io.EOFException {\r\n    return ((byte) (this.in.read()));\r\n}", "docComment": "\r\n@see java.io.DataInput#readByte()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(int)\r\n */\r\npublic void write(int b) throws java.io.IOException {\r\n    this.count++;\r\n    super.write(b);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter", "labels": ["Structure"], "properties": {"docComment": "Filters filenames for a certain prefix.\r\n<p>\r\nFor example, to print all files and directories in the \r\ncurrent directory whose name starts with <code>Test</code>:\r\n\r\n<pre>\r\nFile dir = new File(\".\");\r\nString[] files = dir.list( new PrefixFileFilter(\"Test\") );\r\nfor ( int i = 0; i &lt; files.length; i++ ) {\r\n    System.out.println(files[i]);\r\n}\r\n</pre>\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@author Federico Barbieri\r\n@author Serge Knystautas\r\n@author Peter Donald\r\n", "simpleName": "PrefixFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.count", "labels": ["Variable"], "properties": {"sourceText": "private int count;", "visibility": "private", "simpleName": "count", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.count", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testFileNotLocked()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "kind": "method", "sourceText": "public void testFileNotLocked() throws java.io.IOException {\r\n    org.apache.commons.io.output.LockableFileWriter lfw = new org.apache.commons.io.output.LockableFileWriter(this.file);\r\n    lfw.close();\r\n    try {\r\n        org.apache.commons.io.output.LockableFileWriter lfw2 = new org.apache.commons.io.output.LockableFileWriter(this.file);\r\n        lfw2.close();\r\n    } catch (java.io.IOException ioe) {\r\n        java.lang.String msg = ioe.getMessage();\r\n        if (msg.startsWith(\"Can't write file, lock \")) {\r\n            this.fail(\"Somehow unable to open a unlocked file. \");\r\n        }\r\n    }\r\n    this.assertEquals(false, this.lockFile.exists());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "createFile(java.io.File,long)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "kind": "method", "sourceText": "protected void createFile(java.io.File file, long size) throws java.io.IOException {\r\n    if (!file.getParentFile().exists()) {\r\n        throw new java.io.IOException((\"Cannot create file \" + file) + \" as the parent directory does not exist\");\r\n    }\r\n    java.io.BufferedOutputStream output = new java.io.BufferedOutputStream(new java.io.FileOutputStream(file));\r\n    try {\r\n        this.generateTestData(output, size);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(output);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReaderToCharArray()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "kind": "method", "sourceText": "public void testReaderToCharArray() throws java.lang.Exception {\r\n    java.io.FileReader fr = new java.io.FileReader(this.m_testFile);\r\n    try {\r\n        char[] out = org.apache.commons.io.IOUtils.toCharArray(fr);\r\n        this.assertNotNull(out);\r\n        this.assertTrue(((\"Wrong output size: out.length=\" + out.length) + \"!=\") + org.apache.commons.io.IOUtilsTestCase.FILE_SIZE, out.length == org.apache.commons.io.IOUtilsTestCase.FILE_SIZE);\r\n        this.assertEqualContent(out, this.m_testFile);\r\n    } finally {\r\n        fr.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename matches one of the wildcards.\r\n *\r\n * @param dir\r\n * \t\tthe file directory\r\n * @param name\r\n * \t\tthe filename\r\n * @return true if the filename matches one of the wildcards\r\n */\r\npublic boolean accept(java.io.File dir, java.lang.String name) {\r\n    if ((dir != null) && new java.io.File(dir, name).isDirectory()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < this.wildcards.length; i++) {\r\n        if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, this.wildcards[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename matches one of the wildcards.\r\n\r\n@param dir\r\n\t\tthe file directory\r\n@param name\r\n\t\tthe filename\r\n@return true if the filename matches one of the wildcards\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int).0", "labels": ["Variable"], "properties": {"simpleName": "index", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.DemuxTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "destDir", "qualifiedName": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteSwappedFloat()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()", "kind": "method", "sourceText": "public void testWriteSwappedFloat() throws java.io.IOException {\r\n    byte[] bytes = new byte[4];\r\n    float f1 = java.lang.Float.intBitsToFloat(0x1020304);\r\n    org.apache.commons.io.EndianUtils.writeSwappedFloat(bytes, 0, f1);\r\n    this.assertEquals(0x4, bytes[0]);\r\n    this.assertEquals(0x3, bytes[1]);\r\n    this.assertEquals(0x2, bytes[2]);\r\n    this.assertEquals(0x1, bytes[3]);\r\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(4);\r\n    org.apache.commons.io.EndianUtils.writeSwappedFloat(baos, f1);\r\n    bytes = baos.toByteArray();\r\n    this.assertEquals(0x4, bytes[0]);\r\n    this.assertEquals(0x3, bytes[1]);\r\n    this.assertEquals(0x2, bytes[2]);\r\n    this.assertEquals(0x1, bytes[3]);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_4arg()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()", "kind": "method", "sourceText": "public void testWriteLines_4arg() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", new java.lang.StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    org.apache.commons.io.FileUtils.writeLines(file, \"US-ASCII\", list, \"*\");\r\n    java.lang.String expected = \"hello*world**this is**some text*\";\r\n    java.lang.String actual = org.apache.commons.io.FileUtils.readFileToString(file, \"US-ASCII\");\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "closeQuietly(java.io.Reader)", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Unconditionally close an <code>Reader</code>.\r\n * <p>\r\n * Equivalent to {@link Reader#close()}, except any exceptions will be ignored.\r\n * This is typically used in finally blocks.\r\n *\r\n * @param input\r\n * \t\tthe Reader to close, may be null or already closed\r\n */\r\npublic static void closeQuietly(java.io.Reader input) {\r\n    try {\r\n        if (input != null) {\r\n            input.close();\r\n        }\r\n    } catch (java.io.IOException ioe) {\r\n        // ignore\r\n    }\r\n}", "docComment": "Unconditionally close an <code>Reader</code>.\r\n<p>\r\nEquivalent to {@link Reader#close()}, except any exceptions will be ignored.\r\nThis is typically used in finally blocks.\r\n\r\n@param input\r\n\t\tthe Reader to close, may be null or already closed\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkByteArrays(byte[],byte[])", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "kind": "method", "sourceText": "private void checkByteArrays(byte[] expected, byte[] actual) {\r\n    if (expected.length != actual.length) {\r\n        this.fail(\"Resulting byte arrays are not equally long\");\r\n    }\r\n    if (!org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(expected, actual)) {\r\n        this.fail(\"Resulting byte arrays are not equal\");\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).1", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "kind": "method", "sourceText": "// --------------------------------------------------- OutputStream methods\r\n/**\r\n * Writes the specified byte to this output stream.\r\n *\r\n * @param b\r\n * \t\tThe byte to be written.\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\npublic void write(int b) throws java.io.IOException {\r\n    this.checkThreshold(1);\r\n    this.getStream().write(b);\r\n    this.written++;\r\n}", "docComment": "Writes the specified byte to this output stream.\r\n\r\n@param b\r\n\t\tThe byte to be written.\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)", "kind": "constructor", "sourceText": "public NullOutputStreamTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileBasedTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPath(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Gets the path from a full filename, which excludes the prefix.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The method is entirely text based, and returns the text before and\r\n * including the last forward or backslash.\r\n * <pre>\r\n * C:\\a\\b\\c.txt --> a\\b\\\r\n * ~/a/b/c.txt  --> a/b/\r\n * a.txt        --> \"\"\r\n * a/b/c        --> a/b/\r\n * a/b/c/       --> a/b/c/\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n * <p>\r\n * This method drops the prefix from the result.\r\n * See {@link #getFullPath(String)} for the method that retains the prefix.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the path of the file, an empty string if none exists, null if invalid\r\n */\r\npublic static java.lang.String getPath(java.lang.String filename) {\r\n    return org.apache.commons.io.FilenameUtils.doGetPath(filename, 1);\r\n}", "docComment": "Gets the path from a full filename, which excludes the prefix.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe method is entirely text based, and returns the text before and\r\nincluding the last forward or backslash.\r\n<pre>\r\nC:\\a\\b\\c.txt --> a\\b\\\r\n~/a/b/c.txt  --> a/b/\r\na.txt        --> \"\"\r\na/b/c        --> a/b/\r\na/b/c/       --> a/b/c/\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n<p>\r\nThis method drops the prefix from the result.\r\nSee {@link #getFullPath(String)} for the method that retains the prefix.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the path of the file, an empty string if none exists, null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doNormalize(java.lang.String,boolean)", "qualifiedName": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "kind": "static method", "sourceText": "/**\r\n * Internal method to perform the normalization.\r\n *\r\n * @param filename\r\n * \t\tthe filename\r\n * @param keepSeparator\r\n * \t\ttrue to keep the final separator\r\n * @return the normalized filename\r\n */\r\nprivate static java.lang.String doNormalize(java.lang.String filename, boolean keepSeparator) {\r\n    if (filename == null) {\r\n        return null;\r\n    }\r\n    int size = filename.length();\r\n    if (size == 0) {\r\n        return filename;\r\n    }\r\n    int prefix = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\r\n    if (prefix < 0) {\r\n        return null;\r\n    }\r\n    char[] array = new char[size + 2];// +1 for possible extra slash, +2 for arraycopy\r\n\r\n    filename.getChars(0, filename.length(), array, 0);\r\n    // fix separators throughout\r\n    for (int i = 0; i < array.length; i++) {\r\n        if (array[i] == org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR) {\r\n            array[i] = org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR;\r\n        }\r\n    }\r\n    // add extra separator on the end to simplify code below\r\n    boolean lastIsDirectory = true;\r\n    if (array[size - 1] != org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR) {\r\n        array[size++] = org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR;\r\n        lastIsDirectory = false;\r\n    }\r\n    // adjoining slashes\r\n    for (int i = prefix + 1; i < size; i++) {\r\n        if ((array[i] == org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR) && (array[i - 1] == org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR)) {\r\n            java.lang.System.arraycopy(array, i, array, i - 1, size - i);\r\n            size--;\r\n            i--;\r\n        }\r\n    }\r\n    // dot slash\r\n    for (int i = prefix + 1; i < size; i++) {\r\n        if (((array[i] == org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR) && (array[i - 1] == '.')) && ((i == (prefix + 1)) || (array[i - 2] == org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR))) {\r\n            if (i == (size - 1)) {\r\n                lastIsDirectory = true;\r\n            }\r\n            java.lang.System.arraycopy(array, i + 1, array, i - 1, size - i);\r\n            size -= 2;\r\n            i--;\r\n        }\r\n    }\r\n    // double dot slash\r\n    outer : for (int i = prefix + 2; i < size; i++) {\r\n        if ((((array[i] == org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR) && (array[i - 1] == '.')) && (array[i - 2] == '.')) && ((i == (prefix + 2)) || (array[i - 3] == org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR))) {\r\n            if (i == (prefix + 2)) {\r\n                return null;\r\n            }\r\n            if (i == (size - 1)) {\r\n                lastIsDirectory = true;\r\n            }\r\n            int j;\r\n            for (j = i - 4; j >= prefix; j--) {\r\n                if (array[j] == org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR) {\r\n                    // remove b/../ from a/b/../c\r\n                    java.lang.System.arraycopy(array, i + 1, array, j + 1, size - i);\r\n                    size -= i - j;\r\n                    i = j + 1;\r\n                    continue outer;\r\n                }\r\n            }\r\n            // remove a/../ from a/../c\r\n            java.lang.System.arraycopy(array, i + 1, array, prefix, size - i);\r\n            size -= (i + 1) - prefix;\r\n            i = prefix + 1;\r\n        }\r\n    }\r\n    if (size <= 0) {\r\n        // should never be less than 0\r\n        return \"\";\r\n    }\r\n    if (size <= prefix) {\r\n        // should never be less than prefix\r\n        return new java.lang.String(array, 0, size);\r\n    }\r\n    if (lastIsDirectory && keepSeparator) {\r\n        return new java.lang.String(array, 0, size);// keep trailing separator\r\n\r\n    }\r\n    return new java.lang.String(array, 0, size - 1);// lose trailing separator\r\n\r\n}", "docComment": "Internal method to perform the normalization.\r\n\r\n@param filename\r\n\t\tthe filename\r\n@param keepSeparator\r\n\t\ttrue to keep the final separator\r\n@return the normalized filename\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFileResults()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "kind": "method", "sourceText": "protected abstract java.util.List getFileResults();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(String)\r\n */\r\npublic void write(java.lang.String str) throws java.io.IOException {\r\n    this.out.write(str);\r\n}", "docComment": "\r\n@see java.io.Writer#write(String)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "lookFor", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter.\r\n *\r\n * @param file\r\n * \t\tthe file to write to, not null\r\n * @param append\r\n * \t\ttrue if content should be appended, false to overwrite\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.io.File file, boolean append) throws java.io.IOException {\r\n    this(file, append, null);\r\n}", "docComment": "Constructs a LockableFileWriter.\r\n\r\n@param file\r\n\t\tthe file to write to, not null\r\n@param append\r\n\t\ttrue if content should be appended, false to overwrite\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "normalizeNoEndSeparator(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Normalizes a path, removing double and single dot path steps,\r\n * and removing any final directory separator.\r\n * <p>\r\n * This method normalizes a path to a standard format.\r\n * The input may contain separators in either Unix or Windows format.\r\n * The output will contain separators in the format of the system.\r\n * <p>\r\n * A trailing slash will be removed.\r\n * A double slash will be merged to a single slash (but UNC names are handled).\r\n * A single dot path segment will be removed.\r\n * A double dot will cause that path segment and the one before to be removed.\r\n * If the double dot has no parent path segment to work with, <code>null</code>\r\n * is returned.\r\n * <p>\r\n * The output will be the same on both Unix and Windows except\r\n * for the separator character.\r\n * <pre>\r\n * /foo//               -->   /foo\r\n * /foo/./              -->   /foo\r\n * /foo/../bar          -->   /bar\r\n * /foo/../bar/         -->   /bar\r\n * /foo/../bar/../baz   -->   /baz\r\n * //foo//./bar         -->   /foo/bar\r\n * /../                 -->   null\r\n * ../foo               -->   null\r\n * foo/bar/..           -->   foo\r\n * foo/../../bar        -->   null\r\n * foo/../bar           -->   bar\r\n * //server/foo/../bar  -->   //server/bar\r\n * //server/../bar      -->   null\r\n * C:\\foo\\..\\bar        -->   C:\\bar\r\n * C:\\..\\bar            -->   null\r\n * ~/foo/../bar/        -->   ~/bar\r\n * ~/../bar             -->   null\r\n * </pre>\r\n * (Note the file separator returned will be correct for Windows/Unix)\r\n *\r\n * @param filename\r\n * \t\tthe filename to normalize, null returns null\r\n * @return the normalized filename, or null if invalid\r\n */\r\npublic static java.lang.String normalizeNoEndSeparator(java.lang.String filename) {\r\n    return org.apache.commons.io.FilenameUtils.doNormalize(filename, false);\r\n}", "docComment": "Normalizes a path, removing double and single dot path steps,\r\nand removing any final directory separator.\r\n<p>\r\nThis method normalizes a path to a standard format.\r\nThe input may contain separators in either Unix or Windows format.\r\nThe output will contain separators in the format of the system.\r\n<p>\r\nA trailing slash will be removed.\r\nA double slash will be merged to a single slash (but UNC names are handled).\r\nA single dot path segment will be removed.\r\nA double dot will cause that path segment and the one before to be removed.\r\nIf the double dot has no parent path segment to work with, <code>null</code>\r\nis returned.\r\n<p>\r\nThe output will be the same on both Unix and Windows except\r\nfor the separator character.\r\n<pre>\r\n/foo//               -->   /foo\r\n/foo/./              -->   /foo\r\n/foo/../bar          -->   /bar\r\n/foo/../bar/         -->   /bar\r\n/foo/../bar/../baz   -->   /baz\r\n//foo//./bar         -->   /foo/bar\r\n/../                 -->   null\r\n../foo               -->   null\r\nfoo/bar/..           -->   foo\r\nfoo/../../bar        -->   null\r\nfoo/../bar           -->   bar\r\n//server/foo/../bar  -->   //server/bar\r\n//server/../bar      -->   null\r\nC:\\foo\\..\\bar        -->   C:\\bar\r\nC:\\..\\bar            -->   null\r\n~/foo/../bar/        -->   ~/bar\r\n~/../bar             -->   null\r\n</pre>\r\n(Note the file separator returned will be correct for Windows/Unix)\r\n\r\n@param filename\r\n\t\tthe filename to normalize, null returns null\r\n@return the normalized filename, or null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read()", "qualifiedName": "org.apache.commons.io.input.ProxyReader.read()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#read()\r\n */\r\npublic int read() throws java.io.IOException {\r\n    return this.in.read();\r\n}", "docComment": "\r\n@see java.io.Reader#read()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.tearDown()", "kind": "method", "sourceText": "public void tearDown() {\r\n    try {\r\n        org.apache.commons.io.FileUtils.deleteDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n    } catch (java.io.IOException ioe) {\r\n        // Ignore, because by this time, it is too late.\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "fileName", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedFloat(java.io.OutputStream,float)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"float\" value to an OutputStream. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param output\r\n * \t\ttarget OutputStream\r\n * @param value\r\n * \t\tvalue to write\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static void writeSwappedFloat(java.io.OutputStream output, float value) throws java.io.IOException {\r\n    org.apache.commons.io.EndianUtils.writeSwappedInteger(output, java.lang.Float.floatToIntBits(value));\r\n}", "docComment": "Writes a \"float\" value to an OutputStream. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param output\r\n\t\ttarget OutputStream\r\n@param value\r\n\t\tvalue to write\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest.testNull()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNull()", "qualifiedName": "org.apache.commons.io.output.NullOutputStreamTest.testNull()", "kind": "method", "sourceText": "public void testNull() throws java.io.IOException {\r\n    org.apache.commons.io.output.NullOutputStream nos = new org.apache.commons.io.output.NullOutputStream();\r\n    nos.write(\"string\".getBytes());\r\n    nos.write(\"some string\".getBytes(), 3, 5);\r\n    nos.write(1);\r\n    nos.write(0xf);\r\n    nos.flush();\r\n    nos.close();\r\n    nos.write(\"allowed\".getBytes());\r\n    nos.write(255);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readLines(java.io.Reader)", "qualifiedName": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>Reader</code> as a list of Strings,\r\n * one entry per line.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from, not null\r\n * @return the list of Strings, never null\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static java.util.List readLines(java.io.Reader input) throws java.io.IOException {\r\n    java.io.BufferedReader reader = new java.io.BufferedReader(input);\r\n    java.util.List list = new java.util.ArrayList();\r\n    java.lang.String line = reader.readLine();\r\n    while (line != null) {\r\n        list.add(line);\r\n        line = reader.readLine();\r\n    } \r\n    return list;\r\n}", "docComment": "Get the contents of a <code>Reader</code> as a list of Strings,\r\none entry per line.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from, not null\r\n@return the list of Strings, never null\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.reaper", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The thread that will clean up registered files.\r\n */\r\nprivate static java.lang.Thread reaper = new java.lang.Thread(\"File Reaper\") {\r\n    1(java.lang.String $anonymous0) {\r\n        super($anonymous0);\r\n    }\r\n\r\n    /**\r\n     * Run the reaper thread that will delete files as their associated\r\n     * marker objects are reclaimed by the garbage collector.\r\n     */\r\n    public void run() {\r\n        for (; ;) {\r\n            org.apache.commons.io.FileCleaner.Tracker tracker = null;\r\n            try {\r\n                // Wait for a tracker to remove.\r\n                tracker = ((org.apache.commons.io.FileCleaner.Tracker) (org.apache.commons.io.FileCleaner.q.remove()));\r\n            } catch (java.lang.Exception e) {\r\n                continue;\r\n            }\r\n            tracker.delete();\r\n            tracker.clear();\r\n            org.apache.commons.io.FileCleaner.trackers.remove(tracker);\r\n        }\r\n    }\r\n};", "visibility": "private", "simpleName": "reaper", "qualifiedName": "org.apache.commons.io.FileCleaner.reaper", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToWriter_Encoding_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "kind": "method", "sourceText": "public void testWrite_charArrayToWriter_Encoding_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(((char[]) (null)), writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase.setUp()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#setUp()\r\n */\r\nprotected void setUp() throws java.lang.Exception {\r\n    org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n}", "docComment": "\r\n@see junit.framework.TestCase#setUp()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsFileNewerImaginaryFile()", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()", "kind": "method", "sourceText": "/**\r\n * Tests the <code>isFileNewer(File, *)</code> methods which a not existing file.\r\n *\r\n * @see FileUtils#isFileNewer(File, long)\r\n * @see FileUtils#isFileNewer(File, Date)\r\n * @see FileUtils#isFileNewer(File, File)\r\n */\r\npublic void testIsFileNewerImaginaryFile() {\r\n    java.io.File imaginaryFile = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"imaginaryFile\");\r\n    if (imaginaryFile.exists()) {\r\n        throw new java.lang.IllegalStateException(\"The imaginary File exists\");\r\n    }\r\n    this.testIsFileNewer(\"imaginary file can be newer\", imaginaryFile, 0, false);\r\n}", "docComment": "Tests the <code>isFileNewer(File, *)</code> methods which a not existing file.\r\n\r\n@see FileUtils#isFileNewer(File, long)\r\n@see FileUtils#isFileNewer(File, Date)\r\n@see FileUtils#isFileNewer(File, File)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.HexDumpTest.main(java.lang.String[])", "kind": "static method", "sourceText": "/**\r\n * main method to run the unit tests\r\n *\r\n * @param ignored_args\r\n */\r\npublic static void main(java.lang.String[] ignored_args) {\r\n    java.lang.System.out.println(\"Testing io.HexDump functionality\");\r\n    junit.textui.TestRunner.run(org.apache.commons.io.HexDumpTest.class);\r\n}", "docComment": "main method to run the unit tests\r\n\r\n@param ignored_args\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase", "labels": ["Structure"], "properties": {"docComment": "JUnit tests for IOUtils write methods.\r\n\r\n@author Jeff Turner\r\n@author Matthew Hawthorne\r\n@author Jeremias Maerki\r\n@author Stephen Colebourne\r\n@version $Id$\r\n@see IOUtils\r\n", "simpleName": "IOUtilsWriteTestCase", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.testDump()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testDump()", "qualifiedName": "org.apache.commons.io.HexDumpTest.testDump()", "kind": "method", "sourceText": "/**\r\n * test dump method\r\n *\r\n * @exception IOException\r\n */\r\npublic void testDump() throws java.io.IOException {\r\n    byte[] testArray = new byte[256];\r\n    for (int j = 0; j < 256; j++) {\r\n        testArray[j] = ((byte) (j));\r\n    }\r\n    org.apache.commons.io.output.ByteArrayOutputStream stream = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.HexDump.dump(testArray, 0, stream, 0);\r\n    byte[] outputArray = new byte[16 * (73 + org.apache.commons.io.HexDump.EOL.length())];\r\n    for (int j = 0; j < 16; j++) {\r\n        int offset = (73 + org.apache.commons.io.HexDump.EOL.length()) * j;\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) (this.toHex(j)));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) (' '));\r\n        for (int k = 0; k < 16; k++) {\r\n            outputArray[offset++] = ((byte) (this.toHex(j)));\r\n            outputArray[offset++] = ((byte) (this.toHex(k)));\r\n            outputArray[offset++] = ((byte) (' '));\r\n        }\r\n        for (int k = 0; k < 16; k++) {\r\n            outputArray[offset++] = ((byte) (this.toAscii((j * 16) + k)));\r\n        }\r\n        java.lang.System.arraycopy(org.apache.commons.io.HexDump.EOL.getBytes(), 0, outputArray, offset, org.apache.commons.io.HexDump.EOL.getBytes().length);\r\n    }\r\n    byte[] actualOutput = stream.toByteArray();\r\n    this.assertEquals(\"array size mismatch\", outputArray.length, actualOutput.length);\r\n    for (int j = 0; j < outputArray.length; j++) {\r\n        this.assertEquals((\"array[ \" + j) + \"] mismatch\", outputArray[j], actualOutput[j]);\r\n    }\r\n    // verify proper behavior with non-zero offset\r\n    stream = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.HexDump.dump(testArray, 0x10000000, stream, 0);\r\n    outputArray = new byte[16 * (73 + org.apache.commons.io.HexDump.EOL.length())];\r\n    for (int j = 0; j < 16; j++) {\r\n        int offset = (73 + org.apache.commons.io.HexDump.EOL.length()) * j;\r\n        outputArray[offset++] = ((byte) ('1'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) (this.toHex(j)));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) (' '));\r\n        for (int k = 0; k < 16; k++) {\r\n            outputArray[offset++] = ((byte) (this.toHex(j)));\r\n            outputArray[offset++] = ((byte) (this.toHex(k)));\r\n            outputArray[offset++] = ((byte) (' '));\r\n        }\r\n        for (int k = 0; k < 16; k++) {\r\n            outputArray[offset++] = ((byte) (this.toAscii((j * 16) + k)));\r\n        }\r\n        java.lang.System.arraycopy(org.apache.commons.io.HexDump.EOL.getBytes(), 0, outputArray, offset, org.apache.commons.io.HexDump.EOL.getBytes().length);\r\n    }\r\n    actualOutput = stream.toByteArray();\r\n    this.assertEquals(\"array size mismatch\", outputArray.length, actualOutput.length);\r\n    for (int j = 0; j < outputArray.length; j++) {\r\n        this.assertEquals((\"array[ \" + j) + \"] mismatch\", outputArray[j], actualOutput[j]);\r\n    }\r\n    // verify proper behavior with negative offset\r\n    stream = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.HexDump.dump(testArray, 0xff000000, stream, 0);\r\n    outputArray = new byte[16 * (73 + org.apache.commons.io.HexDump.EOL.length())];\r\n    for (int j = 0; j < 16; j++) {\r\n        int offset = (73 + org.apache.commons.io.HexDump.EOL.length()) * j;\r\n        outputArray[offset++] = ((byte) ('F'));\r\n        outputArray[offset++] = ((byte) ('F'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) (this.toHex(j)));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) (' '));\r\n        for (int k = 0; k < 16; k++) {\r\n            outputArray[offset++] = ((byte) (this.toHex(j)));\r\n            outputArray[offset++] = ((byte) (this.toHex(k)));\r\n            outputArray[offset++] = ((byte) (' '));\r\n        }\r\n        for (int k = 0; k < 16; k++) {\r\n            outputArray[offset++] = ((byte) (this.toAscii((j * 16) + k)));\r\n        }\r\n        java.lang.System.arraycopy(org.apache.commons.io.HexDump.EOL.getBytes(), 0, outputArray, offset, org.apache.commons.io.HexDump.EOL.getBytes().length);\r\n    }\r\n    actualOutput = stream.toByteArray();\r\n    this.assertEquals(\"array size mismatch\", outputArray.length, actualOutput.length);\r\n    for (int j = 0; j < outputArray.length; j++) {\r\n        this.assertEquals((\"array[ \" + j) + \"] mismatch\", outputArray[j], actualOutput[j]);\r\n    }\r\n    // verify proper behavior with non-zero index\r\n    stream = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.HexDump.dump(testArray, 0x10000000, stream, 0x81);\r\n    outputArray = new byte[(8 * (73 + org.apache.commons.io.HexDump.EOL.length())) - 1];\r\n    for (int j = 0; j < 8; j++) {\r\n        int offset = (73 + org.apache.commons.io.HexDump.EOL.length()) * j;\r\n        outputArray[offset++] = ((byte) ('1'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) ('0'));\r\n        outputArray[offset++] = ((byte) (this.toHex(j + 8)));\r\n        outputArray[offset++] = ((byte) ('1'));\r\n        outputArray[offset++] = ((byte) (' '));\r\n        for (int k = 0; k < 16; k++) {\r\n            int index = (0x81 + (j * 16)) + k;\r\n            if (index < 0x100) {\r\n                outputArray[offset++] = ((byte) (this.toHex(index / 16)));\r\n                outputArray[offset++] = ((byte) (this.toHex(index)));\r\n            } else {\r\n                outputArray[offset++] = ((byte) (' '));\r\n                outputArray[offset++] = ((byte) (' '));\r\n            }\r\n            outputArray[offset++] = ((byte) (' '));\r\n        }\r\n        for (int k = 0; k < 16; k++) {\r\n            int index = (0x81 + (j * 16)) + k;\r\n            if (index < 0x100) {\r\n                outputArray[offset++] = ((byte) (this.toAscii(index)));\r\n            }\r\n        }\r\n        java.lang.System.arraycopy(org.apache.commons.io.HexDump.EOL.getBytes(), 0, outputArray, offset, org.apache.commons.io.HexDump.EOL.getBytes().length);\r\n    }\r\n    actualOutput = stream.toByteArray();\r\n    this.assertEquals(\"array size mismatch\", outputArray.length, actualOutput.length);\r\n    for (int j = 0; j < outputArray.length; j++) {\r\n        this.assertEquals((\"array[ \" + j) + \"] mismatch\", outputArray[j], actualOutput[j]);\r\n    }\r\n    // verify proper behavior with negative index\r\n    try {\r\n        org.apache.commons.io.HexDump.dump(testArray, 0x10000000, new org.apache.commons.io.output.ByteArrayOutputStream(), -1);\r\n        this.fail(\"should have caught ArrayIndexOutOfBoundsException on negative index\");\r\n    } catch (java.lang.ArrayIndexOutOfBoundsException ignored_exception) {\r\n        // as expected\r\n    }\r\n    // verify proper behavior with index that is too large\r\n    try {\r\n        org.apache.commons.io.HexDump.dump(testArray, 0x10000000, new org.apache.commons.io.output.ByteArrayOutputStream(), testArray.length);\r\n        this.fail(\"should have caught ArrayIndexOutOfBoundsException on large index\");\r\n    } catch (java.lang.ArrayIndexOutOfBoundsException ignored_exception) {\r\n        // as expected\r\n    }\r\n    // verify proper behavior with null stream\r\n    try {\r\n        org.apache.commons.io.HexDump.dump(testArray, 0x10000000, null, 0);\r\n        this.fail(\"should have caught IllegalArgumentException on negative index\");\r\n    } catch (java.lang.IllegalArgumentException ignored_exception) {\r\n        // as expected\r\n    }\r\n}", "docComment": "test dump method\r\n\r\n@exception IOException\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToWriter_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "kind": "method", "sourceText": "public void testWrite_byteArrayToWriter_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(((byte[]) (null)), writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testDirectory()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()", "kind": "method", "sourceText": "public void testDirectory() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = new org.apache.commons.io.filefilter.DirectoryFileFilter();\r\n    this.assertFiltering(filter, new java.io.File(\"src/\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"src/java/\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"project.xml\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"imaginary\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"imaginary/\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"STATUS.html\"), false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "threadName", "qualifiedName": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSeparatorsToUnix()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testSeparatorsToUnix() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.separatorsToUnix(null));\r\n    this.assertEquals(\"/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToUnix(\"/a/b/c\"));\r\n    this.assertEquals(\"/a/b/c.txt\", org.apache.commons.io.FilenameUtils.separatorsToUnix(\"/a/b/c.txt\"));\r\n    this.assertEquals(\"/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToUnix(\"/a/b\\\\c\"));\r\n    this.assertEquals(\"/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToUnix(\"\\\\a\\\\b\\\\c\"));\r\n    this.assertEquals(\"D:/a/b/c\", org.apache.commons.io.FilenameUtils.separatorsToUnix(\"D:\\\\a\\\\b\\\\c\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils()", "kind": "constructor", "sourceText": "/**\r\n * FileFilterUtils is not normally instantiated.\r\n */\r\npublic FileFilterUtils() {\r\n    super();\r\n}", "docComment": "FileFilterUtils is not normally instantiated.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetPathNoEndSeparator()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()", "kind": "method", "sourceText": "public void testGetPathNoEndSeparator() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPath(null));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPath(\"noseperator.inthispath\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"a/b/c.txt\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"a/b/c\"));\r\n    this.assertEquals(\"a/b/c\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"a/b/c/\"));\r\n    this.assertEquals(\"a\\\\b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\":\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"1:/a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"1:\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"1:a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"///a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"//a\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"C:\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"C:/\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"//server/\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"~\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"~/\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"~user\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"~user/\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"a/b/c.txt\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"/a/b/c.txt\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"C:a\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"C:a/b/c.txt\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"C:/a/b/c.txt\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"//server/a/b/c.txt\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"~/a/b/c.txt\"));\r\n    this.assertEquals(\"a/b\", org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(\"~user/a/b/c.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadSwappedInteger()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()", "kind": "method", "sourceText": "public void testReadSwappedInteger() throws java.io.IOException {\r\n    byte[] bytes = new byte[]{ 0x4, 0x3, 0x2, 0x1 };\r\n    this.assertEquals(0x1020304, org.apache.commons.io.EndianUtils.readSwappedInteger(bytes, 0));\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(bytes);\r\n    this.assertEquals(0x1020304, org.apache.commons.io.EndianUtils.readSwappedInteger(input));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setFileFilters(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void setFileFilters(final java.util.List fileFilters) {\r\n    this.fileFilters = fileFilters;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream", "labels": ["Structure"], "properties": {"docComment": "This OutputStream writes all data to the famous <b>/dev/null</b>.\r\n<p>\r\nThis output stream has no destination (file/socket etc.) and all\r\nbytes written to it are ignored and lost.\r\n\r\n@author Jeremias Maerki\r\n@version $Id$\r\n", "simpleName": "NullOutputStream", "qualifiedName": "org.apache.commons.io.output.NullOutputStream", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[])", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[])\r\n */\r\npublic void write(byte[] bts) throws java.io.IOException {\r\n    this.out.write(bts);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[])\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename1", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFileFilters()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic java.util.List getFileFilters() {\r\n    return java.util.Collections.unmodifiableList(this.fileFilters);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The extension separator character.\r\n */\r\nprivate static final char EXTENSION_SEPARATOR = '.';", "visibility": "private", "simpleName": "EXTENSION_SEPARATOR", "qualifiedName": "org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "ch", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.getCount()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getCount()", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.getCount()", "kind": "method", "sourceText": "/**\r\n * The number of bytes that have passed through this stream.\r\n *\r\n * @return the number of bytes accumulated\r\n */\r\npublic int getCount() {\r\n    return this.count;\r\n}", "docComment": "The number of bytes that have passed through this stream.\r\n\r\n@return the number of bytes accumulated\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "extension", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new Suffix file filter for a list of suffixes.\r\n *\r\n * @param suffixes\r\n * \t\tthe suffixes to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the suffix list is null\r\n * @throws ClassCastException\r\n * \t\tif the list does not contain Strings\r\n */\r\npublic SuffixFileFilter(java.util.List suffixes) {\r\n    super();\r\n    if (suffixes == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The list of suffixes must not be null\");\r\n    }\r\n    this.suffixes = ((java.lang.String[]) (suffixes.toArray(new java.lang.String[suffixes.size()])));\r\n}", "docComment": "Constructs a new Suffix file filter for a list of suffixes.\r\n\r\n@param suffixes\r\n\t\tthe suffixes to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the suffix list is null\r\n@throws ClassCastException\r\n\t\tif the list does not contain Strings\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "prefixes", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testInputStream()", "qualifiedName": "org.apache.commons.io.DemuxTestCase.testInputStream()", "kind": "method", "sourceText": "public void testInputStream() throws java.lang.Exception {\r\n    org.apache.commons.io.input.DemuxInputStream input = new org.apache.commons.io.input.DemuxInputStream();\r\n    this.startReader(org.apache.commons.io.DemuxTestCase.T1, org.apache.commons.io.DemuxTestCase.DATA1, input);\r\n    this.startReader(org.apache.commons.io.DemuxTestCase.T2, org.apache.commons.io.DemuxTestCase.DATA2, input);\r\n    this.startReader(org.apache.commons.io.DemuxTestCase.T3, org.apache.commons.io.DemuxTestCase.DATA3, input);\r\n    this.startReader(org.apache.commons.io.DemuxTestCase.T4, org.apache.commons.io.DemuxTestCase.DATA4, input);\r\n    this.doStart();\r\n    this.doJoin();\r\n    this.assertEquals(\"Data1\", org.apache.commons.io.DemuxTestCase.DATA1, this.getInput(org.apache.commons.io.DemuxTestCase.T1));\r\n    this.assertEquals(\"Data2\", org.apache.commons.io.DemuxTestCase.DATA2, this.getInput(org.apache.commons.io.DemuxTestCase.T2));\r\n    this.assertEquals(\"Data3\", org.apache.commons.io.DemuxTestCase.DATA3, this.getInput(org.apache.commons.io.DemuxTestCase.T3));\r\n    this.assertEquals(\"Data4\", org.apache.commons.io.DemuxTestCase.DATA4, this.getInput(org.apache.commons.io.DemuxTestCase.T4));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "equalsNormalized(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Checks whether two filenames are equal after both have been normalized.\r\n * <p>\r\n * Both filenames are first passed to {@link #normalize(String)}.\r\n * The check is then performed in a case-sensitive manner.\r\n *\r\n * @param filename1\r\n * \t\tthe first filename to query, may be null\r\n * @param filename2\r\n * \t\tthe second filename to query, may be null\r\n * @return true if the filenames are equal, null equals null\r\n */\r\npublic static boolean equalsNormalized(java.lang.String filename1, java.lang.String filename2) {\r\n    return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, true);\r\n}", "docComment": "Checks whether two filenames are equal after both have been normalized.\r\n<p>\r\nBoth filenames are first passed to {@link #normalize(String)}.\r\nThe check is then performed in a case-sensitive manner.\r\n\r\n@param filename1\r\n\t\tthe first filename to query, may be null\r\n@param filename2\r\n\t\tthe second filename to query, may be null\r\n@return true if the filenames are equal, null equals null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter", "labels": ["Structure"], "properties": {"docComment": "This class turns a Java FileFilter or FilenameFilter into an IO FileFilter.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n", "simpleName": "DelegateFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadSwappedFloat()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()", "kind": "method", "sourceText": "public void testReadSwappedFloat() throws java.io.IOException {\r\n    byte[] bytes = new byte[]{ 0x4, 0x3, 0x2, 0x1 };\r\n    float f1 = java.lang.Float.intBitsToFloat(0x1020304);\r\n    float f2 = org.apache.commons.io.EndianUtils.readSwappedFloat(bytes, 0);\r\n    this.assertEquals(f1, f2, 0.0);\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(bytes);\r\n    this.assertEquals(f1, org.apache.commons.io.EndianUtils.readSwappedFloat(input), 0.0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_InvalidResponse3()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()", "kind": "method", "sourceText": "public void testGetFreeSpaceUnix_String_InvalidResponse3() throws java.lang.Exception {\r\n    java.lang.String lines = \"Filesystem           1K-blocks      Used Available Use% Mounted on\\n\" + \"xxx:/home/users/s     14428928  12956424        -1  90% /home/users/s\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        13() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    try {\r\n        fsu.freeSpaceUnix(\"/home/users/s\");\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter", "labels": ["Structure"], "properties": {"docComment": "An abstract class which implements the Java FileFilter and FilenameFilter \r\ninterfaces via the IOFileFilter interface.\r\n<p>\r\nNote that a subclass <b>must</b> override one of the accept methods,\r\notherwise your class will infinitely loop.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n", "simpleName": "AbstractFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.AbstractFileFilter", "kind": "abstract class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "public boolean accept(java.io.File file) {\r\n    this.setInvoked(true);\r\n    return super.accept(file);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "wildcardMatch(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Checks a filename to see if it matches the specified wildcard matcher,\r\n * always testing case-sensitive.\r\n * <p>\r\n * The wildcard matcher uses the characters '?' and '*' to represent a\r\n * single or multiple wildcard characters.\r\n * This is the same as often found on Dos/Unix command lines.\r\n * The extension check is case-sensitive.\r\n * <pre>\r\n * wildcardMatch(\"c.txt\", \"*.txt\")      --> true\r\n * wildcardMatch(\"c.txt\", \"*.jpg\")      --> false\r\n * wildcardMatch(\"a/b/c.txt\", \"a/b/*\")  --> true\r\n * wildcardMatch(\"c.txt\", \"*.???\")      --> true\r\n * wildcardMatch(\"c.txt\", \"*.????\")     --> false\r\n * </pre>\r\n *\r\n * @param filename\r\n * \t\tthe filename to match on\r\n * @param wildcardMatcher\r\n * \t\tthe wildcard string to match against\r\n * @return true if the filename matches the wilcard string\r\n */\r\npublic static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher) {\r\n    return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, false);\r\n}", "docComment": "Checks a filename to see if it matches the specified wildcard matcher,\r\nalways testing case-sensitive.\r\n<p>\r\nThe wildcard matcher uses the characters '?' and '*' to represent a\r\nsingle or multiple wildcard characters.\r\nThis is the same as often found on Dos/Unix command lines.\r\nThe extension check is case-sensitive.\r\n<pre>\r\nwildcardMatch(\"c.txt\", \"*.txt\")      --> true\r\nwildcardMatch(\"c.txt\", \"*.jpg\")      --> false\r\nwildcardMatch(\"a/b/c.txt\", \"a/b/*\")  --> true\r\nwildcardMatch(\"c.txt\", \"*.???\")      --> true\r\nwildcardMatch(\"c.txt\", \"*.????\")     --> false\r\n</pre>\r\n\r\n@param filename\r\n\t\tthe filename to match on\r\n@param wildcardMatcher\r\n\t\tthe wildcard string to match against\r\n@return true if the filename matches the wilcard string\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).3", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).2", "labels": ["Variable"], "properties": {"simpleName": "count", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToOutputStream_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "kind": "method", "sourceText": "public void testWrite_stringToOutputStream_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(((java.lang.String) (null)), out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToWriter_nullWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()", "kind": "method", "sourceText": "public void testWrite_byteArrayToWriter_nullWriter() throws java.lang.Exception {\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(this.inData, ((java.io.Writer) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File workingPath;", "visibility": "private", "simpleName": "workingPath", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "toSuffixes(java.lang.String[])", "qualifiedName": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "kind": "static method", "sourceText": "/**\r\n * Converts an array of file extensions to suffixes for use\r\n * with IOFileFilters.\r\n *\r\n * @param extensions\r\n * \t\tan array of extensions. Format: {\"java\", \"xml\"}\r\n * @return an array of suffixes. Format: {\".java\", \".xml\"}\r\n */\r\nprivate static java.lang.String[] toSuffixes(java.lang.String[] extensions) {\r\n    java.lang.String[] suffixes = new java.lang.String[extensions.length];\r\n    for (int i = 0; i < extensions.length; i++) {\r\n        suffixes[i] = \".\" + extensions[i];\r\n    }\r\n    return suffixes;\r\n}", "docComment": "Converts an array of file extensions to suffixes for use\r\nwith IOFileFilters.\r\n\r\n@param extensions\r\n\t\tan array of extensions. Format: {\"java\", \"xml\"}\r\n@return an array of suffixes. Format: {\".java\", \".xml\"}\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "file2", "qualifiedName": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapLong()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSwapLong()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testSwapLong()", "kind": "method", "sourceText": "public void testSwapLong() {\r\n    this.assertEquals(0, org.apache.commons.io.EndianUtils.swapLong(0));\r\n    this.assertEquals(0x807060504030201L, org.apache.commons.io.EndianUtils.swapLong(0x102030405060708L));\r\n    this.assertEquals(0xffffffffffffffffL, org.apache.commons.io.EndianUtils.swapLong(0xffffffffffffffffL));\r\n    this.assertEquals(0xab, org.apache.commons.io.EndianUtils.swapLong(0xab00000000000000L));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyFile2WithoutFileDatePreservation()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "kind": "method", "sourceText": "public void testCopyFile2WithoutFileDatePreservation() throws java.lang.Exception {\r\n    java.io.File destination = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"copy2.txt\");\r\n    // Thread.sleep(LAST_MODIFIED_DELAY);\r\n    // This is to slow things down so we can catch if\r\n    // the lastModified date is not ok\r\n    org.apache.commons.io.FileUtils.copyFile(this.testFile1, destination, false);\r\n    this.assertTrue(\"Check Exist\", destination.exists());\r\n    this.assertTrue(\"Check Full copy\", destination.length() == org.apache.commons.io.FileUtilsTestCase.testFile2Size);\r\n    /* disabled: Thread.sleep doesn't work reliantly for this case\n    assertTrue(\"Check last modified date modified\", \n    testFile1.lastModified() != destination.lastModified());\n     */\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToWriter_Encoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_byteArrayToWriter_Encoding() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(this.inData, writer, \"UTF8\");\r\n    out.off();\r\n    writer.flush();\r\n    byte[] bytes = baout.toByteArray();\r\n    bytes = new java.lang.String(bytes, \"UTF8\").getBytes(\"US-ASCII\");\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, bytes));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "srcDir", "qualifiedName": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "public boolean accept(java.io.File file, java.lang.String str) {\r\n    this.setInvoked(true);\r\n    return super.accept(file, str);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSymmetry()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "kind": "method", "sourceText": "/**\r\n * Tests all swapXxxx methods for symmetry when going from one endian\r\n * to another and back again.\r\n */\r\npublic void testSymmetry() {\r\n    this.assertEquals(((short) (0x102)), org.apache.commons.io.EndianUtils.swapShort(org.apache.commons.io.EndianUtils.swapShort(((short) (0x102)))));\r\n    this.assertEquals(0x1020304, org.apache.commons.io.EndianUtils.swapInteger(org.apache.commons.io.EndianUtils.swapInteger(0x1020304)));\r\n    this.assertEquals(0x102030405060708L, org.apache.commons.io.EndianUtils.swapLong(org.apache.commons.io.EndianUtils.swapLong(0x102030405060708L)));\r\n    float f1 = java.lang.Float.intBitsToFloat(0x1020304);\r\n    this.assertEquals(f1, org.apache.commons.io.EndianUtils.swapFloat(org.apache.commons.io.EndianUtils.swapFloat(f1)), 0.0);\r\n    double d1 = java.lang.Double.longBitsToDouble(0x102030405060708L);\r\n    this.assertEquals(d1, org.apache.commons.io.EndianUtils.swapDouble(org.apache.commons.io.EndianUtils.swapDouble(d1)), 0.0);\r\n}", "docComment": "Tests all swapXxxx methods for symmetry when going from one endian \r\nto another and back again.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(char[],java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "kind": "static method", "sourceText": "/**\r\n * Writes chars from a <code>char[]</code> to bytes on an\r\n * <code>OutputStream</code>.\r\n * <p>\r\n * This method uses {@link String#String(char[])} and\r\n * {@link String#getBytes()}.\r\n *\r\n * @param data\r\n * \t\tthe char array to write, do not modify during output,\r\n * \t\tnull ignored\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(char[] data, java.io.OutputStream output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(new java.lang.String(data).getBytes());\r\n    }\r\n}", "docComment": "Writes chars from a <code>char[]</code> to bytes on an\r\n<code>OutputStream</code>.\r\n<p>\r\nThis method uses {@link String#String(char[])} and\r\n{@link String#getBytes()}.\r\n\r\n@param data\r\n\t\tthe char array to write, do not modify during output,\r\n\t\tnull ignored\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],int,int)", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[], int, int)\r\n */\r\npublic void write(byte[] bts, int st, int end) throws java.io.IOException {\r\n    this.out.write(bts, st, end);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump._hexcodes", "labels": ["Variable"], "properties": {"sourceText": "private static final char[] _hexcodes = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };", "visibility": "private", "simpleName": "_hexcodes", "qualifiedName": "org.apache.commons.io.HexDump._hexcodes", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "proxy", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "float", "labels": ["Primitive"], "properties": {"simpleName": "float", "qualifiedName": "float", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "yellForClose", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "wildcardMatchOnSystem(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Checks a filename to see if it matches the specified wildcard matcher\r\n * using the case rules of the system.\r\n * <p>\r\n * The wildcard matcher uses the characters '?' and '*' to represent a\r\n * single or multiple wildcard characters.\r\n * This is the same as often found on Dos/Unix command lines.\r\n * The check is case-sensitive on Unix and case-insensitive on Windows.\r\n * <pre>\r\n * wildcardMatch(\"c.txt\", \"*.txt\")      --> true\r\n * wildcardMatch(\"c.txt\", \"*.jpg\")      --> false\r\n * wildcardMatch(\"a/b/c.txt\", \"a/b/*\")  --> true\r\n * wildcardMatch(\"c.txt\", \"*.???\")      --> true\r\n * wildcardMatch(\"c.txt\", \"*.????\")     --> false\r\n * </pre>\r\n *\r\n * @param filename\r\n * \t\tthe filename to match on\r\n * @param wildcardMatcher\r\n * \t\tthe wildcard string to match against\r\n * @return true if the filename matches the wilcard string\r\n */\r\npublic static boolean wildcardMatchOnSystem(java.lang.String filename, java.lang.String wildcardMatcher) {\r\n    return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, true);\r\n}", "docComment": "Checks a filename to see if it matches the specified wildcard matcher\r\nusing the case rules of the system.\r\n<p>\r\nThe wildcard matcher uses the characters '?' and '*' to represent a\r\nsingle or multiple wildcard characters.\r\nThis is the same as often found on Dos/Unix command lines.\r\nThe check is case-sensitive on Unix and case-insensitive on Windows.\r\n<pre>\r\nwildcardMatch(\"c.txt\", \"*.txt\")      --> true\r\nwildcardMatch(\"c.txt\", \"*.jpg\")      --> false\r\nwildcardMatch(\"a/b/c.txt\", \"a/b/*\")  --> true\r\nwildcardMatch(\"c.txt\", \"*.???\")      --> true\r\nwildcardMatch(\"c.txt\", \"*.????\")     --> false\r\n</pre>\r\n\r\n@param filename\r\n\t\tthe filename to match on\r\n@param wildcardMatcher\r\n\t\tthe wildcard string to match against\r\n@return true if the filename matches the wilcard string\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DIR_SEPARATOR", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The system directory separator character.\r\n */\r\npublic static final char DIR_SEPARATOR = java.io.File.separatorChar;", "visibility": "public", "simpleName": "DIR_SEPARATOR", "qualifiedName": "org.apache.commons.io.IOUtils.DIR_SEPARATOR", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testTrueResults;", "visibility": "private", "simpleName": "testTrueResults", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getConditionalFileFilter()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "kind": "method", "sourceText": "protected abstract org.apache.commons.io.filefilter.ConditionalFileFilter getConditionalFileFilter();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testDeletesNested()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()", "kind": "method", "sourceText": "public void testDeletesNested() throws java.lang.Exception {\r\n    final java.io.File nested = new java.io.File(this.top, \"nested\");\r\n    this.assertTrue(nested.mkdirs());\r\n    org.apache.commons.io.FileUtils.touch(new java.io.File(nested, \"file\"));\r\n    this.assertEquals(1, this.top.list().length);\r\n    org.apache.commons.io.FileUtils.cleanDirectory(this.top);\r\n    this.assertEquals(0, this.top.list().length);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "key", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.EndianUtils()", "kind": "constructor", "sourceText": "/**\r\n * Instances should NOT be constructed in standard programming.\r\n */\r\npublic EndianUtils() {\r\n    super();\r\n}", "docComment": "Instances should NOT be constructed in standard programming.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.filefilter.PackageTestSuite.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testBelowThreshold()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "kind": "method", "sourceText": "/**\r\n * Tests the case where the amount of data falls below the threshold, and\r\n * is therefore confined to memory.\r\n */\r\npublic void testBelowThreshold() {\r\n    org.apache.commons.io.output.DeferredFileOutputStream dfos = new org.apache.commons.io.output.DeferredFileOutputStream(this.testBytes.length + 42, null);\r\n    try {\r\n        dfos.write(this.testBytes, 0, this.testBytes.length);\r\n        dfos.close();\r\n    } catch (java.io.IOException e) {\r\n        this.fail(\"Unexpected IOException\");\r\n    }\r\n    this.assertTrue(dfos.isInMemory());\r\n    byte[] resultBytes = dfos.getData();\r\n    this.assertTrue(resultBytes.length == this.testBytes.length);\r\n    this.assertTrue(java.util.Arrays.equals(resultBytes, this.testBytes));\r\n}", "docComment": "Tests the case where the amount of data falls below the threshold, and\r\nis therefore confined to memory.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFilenameResults()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()", "kind": "method", "sourceText": "protected java.util.List getFilenameResults() {\r\n    return this.testFilenameResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public IOUtilsCopyTestCase(java.lang.String testName) {\r\n    super(testName);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "off", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildFilterUsingAdd(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "kind": "method", "sourceText": "protected org.apache.commons.io.filefilter.IOFileFilter buildFilterUsingAdd(final java.util.List filters) {\r\n    org.apache.commons.io.filefilter.OrFileFilter filter = new org.apache.commons.io.filefilter.OrFileFilter();\r\n    for (int i = 0; i < filters.size(); i++) {\r\n        filter.addFileFilter(((org.apache.commons.io.filefilter.IOFileFilter) (filters.get(i))));\r\n    }\r\n    return filter;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).0", "labels": ["Variable"], "properties": {"simpleName": "a1", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "labels": ["Variable"], "properties": {"sourceText": "private byte[] currentBuffer;", "visibility": "private", "simpleName": "currentBuffer", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadSwappedDouble()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()", "kind": "method", "sourceText": "public void testReadSwappedDouble() throws java.io.IOException {\r\n    byte[] bytes = new byte[]{ 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1 };\r\n    double d1 = java.lang.Double.longBitsToDouble(0x102030405060708L);\r\n    double d2 = org.apache.commons.io.EndianUtils.readSwappedDouble(bytes, 0);\r\n    this.assertEquals(d1, d2, 0.0);\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(bytes);\r\n    this.assertEquals(d1, org.apache.commons.io.EndianUtils.readSwappedDouble(input), 0.0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_charArrayToWriter() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(str.toCharArray(), writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getDefaultWorkingPath()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()", "kind": "method", "sourceText": "protected java.lang.String getDefaultWorkingPath() {\r\n    return org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "srcFile", "qualifiedName": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readUnsignedByte()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readUnsignedByte()\r\n */\r\npublic int readUnsignedByte() throws java.io.IOException, java.io.EOFException {\r\n    return this.in.read();\r\n}", "docComment": "\r\n@see java.io.DataInput#readUnsignedByte()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(char[],java.io.OutputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Writes chars from a <code>char[]</code> to bytes on an\r\n * <code>OutputStream</code> using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method uses {@link String#String(char[])} and\r\n * {@link String#getBytes(String)}.\r\n *\r\n * @param data\r\n * \t\tthe char array to write, do not modify during output,\r\n * \t\tnull ignored\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(char[] data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\r\n    if (data != null) {\r\n        if (encoding == null) {\r\n            org.apache.commons.io.IOUtils.write(data, output);\r\n        } else {\r\n            output.write(new java.lang.String(data).getBytes(encoding));\r\n        }\r\n    }\r\n}", "docComment": "Writes chars from a <code>char[]</code> to bytes on an\r\n<code>OutputStream</code> using the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method uses {@link String#String(char[])} and\r\n{@link String#getBytes(String)}.\r\n\r\n@param data\r\n\t\tthe char array to write, do not modify during output,\r\n\t\tnull ignored\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_InvalidResponse4()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()", "kind": "method", "sourceText": "public void testGetFreeSpaceUnix_String_InvalidResponse4() throws java.lang.Exception {\r\n    java.lang.String lines = \"Filesystem           1K-blocks      Used Available Use% Mounted on\\n\" + \"xxx-yyyyyyy-zzz:/home/users/s\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        14() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    try {\r\n        fsu.freeSpaceUnix(\"/home/users/s\");\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readUnsignedShort()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readUnsignedShort()\r\n */\r\npublic int readUnsignedShort() throws java.io.IOException, java.io.EOFException {\r\n    return org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(this.in);\r\n}", "docComment": "\r\n@see java.io.DataInput#readUnsignedShort()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.skip(long).0", "labels": ["Variable"], "properties": {"simpleName": "ln", "qualifiedName": "org.apache.commons.io.input.ProxyReader.skip(long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "destFile", "qualifiedName": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new name file filter for a list of names.\r\n *\r\n * @param names\r\n * \t\tthe names to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the name list is null\r\n * @throws ClassCastException\r\n * \t\tif the list does not contain Strings\r\n */\r\npublic NameFileFilter(java.util.List names) {\r\n    super();\r\n    if (names == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The list of names must not be null\");\r\n    }\r\n    this.names = ((java.lang.String[]) (names.toArray(new java.lang.String[names.size()])));\r\n}", "docComment": "Constructs a new name file filter for a list of names.\r\n\r\n@param names\r\n\t\tthe names to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the name list is null\r\n@throws ClassCastException\r\n\t\tif the list does not contain Strings\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "thresholdReached()", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()", "kind": "method", "sourceText": "/**\r\n * Indicates that the configured threshold has been reached, and that a\r\n * subclass should take whatever action necessary on this event. This may\r\n * include changing the underlying output stream.\r\n *\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\nprotected abstract void thresholdReached() throws java.io.IOException;", "docComment": "Indicates that the configured threshold has been reached, and that a\r\nsubclass should take whatever action necessary on this event. This may\r\ninclude changing the underlying output stream.\r\n\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedUnsignedInteger(byte[],int)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "kind": "static method", "sourceText": "/**\r\n * Reads an unsigned integer (32-bit) value from a byte array at a given\r\n * offset. The value is converted to the opposed endian system while\r\n * reading.\r\n *\r\n * @param data\r\n * \t\tsource byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @return the value read\r\n */\r\npublic static long readSwappedUnsignedInteger(byte[] data, int offset) {\r\n    return ((long) (((((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8)) + ((data[offset + 2] & 0xff) << 16)) + ((data[offset + 3] & 0xff) << 24)));\r\n}", "docComment": "Reads an unsigned integer (32-bit) value from a byte array at a given\r\noffset. The value is converted to the opposed endian system while\r\nreading.\r\n\r\n@param data\r\n\t\tsource byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@return the value read\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.setUp()", "kind": "method", "sourceText": "public void setUp() {\r\n    try {\r\n        org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n        this.m_testFile = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file2-test.txt\");\r\n        this.createFile(this.m_testFile, org.apache.commons.io.IOUtilsTestCase.FILE_SIZE);\r\n    } catch (java.io.IOException ioe) {\r\n        throw new java.lang.RuntimeException((\"Can't run this test because \" + \"environment could not be built: \") + ioe.getMessage());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toString(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readFileToByteArray(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * <p>\r\n * Reads the contents of a file into a byte array.\r\n * </p>\r\n *\r\n * @param file\r\n * \t\tthe file to read\r\n * @return The file contents or null if read failed.\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @since Commons IO 1.1\r\n */\r\npublic static byte[] readFileToByteArray(java.io.File file) throws java.io.IOException {\r\n    java.io.InputStream in = new java.io.FileInputStream(file);\r\n    try {\r\n        return org.apache.commons.io.IOUtils.toByteArray(in);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n    }\r\n}", "docComment": "<p>\r\nReads the contents of a file into a byte array.\r\n</p>\r\n\r\n@param file\r\n\t\tthe file to read\r\n@return The file contents or null if read failed.\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The system line separator string.\r\n */\r\npublic static final java.lang.String LINE_SEPARATOR;", "visibility": "public", "simpleName": "LINE_SEPARATOR", "qualifiedName": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFilenameResults;", "visibility": "private", "simpleName": "testFilenameResults", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testForceDeleteAFile2()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()", "kind": "method", "sourceText": "public void testForceDeleteAFile2() throws java.lang.Exception {\r\n    java.io.File destination = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"copy2.txt\");\r\n    destination.createNewFile();\r\n    this.assertTrue(\"Copy2.txt doesn't exist to delete\", destination.exists());\r\n    org.apache.commons.io.FileUtils.forceDelete(destination);\r\n    this.assertTrue(\"Check No Exist\", !destination.exists());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteToSmall()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "kind": "method", "sourceText": "/**\r\n * Test wether writeTo() properly writes small content.\r\n */\r\npublic void testWriteToSmall() {\r\n    java.io.File testFile = new java.io.File(\"testWriteToMem.dat\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baos = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    // Ensure that the test starts from a clean base.\r\n    testFile.delete();\r\n    org.apache.commons.io.output.DeferredFileOutputStream dfos = new org.apache.commons.io.output.DeferredFileOutputStream(this.testBytes.length * 2, testFile);\r\n    try {\r\n        dfos.write(this.testBytes);\r\n        this.assertFalse(testFile.exists());\r\n        this.assertTrue(dfos.isInMemory());\r\n        try {\r\n            dfos.writeTo(baos);\r\n            this.fail(\"Should not have been able to write before closing\");\r\n        } catch (java.io.IOException ioe) {\r\n            // ok, as expected\r\n        }\r\n        dfos.close();\r\n        dfos.writeTo(baos);\r\n    } catch (java.io.IOException ioe) {\r\n        this.fail(\"Unexpected IOException\");\r\n    }\r\n    byte[] copiedBytes = baos.toByteArray();\r\n    this.assertTrue(java.util.Arrays.equals(this.testBytes, copiedBytes));\r\n    testFile.delete();\r\n}", "docComment": "Test wether writeTo() properly writes small content.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "suffixes", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass).0", "labels": ["Variable"], "properties": {"simpleName": "objectStreamClass", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils", "labels": ["Structure"], "properties": {"docComment": "<p>This class provides static utility methods for buffered\r\ncopying between sources (<code>InputStream</code>, <code>Reader</code>,\r\n<code>String</code> and <code>byte[]</code>) and destinations\r\n(<code>OutputStream</code>, <code>Writer</code>, <code>String</code> and\r\n<code>byte[]</code>).</p>\r\n\r\n<p>Unless otherwise noted, these <code>copy</code> methods do <em>not</em>\r\nflush or close the streams. Often doing so would require making non-portable\r\nassumptions about the streams' origin and further use. This means that both\r\nstreams' <code>close()</code> methods must be called after copying. if one\r\nomits this step, then the stream resources (sockets, file descriptors) are\r\nreleased when the associated Stream is garbage-collected. It is not a good\r\nidea to rely on this mechanism. For a good overview of the distinction\r\nbetween \"memory management\" and \"resource management\", see\r\n<a href=\"http://www.unixreview.com/articles/1998/9804/9804ja/ja.htm\">this\r\nUnixReview article</a>.</p>\r\n\r\n<p>For byte-to-char methods, a <code>copy</code> variant allows the encoding\r\nto be selected (otherwise the platform default is used). We would like to\r\nencourage you to always specify the encoding because relying on the platform\r\ndefault can lead to unexpected results.</p>\r\n\r\n<p>We don't provide special variants for the <code>copy</code> methods that\r\nlet you specify the buffer size because in modern VMs the impact on speed\r\nseems to be minimal. We're using a default buffer size of 4 KB.</p>\r\n\r\n<p>The <code>copy</code> methods use an internal buffer when copying. It is\r\ntherefore advisable <em>not</em> to deliberately wrap the stream arguments\r\nto the <code>copy</code> methods in <code>Buffered*</code> streams. For\r\nexample, don't do the following:</p>\r\n\r\n<code>copy( new BufferedInputStream( in ),\r\n  new BufferedOutputStream( out ) );</code>\r\n\r\n<p>The rationale is as follows:</p>\r\n\r\n<p>Imagine that an InputStream's read() is a very expensive operation, which\r\nwould usually suggest wrapping in a BufferedInputStream. The\r\nBufferedInputStream works by issuing infrequent\r\n{@link java.io.InputStream#read(byte[] b, int off, int len)} requests on the\r\nunderlying InputStream, to fill an internal buffer, from which further\r\n<code>read</code> requests can inexpensively get their data (until the buffer\r\nruns out).</p>\r\n\r\n<p>However, the <code>copy</code> methods do the same thing, keeping an\r\ninternal buffer, populated by\r\n{@link InputStream#read(byte[] b, int off, int len)} requests. Having two\r\nbuffers (or three if the destination stream is also buffered) is pointless,\r\nand the unnecessary buffer management hurts performance slightly (about 3%,\r\naccording to some simple experiments).</p>\r\n\r\n<p>Behold, intrepid explorers; a map of this class:</p>\r\n<pre>\r\n      Method      Input               Output          Dependency\r\n      ------      -----               ------          -------\r\n1     copy        InputStream         OutputStream    (primitive)\r\n2     copy        Reader              Writer          (primitive)\r\n\r\n3     copy        InputStream         Writer          2\r\n\r\n4     copy        Reader              OutputStream    2\r\n\r\n5     copy        String              OutputStream    2\r\n6     copy        String              Writer          (trivial)\r\n\r\n7     copy        byte[]              Writer          3\r\n8     copy        byte[]              OutputStream    (trivial)\r\n</pre>\r\n\r\n<p>Note that only the first two methods shuffle bytes; the rest use these\r\ntwo, or (if possible) copy using native Java copy methods. As there are\r\nmethod variants to specify the encoding, each row may\r\ncorrespond to up to 2 methods.</p>\r\n\r\n<p>Origin of code: Excalibur.</p>\r\n\r\n@author Peter Donald\r\n@author Jeff Turner\r\n@author Matthew Hawthorne\r\n@version $Id$\r\n@deprecated Use IOUtils. Will be removed in 2.0.\r\nMethods renamed to IOUtils.write() or IOUtils.copy().\r\nNull handling behaviour changed in IOUtils (null data does not\r\nthrow NullPointerException).\r\n", "simpleName": "CopyUtils", "qualifiedName": "org.apache.commons.io.CopyUtils", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "ioFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "msg", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyDirectoryErrors()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()", "kind": "method", "sourceText": "public void testCopyDirectoryErrors() throws java.lang.Exception {\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyDirectory(null, null);\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyDirectory(new java.io.File(\"a\"), null);\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyDirectory(null, new java.io.File(\"a\"));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyDirectory(new java.io.File(\"doesnt-exist\"), new java.io.File(\"a\"));\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyDirectory(this.testFile1, new java.io.File(\"a\"));\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), this.testFile1);\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testFileUtils()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()", "kind": "method", "sourceText": "/**\r\n * Test the FileUtils implementation.\r\n */\r\n// Used to exist as IOTestCase class\r\npublic void testFileUtils() throws java.lang.Exception {\r\n    // Loads file from classpath\r\n    java.io.File file1 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"test.txt\");\r\n    java.lang.String filename = file1.getAbsolutePath();\r\n    // Create test file on-the-fly (used to be in CVS)\r\n    java.io.OutputStream out = new java.io.FileOutputStream(file1);\r\n    try {\r\n        out.write(\"This is a test\".getBytes(\"UTF-8\"));\r\n    } finally {\r\n        out.close();\r\n    }\r\n    java.io.File file2 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"test2.txt\");\r\n    java.lang.String filename2 = file2.getAbsolutePath();\r\n    // 1.0 These lines commented out as FilenameUtils not in 1.0\r\n    // 1.0        assertTrue(\r\n    // 1.0            \"test.txt extension == \\\"txt\\\"\",\r\n    // 1.0            FilenameUtils.getExtension(filename).equals(\"txt\"));\r\n    // 1.0        assertTrue(\r\n    // 1.0            \"Test file does not exist: \" + filename,\r\n    // 1.0            FilenameUtils.fileExists(filename));\r\n    // 1.0        assertTrue(\r\n    // 1.0            \"Second test file does not exist\",\r\n    // 1.0            !FilenameUtils.fileExists(filename2));\r\n    org.apache.commons.io.FileUtils.writeStringToFile(file2, filename, \"UTF-8\");\r\n    this.assertTrue(file2.exists());\r\n    this.assertTrue(file2.length() > 0);\r\n    java.lang.String file2contents = org.apache.commons.io.FileUtils.readFileToString(file2, \"UTF-8\");\r\n    this.assertTrue(\"Second file's contents correct\", filename.equals(file2contents));\r\n    this.assertTrue(file2.delete());\r\n    // 1.0        FilenameUtils.fileDelete(filename2);\r\n    // 1.0        assertTrue(\r\n    // 1.0            \"Second test file does not exist\",\r\n    // 1.0            !FilenameUtils.fileExists(filename2));\r\n    java.lang.String contents = org.apache.commons.io.FileUtils.readFileToString(new java.io.File(filename), \"UTF-8\");\r\n    this.assertTrue(\"FileUtils.fileRead()\", contents.equals(\"This is a test\"));\r\n}", "docComment": "Test the FileUtils implementation.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Returns true.\r\n *\r\n * @param file\r\n * \t\tthe file to check\r\n * @return true\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    return true;\r\n}", "docComment": "Returns true.\r\n\r\n@param file\r\n\t\tthe file to check\r\n@return true\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.reset()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "reset()", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.reset()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#reset()\r\n */\r\npublic synchronized void reset() throws java.io.IOException {\r\n    this.in.reset();\r\n}", "docComment": "\r\n@see java.io.InputStream#reset()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)", "kind": "constructor", "sourceText": "public SwappedDataInputStreamTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyFile(java.io.File,java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Copies a file to a new location preserving the file date.\r\n * <p>\r\n * This method copies the contents of the specified source file to the\r\n * specified destination file. The directory holding the destination file is\r\n * created if it does not exist. If the destination file exists, then this\r\n * method will overwrite it.\r\n *\r\n * @param srcFile\r\n * \t\tan existing file to copy, must not be null\r\n * @param destFile\r\n * \t\tthe new file, must not be null\r\n * @throws NullPointerException\r\n * \t\tif source or destination is null\r\n * @throws IOException\r\n * \t\tif source or destination is invalid\r\n * @throws IOException\r\n * \t\tif an IO error occurs during copying\r\n * @see #copyFileToDirectory\r\n */\r\npublic static void copyFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\r\n    org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, true);\r\n}", "docComment": "Copies a file to a new location preserving the file date.\r\n<p>\r\nThis method copies the contents of the specified source file to the\r\nspecified destination file. The directory holding the destination file is\r\ncreated if it does not exist. If the destination file exists, then this\r\nmethod will overwrite it.\r\n\r\n@param srcFile\r\n\t\tan existing file to copy, must not be null\r\n@param destFile\r\n\t\tthe new file, must not be null\r\n@throws NullPointerException\r\n\t\tif source or destination is null\r\n@throws IOException\r\n\t\tif source or destination is invalid\r\n@throws IOException\r\n\t\tif an IO error occurs during copying\r\n@see #copyFileToDirectory\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteSwappedDouble()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()", "kind": "method", "sourceText": "public void testWriteSwappedDouble() throws java.io.IOException {\r\n    byte[] bytes = new byte[8];\r\n    double d1 = java.lang.Double.longBitsToDouble(0x102030405060708L);\r\n    org.apache.commons.io.EndianUtils.writeSwappedDouble(bytes, 0, d1);\r\n    this.assertEquals(0x8, bytes[0]);\r\n    this.assertEquals(0x7, bytes[1]);\r\n    this.assertEquals(0x6, bytes[2]);\r\n    this.assertEquals(0x5, bytes[3]);\r\n    this.assertEquals(0x4, bytes[4]);\r\n    this.assertEquals(0x3, bytes[5]);\r\n    this.assertEquals(0x2, bytes[6]);\r\n    this.assertEquals(0x1, bytes[7]);\r\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(8);\r\n    org.apache.commons.io.EndianUtils.writeSwappedDouble(baos, d1);\r\n    bytes = baos.toByteArray();\r\n    this.assertEquals(0x8, bytes[0]);\r\n    this.assertEquals(0x7, bytes[1]);\r\n    this.assertEquals(0x6, bytes[2]);\r\n    this.assertEquals(0x5, bytes[3]);\r\n    this.assertEquals(0x4, bytes[4]);\r\n    this.assertEquals(0x3, bytes[5]);\r\n    this.assertEquals(0x2, bytes[6]);\r\n    this.assertEquals(0x1, bytes[7]);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsFileNewerNoFile()", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()", "kind": "method", "sourceText": "/**\r\n * Tests the <code>isFileNewer(File, long)</code> method without specifying a <code>File</code>.\r\n * <br/>\r\n * The test is successfull if the method throws an <code>IllegalArgumentException</code>.\r\n */\r\npublic void testIsFileNewerNoFile() {\r\n    try {\r\n        org.apache.commons.io.FileUtils.isFileNewer(null, 0);\r\n        this.fail(\"File not specified\");\r\n    } catch (java.lang.IllegalArgumentException e) {\r\n    }\r\n}", "docComment": "Tests the <code>isFileNewer(File, long)</code> method without specifying a <code>File</code>.\r\n<br/>\r\nThe test is successfull if the method throws an <code>IllegalArgumentException</code>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(long)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "dump(long)", "qualifiedName": "org.apache.commons.io.HexDump.dump(long)", "kind": "static method", "sourceText": "private static java.lang.StringBuffer dump(long value) {\r\n    org.apache.commons.io.HexDump._lbuffer.setLength(0);\r\n    for (int j = 0; j < 8; j++) {\r\n        org.apache.commons.io.HexDump._lbuffer.append(org.apache.commons.io.HexDump._hexcodes[((int) (value >> org.apache.commons.io.HexDump._shifts[j])) & 15]);\r\n    }\r\n    return org.apache.commons.io.HexDump._lbuffer;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getOutput(java.lang.String)", "qualifiedName": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "kind": "method", "sourceText": "private java.lang.String getOutput(java.lang.String threadName) throws java.io.IOException {\r\n    org.apache.commons.io.output.ByteArrayOutputStream output = ((org.apache.commons.io.output.ByteArrayOutputStream) (this.m_outputMap.get(threadName)));\r\n    this.assertNotNull(\"getOutput()\", output);\r\n    return output.toString();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFullPath()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()", "kind": "method", "sourceText": "public void testGetFullPath() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPath(null));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getFullPath(\"noseperator.inthispath\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"a/b/c.txt\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"a/b/c\"));\r\n    this.assertEquals(\"a/b/c/\", org.apache.commons.io.FilenameUtils.getFullPath(\"a/b/c/\"));\r\n    this.assertEquals(\"a\\\\b\\\\\", org.apache.commons.io.FilenameUtils.getFullPath(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPath(\":\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPath(\"1:/a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPath(\"1:\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPath(\"1:a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPath(\"///a/b/c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getFullPath(\"//a\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getFullPath(\"\"));\r\n    this.assertEquals(\"C:\", org.apache.commons.io.FilenameUtils.getFullPath(\"C:\"));\r\n    this.assertEquals(\"C:/\", org.apache.commons.io.FilenameUtils.getFullPath(\"C:/\"));\r\n    this.assertEquals(\"//server/\", org.apache.commons.io.FilenameUtils.getFullPath(\"//server/\"));\r\n    this.assertEquals(\"~/\", org.apache.commons.io.FilenameUtils.getFullPath(\"~\"));\r\n    this.assertEquals(\"~/\", org.apache.commons.io.FilenameUtils.getFullPath(\"~/\"));\r\n    this.assertEquals(\"~user/\", org.apache.commons.io.FilenameUtils.getFullPath(\"~user\"));\r\n    this.assertEquals(\"~user/\", org.apache.commons.io.FilenameUtils.getFullPath(\"~user/\"));\r\n    this.assertEquals(\"a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"a/b/c.txt\"));\r\n    this.assertEquals(\"/a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"/a/b/c.txt\"));\r\n    this.assertEquals(\"C:\", org.apache.commons.io.FilenameUtils.getFullPath(\"C:a\"));\r\n    this.assertEquals(\"C:a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"C:a/b/c.txt\"));\r\n    this.assertEquals(\"C:/a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"C:/a/b/c.txt\"));\r\n    this.assertEquals(\"//server/a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"//server/a/b/c.txt\"));\r\n    this.assertEquals(\"~/a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"~/a/b/c.txt\"));\r\n    this.assertEquals(\"~user/a/b/\", org.apache.commons.io.FilenameUtils.getFullPath(\"~user/a/b/c.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testResetting()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "kind": "method", "sourceText": "public void testResetting() throws java.lang.Exception {\r\n    java.lang.String text = \"A piece of text\";\r\n    byte[] bytes = text.getBytes();\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(bytes);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    byte[] result = new byte[bytes.length];\r\n    int found = cis.read(result, 0, 5);\r\n    this.assertEquals(found, cis.getCount());\r\n    int count = cis.resetCount();\r\n    found = cis.read(result, 6, 5);\r\n    this.assertEquals(found, count);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).2", "labels": ["Variable"], "properties": {"simpleName": "writer", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_LongResponse()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()", "kind": "method", "sourceText": "public void testGetFreeSpaceUnix_String_LongResponse() throws java.lang.Exception {\r\n    java.lang.String lines = \"Filesystem           1K-blocks      Used Available Use% Mounted on\\n\" + (\"xxx-yyyyyyy-zzz:/home/users/s\\n\" + \"                      14428928  12956424   1472504  90% /home/users/s\");\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        9() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    this.assertEquals(1472504L, fsu.freeSpaceUnix(\"/home/users/s\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToWriter_nullOut()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()", "kind": "method", "sourceText": "public void testCopy_readerToWriter_nullOut() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(reader, ((java.io.Writer) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.close()", "kind": "method", "sourceText": "/**\r\n * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\r\n * this class can be called after the stream has been closed without\r\n * generating an <tt>IOException</tt>.\r\n *\r\n * @throws IOException\r\n * \t\tin case an I/O error occurs\r\n */\r\npublic void close() throws java.io.IOException {\r\n    // nop\r\n}", "docComment": "Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\r\nthis class can be called after the stream has been closed without\r\ngenerating an <tt>IOException</tt>.\r\n\r\n@throws IOException\r\n\t\tin case an I/O error occurs\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public ByteArrayOutputStreamTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "proxy", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new Prefix file filter for any of an array of prefixes.\r\n * <p>\r\n * The array is not cloned, so could be changed after constructing the\r\n * instance. This would be inadvisable however.\r\n *\r\n * @param prefixes\r\n * \t\tthe prefixes to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the prefix array is null\r\n */\r\npublic PrefixFileFilter(java.lang.String[] prefixes) {\r\n    super();\r\n    if (prefixes == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The array of prefixes must not be null\");\r\n    }\r\n    this.prefixes = prefixes;\r\n}", "docComment": "Constructs a new Prefix file filter for any of an array of prefixes.\r\n<p>\r\nThe array is not cloned, so could be changed after constructing the\r\ninstance. This would be inadvisable however.\r\n\r\n@param prefixes\r\n\t\tthe prefixes to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the prefix array is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)", "kind": "constructor", "sourceText": "public CountingInputStreamTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "dump(byte)", "qualifiedName": "org.apache.commons.io.HexDump.dump(byte)", "kind": "static method", "sourceText": "private static java.lang.StringBuffer dump(byte value) {\r\n    org.apache.commons.io.HexDump._cbuffer.setLength(0);\r\n    for (int j = 0; j < 2; j++) {\r\n        org.apache.commons.io.HexDump._cbuffer.append(org.apache.commons.io.HexDump._hexcodes[(value >> org.apache.commons.io.HexDump._shifts[j + 6]) & 15]);\r\n    }\r\n    return org.apache.commons.io.HexDump._cbuffer;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.reset()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "reset()", "qualifiedName": "org.apache.commons.io.input.ProxyReader.reset()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#reset()\r\n */\r\npublic synchronized void reset() throws java.io.IOException {\r\n    this.in.reset();\r\n}", "docComment": "\r\n@see java.io.Reader#reset()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE", "labels": ["Variable"], "properties": {"sourceText": "// Test data\r\nprivate static final int FILE1_SIZE = 1;", "visibility": "private", "simpleName": "FILE1_SIZE", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).1", "labels": ["Variable"], "properties": {"simpleName": "separatorAdd", "qualifiedName": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.getTrackCount()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getTrackCount()", "qualifiedName": "org.apache.commons.io.FileCleaner.getTrackCount()", "kind": "static method", "sourceText": "/**\r\n * Retrieve the number of files currently being tracked, and therefore\r\n * awaiting deletion.\r\n *\r\n * @return the number of files being tracked.\r\n */\r\npublic static int getTrackCount() {\r\n    return org.apache.commons.io.FileCleaner.trackers.size();\r\n}", "docComment": "Retrieve the number of files currently being tracked, and therefore\r\nawaiting deletion.\r\n\r\n@return the number of files being tracked.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "labels": ["Variable"], "properties": {"sourceText": "private int currentBufferIndex;", "visibility": "private", "simpleName": "currentBufferIndex", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.input.ProxyReader.close()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#close()\r\n */\r\npublic void close() throws java.io.IOException {\r\n    this.in.close();\r\n}", "docComment": "\r\n@see java.io.Reader#close()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache", "labels": ["Container"], "properties": {"simpleName": "apache", "qualifiedName": "org.apache", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "obj", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Singleton instance of false filter\r\n */\r\npublic static final org.apache.commons.io.filefilter.IOFileFilter INSTANCE = new org.apache.commons.io.filefilter.FalseFileFilter();", "visibility": "public", "simpleName": "INSTANCE", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()", "kind": "method", "sourceText": "public void tearDown() {\r\n    this.sdis = null;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileUtilsListFilesTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "protected", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.DirectoryFileFilter()", "kind": "constructor", "sourceText": "/**\r\n * Restrictive consructor.\r\n */\r\nprotected DirectoryFileFilter() {\r\n    super();\r\n}", "docComment": "Restrictive consructor.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).1", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.InputStream,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// Core copy methods\r\n// ----------------------------------------------------------------\r\n/**\r\n * Copy bytes from an <code>InputStream</code> to an\r\n * <code>OutputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @return the number of bytes copied\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\r\n    byte[] buffer = new byte[org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE];\r\n    int count = 0;\r\n    int n = 0;\r\n    while ((-1) != (n = input.read(buffer))) {\r\n        output.write(buffer, 0, n);\r\n        count += n;\r\n    } \r\n    return count;\r\n}", "docComment": "Copy bytes from an <code>InputStream</code> to an\r\n<code>OutputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@return the number of bytes copied\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest", "labels": ["Structure"], "properties": {"docComment": "Test for the SwappedDataInputStream. This also \r\neffectively tests the underlying EndianUtils Stream methods.\r\n\r\n@author Henri Yandell (bayard at apache dot org)\r\n@version $Revision$ $Date$\r\n", "simpleName": "SwappedDataInputStreamTest", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream()", "kind": "constructor", "sourceText": "/**\r\n * Creates a new byte array output stream. The buffer capacity is\r\n * initially 1024 bytes, though its size increases if necessary.\r\n */\r\npublic ByteArrayOutputStream() {\r\n    this(1024);\r\n}", "docComment": "Creates a new byte array output stream. The buffer capacity is \r\ninitially 1024 bytes, though its size increases if necessary.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.FILE_SIZE", "labels": ["Variable"], "properties": {"sourceText": "/* NOTE this is not particularly beautiful code. A better way to check for\nflush and close status would be to implement \"trojan horse\" wrapper\nimplementations of the various stream classes, which set a flag when\nrelevant methods are called. (JT)\n */\r\nprivate static final int FILE_SIZE = (1024 * 4) + 1;", "visibility": "private", "simpleName": "FILE_SIZE", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.FILE_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapDouble()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSwapDouble()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testSwapDouble()", "kind": "method", "sourceText": "public void testSwapDouble() {\r\n    this.assertEquals(0.0, org.apache.commons.io.EndianUtils.swapDouble(0.0), 0.0);\r\n    double d1 = java.lang.Double.longBitsToDouble(0x102030405060708L);\r\n    double d2 = java.lang.Double.longBitsToDouble(0x807060504030201L);\r\n    this.assertEquals(d2, org.apache.commons.io.EndianUtils.swapDouble(d1), 0.0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "out", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "keepSeparator", "qualifiedName": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The separator character that is the opposite of the system separator.\r\n */\r\nprivate static final char OTHER_SEPARATOR;", "visibility": "private", "simpleName": "OTHER_SEPARATOR", "qualifiedName": "org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "str", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "closeQuietly(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Unconditionally close an <code>InputStream</code>.\r\n * <p>\r\n * Equivalent to {@link InputStream#close()}, except any exceptions will be ignored.\r\n * This is typically used in finally blocks.\r\n *\r\n * @param input\r\n * \t\tthe InputStream to close, may be null or already closed\r\n */\r\npublic static void closeQuietly(java.io.InputStream input) {\r\n    try {\r\n        if (input != null) {\r\n            input.close();\r\n        }\r\n    } catch (java.io.IOException ioe) {\r\n        // ignore\r\n    }\r\n}", "docComment": "Unconditionally close an <code>InputStream</code>.\r\n<p>\r\nEquivalent to {@link InputStream#close()}, except any exceptions will be ignored.\r\nThis is typically used in finally blocks.\r\n\r\n@param input\r\n\t\tthe InputStream to close, may be null or already closed\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_EmptyPath()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testGetFreeSpaceUnix_String_EmptyPath() throws java.lang.Exception {\r\n    java.lang.String lines = \"Filesystem           1K-blocks      Used Available Use% Mounted on\\n\" + \"xxx:/home/users/s     14428928  12956424   1472504  90% /home/users/s\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        7() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    try {\r\n        fsu.freeSpaceUnix(\"\");\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyFile2ToDir()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "kind": "method", "sourceText": "public void testCopyFile2ToDir() throws java.lang.Exception {\r\n    java.io.File directory = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"subdir\");\r\n    if (!directory.exists()) {\r\n        directory.mkdirs();\r\n    }\r\n    java.io.File destination = new java.io.File(directory, this.testFile1.getName());\r\n    // Thread.sleep(LAST_MODIFIED_DELAY);\r\n    // This is to slow things down so we can catch if\r\n    // the lastModified date is not ok\r\n    org.apache.commons.io.FileUtils.copyFileToDirectory(this.testFile1, directory);\r\n    this.assertTrue(\"Check Exist\", destination.exists());\r\n    this.assertTrue(\"Check Full copy\", destination.length() == org.apache.commons.io.FileUtilsTestCase.testFile2Size);\r\n    /* disabled: Thread.sleep doesn't work reliantly for this case\n    assertTrue(\"Check last modified date preserved\", \n    testFile1.lastModified() == destination.lastModified());\n     */\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadChar()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()", "kind": "method", "sourceText": "public void testReadChar() throws java.io.IOException {\r\n    this.assertEquals(((char) (0x201)), this.sdis.readChar());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new name file filter for any of an array of names.\r\n * <p>\r\n * The array is not cloned, so could be changed after constructing the\r\n * instance. This would be inadvisable however.\r\n *\r\n * @param names\r\n * \t\tthe names to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the names array is null\r\n */\r\npublic NameFileFilter(java.lang.String[] names) {\r\n    super();\r\n    if (names == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The array of names must not be null\");\r\n    }\r\n    this.names = names;\r\n}", "docComment": "Constructs a new name file filter for any of an array of names.\r\n<p>\r\nThe array is not cloned, so could be changed after constructing the\r\ninstance. This would be inadvisable however.\r\n\r\n@param names\r\n\t\tthe names to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the names array is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFile1()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFile1()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testToFile1() throws java.lang.Exception {\r\n    java.net.URL url = new java.net.URL(\"file\", null, \"a/b/c/file.txt\");\r\n    java.io.File file = org.apache.commons.io.FileUtils.toFile(url);\r\n    this.assertEquals(true, file.toString().indexOf(\"file.txt\") >= 0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.doStart()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doStart()", "qualifiedName": "org.apache.commons.io.DemuxTestCase.doStart()", "kind": "method", "sourceText": "private void doStart() throws java.lang.Exception {\r\n    java.util.Iterator iterator = this.m_threadMap.keySet().iterator();\r\n    while (iterator.hasNext()) {\r\n        java.lang.String name = ((java.lang.String) (iterator.next()));\r\n        java.lang.Thread thread = ((java.lang.Thread) (this.m_threadMap.get(name)));\r\n        thread.start();\r\n    } \r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getWorkingPathNamePropertyKey()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()", "kind": "method", "sourceText": "protected java.lang.String getWorkingPathNamePropertyKey() {\r\n    return org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceOS_String_Other()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()", "kind": "method", "sourceText": "public void testGetFreeSpaceOS_String_Other() throws java.lang.Exception {\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils();\r\n    try {\r\n        fsu.freeSpaceOS(\"\", 0);\r\n        this.fail();\r\n    } catch (java.lang.IllegalStateException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.AbstractFileFilter()", "kind": "constructor", "sourceText": "AbstractFileFilter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker.path", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The full path to the file being tracked.\r\n */\r\nprivate java.lang.String path;", "visibility": "private", "simpleName": "path", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker.path", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testRemoveExtension()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()", "kind": "method", "sourceText": "public void testRemoveExtension() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.removeExtension(null));\r\n    this.assertEquals(\"file\", org.apache.commons.io.FilenameUtils.removeExtension(\"file.ext\"));\r\n    this.assertEquals(\"README\", org.apache.commons.io.FilenameUtils.removeExtension(\"README\"));\r\n    this.assertEquals(\"domain.dot\", org.apache.commons.io.FilenameUtils.removeExtension(\"domain.dot.com\"));\r\n    this.assertEquals(\"image\", org.apache.commons.io.FilenameUtils.removeExtension(\"image.jpeg\"));\r\n    this.assertEquals(\"a.b/c\", org.apache.commons.io.FilenameUtils.removeExtension(\"a.b/c\"));\r\n    this.assertEquals(\"a.b/c\", org.apache.commons.io.FilenameUtils.removeExtension(\"a.b/c.txt\"));\r\n    this.assertEquals(\"a/b/c\", org.apache.commons.io.FilenameUtils.removeExtension(\"a/b/c\"));\r\n    this.assertEquals(\"a.b\\\\c\", org.apache.commons.io.FilenameUtils.removeExtension(\"a.b\\\\c\"));\r\n    this.assertEquals(\"a.b\\\\c\", org.apache.commons.io.FilenameUtils.removeExtension(\"a.b\\\\c.txt\"));\r\n    this.assertEquals(\"a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.removeExtension(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(\"C:\\\\temp\\\\foo.bar\\\\README\", org.apache.commons.io.FilenameUtils.removeExtension(\"C:\\\\temp\\\\foo.bar\\\\README\"));\r\n    this.assertEquals(\"../filename\", org.apache.commons.io.FilenameUtils.removeExtension(\"../filename.ext\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "ignored_args", "qualifiedName": "org.apache.commons.io.HexDumpTest.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#tearDown()\r\n */\r\nprotected void tearDown() throws java.lang.Exception {\r\n    java.io.File dir = this.getLocalTestDirectory();\r\n    org.apache.commons.io.FileUtils.deleteDirectory(dir);\r\n}", "docComment": "\r\n@see junit.framework.TestCase#tearDown()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "description", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "track(java.lang.String,java.lang.Object)", "qualifiedName": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "kind": "static method", "sourceText": "/**\r\n * Track the specified file, using the provided marker, deleting the file\r\n * when the marker instance is garbage collected.\r\n *\r\n * @param path\r\n * \t\tThe full path to the file to be tracked.\r\n * @param marker\r\n * \t\tThe marker object used to track the file.\r\n */\r\npublic static void track(java.lang.String path, java.lang.Object marker) {\r\n    org.apache.commons.io.FileCleaner.trackers.add(new org.apache.commons.io.FileCleaner.Tracker(path, marker, org.apache.commons.io.FileCleaner.q));\r\n}", "docComment": "Track the specified file, using the provided marker, deleting the file\r\nwhen the marker instance is garbage collected.\r\n\r\n@param path\r\n\t\tThe full path to the file to be tracked.\r\n@param marker\r\n\t\tThe marker object used to track the file.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "read(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads the next byte from the input stream.\r\n *\r\n * @param input\r\n * \t\tthe stream\r\n * @return the byte\r\n * @throws IOException\r\n * \t\tif the end of file is reached\r\n */\r\nprivate static int read(java.io.InputStream input) throws java.io.IOException {\r\n    int value = input.read();\r\n    if ((-1) == value) {\r\n        throw new java.io.EOFException(\"Unexpected EOF reached\");\r\n    }\r\n    return value;\r\n}", "docComment": "Reads the next byte from the input stream.\r\n\r\n@param input\r\n\t\tthe stream\r\n@return the byte\r\n@throws IOException\r\n\t\tif the end of file is reached\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "recurse", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "len", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).1", "labels": ["Variable"], "properties": {"simpleName": "seconds", "qualifiedName": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.tearDown()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.tearDown()", "kind": "method", "sourceText": "public void tearDown() {\r\n    this.file.delete();\r\n    this.lockFile.delete();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "suffix", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).2", "labels": ["Variable"], "properties": {"simpleName": "demux", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testConcat()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testConcat()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testConcat()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testConcat() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.concat(\"\", null));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.concat(null, null));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.concat(null, \"\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.concat(null, \"a\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\", org.apache.commons.io.FilenameUtils.concat(null, \"/a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.concat(\"\", \":\"));// invalid prefix\r\n\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.concat(\":\", \"\"));// invalid prefix\r\n\r\n    this.assertEquals(\"f\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"\", \"f/\"));\r\n    this.assertEquals(\"f\", org.apache.commons.io.FilenameUtils.concat(\"\", \"f\"));\r\n    this.assertEquals(((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"f\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"a/\", \"f/\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"f\", org.apache.commons.io.FilenameUtils.concat(\"a\", \"f\"));\r\n    this.assertEquals(((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"f\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"f/\"));\r\n    this.assertEquals((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"f\", org.apache.commons.io.FilenameUtils.concat(\"a/b\", \"f\"));\r\n    this.assertEquals(((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"f\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"../f/\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"f\", org.apache.commons.io.FilenameUtils.concat(\"a/b\", \"../f\"));\r\n    this.assertEquals(((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"g\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"a/b/../c/\", \"f/../g/\"));\r\n    this.assertEquals((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"g\", org.apache.commons.io.FilenameUtils.concat(\"a/b/../c\", \"f/../g\"));\r\n    this.assertEquals((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"f\", org.apache.commons.io.FilenameUtils.concat(\"a/c.txt\", \"f\"));\r\n    this.assertEquals((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"f\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"\", \"/f/\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"f\", org.apache.commons.io.FilenameUtils.concat(\"\", \"/f\"));\r\n    this.assertEquals((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"f\") + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"a/\", \"/f/\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"f\", org.apache.commons.io.FilenameUtils.concat(\"a\", \"/f\"));\r\n    this.assertEquals(((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"c\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"/c/d\"));\r\n    this.assertEquals((\"C:c\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"C:c/d\"));\r\n    this.assertEquals((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"C:/c/d\"));\r\n    this.assertEquals((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"~/c/d\"));\r\n    this.assertEquals((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"~user/c/d\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"~\"));\r\n    this.assertEquals(\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.concat(\"a/b/\", \"~user\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "needNewBuffer(int)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "kind": "method", "sourceText": "private void needNewBuffer(int newcount) {\r\n    if (this.currentBufferIndex < (this.buffers.size() - 1)) {\r\n        // Recycling old buffer\r\n        this.filledBufferSum += this.currentBuffer.length;\r\n        this.currentBufferIndex++;\r\n        this.currentBuffer = this.getBuffer(this.currentBufferIndex);\r\n    } else {\r\n        // Creating new buffer\r\n        int newBufferSize;\r\n        if (this.currentBuffer == null) {\r\n            newBufferSize = newcount;\r\n            this.filledBufferSum = 0;\r\n        } else {\r\n            newBufferSize = java.lang.Math.max(this.currentBuffer.length << 1, newcount - this.filledBufferSum);\r\n            this.filledBufferSum += this.currentBuffer.length;\r\n        }\r\n        this.currentBufferIndex++;\r\n        this.currentBuffer = new byte[newBufferSize];\r\n        this.buffers.add(this.currentBuffer);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "kind": "method", "sourceText": "public void assertFalseFiltersInvoked(final int testNumber, final org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter[] filters, final boolean[] invoked) {\r\n    for (int i = 1; i < filters.length; i++) {\r\n        this.assertEquals((((\"test \" + testNumber) + \" filter \") + i) + \" invoked\", invoked[i - 1], filters[i].isInvoked());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "system", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile4()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFile4()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFile4()", "kind": "method", "sourceText": "public void testToFile4() throws java.lang.Exception {\r\n    java.net.URL url = new java.net.URL(\"file\", null, \"a/b/c/file%2Xn%61me.txt\");\r\n    try {\r\n        org.apache.commons.io.FileUtils.toFile(url);\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFilenameResults()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "kind": "method", "sourceText": "protected abstract java.util.List getFilenameResults();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toByteArray(java.io.Reader)", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>Reader</code> as a <code>byte[]</code>\r\n * using the default character encoding of the platform.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @return the requested byte array\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n */\r\npublic static byte[] toByteArray(java.io.Reader input) throws java.io.IOException {\r\n    org.apache.commons.io.output.ByteArrayOutputStream output = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.IOUtils.copy(input, output);\r\n    return output.toByteArray();\r\n}", "docComment": "Get the contents of a <code>Reader</code> as a <code>byte[]</code>\r\nusing the default character encoding of the platform.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@return the requested byte array\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.FileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a delegate file filter around an existing FileFilter.\r\n *\r\n * @param filter\r\n * \t\tthe filter to decorate\r\n */\r\npublic DelegateFileFilter(java.io.FileFilter filter) {\r\n    super();\r\n    if (filter == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The FileFilter must not be null\");\r\n    }\r\n    this.fileFilter = filter;\r\n}", "docComment": "Constructs a delegate file filter around an existing FileFilter.\r\n\r\n@param filter\r\n\t\tthe filter to decorate\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "len", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToWriter_Encoding_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()", "kind": "method", "sourceText": "public void testWrite_stringToWriter_Encoding_nullStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(str, ((java.io.Writer) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.getStream()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getStream()", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream.getStream()", "kind": "method", "sourceText": "/**\r\n * Utility method to retrieve stream bound to current thread (if any).\r\n *\r\n * @return the input stream\r\n */\r\nprivate java.io.InputStream getStream() {\r\n    return ((java.io.InputStream) (this.m_streams.get()));\r\n}", "docComment": "Utility method to retrieve stream bound to current thread (if any).\r\n\r\n@return the input stream\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "wildcardMatcher", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.mark(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "mark(int)", "qualifiedName": "org.apache.commons.io.input.ProxyReader.mark(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#mark(int)\r\n */\r\npublic synchronized void mark(int idx) throws java.io.IOException {\r\n    this.in.mark(idx);\r\n}", "docComment": "\r\n@see java.io.Reader#mark(int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "lineEnding", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFile(java.net.URL).0", "labels": ["Variable"], "properties": {"simpleName": "url", "qualifiedName": "org.apache.commons.io.FileUtils.toFile(java.net.URL).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isExtension(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Checks whether the extension of the filename is that specified.\r\n * <p>\r\n * This method obtains the extension as the textual part of the filename\r\n * after the last dot. There must be no directory separator after the dot.\r\n * The extension check is case-sensitive on all platforms.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns false\r\n * @param extension\r\n * \t\tthe extension to check for, null or empty checks for no extension\r\n * @return true if the filename has the specified extension\r\n */\r\npublic static boolean isExtension(java.lang.String filename, java.lang.String extension) {\r\n    if (filename == null) {\r\n        return false;\r\n    }\r\n    if ((extension == null) || (extension.length() == 0)) {\r\n        return org.apache.commons.io.FilenameUtils.indexOfExtension(filename) == (-1);\r\n    }\r\n    java.lang.String fileExt = org.apache.commons.io.FilenameUtils.getExtension(filename);\r\n    return fileExt.equals(extension);\r\n}", "docComment": "Checks whether the extension of the filename is that specified.\r\n<p>\r\nThis method obtains the extension as the textual part of the filename\r\nafter the last dot. There must be no directory separator after the dot.\r\nThe extension check is case-sensitive on all platforms.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns false\r\n@param extension\r\n\t\tthe extension to check for, null or empty checks for no extension\r\n@return true if the filename has the specified extension\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump", "labels": ["Structure"], "properties": {"docComment": "Dumps data in hexadecimal format.\r\n<p>\r\nProvides a single function to take an array of bytes and display it\r\nin hexadecimal form.\r\n<p>\r\nOrigin of code: POI.\r\n\r\n@author Scott Sanders\r\n@author Marc Johnson\r\n@version $Id$\r\n", "simpleName": "HexDump", "qualifiedName": "org.apache.commons.io.HexDump", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "marker", "qualifiedName": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "ioFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadFloat()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()", "kind": "method", "sourceText": "public void testReadFloat() throws java.io.IOException {\r\n    this.assertEquals(java.lang.Float.intBitsToFloat(0x4030201), this.sdis.readFloat(), 0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getData()", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "kind": "method", "sourceText": "public java.lang.String getData() {\r\n    return this.m_buffer.toString();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "checkWrite(java.io.Writer)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "kind": "method", "sourceText": "protected void checkWrite(java.io.Writer output) throws java.lang.Exception {\r\n    try {\r\n        new java.io.PrintWriter(output).write('a');\r\n    } catch (java.lang.Throwable t) {\r\n        throw new junit.framework.AssertionFailedError((\"The copy() method closed the stream \" + \"when it shouldn't have. \") + t.getMessage());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.OutputStream,boolean,boolean)", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "kind": "constructor", "sourceText": "/**\r\n *\r\n * @param proxy\r\n * \t\tOutputStream to delegate to.\r\n * @param yellForFlush\r\n * \t\tTrue if flush() is forbidden\r\n * @param yellForClose\r\n * \t\tTrue if close() is forbidden\r\n */\r\npublic YellOnFlushAndCloseOutputStream(java.io.OutputStream proxy, boolean yellForFlush, boolean yellForClose) {\r\n    super(proxy);\r\n    this.yellForFlush = yellForFlush;\r\n    this.yellForClose = yellForClose;\r\n}", "docComment": "\r\n@param proxy\r\n\t\tOutputStream to delegate to.\r\n@param yellForFlush\r\n\t\tTrue if flush() is forbidden\r\n@param yellForClose\r\n\t\tTrue if close() is forbidden\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream", "labels": ["Structure"], "properties": {"docComment": "Used in debugging, it counts the number of bytes that pass \r\nthrough it.\r\n\r\n@author <a href=\"mailto:bayard@apache.org\">Henri Yandell</a>\r\n@version $Id$\r\n", "simpleName": "CountingOutputStream", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils", "labels": ["Structure"], "properties": {"docComment": "General File System utilities.\r\n<p>\r\nThis class provides static utility methods for general file system\r\nfunctions not provided via the JDK {@link java.io.File File} class.\r\n<p>\r\nThe current functions provided are:\r\n<ul>\r\n<li>Get the free space on a drive\r\n</ul>\r\n\r\n@author Frank W. Zammetti\r\n@author Stephen Colebourne\r\n@version $Id$\r\n@since Commons IO 1.1\r\n", "simpleName": "FileSystemUtils", "qualifiedName": "org.apache.commons.io.FileSystemUtils", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testRemove()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "kind": "method", "sourceText": "public void testRemove() {\r\n    java.util.List filters = new java.util.ArrayList();\r\n    org.apache.commons.io.filefilter.ConditionalFileFilter fileFilter = this.getConditionalFileFilter();\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    for (int i = 0; i < filters.size(); i++) {\r\n        fileFilter.removeFileFilter(((org.apache.commons.io.filefilter.IOFileFilter) (filters.get(i))));\r\n        this.assertTrue(\"file filter removed\", !fileFilter.getFileFilters().contains(((org.apache.commons.io.filefilter.IOFileFilter) (filters.get(i)))));\r\n    }\r\n    this.assertEquals(\"file filters count\", 0, fileFilter.getFileFilters().size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).1", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isExtension(java.lang.String,java.util.Collection)", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "kind": "static method", "sourceText": "/**\r\n * Checks whether the extension of the filename is one of those specified.\r\n * <p>\r\n * This method obtains the extension as the textual part of the filename\r\n * after the last dot. There must be no directory separator after the dot.\r\n * The extension check is case-sensitive on all platforms.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns false\r\n * @param extensions\r\n * \t\tthe extensions to check for, null checks for no extension\r\n * @return true if the filename is one of the extensions\r\n */\r\npublic static boolean isExtension(java.lang.String filename, java.util.Collection extensions) {\r\n    if (filename == null) {\r\n        return false;\r\n    }\r\n    if ((extensions == null) || extensions.isEmpty()) {\r\n        return org.apache.commons.io.FilenameUtils.indexOfExtension(filename) == (-1);\r\n    }\r\n    java.lang.String fileExt = org.apache.commons.io.FilenameUtils.getExtension(filename);\r\n    for (java.util.Iterator it = extensions.iterator(); it.hasNext();) {\r\n        if (fileExt.equals(it.next())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks whether the extension of the filename is one of those specified.\r\n<p>\r\nThis method obtains the extension as the textual part of the filename\r\nafter the last dot. There must be no directory separator after the dot.\r\nThe extension check is case-sensitive on all platforms.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns false\r\n@param extensions\r\n\t\tthe extensions to check for, null checks for no extension\r\n@return true if the filename is one of the extensions\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getByteCount()", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()", "kind": "method", "sourceText": "/**\r\n * Returns the number of bytes that have been written to this output stream.\r\n *\r\n * @return The number of bytes written.\r\n */\r\npublic long getByteCount() {\r\n    return this.written;\r\n}", "docComment": "Returns the number of bytes that have been written to this output stream.\r\n\r\n@return The number of bytes written.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream", "labels": ["Structure"], "properties": {"docComment": "Helper class for checking behaviour of IO classes.\r\n\r\n@author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\r\n", "simpleName": "YellOnCloseInputStream", "qualifiedName": "org.apache.commons.io.testtools.YellOnCloseInputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testCopy_readerToWriter() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    int count = org.apache.commons.io.IOUtils.copy(reader, writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"The number of characters returned by copy is wrong\", this.inData.length, count);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "destFile", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "trueFileFilter()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Returns a filter that always returns true.\r\n *\r\n * @return a true filter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter trueFileFilter() {\r\n    return org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE;\r\n}", "docComment": "Returns a filter that always returns true.\r\n\r\n@return a true filter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "double", "labels": ["Primitive"], "properties": {"simpleName": "double", "qualifiedName": "double", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWriteLines_OutputStream() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", new java.lang.StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.writeLines(list, \"*\", out);\r\n    out.off();\r\n    out.flush();\r\n    java.lang.String expected = \"hello*world**this is**some text*\";\r\n    java.lang.String actual = baout.toString();\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpace_String()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testGetFreeSpace_String() throws java.lang.Exception {\r\n    // test coverage, as we can't check value\r\n    if (java.io.File.separatorChar == '/') {\r\n        this.assertEquals(true, org.apache.commons.io.FileSystemUtils.freeSpace(\"/\") > 0);\r\n    } else {\r\n        this.assertEquals(true, org.apache.commons.io.FileSystemUtils.freeSpace(\"\") > 0);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.mark(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "mark(int)", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.mark(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#mark(int)\r\n */\r\npublic synchronized void mark(int idx) {\r\n    this.in.mark(idx);\r\n}", "docComment": "\r\n@see java.io.InputStream#mark(int)\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "fileFilters", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "len", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString(java.io.Reader)", "qualifiedName": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>Reader</code> as a String.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @return the requested String\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n */\r\npublic static java.lang.String toString(java.io.Reader input) throws java.io.IOException {\r\n    java.io.StringWriter sw = new java.io.StringWriter();\r\n    org.apache.commons.io.IOUtils.copy(input, sw);\r\n    return sw.toString();\r\n}", "docComment": "Get the contents of a <code>Reader</code> as a String.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@return the requested String\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "labels": ["Variable"], "properties": {"simpleName": "filter2", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "prefix", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "directory", "qualifiedName": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).2", "labels": ["Variable"], "properties": {"simpleName": "demux", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "separatorsToWindows(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Converts all separators to the Windows separator of backslash.\r\n *\r\n * @param path\r\n * \t\tthe path to be changed, null ignored\r\n * @return the updated path\r\n */\r\npublic static java.lang.String separatorsToWindows(java.lang.String path) {\r\n    if ((path == null) || (path.indexOf(org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR) == (-1))) {\r\n        return path;\r\n    }\r\n    return path.replace(org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR, org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR);\r\n}", "docComment": "Converts all separators to the Windows separator of backslash.\r\n\r\n@param path\r\n\t\tthe path to be changed, null ignored\r\n@return the updated path\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T3", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String T3 = \"Thread3\";", "visibility": "private", "simpleName": "T3", "qualifiedName": "org.apache.commons.io.DemuxTestCase.T3", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "flush()", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#flush()\r\n */\r\npublic void flush() throws java.io.IOException {\r\n    if (this.yellForFlush) {\r\n        throw new junit.framework.AssertionFailedError(\"flush() was called on OutputStream\");\r\n    }\r\n    super.flush();\r\n}", "docComment": "\r\n@see java.io.OutputStream#flush()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * <p>\r\n * Writes the <code>toString()</code> value of each item in a collection to\r\n * the specified <code>File</code> line by line.\r\n * The specified character encoding and the line ending will be used.\r\n * </p>\r\n * <p>\r\n * There is no writeLines method without encoding parameter because\r\n * the default encoding can differ between platforms and therefore results\r\n * in inconsistent results.\r\n * </p>\r\n *\r\n * @param file\r\n * \t\tthe file to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @param lines\r\n * \t\tthe lines to write, null entries produce blank lines\r\n * @param lineEnding\r\n * \t\tthe line separator to use, null is system default\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @throws UnsupportedEncodingException\r\n * \t\tif the encoding is not supported by the VM\r\n * @since Commons IO 1.1\r\n */\r\npublic static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection lines, java.lang.String lineEnding) throws java.io.IOException {\r\n    java.io.OutputStream out = new java.io.FileOutputStream(file);\r\n    try {\r\n        org.apache.commons.io.IOUtils.writeLines(lines, lineEnding, out, encoding);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(out);\r\n    }\r\n}", "docComment": "<p>\r\nWrites the <code>toString()</code> value of each item in a collection to\r\nthe specified <code>File</code> line by line.\r\nThe specified character encoding and the line ending will be used.\r\n</p>\r\n<p>\r\nThere is no writeLines method without encoding parameter because\r\nthe default encoding can differ between platforms and therefore results\r\nin inconsistent results.\r\n</p>\r\n\r\n@param file\r\n\t\tthe file to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@param lines\r\n\t\tthe lines to write, null entries produce blank lines\r\n@param lineEnding\r\n\t\tthe line separator to use, null is system default\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@throws UnsupportedEncodingException\r\n\t\tif the encoding is not supported by the VM\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void addFileFilter(final org.apache.commons.io.filefilter.IOFileFilter ioFileFilter) {\r\n    this.fileFilters.add(ioFileFilter);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "kind": "method", "sourceText": "/**\r\n * Tests the <code>isFileNewer(File, *)</code> methods which the specified conditions.\r\n * <p/>\r\n * Creates :\r\n * <ul>\r\n * <li>a <code>Date</code> which represents the time reference</li>\r\n * <li>a temporary file with the same last modification date than the time reference</li>\r\n * </ul>\r\n * Then compares (with the needed <code>isFileNewer</code> method) the last modification date of\r\n * the specified file with the specified time reference, the created <code>Date</code> and the temporary\r\n * file.\r\n * <br/>\r\n * The test is successfull if the three comparaisons return the specified wanted result.\r\n *\r\n * @param description\r\n * \t\tdescribes the tested situation\r\n * @param file\r\n * \t\tthe file of which the last modification date is compared\r\n * @param timeMillis\r\n * \t\tthe time reference measured in milliseconds since the epoch\r\n * @see FileUtils#isFileNewer(File, long)\r\n * @see FileUtils#isFileNewer(File, Date)\r\n * @see FileUtils#isFileNewer(File, File)\r\n */\r\nprotected void testIsFileNewer(java.lang.String description, java.io.File file, long time, boolean wantedResult) {\r\n    this.assertEquals(description + \" - time\", wantedResult, org.apache.commons.io.FileUtils.isFileNewer(file, time));\r\n    this.assertEquals(description + \" - date\", wantedResult, org.apache.commons.io.FileUtils.isFileNewer(file, new java.util.Date(time)));\r\n    java.io.File temporaryFile = this.m_testFile2;\r\n    temporaryFile.setLastModified(time);\r\n    if (temporaryFile.lastModified() != time) {\r\n        throw new java.lang.IllegalStateException(\"The temporary file hasn't the right last modification date\");\r\n    }\r\n    this.assertEquals(description + \" - file\", wantedResult, org.apache.commons.io.FileUtils.isFileNewer(file, temporaryFile));\r\n}", "docComment": "Tests the <code>isFileNewer(File, *)</code> methods which the specified conditions.\r\n<p/>\r\nCreates :\r\n<ul>\r\n<li>a <code>Date</code> which represents the time reference</li>\r\n<li>a temporary file with the same last modification date than the time reference</li>\r\n</ul>\r\nThen compares (with the needed <code>isFileNewer</code> method) the last modification date of \r\nthe specified file with the specified time reference, the created <code>Date</code> and the temporary \r\nfile.\r\n<br/>\r\nThe test is successfull if the three comparaisons return the specified wanted result.\r\n\r\n@param description\r\n\t\tdescribes the tested situation\r\n@param file\r\n\t\tthe file of which the last modification date is compared\r\n@param timeMillis\r\n\t\tthe time reference measured in milliseconds since the epoch\r\n@see FileUtils#isFileNewer(File, long)\r\n@see FileUtils#isFileNewer(File, Date)\r\n@see FileUtils#isFileNewer(File, File)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the file is a directory.\r\n *\r\n * @param file\r\n * \t\tthe File to check\r\n * @return true if the file is a directory\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    return file.isDirectory();\r\n}", "docComment": "Checks to see if the file is a directory.\r\n\r\n@param file\r\n\t\tthe File to check\r\n@return true if the file is a directory\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testConstructor_File_encoding_badEncoding()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()", "kind": "method", "sourceText": "public void testConstructor_File_encoding_badEncoding() throws java.io.IOException {\r\n    try {\r\n        new org.apache.commons.io.output.LockableFileWriter(this.file, \"BAD-ENCODE\");\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n    this.assertEquals(false, this.lockFile.exists());\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase", "labels": ["Structure"], "properties": {"docComment": "Test cases for FileUtils.listFiles() methods.\r\n", "simpleName": "FileUtilsListFilesTestCase", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsFileNewerNoFileReference()", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()", "kind": "method", "sourceText": "/**\r\n * Tests the <code>isFileNewer(File, File)</code> method without specifying a reference <code>File</code>.\r\n * <br/>\r\n * The test is successfull if the method throws an <code>IllegalArgumentException</code>.\r\n */\r\npublic void testIsFileNewerNoFileReference() {\r\n    try {\r\n        org.apache.commons.io.FileUtils.isFileNewer(this.m_testFile1, ((java.io.File) (null)));\r\n        this.fail(\"Reference file not specified\");\r\n    } catch (java.lang.IllegalArgumentException e) {\r\n    }\r\n}", "docComment": "Tests the <code>isFileNewer(File, File)</code> method without specifying a reference <code>File</code>.\r\n<br/>\r\nThe test is successfull if the method throws an <code>IllegalArgumentException</code>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream", "labels": ["Structure"], "properties": {"docComment": "<p>An output stream which will retain data in memory until a specified\r\nthreshold is reached, and only then commit it to disk. If the stream is\r\nclosed before the threshold is reached, the data will not be written to\r\ndisk at all.</p>\r\n\r\n<p>This class originated in FileUpload processing. In this use case, you do\r\nnot know in advance the size of the file being uploaded. If the file is small\r\nyou want to store it in memory (for speed), but if the file is large you want\r\nto store it to file (to avoid memory issues).</p>\r\n\r\n@author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\r\n@author gaxzerow\r\n@version $Id$\r\n", "simpleName": "DeferredFileOutputStream", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).1", "labels": ["Variable"], "properties": {"simpleName": "b1", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testExpected()", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()", "kind": "method", "sourceText": "/* Note: This test case tests the simplest functionality of\nObjectInputStream.  IF we really wanted to test ClassLoaderObjectInputStream\nwe would probably need to create a transient Class Loader. -TO\n */\r\npublic void testExpected() throws java.lang.Exception {\r\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\r\n    java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(baos);\r\n    oos.writeObject(java.lang.Boolean.FALSE);\r\n    java.io.InputStream bais = new java.io.ByteArrayInputStream(baos.toByteArray());\r\n    org.apache.commons.io.input.ClassLoaderObjectInputStream clois = new org.apache.commons.io.input.ClassLoaderObjectInputStream(this.getClass().getClassLoader(), bais);\r\n    java.lang.Boolean result = ((java.lang.Boolean) (clois.readObject()));\r\n    this.assertTrue(!result.booleanValue());\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks the filter.\r\n *\r\n * @param file\r\n * \t\tthe file to check\r\n * @return true if the filter matches\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    if (this.fileFilter != null) {\r\n        return this.fileFilter.accept(file);\r\n    } else {\r\n        return super.accept(file);\r\n    }\r\n}", "docComment": "Checks the filter.\r\n\r\n@param file\r\n\t\tthe file to check\r\n@return true if the filter matches\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.ONE_MB", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The number of bytes in a megabyte.\r\n */\r\npublic static final long ONE_MB = org.apache.commons.io.FileUtils.ONE_KB * org.apache.commons.io.FileUtils.ONE_KB;", "visibility": "public", "simpleName": "ONE_MB", "qualifiedName": "org.apache.commons.io.FileUtils.ONE_MB", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a SwappedDataInputStream.\r\n *\r\n * @param input\r\n * \t\tInputStream to read from\r\n */\r\npublic SwappedDataInputStream(java.io.InputStream input) {\r\n    super(input);\r\n}", "docComment": "Constructs a SwappedDataInputStream.\r\n\r\n@param input\r\n\t\tInputStream to read from\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyFile1ToDir()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "kind": "method", "sourceText": "// copyFileToDirectory\r\npublic void testCopyFile1ToDir() throws java.lang.Exception {\r\n    java.io.File directory = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"subdir\");\r\n    if (!directory.exists()) {\r\n        directory.mkdirs();\r\n    }\r\n    java.io.File destination = new java.io.File(directory, this.testFile1.getName());\r\n    // Thread.sleep(LAST_MODIFIED_DELAY);\r\n    // This is to slow things down so we can catch if\r\n    // the lastModified date is not ok\r\n    org.apache.commons.io.FileUtils.copyFileToDirectory(this.testFile1, directory);\r\n    this.assertTrue(\"Check Exist\", destination.exists());\r\n    this.assertTrue(\"Check Full copy\", destination.length() == org.apache.commons.io.FileUtilsTestCase.testFile1Size);\r\n    /* disabled: Thread.sleep doesn't work reliantly for this case\n    assertTrue(\"Check last modified date preserved\", \n    testFile1.lastModified() == destination.lastModified());\n     */\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyFileToDirectory(destination, directory);\r\n        this.fail(\"Should not be able to copy a file into the same directory as itself\");\r\n    } catch (java.io.IOException ioe) {\r\n        // we want that, cannot copy to the same directory as the original file\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest", "labels": ["Structure"], "properties": {"docComment": "Tests that files really lock, although no writing is done as \r\nthe locking is tested only on construction.\r\n\r\n@author Henri Yandell (bayard at apache dot org)\r\n@version $Revision$ $Date$\r\n", "simpleName": "LockableFileWriterTest", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).1", "labels": ["Variable"], "properties": {"simpleName": "inputStream", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.filefilter.PackageTestSuite()", "kind": "constructor", "sourceText": "PackageTestSuite() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testStringToByteArray()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "kind": "method", "sourceText": "public void testStringToByteArray() throws java.lang.Exception {\r\n    java.io.FileReader fin = new java.io.FileReader(this.m_testFile);\r\n    try {\r\n        // Create our String. Rely on testReaderToString() to make sure this is valid.\r\n        java.lang.String str = org.apache.commons.io.IOUtils.toString(fin);\r\n        byte[] out = org.apache.commons.io.IOUtils.toByteArray(str);\r\n        this.assertEqualContent(str.getBytes(), out);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.String,java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "kind": "static method", "sourceText": "// write String\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Writes chars from a <code>String</code> to a <code>Writer</code>.\r\n *\r\n * @param data\r\n * \t\tthe <code>String</code> to write, null ignored\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(java.lang.String data, java.io.Writer output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(data);\r\n    }\r\n}", "docComment": "Writes chars from a <code>String</code> to a <code>Writer</code>.\r\n\r\n@param data\r\n\t\tthe <code>String</code> to write, null ignored\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).1", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream", "labels": ["Structure"], "properties": {"docComment": "This class implements an output stream in which the data is \r\nwritten into a byte array. The buffer automatically grows as data \r\nis written to it.\r\n<p> \r\nThe data can be retrieved using <code>toByteArray()</code> and\r\n<code>toString()</code>.\r\n<p>\r\nClosing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\r\nthis class can be called after the stream has been closed without\r\ngenerating an <tt>IOException</tt>.\r\n<p>\r\nThis is an alternative implementation of the java.io.ByteArrayOutputStream\r\nclass. The original implementation only allocates 32 bytes at the beginning.\r\nAs this class is designed for heavy duty it starts at 1024 bytes. In contrast\r\nto the original it doesn't reallocate the whole memory block but allocates\r\nadditional buffers. This way no buffers need to be garbage collected and\r\nthe contents don't have to be copied to the new buffer. This class is\r\ndesigned to behave exactly like the original. The only exception is the\r\ndeprecated toString(int) method that has been ignored.\r\n\r\n@author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\r\n@version $Id$\r\n", "simpleName": "ByteArrayOutputStream", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see junit.framework.TestCase#setUp()\r\n */\r\nprotected void setUp() throws java.lang.Exception {\r\n    org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n    this.createFile(this.testFile1, org.apache.commons.io.FilenameUtilsTestCase.testFile1Size);\r\n    this.createFile(this.testFile2, org.apache.commons.io.FilenameUtilsTestCase.testFile2Size);\r\n    org.apache.commons.io.FileUtils.deleteDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n    org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory().mkdirs();\r\n    this.createFile(this.testFile1, org.apache.commons.io.FilenameUtilsTestCase.testFile1Size);\r\n    this.createFile(this.testFile2, org.apache.commons.io.FilenameUtilsTestCase.testFile2Size);\r\n}", "docComment": "\r\n@see junit.framework.TestCase#setUp()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_InvalidResponse1()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()", "kind": "method", "sourceText": "public void testGetFreeSpaceUnix_String_InvalidResponse1() throws java.lang.Exception {\r\n    java.lang.String lines = \"Filesystem           1K-blocks      Used Available Use% Mounted on\\n\" + \"                      14428928  12956424       100\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        11() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    try {\r\n        fsu.freeSpaceUnix(\"/home/users/s\");\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter", "labels": ["Structure"], "properties": {"docComment": "Filters files using supplied wildcard(s).\r\n<p/>\r\nSee org.apache.commons.io.find.FilenameUtils.wildcardMatch() for wildcard matching rules\r\n<p/>\r\n\r\n<p/>\r\ne.g.\r\n<pre>\r\nFile dir = new File(\".\");\r\nFileFilter fileFilter = new WildcardFilter(\"*test*.java~*~\");\r\nFile[] files = dir.listFiles(fileFilter);\r\nfor (int i = 0; i < files.length; i++) {\r\n  System.out.println(files[i]);\r\n}\r\n</pre>\r\n\r\n@author Jason Anderson\r\n@version $Revision$ $Date$\r\n@since Commons IO 1.1\r\n", "simpleName": "WildcardFilter", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "wildcards", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadUnsignedByte()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()", "kind": "method", "sourceText": "public void testReadUnsignedByte() throws java.io.IOException {\r\n    this.assertEquals(0x1, this.sdis.readUnsignedByte());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceWindows_String_StripDrive()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()", "kind": "method", "sourceText": "public void testGetFreeSpaceWindows_String_StripDrive() throws java.lang.Exception {\r\n    java.lang.String lines = \" Volume in drive C is HDD\\n\" + (((((((((\" Volume Serial Number is XXXX-YYYY\\n\" + \"\\n\") + \" Directory of C:\\\\Documents and Settings\\\\Xxxx\\n\") + \"\\n\") + \"19/08/2005  22:43    <DIR>          .\\n\") + \"19/08/2005  22:43    <DIR>          ..\\n\") + \"11/08/2005  01:07                81 build.properties\\n\") + \"17/08/2005  21:44    <DIR>          Desktop\\n\") + \"               7 File(s)        180,260 bytes\\n\") + \"              10 Dir(s)  41,411,551,232 bytes free\");\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        5() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            this.assertEquals(\"dir /c C:\", params[2]);\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    this.assertEquals(41411551232L, fsu.freeSpaceWindows(\"C:\\\\somedir\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFilenameResults;", "visibility": "private", "simpleName": "testFilenameResults", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream_Encoding_nullIn()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()", "kind": "method", "sourceText": "public void testCopy_readerToOutputStream_Encoding_nullIn() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    try {\r\n        org.apache.commons.io.IOUtils.copy(((java.io.Reader) (null)), out, \"UTF16\");\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testFalse()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()", "kind": "method", "sourceText": "public void testFalse() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();\r\n    this.assertFiltering(filter, new java.io.File(\"foo.test\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"foo\"), false);\r\n    this.assertFiltering(filter, null, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testFilterBuiltUsingConstructor()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "kind": "method", "sourceText": "public void testFilterBuiltUsingConstructor() throws java.lang.Exception {\r\n    java.util.List testFilters = this.getTestFilters();\r\n    java.util.List testTrueResults = this.getTrueResults();\r\n    java.util.List testFalseResults = this.getFalseResults();\r\n    java.util.List testFileResults = this.getFileResults();\r\n    java.util.List testFilenameResults = this.getFilenameResults();\r\n    for (int i = 1; i < testFilters.size(); i++) {\r\n        java.util.List filters = ((java.util.List) (testFilters.get(i)));\r\n        boolean[] trueResults = ((boolean[]) (testTrueResults.get(i)));\r\n        boolean[] falseResults = ((boolean[]) (testFalseResults.get(i)));\r\n        boolean fileResults = ((java.lang.Boolean) (testFileResults.get(i))).booleanValue();\r\n        boolean filenameResults = ((java.lang.Boolean) (testFilenameResults.get(i))).booleanValue();\r\n        // Test conditional AND filter created by passing filters to the constructor\r\n        org.apache.commons.io.filefilter.IOFileFilter filter = this.buildFilterUsingConstructor(filters);\r\n        // Test as a file filter\r\n        this.resetTrueFilters(this.trueFilters);\r\n        this.resetFalseFilters(this.falseFilters);\r\n        this.assertFileFiltering(i, filter, this.file, fileResults);\r\n        this.assertTrueFiltersInvoked(i, this.trueFilters, trueResults);\r\n        this.assertFalseFiltersInvoked(i, this.falseFilters, falseResults);\r\n        // Test as a filename filter\r\n        this.resetTrueFilters(this.trueFilters);\r\n        this.resetFalseFilters(this.falseFilters);\r\n        this.assertFilenameFiltering(i, filter, this.file, filenameResults);\r\n        this.assertTrueFiltersInvoked(i, this.trueFilters, trueResults);\r\n        this.assertFalseFiltersInvoked(i, this.falseFilters, falseResults);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles4()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFiles4()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFiles4()", "kind": "method", "sourceText": "public void testToFiles4() throws java.lang.Exception {\r\n    java.net.URL[] urls = new java.net.URL[]{ new java.net.URL(\"file\", null, \"file1.txt\"), new java.net.URL(\"http\", \"jakarta.apache.org\", \"file1.txt\") };\r\n    try {\r\n        org.apache.commons.io.FileUtils.toFiles(urls);\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).1", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.mark(int).0", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "org.apache.commons.io.input.ProxyReader.mark(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "referenceFile", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "labels": ["Variable"], "properties": {"simpleName": "filter2", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToOutputStream_nullEncoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "kind": "method", "sourceText": "public void testWrite_charArrayToOutputStream_nullEncoding() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(str.toCharArray(), out, null);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "fileName", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toInputStream(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Convert the specified string to an input stream, encoded as bytes\r\n * using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n *\r\n * @param input\r\n * \t\tthe string to convert\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws IOException\r\n * \t\tif the encoding is invalid\r\n * @return an input stream\r\n * @since Commons IO 1.1\r\n */\r\npublic static java.io.InputStream toInputStream(java.lang.String input, java.lang.String encoding) throws java.io.IOException {\r\n    byte[] bytes = (encoding != null) ? input.getBytes(encoding) : input.getBytes();\r\n    return new java.io.ByteArrayInputStream(bytes);\r\n}", "docComment": "Convert the specified string to an input stream, encoded as bytes\r\nusing the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n\r\n@param input\r\n\t\tthe string to convert\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws IOException\r\n\t\tif the encoding is invalid\r\n@return an input stream\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter", "labels": ["Structure"], "properties": {"docComment": "A {@link java.io.FileFilter} providing conditional AND logic across a list of\r\nfile filters. This filter returns <code>true</code> if all filters in the\r\nlist return <code>true</code>. Otherwise, it returns <code>false</code>.\r\nChecking of the file filter list stops when the first filter returns\r\n<code>false</code>.\r\n\r\n@since Commons IO 1.0\r\n@version $Revision$ $Date$\r\n@author Steven Caswell\r\n", "simpleName": "AndFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.testtools.YellOnCloseInputStream.close()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#close()\r\n */\r\npublic void close() throws java.io.IOException {\r\n    throw new junit.framework.AssertionFailedError(\"close() was called on OutputStream\");\r\n}", "docComment": "\r\n@see java.io.InputStream#close()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "closeQuietly(java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "kind": "static method", "sourceText": "/**\r\n * Unconditionally close an <code>OutputStream</code>.\r\n * <p>\r\n * Equivalent to {@link OutputStream#close()}, except any exceptions will be ignored.\r\n * This is typically used in finally blocks.\r\n *\r\n * @param output\r\n * \t\tthe OutputStream to close, may be null or already closed\r\n */\r\npublic static void closeQuietly(java.io.OutputStream output) {\r\n    try {\r\n        if (output != null) {\r\n            output.close();\r\n        }\r\n    } catch (java.io.IOException ioe) {\r\n        // ignore\r\n    }\r\n}", "docComment": "Unconditionally close an <code>OutputStream</code>.\r\n<p>\r\nEquivalent to {@link OutputStream#close()}, except any exceptions will be ignored.\r\nThis is typically used in finally blocks.\r\n\r\n@param output\r\n\t\tthe OutputStream to close, may be null or already closed\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "assertByteArrayEquals(java.lang.String,byte[],int,int)", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "kind": "method", "sourceText": "private void assertByteArrayEquals(java.lang.String msg, byte[] array, int start, int end) {\r\n    for (int i = start; i < end; i++) {\r\n        this.assertEquals(((msg + \": array[\") + i) + \"] mismatch\", array[i], i - start);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedDouble(byte[],int,double)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"double\" value to a byte array at a given offset. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param data\r\n * \t\ttarget byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @param value\r\n * \t\tvalue to write\r\n */\r\npublic static void writeSwappedDouble(byte[] data, int offset, double value) {\r\n    org.apache.commons.io.EndianUtils.writeSwappedLong(data, offset, java.lang.Double.doubleToLongBits(value));\r\n}", "docComment": "Writes a \"double\" value to a byte array at a given offset. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param data\r\n\t\ttarget byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@param value\r\n\t\tvalue to write\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if both filters are true.\r\n *\r\n * @param file\r\n * \t\tthe File to check\r\n * @return true if the filter returns false\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    return !this.filter.accept(file);\r\n}", "docComment": "Checks to see if both filters are true.\r\n\r\n@param file\r\n\t\tthe File to check\r\n@return true if the filter returns false\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#close()\r\n */\r\npublic void close() throws java.io.IOException {\r\n    if (this.yellForClose) {\r\n        throw new junit.framework.AssertionFailedError(\"close() was called on OutputStream\");\r\n    }\r\n    super.close();\r\n}", "docComment": "\r\n@see java.io.OutputStream#close()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testDeletesRegular()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()", "kind": "method", "sourceText": "public void testDeletesRegular() throws java.lang.Exception {\r\n    org.apache.commons.io.FileUtils.touch(new java.io.File(this.top, \"regular\"));\r\n    org.apache.commons.io.FileUtils.touch(new java.io.File(this.top, \".hidden\"));\r\n    this.assertEquals(2, this.top.list().length);\r\n    org.apache.commons.io.FileUtils.cleanDirectory(this.top);\r\n    this.assertEquals(0, this.top.list().length);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.HexDumpTest(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Creates new HexDumpTest\r\n *\r\n * @param name\r\n */\r\npublic HexDumpTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "Creates new HexDumpTest\r\n\r\n@param name\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles2()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFiles2()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFiles2()", "kind": "method", "sourceText": "public void testToFiles2() throws java.lang.Exception {\r\n    java.net.URL[] urls = new java.net.URL[]{ new java.net.URL(\"file\", null, \"file1.txt\"), null };\r\n    java.io.File[] files = org.apache.commons.io.FileUtils.toFiles(urls);\r\n    this.assertEquals(urls.length, files.length);\r\n    this.assertEquals(\"File: \" + files[0], true, files[0].toString().indexOf(\"file1.txt\") >= 0);\r\n    this.assertEquals(\"File: \" + files[1], null, files[1]);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T2", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String T2 = \"Thread2\";", "visibility": "private", "simpleName": "T2", "qualifiedName": "org.apache.commons.io.DemuxTestCase.T2", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFile2", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File testFile2;", "visibility": "private", "simpleName": "testFile2", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testFile2", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.touch(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "touch(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.touch(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Implements the same behaviour as the \"touch\" utility on Unix. It creates\r\n * a new file with size 0 or, if the file exists already, it is opened and\r\n * closed without modifying it, but updating the file date and time.\r\n *\r\n * @param file\r\n * \t\tthe File to touch\r\n * @throws IOException\r\n * \t\tIf an I/O problem occurs\r\n */\r\npublic static void touch(java.io.File file) throws java.io.IOException {\r\n    if (!file.exists()) {\r\n        java.io.OutputStream out = new java.io.FileOutputStream(file);\r\n        org.apache.commons.io.IOUtils.closeQuietly(out);\r\n    }\r\n    file.setLastModified(java.lang.System.currentTimeMillis());\r\n}", "docComment": "Implements the same behaviour as the \"touch\" utility on Unix. It creates\r\na new file with size 0 or, if the file exists already, it is opened and\r\nclosed without modifying it, but updating the file date and time.\r\n\r\n@param file\r\n\t\tthe File to touch\r\n@throws IOException\r\n\t\tIf an I/O problem occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Returns true.\r\n *\r\n * @param dir\r\n * \t\tthe directory to check\r\n * @param name\r\n * \t\tthe filename\r\n * @return true\r\n */\r\npublic boolean accept(java.io.File dir, java.lang.String name) {\r\n    return true;\r\n}", "docComment": "Returns true.\r\n\r\n@param dir\r\n\t\tthe directory to check\r\n@param name\r\n\t\tthe filename\r\n@return true\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.OTHER", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Operating system state flag for neither Unix nor Windows.\r\n */\r\nprivate static final int OTHER = 0;", "visibility": "private", "simpleName": "OTHER", "qualifiedName": "org.apache.commons.io.FileSystemUtils.OTHER", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "off", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToOutputStream_Encoding_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()", "kind": "method", "sourceText": "public void testWrite_charArrayToOutputStream_Encoding_nullStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(str.toCharArray(), ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "kind": "static method", "sourceText": "// writeLines\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Writes the <code>toString()</code> value of each item in a collection to\r\n * an <code>OutputStream</code> line by line, using the default character\r\n * encoding of the platform and the specified line ending.\r\n *\r\n * @param lines\r\n * \t\tthe lines to write, null entries produce blank lines\r\n * @param lineEnding\r\n * \t\tthe line separator to use, null is system default\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to, not null, not closed\r\n * @throws NullPointerException\r\n * \t\tif the output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void writeLines(java.util.Collection lines, java.lang.String lineEnding, java.io.OutputStream output) throws java.io.IOException {\r\n    if (lines == null) {\r\n        return;\r\n    }\r\n    if (lineEnding == null) {\r\n        lineEnding = org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n    }\r\n    for (java.util.Iterator it = lines.iterator(); it.hasNext();) {\r\n        java.lang.Object line = it.next();\r\n        if (line != null) {\r\n            output.write(line.toString().getBytes());\r\n        }\r\n        output.write(lineEnding.getBytes());\r\n    }\r\n}", "docComment": "Writes the <code>toString()</code> value of each item in a collection to\r\nan <code>OutputStream</code> line by line, using the default character\r\nencoding of the platform and the specified line ending.\r\n\r\n@param lines\r\n\t\tthe lines to write, null entries produce blank lines\r\n@param lineEnding\r\n\t\tthe line separator to use, null is system default\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to, not null, not closed\r\n@throws NullPointerException\r\n\t\tif the output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToWriter_Encoding_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()", "kind": "method", "sourceText": "public void testWrite_charArrayToWriter_Encoding_nullStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(str.toCharArray(), ((java.io.Writer) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "forceDeleteOnExit(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Schedule a file to be deleted when JVM exits.\r\n * If file is directory delete it and all sub-directories.\r\n *\r\n * @param file\r\n * \t\tfile or directory to delete.\r\n * @throws IOException\r\n * \t\tin case deletion is unsuccessful\r\n */\r\npublic static void forceDeleteOnExit(java.io.File file) throws java.io.IOException {\r\n    if (file.isDirectory()) {\r\n        org.apache.commons.io.FileUtils.deleteDirectoryOnExit(file);\r\n    } else {\r\n        file.deleteOnExit();\r\n    }\r\n}", "docComment": "Schedule a file to be deleted when JVM exits.\r\nIf file is directory delete it and all sub-directories.\r\n\r\n@param file\r\n\t\tfile or directory to delete.\r\n@throws IOException\r\n\t\tin case deletion is unsuccessful\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream(int)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(int)", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream(int)", "kind": "constructor", "sourceText": "// ----------------------------------------------------------- Constructors\r\n/**\r\n * Constructs an instance of this class which will trigger an event at the\r\n * specified threshold.\r\n *\r\n * @param threshold\r\n * \t\tThe number of bytes at which to trigger an event.\r\n */\r\npublic ThresholdingOutputStream(int threshold) {\r\n    super();\r\n    this.threshold = threshold;\r\n}", "docComment": "Constructs an instance of this class which will trigger an event at the\r\nspecified threshold.\r\n\r\n@param threshold\r\n\t\tThe number of bytes at which to trigger an event.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteToLarge()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "kind": "method", "sourceText": "/**\r\n * Test wether writeTo() properly writes large content.\r\n */\r\npublic void testWriteToLarge() {\r\n    java.io.File testFile = new java.io.File(\"testWriteToFile.dat\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baos = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    // Ensure that the test starts from a clean base.\r\n    testFile.delete();\r\n    org.apache.commons.io.output.DeferredFileOutputStream dfos = new org.apache.commons.io.output.DeferredFileOutputStream(this.testBytes.length / 2, testFile);\r\n    try {\r\n        dfos.write(this.testBytes);\r\n        this.assertTrue(testFile.exists());\r\n        this.assertFalse(dfos.isInMemory());\r\n        try {\r\n            dfos.writeTo(baos);\r\n            this.fail(\"Should not have been able to write before closeing\");\r\n        } catch (java.io.IOException ioe) {\r\n            // ok, as expected\r\n        }\r\n        dfos.close();\r\n        dfos.writeTo(baos);\r\n    } catch (java.io.IOException ioe) {\r\n        this.fail(\"Unexpected IOException\");\r\n    }\r\n    byte[] copiedBytes = baos.toByteArray();\r\n    this.assertTrue(java.util.Arrays.equals(this.testBytes, copiedBytes));\r\n    this.verifyResultFile(testFile);\r\n    testFile.delete();\r\n}", "docComment": "Test wether writeTo() properly writes large content.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.HexDump.dump(byte).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "enc", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new Prefix file filter for a single prefix.\r\n *\r\n * @param prefix\r\n * \t\tthe prefix to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the prefix is null\r\n */\r\npublic PrefixFileFilter(java.lang.String prefix) {\r\n    super();\r\n    if (prefix == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The prefix must not be null\");\r\n    }\r\n    this.prefixes = new java.lang.String[]{ prefix };\r\n}", "docComment": "Constructs a new Prefix file filter for a single prefix.\r\n\r\n@param prefix\r\n\t\tthe prefix to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the prefix is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testFileResults;", "visibility": "private", "simpleName": "testFileResults", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.mark(int).0", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.mark(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FilenameUtilsTestCase(java.lang.String name) throws java.io.IOException {\r\n    super(name);\r\n    this.testFile1 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file1-test.txt\");\r\n    this.testFile2 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file1a-test.txt\");\r\n    org.apache.commons.io.FilenameUtilsTestCase.testFile1Size = ((int) (this.testFile1.length()));\r\n    org.apache.commons.io.FilenameUtilsTestCase.testFile2Size = ((int) (this.testFile2.length()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "kind": "constructor", "sourceText": "WriterThread(java.lang.String name, java.lang.String data, java.io.OutputStream output, org.apache.commons.io.output.DemuxOutputStream demux) {\r\n    super(name);\r\n    this.m_output = output;\r\n    this.m_demux = demux;\r\n    this.m_data = data.getBytes();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_nullSeparator()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "kind": "method", "sourceText": "public void testWriteLines_OutputStream_nullSeparator() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", \"world\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.writeLines(list, ((java.lang.String) (null)), out);\r\n    out.off();\r\n    out.flush();\r\n    java.lang.String expected = ((\"hello\" + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"world\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n    java.lang.String actual = baout.toString();\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "indexOfLastSeparator(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Returns the index of the last directory separator character.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The position of the last forward or backslash is returned.\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to find the last path separator in, null returns -1\r\n * @return the index of the last separator character, or -1 if there\r\nis no such character\r\n */\r\npublic static int indexOfLastSeparator(java.lang.String filename) {\r\n    if (filename == null) {\r\n        return -1;\r\n    }\r\n    int lastUnixPos = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR);\r\n    int lastWindowsPos = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR);\r\n    return java.lang.Math.max(lastUnixPos, lastWindowsPos);\r\n}", "docComment": "Returns the index of the last directory separator character.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe position of the last forward or backslash is returned.\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to find the last path separator in, null returns -1\r\n@return the index of the last separator character, or -1 if there\r\nis no such character\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.flush()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "flush()", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.flush()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#flush()\r\n */\r\npublic void flush() throws java.io.IOException {\r\n    this.out.flush();\r\n}", "docComment": "\r\n@see java.io.Writer#flush()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The Unix separator character.\r\n */\r\nprivate static final char UNIX_SEPARATOR = '/';", "visibility": "private", "simpleName": "UNIX_SEPARATOR", "qualifiedName": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "separatorsToSystem(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Converts all separators to the system separator.\r\n *\r\n * @param path\r\n * \t\tthe path to be changed, null ignored\r\n * @return the updated path\r\n */\r\npublic static java.lang.String separatorsToSystem(java.lang.String path) {\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    if (org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR == org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR) {\r\n        return org.apache.commons.io.FilenameUtils.separatorsToWindows(path);\r\n    } else {\r\n        return org.apache.commons.io.FilenameUtils.separatorsToUnix(path);\r\n    }\r\n}", "docComment": "Converts all separators to the system separator.\r\n\r\n@param path\r\n\t\tthe path to be changed, null ignored\r\n@return the updated path\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The test data as a byte array, derived from the string.\r\n */\r\nprivate byte[] testBytes = this.testString.getBytes();", "visibility": "private", "simpleName": "testBytes", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadDouble()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()", "kind": "method", "sourceText": "public void testReadDouble() throws java.io.IOException {\r\n    this.assertEquals(java.lang.Double.longBitsToDouble(0x807060504030201L), this.sdis.readDouble(), 0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isThresholdExceeded()", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "kind": "method", "sourceText": "/**\r\n * Determines whether or not the configured threshold has been exceeded for\r\n * this output stream.\r\n *\r\n * @return <code>true</code> if the threshold has been reached;\r\n<code>false</code> otherwise.\r\n */\r\npublic boolean isThresholdExceeded() {\r\n    return this.written > this.threshold;\r\n}", "docComment": "Determines whether or not the configured threshold has been exceeded for\r\nthis output stream.\r\n\r\n@return <code>true</code> if the threshold has been reached;\r\n<code>false</code> otherwise.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[]).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(byte[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(int)\r\n */\r\npublic synchronized void write(int b) throws java.io.IOException {\r\n    super.write(b);\r\n    this.branch.write(b);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "destDir", "qualifiedName": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Whether or not the configured threshold has been exceeded.\r\n */\r\nprivate boolean thresholdExceeded;", "visibility": "private", "simpleName": "thresholdExceeded", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedShort(byte[],int,short)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "kind": "static method", "sourceText": "// ========================================== Swapping read/write routines\r\n/**\r\n * Writes a \"short\" value to a byte array at a given offset. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param data\r\n * \t\ttarget byte array\r\n * @param offset\r\n * \t\tstarting offset in the byte array\r\n * @param value\r\n * \t\tvalue to write\r\n */\r\npublic static void writeSwappedShort(byte[] data, int offset, short value) {\r\n    data[offset + 0] = ((byte) ((value >> 0) & 0xff));\r\n    data[offset + 1] = ((byte) ((value >> 8) & 0xff));\r\n}", "docComment": "Writes a \"short\" value to a byte array at a given offset. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param data\r\n\t\ttarget byte array\r\n@param offset\r\n\t\tstarting offset in the byte array\r\n@param value\r\n\t\tvalue to write\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "filesToFilenames(java.util.Collection)", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "kind": "method", "sourceText": "private java.util.Collection filesToFilenames(java.util.Collection files) {\r\n    java.util.Collection filenames = new java.util.ArrayList(files.size());\r\n    java.util.Iterator i = files.iterator();\r\n    while (i.hasNext()) {\r\n        filenames.add(((java.io.File) (i.next())).getName());\r\n    } \r\n    return filenames;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest", "labels": ["Structure"], "properties": {"docComment": "\r\n@author Henri Yandell (bayard at apache dot org)\r\n@version $Revision$ $Date$\r\n", "simpleName": "EndianUtilsTest", "qualifiedName": "org.apache.commons.io.EndianUtilsTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "track(java.io.File,java.lang.Object)", "qualifiedName": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "kind": "static method", "sourceText": "/**\r\n * Track the specified file, using the provided marker, deleting the file\r\n * when the marker instance is garbage collected.\r\n *\r\n * @param file\r\n * \t\tThe file to be tracked.\r\n * @param marker\r\n * \t\tThe marker object used to track the file.\r\n */\r\npublic static void track(java.io.File file, java.lang.Object marker) {\r\n    org.apache.commons.io.FileCleaner.trackers.add(new org.apache.commons.io.FileCleaner.Tracker(file, marker, org.apache.commons.io.FileCleaner.q));\r\n}", "docComment": "Track the specified file, using the provided marker, deleting the file\r\nwhen the marker instance is garbage collected.\r\n\r\n@param file\r\n\t\tThe file to be tracked.\r\n@param marker\r\n\t\tThe marker object used to track the file.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public IOUtilsTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T1", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String T1 = \"Thread1\";", "visibility": "private", "simpleName": "T1", "qualifiedName": "org.apache.commons.io.DemuxTestCase.T1", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testFilterBuiltUsingAdd()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "kind": "method", "sourceText": "public void testFilterBuiltUsingAdd() throws java.lang.Exception {\r\n    java.util.List testFilters = this.getTestFilters();\r\n    java.util.List testTrueResults = this.getTrueResults();\r\n    java.util.List testFalseResults = this.getFalseResults();\r\n    java.util.List testFileResults = this.getFileResults();\r\n    java.util.List testFilenameResults = this.getFilenameResults();\r\n    for (int i = 1; i < testFilters.size(); i++) {\r\n        java.util.List filters = ((java.util.List) (testFilters.get(i)));\r\n        boolean[] trueResults = ((boolean[]) (testTrueResults.get(i)));\r\n        boolean[] falseResults = ((boolean[]) (testFalseResults.get(i)));\r\n        boolean fileResults = ((java.lang.Boolean) (testFileResults.get(i))).booleanValue();\r\n        boolean filenameResults = ((java.lang.Boolean) (testFilenameResults.get(i))).booleanValue();\r\n        // Test conditional AND filter created by passing filters to the constructor\r\n        org.apache.commons.io.filefilter.IOFileFilter filter = this.buildFilterUsingAdd(filters);\r\n        // Test as a file filter\r\n        this.resetTrueFilters(this.trueFilters);\r\n        this.resetFalseFilters(this.falseFilters);\r\n        this.assertFileFiltering(i, filter, this.file, fileResults);\r\n        this.assertTrueFiltersInvoked(i, this.trueFilters, trueResults);\r\n        this.assertFalseFiltersInvoked(i, this.falseFilters, falseResults);\r\n        // Test as a filename filter\r\n        this.resetTrueFilters(this.trueFilters);\r\n        this.resetFalseFilters(this.falseFilters);\r\n        this.assertFilenameFiltering(i, filter, this.file, filenameResults);\r\n        this.assertTrueFiltersInvoked(i, this.trueFilters, trueResults);\r\n        this.assertFalseFiltersInvoked(i, this.falseFilters, falseResults);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The wildcards that will be used to match filenames\r\n */\r\nprivate java.lang.String[] wildcards = null;", "visibility": "private", "simpleName": "wildcards", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.svnFilter", "labels": ["Variable"], "properties": {"sourceText": "/* Constructed on demand and then cached */\r\nprivate static org.apache.commons.io.filefilter.IOFileFilter svnFilter;", "visibility": "private", "simpleName": "svnFilter", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.svnFilter", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.resetCount()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "resetCount()", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.resetCount()", "kind": "method", "sourceText": "/**\r\n * Set the count back to 0.\r\n *\r\n * @return the count previous to resetting.\r\n */\r\npublic synchronized int resetCount() {\r\n    int tmp = this.count;\r\n    this.count = 0;\r\n    return tmp;\r\n}", "docComment": "Set the count back to 0.\r\n\r\n@return the count previous to resetting.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read()", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.read()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#read()\r\n */\r\npublic int read() throws java.io.IOException {\r\n    return this.in.read();\r\n}", "docComment": "\r\n@see java.io.InputStream#read()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadSwappedShort()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()", "kind": "method", "sourceText": "public void testReadSwappedShort() throws java.io.IOException {\r\n    byte[] bytes = new byte[]{ 0x2, 0x1 };\r\n    this.assertEquals(0x102, org.apache.commons.io.EndianUtils.readSwappedShort(bytes, 0));\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(bytes);\r\n    this.assertEquals(0x102, org.apache.commons.io.EndianUtils.readSwappedShort(input));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "off", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getFile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFile()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.getFile()", "kind": "method", "sourceText": "/**\r\n * Returns the same output file specified in the constructor, even when\r\n * threashold has not been reached.\r\n *\r\n * @return The file for this output stream, or <code>null</code> if no such\r\nfile exists.\r\n */\r\npublic java.io.File getFile() {\r\n    return this.outputFile;\r\n}", "docComment": "Returns the same output file specified in the constructor, even when\r\nthreashold has not been reached.\r\n\r\n@return The file for this output stream, or <code>null</code> if no such\r\nfile exists.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetBaseName()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()", "kind": "method", "sourceText": "public void testGetBaseName() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getBaseName(null));\r\n    this.assertEquals(\"noseperator\", org.apache.commons.io.FilenameUtils.getBaseName(\"noseperator.inthispath\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.getBaseName(\"a/b/c.txt\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.getBaseName(\"a/b/c\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getBaseName(\"a/b/c/\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.getBaseName(\"a\\\\b\\\\c\"));\r\n    this.assertEquals(\"file.txt\", org.apache.commons.io.FilenameUtils.getBaseName(\"file.txt.bak\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public ConditionalFileFilterAbstractTestCase(final java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getTrueResults()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()", "kind": "method", "sourceText": "protected java.util.List getTrueResults() {\r\n    return this.testTrueResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input1", "qualifiedName": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toByteArray(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "kind": "static method", "sourceText": "// read toByteArray\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Get the contents of an <code>InputStream</code> as a <code>byte[]</code>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @return the requested byte array\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n */\r\npublic static byte[] toByteArray(java.io.InputStream input) throws java.io.IOException {\r\n    org.apache.commons.io.output.ByteArrayOutputStream output = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.IOUtils.copy(input, output);\r\n    return output.toByteArray();\r\n}", "docComment": "Get the contents of an <code>InputStream</code> as a <code>byte[]</code>.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@return the requested byte array\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testByteArrayToWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "kind": "method", "sourceText": "public void testByteArrayToWriter() throws java.lang.Exception {\r\n    java.io.File destination = this.newFile(\"copy7.txt\");\r\n    java.io.FileInputStream fin = new java.io.FileInputStream(this.m_testFile);\r\n    byte[] in;\r\n    try {\r\n        // Create our byte[]. Rely on testInputStreamToByteArray() to make sure this is valid.\r\n        in = org.apache.commons.io.IOUtils.toByteArray(fin);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n    java.io.FileWriter fout = new java.io.FileWriter(destination);\r\n    try {\r\n        org.apache.commons.io.CopyUtils.copy(in, fout);\r\n        fout.flush();\r\n        this.checkFile(destination, this.m_testFile);\r\n        this.checkWrite(fout);\r\n    } finally {\r\n        fout.close();\r\n    }\r\n    this.deleteFile(destination);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump._shifts", "labels": ["Variable"], "properties": {"sourceText": "private static final int[] _shifts = new int[]{ 28, 24, 20, 16, 12, 8, 4, 0 };", "visibility": "private", "simpleName": "_shifts", "qualifiedName": "org.apache.commons.io.HexDump._shifts", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getFileResults()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()", "kind": "method", "sourceText": "protected java.util.List getFileResults() {\r\n    return this.testFileResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCounting()", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "kind": "method", "sourceText": "public void testCounting() throws java.io.IOException {\r\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\r\n    org.apache.commons.io.output.CountingOutputStream cos = new org.apache.commons.io.output.CountingOutputStream(baos);\r\n    for (int i = 0; i < 20; i++) {\r\n        cos.write(i);\r\n    }\r\n    this.assertByteArrayEquals(\"CountingOutputStream.write(int)\", baos.toByteArray(), 0, 20);\r\n    this.assertEquals(\"CountingOutputStream.getCount()\", cos.getCount(), 20);\r\n    byte[] array = new byte[10];\r\n    for (int i = 20; i < 30; i++) {\r\n        array[i - 20] = ((byte) (i));\r\n    }\r\n    cos.write(array);\r\n    this.assertByteArrayEquals(\"CountingOutputStream.write(byte[])\", baos.toByteArray(), 0, 30);\r\n    this.assertEquals(\"CountingOutputStream.getCount()\", cos.getCount(), 30);\r\n    for (int i = 25; i < 35; i++) {\r\n        array[i - 25] = ((byte) (i));\r\n    }\r\n    cos.write(array, 5, 5);\r\n    this.assertByteArrayEquals(\"CountingOutputStream.write(byte[], int, int)\", baos.toByteArray(), 0, 35);\r\n    this.assertEquals(\"CountingOutputStream.getCount()\", cos.getCount(), 35);\r\n    int count = cos.resetCount();\r\n    this.assertEquals(\"CountingOutputStream.resetCount()\", count, 35);\r\n    for (int i = 0; i < 10; i++) {\r\n        cos.write(i);\r\n    }\r\n    this.assertByteArrayEquals(\"CountingOutputStream.write(int)\", baos.toByteArray(), 35, 45);\r\n    this.assertEquals(\"CountingOutputStream.getCount()\", cos.getCount(), 10);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "assertEqualContent(java.io.File,java.io.File)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "kind": "method", "sourceText": "/**\r\n * Assert that the content of two files is the same.\r\n */\r\nprivate void assertEqualContent(java.io.File f0, java.io.File f1) throws java.io.IOException {\r\n    /* This doesn't work because the filesize isn't updated until the file\n    is closed.\n    assertTrue( \"The files \" + f0 + \" and \" + f1 +\n    \" have differing file sizes (\" + f0.length() +\n    \" vs \" + f1.length() + \")\", ( f0.length() == f1.length() ) );\n     */\r\n    java.io.InputStream is0 = new java.io.FileInputStream(f0);\r\n    try {\r\n        java.io.InputStream is1 = new java.io.FileInputStream(f1);\r\n        try {\r\n            byte[] buf0 = new byte[1024];\r\n            byte[] buf1 = new byte[1024];\r\n            int n0 = 0;\r\n            int n1 = 0;\r\n            while ((-1) != n0) {\r\n                n0 = is0.read(buf0);\r\n                n1 = is1.read(buf1);\r\n                this.assertTrue((((((((\"The files \" + f0) + \" and \") + f1) + \" have differing number of bytes available (\") + n0) + \" vs \") + n1) + \")\", n0 == n1);\r\n                this.assertTrue((((\"The files \" + f0) + \" and \") + f1) + \" have different content\", java.util.Arrays.equals(buf0, buf1));\r\n            } \r\n        } finally {\r\n            is1.close();\r\n        }\r\n    } finally {\r\n        is0.close();\r\n    }\r\n}", "docComment": "Assert that the content of two files is the same.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.<clinit>()", "labels": ["Script"], "properties": {"visibility": "default", "simpleName": "<clinit>()", "qualifiedName": "org.apache.commons.io.IOUtils.<clinit>()", "kind": "class initializer", "sourceText": "static {\r\n    // avoid security issues\r\n    java.io.StringWriter buf = new java.io.StringWriter(4);\r\n    java.io.PrintWriter out = new java.io.PrintWriter(buf);\r\n    out.println();\r\n    org.apache.commons.io.IOUtils.LINE_SEPARATOR = buf.toString();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToOutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_stringToOutputStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(str, out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "kind": "method", "sourceText": "public void resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter[] filters) {\r\n    for (int i = 0; i < filters.length; i++) {\r\n        if (filters[i] != null) {\r\n            filters[i].reset();\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.inData", "labels": ["Variable"], "properties": {"sourceText": "private byte[] inData = this.generateTestData(org.apache.commons.io.CopyUtilsTest.FILE_SIZE);", "visibility": "private", "simpleName": "inData", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.inData", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNoFilters()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "kind": "method", "sourceText": "public void testNoFilters() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.ConditionalFileFilter fileFilter = this.getConditionalFileFilter();\r\n    java.io.File file = new java.io.File(this.workingPath, (org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX + 1) + org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE);\r\n    this.assertFileFiltering(1, ((org.apache.commons.io.filefilter.IOFileFilter) (fileFilter)), file, false);\r\n    this.assertFilenameFiltering(1, ((org.apache.commons.io.filefilter.IOFileFilter) (fileFilter)), file, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "kind": "method", "sourceText": "public void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File file, boolean expected) throws java.lang.Exception {\r\n    // Note. This only tests the (File, String) version if the parent of\r\n    // the File passed in is not null\r\n    this.assertTrue(((((\"Filter(File) \" + filter.getClass().getName()) + \" not \") + expected) + \" for \") + file, filter.accept(file) == expected);\r\n    if ((file != null) && (file.getParentFile() != null)) {\r\n        this.assertTrue(((((\"Filter(File, String) \" + filter.getClass().getName()) + \" not \") + expected) + \" for \") + file, filter.accept(file.getParentFile(), file.getName()) == expected);\r\n    } else if (file == null) {\r\n        this.assertTrue((((\"Filter(File, String) \" + filter.getClass().getName()) + \" not \") + expected) + \" for null\", filter.accept(file) == expected);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "asFileFilter(java.io.FilenameFilter)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "kind": "static method", "sourceText": "/**\r\n * Returns an <code>IOFileFilter</code> that wraps the\r\n * <code>FilenameFilter</code> instance.\r\n *\r\n * @param filter\r\n * \t\tthe filter to be wrapped\r\n * @return a new filter that implements IOFileFilter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter filter) {\r\n    return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\r\n}", "docComment": "Returns an <code>IOFileFilter</code> that wraps the\r\n<code>FilenameFilter</code> instance.\r\n\r\n@param filter\r\n\t\tthe filter to be wrapped\r\n@return a new filter that implements IOFileFilter\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "assertByteArrayEquals(java.lang.String,byte[],byte[])", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "kind": "method", "sourceText": "private void assertByteArrayEquals(java.lang.String msg, byte[] array1, byte[] array2) {\r\n    this.assertEquals(msg + \": array size mismatch\", array1.length, array2.length);\r\n    for (int i = 0; i < array1.length; i++) {\r\n        this.assertEquals(((msg + \": array[ \") + i) + \"] mismatch\", array1[i], array2[i]);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "c0", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "separatorsToUnix(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Converts all separators to the Unix separator of forward slash.\r\n *\r\n * @param path\r\n * \t\tthe path to be changed, null ignored\r\n * @return the updated path\r\n */\r\npublic static java.lang.String separatorsToUnix(java.lang.String path) {\r\n    if ((path == null) || (path.indexOf(org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR) == (-1))) {\r\n        return path;\r\n    }\r\n    return path.replace(org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR, org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR);\r\n}", "docComment": "Converts all separators to the Unix separator of forward slash.\r\n\r\n@param path\r\n\t\tthe path to be changed, null ignored\r\n@return the updated path\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_Encoding_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "kind": "method", "sourceText": "public void testWriteLines_OutputStream_Encoding_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.writeLines(((java.util.List) (null)), \"*\", out, \"US-ASCII\");\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doCopyDirectory(java.io.File,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "kind": "static method", "sourceText": "/**\r\n * Internal copy directory method.\r\n *\r\n * @param srcDir\r\n * \t\tthe validated source directory, not null\r\n * @param destDir\r\n * \t\tthe validated destination directory, not null\r\n * @param preserveFileDate\r\n * \t\twhether to preserve the file date\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n * @since Commons IO 1.1\r\n */\r\nprivate static void doCopyDirectory(java.io.File srcDir, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\r\n    if (destDir.exists()) {\r\n        if (destDir.isDirectory() == false) {\r\n            throw new java.io.IOException((\"Destination '\" + destDir) + \"' exists but is not a directory\");\r\n        }\r\n    } else {\r\n        if (destDir.mkdirs() == false) {\r\n            throw new java.io.IOException((\"Destination '\" + destDir) + \"' directory cannot be created\");\r\n        }\r\n        if (preserveFileDate) {\r\n            destDir.setLastModified(srcDir.lastModified());\r\n        }\r\n    }\r\n    if (destDir.canWrite() == false) {\r\n        throw new java.io.IOException((\"Destination '\" + destDir) + \"' cannot be written to\");\r\n    }\r\n    // recurse\r\n    java.io.File[] files = srcDir.listFiles();\r\n    if (files == null) {\r\n        // null if security restricted\r\n        throw new java.io.IOException(\"Failed to list contents of \" + srcDir);\r\n    }\r\n    for (int i = 0; i < files.length; i++) {\r\n        java.io.File copiedFile = new java.io.File(destDir, files[i].getName());\r\n        if (files[i].isDirectory()) {\r\n            org.apache.commons.io.FileUtils.doCopyDirectory(files[i], copiedFile, preserveFileDate);\r\n        } else {\r\n            org.apache.commons.io.FileUtils.doCopyFile(files[i], copiedFile, preserveFileDate);\r\n        }\r\n    }\r\n}", "docComment": "Internal copy directory method.\r\n\r\n@param srcDir\r\n\t\tthe validated source directory, not null\r\n@param destDir\r\n\t\tthe validated destination directory, not null\r\n@param preserveFileDate\r\n\t\twhether to preserve the file date\r\n@throws IOException\r\n\t\tif an error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "assertEqualContent(char[],java.io.File)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "kind": "method", "sourceText": "/**\r\n * Assert that the content of a file is equal to that in a char[].\r\n */\r\nprotected void assertEqualContent(char[] c0, java.io.File file) throws java.io.IOException {\r\n    java.io.Reader ir = new java.io.FileReader(file);\r\n    try {\r\n        char[] c1 = new char[c0.length];\r\n        int numRead = ir.read(c1);\r\n        this.assertTrue(\"Different number of bytes\", numRead == c0.length);\r\n        for (int i = 0; i < numRead; this.assertTrue((((((\"Byte \" + i) + \" differs (\") + c0[i]) + \" != \") + c1[i]) + \")\", c0[i] == c1[i]) , i++);\r\n    } finally {\r\n        ir.close();\r\n    }\r\n}", "docComment": "Assert that the content of a file is equal to that in a char[].\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readLines(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "kind": "static method", "sourceText": "// readLines\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Get the contents of an <code>InputStream</code> as a list of Strings,\r\n * one entry per line, using the default character encoding of the platform.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from, not null\r\n * @return the list of Strings, never null\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static java.util.List readLines(java.io.InputStream input) throws java.io.IOException {\r\n    java.io.InputStreamReader reader = new java.io.InputStreamReader(input);\r\n    return org.apache.commons.io.IOUtils.readLines(reader);\r\n}", "docComment": "Get the contents of an <code>InputStream</code> as a list of Strings,\r\none entry per line, using the default character encoding of the platform.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from, not null\r\n@return the list of Strings, never null\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.flush()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "flush()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.flush()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#flush()\r\n */\r\npublic void flush() throws java.io.IOException {\r\n    this.out.flush();\r\n}", "docComment": "\r\n@see java.io.Writer#flush()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "labels": ["Variable"], "properties": {"sourceText": "// ----------------------------------------------------------- Data members\r\n/**\r\n * The output stream to which data will be written prior to the theshold\r\n * being reached.\r\n */\r\nprivate org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream;", "visibility": "private", "simpleName": "memoryOutputStream", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "ConditionalFileFilterAbstractTestCase", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "kind": "abstract class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase", "labels": ["Structure"], "properties": {"docComment": "Base class for testcases doing tests with files.\r\n\r\n@author Jeremias Maerki\r\n@author Gareth Davis\r\n", "simpleName": "FileBasedTestCase", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase", "labels": ["Structure"], "properties": {"docComment": "This is used to test FileSystemUtils.\r\n\r\n@author Stephen Colebourne\r\n@version $Id$\r\n", "simpleName": "FileSystemUtilsTestCase", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.IOUtilsWriteTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "char", "labels": ["Primitive"], "properties": {"simpleName": "char", "qualifiedName": "char", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.CopyUtilsTest.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "cleanDirectory(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Clean a directory without deleting it.\r\n *\r\n * @param directory\r\n * \t\tdirectory to clean\r\n * @throws IOException\r\n * \t\tin case cleaning is unsuccessful\r\n */\r\npublic static void cleanDirectory(java.io.File directory) throws java.io.IOException {\r\n    if (!directory.exists()) {\r\n        java.lang.String message = directory + \" does not exist\";\r\n        throw new java.lang.IllegalArgumentException(message);\r\n    }\r\n    if (!directory.isDirectory()) {\r\n        java.lang.String message = directory + \" is not a directory\";\r\n        throw new java.lang.IllegalArgumentException(message);\r\n    }\r\n    java.io.File[] files = directory.listFiles();\r\n    if (files == null) {\r\n        // null if security restricted\r\n        throw new java.io.IOException(\"Failed to list contents of \" + directory);\r\n    }\r\n    java.io.IOException exception = null;\r\n    for (int i = 0; i < files.length; i++) {\r\n        java.io.File file = files[i];\r\n        try {\r\n            org.apache.commons.io.FileUtils.forceDelete(file);\r\n        } catch (java.io.IOException ioe) {\r\n            exception = ioe;\r\n        }\r\n    }\r\n    if (null != exception) {\r\n        throw exception;\r\n    }\r\n}", "docComment": "Clean a directory without deleting it.\r\n\r\n@param directory\r\n\t\tdirectory to clean\r\n@throws IOException\r\n\t\tin case cleaning is unsuccessful\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump._cbuffer", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.StringBuffer _cbuffer = new java.lang.StringBuffer(2);", "visibility": "private", "simpleName": "_cbuffer", "qualifiedName": "org.apache.commons.io.HexDump._cbuffer", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter1", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA1", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String DATA1 = \"Data for thread1\";", "visibility": "private", "simpleName": "DATA1", "qualifiedName": "org.apache.commons.io.DemuxTestCase.DATA1", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "closeQuietly(java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)", "kind": "static method", "sourceText": "/**\r\n * Unconditionally close a <code>Writer</code>.\r\n * <p>\r\n * Equivalent to {@link Writer#close()}, except any exceptions will be ignored.\r\n * This is typically used in finally blocks.\r\n *\r\n * @param output\r\n * \t\tthe Writer to close, may be null or already closed\r\n */\r\npublic static void closeQuietly(java.io.Writer output) {\r\n    try {\r\n        if (output != null) {\r\n            output.close();\r\n        }\r\n    } catch (java.io.IOException ioe) {\r\n        // ignore\r\n    }\r\n}", "docComment": "Unconditionally close a <code>Writer</code>.\r\n<p>\r\nEquivalent to {@link Writer#close()}, except any exceptions will be ignored.\r\nThis is typically used in finally blocks.\r\n\r\n@param output\r\n\t\tthe Writer to close, may be null or already closed\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isFileNewer(java.io.File,long)", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "kind": "static method", "sourceText": "/**\r\n * Tests if the specified <code>File</code> is newer than the specified\r\n * time reference.\r\n *\r\n * @param file\r\n * \t\tthe <code>File</code> of which the modification date must\r\n * \t\tbe compared.\r\n * @param timeMillis\r\n * \t\tthe time reference measured in milliseconds since the\r\n * \t\tepoch (00:00:00 GMT, January 1, 1970)\r\n * @return true if the <code>File</code> exists and has been modified after\r\nthe given time reference.\r\n */\r\npublic static boolean isFileNewer(java.io.File file, long timeMillis) {\r\n    if (file == null) {\r\n        throw new java.lang.IllegalArgumentException(\"No specified file\");\r\n    }\r\n    if (!file.exists()) {\r\n        return false;\r\n    }\r\n    return file.lastModified() > timeMillis;\r\n}", "docComment": "Tests if the specified <code>File</code> is newer than the specified\r\ntime reference.\r\n\r\n@param file\r\n\t\tthe <code>File</code> of which the modification date must\r\n\t\tbe compared.\r\n@param timeMillis\r\n\t\tthe time reference measured in milliseconds since the\r\n\t\tepoch (00:00:00 GMT, January 1, 1970)\r\n@return true if the <code>File</code> exists and has been modified after\r\nthe given time reference.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.tearDown()", "kind": "method", "sourceText": "public void tearDown() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFileFilters()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic java.util.List getFileFilters() {\r\n    return java.util.Collections.unmodifiableList(this.fileFilters);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSwapShort()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testSwapShort()", "kind": "method", "sourceText": "public void testSwapShort() {\r\n    this.assertEquals(((short) (0)), org.apache.commons.io.EndianUtils.swapShort(((short) (0))));\r\n    this.assertEquals(((short) (0x201)), org.apache.commons.io.EndianUtils.swapShort(((short) (0x102))));\r\n    this.assertEquals(((short) (0xffff)), org.apache.commons.io.EndianUtils.swapShort(((short) (0xffff))));\r\n    this.assertEquals(((short) (0x102)), org.apache.commons.io.EndianUtils.swapShort(((short) (0x201))));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.count", "labels": ["Variable"], "properties": {"sourceText": "private int count;", "visibility": "private", "simpleName": "count", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.count", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "filters", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)", "kind": "constructor", "sourceText": "public ClassLoaderObjectInputStreamTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.q", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Queue of <code>Tracker</code> instances being watched.\r\n */\r\n/* Tracker */\r\nprivate static java.lang.ref.ReferenceQueue q = new java.lang.ref.ReferenceQueue();", "visibility": "private", "simpleName": "q", "qualifiedName": "org.apache.commons.io.FileCleaner.q", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "thresholdReached()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "kind": "method", "sourceText": "/**\r\n * Switches the underlying output stream from a memory based stream to one\r\n * that is backed by disk. This is the point at which we realise that too\r\n * much data is being written to keep in memory, so we elect to switch to\r\n * disk-based storage.\r\n *\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\nprotected void thresholdReached() throws java.io.IOException {\r\n    java.io.FileOutputStream fos = new java.io.FileOutputStream(this.outputFile);\r\n    this.memoryOutputStream.writeTo(fos);\r\n    this.currentOutputStream = fos;\r\n    this.memoryOutputStream = null;\r\n}", "docComment": "Switches the underlying output stream from a memory based stream to one\r\nthat is backed by disk. This is the point at which we realise that too\r\nmuch data is being written to keep in memory, so we elect to switch to\r\ndisk-based storage.\r\n\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_byteArrayToOutputStream()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "kind": "method", "sourceText": "// ----------------------------------------------------------------\r\n// Tests\r\n// ----------------------------------------------------------------\r\npublic void testCopy_byteArrayToOutputStream() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.CopyUtils.copy(this.inData, out);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter.\r\n * If the file exists, it is overwritten.\r\n *\r\n * @param fileName\r\n * \t\tthe file to write to, not null\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.lang.String fileName) throws java.io.IOException {\r\n    this(fileName, false, null);\r\n}", "docComment": "Constructs a LockableFileWriter.\r\nIf the file exists, it is overwritten.\r\n\r\n@param fileName\r\n\t\tthe file to write to, not null\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.OS", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The operating system flag.\r\n */\r\nprivate static final int OS;", "visibility": "private", "simpleName": "OS", "qualifiedName": "org.apache.commons.io.FileSystemUtils.OS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "filename2", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapFloat()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSwapFloat()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testSwapFloat()", "kind": "method", "sourceText": "public void testSwapFloat() {\r\n    this.assertEquals(0.0F, org.apache.commons.io.EndianUtils.swapFloat(0.0F), 0.0);\r\n    float f1 = java.lang.Float.intBitsToFloat(0x1020304);\r\n    float f2 = java.lang.Float.intBitsToFloat(0x4030201);\r\n    this.assertEquals(f2, org.apache.commons.io.EndianUtils.swapFloat(f1), 0.0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner", "labels": ["Container", "Structure"], "properties": {"docComment": "Keeps track of files awaiting deletion, and deletes them when an associated\r\nmarker object is reclaimed by the garbage collector.\r\n<p>\r\nThis utility creates a background thread to handle file deletion.\r\nEach file to be deleted is registered with a handler object.\r\nWhen the handler object is garbage collected, the file is deleted.\r\n\r\n@author Noel Bergman\r\n@author Martin Cooper\r\n@version $Id$\r\n", "simpleName": "FileCleaner", "qualifiedName": "org.apache.commons.io.FileCleaner", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).1", "labels": ["Variable"], "properties": {"simpleName": "marker", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase", "labels": ["Structure"], "properties": {"docComment": "This is used to test IOUtils for correctness. The following checks are performed:\r\n<ul>\r\n  <li>The return must not be null, must be the same type and equals() to the method's second arg</li>\r\n  <li>All bytes must have been read from the source (available() == 0)</li>\r\n  <li>The source and destination content must be identical (byte-wise comparison check)</li>\r\n  <li>The output stream must not have been closed (a byte/char is written to test this, and\r\n  subsequent size checked)</li>\r\n</ul>\r\nDue to interdependencies in IOUtils and IOUtilsTestlet, one bug may cause\r\nmultiple tests to fail.\r\n\r\n@author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\r\n@author Gareth Davis\r\n@author Ian Springer\r\n", "simpleName": "IOUtilsTestCase", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename ends with the suffix.\r\n *\r\n * @param file\r\n * \t\tthe File directory\r\n * @param name\r\n * \t\tthe filename\r\n * @return true if the filename ends with one of our suffixes\r\n */\r\npublic boolean accept(java.io.File file, java.lang.String name) {\r\n    for (int i = 0; i < this.suffixes.length; i++) {\r\n        if (name.endsWith(this.suffixes[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename ends with the suffix.\r\n\r\n@param file\r\n\t\tthe File directory\r\n@param name\r\n\t\tthe filename\r\n@return true if the filename ends with one of our suffixes\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getStream()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getStream()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.getStream()", "kind": "method", "sourceText": "// --------------------------------------- ThresholdingOutputStream methods\r\n/**\r\n * Returns the current output stream. This may be memory based or disk\r\n * based, depending on the current state with respect to the threshold.\r\n *\r\n * @return The underlying output stream.\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\nprotected java.io.OutputStream getStream() throws java.io.IOException {\r\n    return this.currentOutputStream;\r\n}", "docComment": "Returns the current output stream. This may be memory based or disk\r\nbased, depending on the current state with respect to the threshold.\r\n\r\n@return The underlying output stream.\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.written", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The number of bytes written to the output stream.\r\n */\r\nprivate long written;", "visibility": "private", "simpleName": "written", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.written", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * An empty array of type <code>File</code>.\r\n */\r\npublic static final java.io.File[] EMPTY_FILE_ARRAY = new java.io.File[0];", "visibility": "public", "simpleName": "EMPTY_FILE_ARRAY", "qualifiedName": "org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream", "labels": ["Structure"], "properties": {"docComment": "An output stream which triggers an event when a specified number of bytes of\r\ndata have been written to it. The event can be used, for example, to throw\r\nan exception if a maximum has been reached, or to switch the underlying\r\nstream type when the threshold is exceeded.\r\n<p>\r\nThis class overrides all <code>OutputStream</code> methods. However, these\r\noverrides ultimately call the corresponding methods in the underlying output\r\nstream implementation.\r\n<p>\r\nNOTE: This implementation may trigger the event <em>before</em> the threshold\r\nis actually reached, since it triggers when a pending write operation would\r\ncause the threshold to be exceeded.\r\n\r\n@author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\r\n@version $Id$\r\n", "simpleName": "ThresholdingOutputStream", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream", "kind": "abstract class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSuffix()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "kind": "method", "sourceText": "public void testSuffix() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = new org.apache.commons.io.filefilter.SuffixFileFilter(new java.lang.String[]{ \"tes\", \"est\" });\r\n    java.io.File testFile = new java.io.File(\"test\");\r\n    java.io.File fredFile = new java.io.File(\"fred\");\r\n    this.assertFiltering(filter, new java.io.File(\"fred.tes\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"fred.est\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"fred.EST\"), false);// case-sensitive\r\n\r\n    this.assertFiltering(filter, new java.io.File(\"fred.exe\"), false);\r\n    filter = org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(\"tes\"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(\"est\"));\r\n    this.assertFiltering(filter, new java.io.File(\"fred\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\".tes\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"fred.test\"), true);\r\n    filter = new org.apache.commons.io.filefilter.SuffixFileFilter(\"est\");\r\n    this.assertFiltering(filter, new java.io.File(\"test\"), true);\r\n    this.assertFiltering(filter, new java.io.File(\"fred\"), false);\r\n    this.assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));\r\n    this.assertTrue(!filter.accept(fredFile.getParentFile(), fredFile.getName()));\r\n    java.util.List prefixes = java.util.Arrays.asList(new java.lang.String[]{ \"ood\", \"red\" });\r\n    org.apache.commons.io.filefilter.IOFileFilter listFilter = new org.apache.commons.io.filefilter.SuffixFileFilter(prefixes);\r\n    this.assertTrue(!listFilter.accept(testFile.getParentFile(), testFile.getName()));\r\n    this.assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));\r\n    try {\r\n        new org.apache.commons.io.filefilter.SuffixFileFilter(((java.lang.String) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    try {\r\n        new org.apache.commons.io.filefilter.SuffixFileFilter(((java.lang.String[]) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    try {\r\n        new org.apache.commons.io.filefilter.SuffixFileFilter(((java.util.List) (null)));\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Writes chars from a <code>StringBuffer</code> to bytes on an\r\n * <code>OutputStream</code> using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method uses {@link String#getBytes(String)}.\r\n *\r\n * @param data\r\n * \t\tthe <code>StringBuffer</code> to write, null ignored\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\r\n    if (data != null) {\r\n        if (encoding == null) {\r\n            org.apache.commons.io.IOUtils.write(data, output);\r\n        } else {\r\n            output.write(data.toString().getBytes(encoding));\r\n        }\r\n    }\r\n}", "docComment": "Writes chars from a <code>StringBuffer</code> to bytes on an\r\n<code>OutputStream</code> using the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method uses {@link String#getBytes(String)}.\r\n\r\n@param data\r\n\t\tthe <code>StringBuffer</code> to write, null ignored\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).0", "labels": ["Variable"], "properties": {"simpleName": "baout", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "dump(byte[],long,java.io.OutputStream,int)", "qualifiedName": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "kind": "static method", "sourceText": "/**\r\n * Dump an array of bytes to an OutputStream.\r\n *\r\n * @param data\r\n * \t\tthe byte array to be dumped\r\n * @param offset\r\n * \t\tits offset, whatever that might mean\r\n * @param stream\r\n * \t\tthe OutputStream to which the data is to be\r\n * \t\twritten\r\n * @param index\r\n * \t\tinitial index into the byte array\r\n * @throws IOException\r\n * \t\tis thrown if anything goes wrong writing\r\n * \t\tthe data to stream\r\n * @throws ArrayIndexOutOfBoundsException\r\n * \t\tif the index is\r\n * \t\toutside the data array's bounds\r\n * @throws IllegalArgumentException\r\n * \t\tif the output stream is null\r\n */\r\npublic static void dump(byte[] data, long offset, java.io.OutputStream stream, int index) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException {\r\n    if ((index < 0) || (index >= data.length)) {\r\n        throw new java.lang.ArrayIndexOutOfBoundsException(((\"illegal index: \" + index) + \" into array of length \") + data.length);\r\n    }\r\n    if (stream == null) {\r\n        throw new java.lang.IllegalArgumentException(\"cannot write to nullstream\");\r\n    }\r\n    long display_offset = offset + index;\r\n    java.lang.StringBuffer buffer = new java.lang.StringBuffer(74);\r\n    for (int j = index; j < data.length; j += 16) {\r\n        int chars_read = data.length - j;\r\n        if (chars_read > 16) {\r\n            chars_read = 16;\r\n        }\r\n        buffer.append(org.apache.commons.io.HexDump.dump(display_offset)).append(' ');\r\n        for (int k = 0; k < 16; k++) {\r\n            if (k < chars_read) {\r\n                buffer.append(org.apache.commons.io.HexDump.dump(data[k + j]));\r\n            } else {\r\n                buffer.append(\"  \");\r\n            }\r\n            buffer.append(' ');\r\n        }\r\n        for (int k = 0; k < chars_read; k++) {\r\n            if ((data[k + j] >= ' ') && (data[k + j] < 127)) {\r\n                buffer.append(((char) (data[k + j])));\r\n            } else {\r\n                buffer.append('.');\r\n            }\r\n        }\r\n        buffer.append(org.apache.commons.io.HexDump.EOL);\r\n        stream.write(buffer.toString().getBytes());\r\n        stream.flush();\r\n        buffer.setLength(0);\r\n        display_offset += chars_read;\r\n    }\r\n}", "docComment": "Dump an array of bytes to an OutputStream.\r\n\r\n@param data\r\n\t\tthe byte array to be dumped\r\n@param offset\r\n\t\tits offset, whatever that might mean\r\n@param stream\r\n\t\tthe OutputStream to which the data is to be\r\n\t\twritten\r\n@param index\r\n\t\tinitial index into the byte array\r\n@throws IOException\r\n\t\tis thrown if anything goes wrong writing\r\n\t\tthe data to stream\r\n@throws ArrayIndexOutOfBoundsException\r\n\t\tif the index is\r\n\t\toutside the data array's bounds\r\n@throws IllegalArgumentException\r\n\t\tif the output stream is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getTestFilters()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()", "kind": "method", "sourceText": "protected java.util.List getTestFilters() {\r\n    return this.testFilters;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getInput(java.lang.String)", "qualifiedName": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "kind": "method", "sourceText": "private java.lang.String getInput(java.lang.String threadName) throws java.io.IOException {\r\n    org.apache.commons.io.DemuxTestCase.ReaderThread thread = ((org.apache.commons.io.DemuxTestCase.ReaderThread) (this.m_threadMap.get(threadName)));\r\n    this.assertNotNull(\"getInput()\", thread);\r\n    return thread.getData();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "public boolean accept(java.io.File file) {\r\n    this.setInvoked(true);\r\n    return super.accept(file);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "fileFilters", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString(java.io.InputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of an <code>InputStream</code> as a String\r\n * using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @return the requested String\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n */\r\npublic static java.lang.String toString(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\r\n    java.io.StringWriter sw = new java.io.StringWriter();\r\n    org.apache.commons.io.IOUtils.copy(input, sw, encoding);\r\n    return sw.toString();\r\n}", "docComment": "Get the contents of an <code>InputStream</code> as a String\r\nusing the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@return the requested String\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the File should be accepted by this filter.\r\n * <p>\r\n * Defined in {@link java.io.FilenameFilter}.\r\n *\r\n * @param dir\r\n * \t\tthe directory File to check\r\n * @param name\r\n * \t\tthe filename within the directory to check\r\n * @return true if this file matches the test\r\n */\r\npublic boolean accept(java.io.File dir, java.lang.String name);", "docComment": "Checks to see if the File should be accepted by this filter.\r\n<p>\r\nDefined in {@link java.io.FilenameFilter}.\r\n\r\n@param dir\r\n\t\tthe directory File to check\r\n@param name\r\n\t\tthe filename within the directory to check\r\n@return true if this file matches the test\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase", "labels": ["Structure"], "properties": {"docComment": "This is used to test FileUtils for correctness.\r\n\r\n@author <a href=\"mailto:alban.peignier@free.fr\">Alban Peignier</a>\r\n", "simpleName": "FileUtilsFileNewerTestCase", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "suffixes", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream_Encoding_nullEncoding()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "kind": "method", "sourceText": "public void testCopy_readerToOutputStream_Encoding_nullEncoding() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.copy(reader, out, null);\r\n    // note: this method *does* flush.\r\n    // note: we don't flush here; this IOUtils method does it for us\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSizeOfDirectory()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()", "kind": "method", "sourceText": "// sizeOfDirectory\r\npublic void testSizeOfDirectory() throws java.lang.Exception {\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), this.getName());\r\n    // Non-existent file\r\n    try {\r\n        org.apache.commons.io.FileUtils.sizeOfDirectory(file);\r\n        this.fail(\"Exception expected.\");\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    // Creates file\r\n    file.createNewFile();\r\n    file.deleteOnExit();\r\n    // Existing file\r\n    try {\r\n        org.apache.commons.io.FileUtils.sizeOfDirectory(file);\r\n        this.fail(\"Exception expected.\");\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n    // Existing directory\r\n    file.delete();\r\n    file.mkdir();\r\n    this.assertEquals(\"Unexpected directory size\", org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE, org.apache.commons.io.FileUtils.sizeOfDirectory(file));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read(char[])", "qualifiedName": "org.apache.commons.io.input.ProxyReader.read(char[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Reader#read(char[])\r\n */\r\npublic int read(char[] chr) throws java.io.IOException {\r\n    return this.in.read(chr);\r\n}", "docComment": "\r\n@see java.io.Reader#read(char[])\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "size()", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.ByteArrayOutputStream#size()\r\n */\r\npublic int size() {\r\n    return this.count;\r\n}", "docComment": "\r\n@see java.io.ByteArrayOutputStream#size()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_Writer_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "kind": "method", "sourceText": "public void testWriteLines_Writer_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.writeLines(((java.util.List) (null)), \"*\", writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new name file filter for a single name.\r\n *\r\n * @param name\r\n * \t\tthe name to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the prefix is null\r\n */\r\npublic NameFileFilter(java.lang.String name) {\r\n    super();\r\n    if (name == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The name must not be null\");\r\n    }\r\n    this.names = new java.lang.String[]{ name };\r\n}", "docComment": "Constructs a new name file filter for a single name.\r\n\r\n@param name\r\n\t\tthe name to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the prefix is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testTee()", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "kind": "method", "sourceText": "public void testTee() throws java.io.IOException {\r\n    java.io.ByteArrayOutputStream baos1 = new java.io.ByteArrayOutputStream();\r\n    java.io.ByteArrayOutputStream baos2 = new java.io.ByteArrayOutputStream();\r\n    org.apache.commons.io.output.TeeOutputStream tos = new org.apache.commons.io.output.TeeOutputStream(baos1, baos2);\r\n    for (int i = 0; i < 20; i++) {\r\n        tos.write(i);\r\n    }\r\n    this.assertByteArrayEquals(\"TeeOutputStream.write(int)\", baos1.toByteArray(), baos2.toByteArray());\r\n    byte[] array = new byte[10];\r\n    for (int i = 20; i < 30; i++) {\r\n        array[i - 20] = ((byte) (i));\r\n    }\r\n    tos.write(array);\r\n    this.assertByteArrayEquals(\"TeeOutputStream.write(byte[])\", baos1.toByteArray(), baos2.toByteArray());\r\n    for (int i = 25; i < 35; i++) {\r\n        array[i - 25] = ((byte) (i));\r\n    }\r\n    tos.write(array, 5, 5);\r\n    this.assertByteArrayEquals(\"TeeOutputStream.write(byte[], int, int)\", baos1.toByteArray(), baos2.toByteArray());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "files", "qualifiedName": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getTrueResults()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()", "kind": "method", "sourceText": "protected java.util.List getTrueResults() {\r\n    return this.testTrueResults;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString(byte[])", "qualifiedName": "org.apache.commons.io.IOUtils.toString(byte[])", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>byte[]</code> as a String\r\n * using the default character encoding of the platform.\r\n *\r\n * @param input\r\n * \t\tthe byte array to read from\r\n * @return the requested String\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs (never occurs)\r\n * @deprecated Use {@link String#String(byte[])}\r\n */\r\npublic static java.lang.String toString(byte[] input) throws java.io.IOException {\r\n    return new java.lang.String(input);\r\n}", "docComment": "Get the contents of a <code>byte[]</code> as a String\r\nusing the default character encoding of the platform.\r\n\r\n@param input\r\n\t\tthe byte array to read from\r\n@return the requested String\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs (never occurs)\r\n@deprecated Use {@link String#String(byte[])}\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getConditionalFileFilter()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()", "kind": "method", "sourceText": "protected org.apache.commons.io.filefilter.ConditionalFileFilter getConditionalFileFilter() {\r\n    return new org.apache.commons.io.filefilter.AndFileFilter();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapFloat(float).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.swapFloat(float).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter_Encoding_nullEncoding()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "kind": "method", "sourceText": "public void testCopy_inputStreamToWriter_Encoding_nullEncoding() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.copy(in, writer, null);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertTrue(\"Not all bytes were read\", in.available() == 0);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.resetCount()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "resetCount()", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.resetCount()", "kind": "method", "sourceText": "/**\r\n * Set the count back to 0.\r\n *\r\n * @return the count previous to resetting.\r\n */\r\npublic synchronized int resetCount() {\r\n    int tmp = this.count;\r\n    this.count = 0;\r\n    return tmp;\r\n}", "docComment": "Set the count back to 0.\r\n\r\n@return the count previous to resetting.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).1", "labels": ["Variable"], "properties": {"simpleName": "a2", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "assertEqualContent(byte[],java.io.File)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "kind": "method", "sourceText": "/**\r\n * Assert that the content of a file is equal to that in a byte[].\r\n */\r\nprotected void assertEqualContent(byte[] b0, java.io.File file) throws java.io.IOException {\r\n    java.io.InputStream is = new java.io.FileInputStream(file);\r\n    try {\r\n        byte[] b1 = new byte[b0.length];\r\n        int numRead = is.read(b1);\r\n        this.assertTrue(\"Different number of bytes\", (numRead == b0.length) && (is.available() == 0));\r\n        for (int i = 0; i < numRead; this.assertTrue((((((\"Byte \" + i) + \" differs (\") + b0[i]) + \" != \") + b1[i]) + \")\", b0[i] == b1[i]) , i++);\r\n    } finally {\r\n        is.close();\r\n    }\r\n}", "docComment": "Assert that the content of a file is equal to that in a byte[].\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest", "labels": ["Structure"], "properties": {"docComment": "Really not a lot to do here, but checking that no \r\nExceptions are thrown.\r\n\r\n@author Henri Yandell (bayard at apache dot org)\r\n@version $Revision$ $Date$\r\n", "simpleName": "NullOutputStreamTest", "qualifiedName": "org.apache.commons.io.output.NullOutputStreamTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toURLs(java.io.File[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toURLs(java.io.File[])", "qualifiedName": "org.apache.commons.io.FileUtils.toURLs(java.io.File[])", "kind": "static method", "sourceText": "/**\r\n * Converts each of an array of <code>File</code> to a <code>URL</code>.\r\n * <p>\r\n * Returns an array of the same size as the input.\r\n *\r\n * @param files\r\n * \t\tthe files to convert\r\n * @return an array of URLs matching the input\r\n * @throws IOException\r\n * \t\tif a file cannot be converted\r\n */\r\npublic static java.net.URL[] toURLs(java.io.File[] files) throws java.io.IOException {\r\n    java.net.URL[] urls = new java.net.URL[files.length];\r\n    for (int i = 0; i < urls.length; i++) {\r\n        urls[i] = files[i].toURL();\r\n    }\r\n    return urls;\r\n}", "docComment": "Converts each of an array of <code>File</code> to a <code>URL</code>.\r\n<p>\r\nReturns an array of the same size as the input.\r\n\r\n@param files\r\n\t\tthe files to convert\r\n@return an array of URLs matching the input\r\n@throws IOException\r\n\t\tif a file cannot be converted\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "indexOfExtension(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Returns the index of the last extension separator character, which is a dot.\r\n * <p>\r\n * This method also checks that there is no directory separator after the last dot.\r\n * To do this it uses {@link #indexOfLastSeparator(String)} which will\r\n * handle a file in either Unix or Windows format.\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to find the last path separator in, null returns -1\r\n * @return the index of the last separator character, or -1 if there\r\nis no such character\r\n */\r\npublic static int indexOfExtension(java.lang.String filename) {\r\n    if (filename == null) {\r\n        return -1;\r\n    }\r\n    int extensionPos = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR);\r\n    int lastSeparator = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\r\n    return lastSeparator > extensionPos ? -1 : extensionPos;\r\n}", "docComment": "Returns the index of the last extension separator character, which is a dot.\r\n<p>\r\nThis method also checks that there is no directory separator after the last dot.\r\nTo do this it uses {@link #indexOfLastSeparator(String)} which will\r\nhandle a file in either Unix or Windows format.\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to find the last path separator in, null returns -1\r\n@return the index of the last separator character, or -1 if there\r\nis no such character\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadLines_Reader()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testReadLines_Reader() throws java.lang.Exception {\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    java.io.Reader in = null;\r\n    try {\r\n        java.lang.String[] data = new java.lang.String[]{ \"hello\", \"/u1234\", \"\", \"this is\", \"some text\" };\r\n        this.createLineBasedFile(file, data);\r\n        in = new java.io.InputStreamReader(new java.io.FileInputStream(file));\r\n        java.util.List lines = org.apache.commons.io.IOUtils.readLines(in);\r\n        this.assertEquals(java.util.Arrays.asList(data), lines);\r\n        this.assertEquals(-1, in.read());\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n        this.deleteFile(file);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "is", "qualifiedName": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).2", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "forceDelete(java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * <p>\r\n * Delete a file. If file is a directory, delete it and all sub-directories.\r\n * </p>\r\n * <p>\r\n * The difference between File.delete() and this method are:\r\n * </p>\r\n * <ul>\r\n * <li>A directory to be deleted does not have to be empty.</li>\r\n * <li>You get exceptions when a file or directory cannot be deleted.\r\n * (java.io.File methods returns a boolean)</li>\r\n * </ul>\r\n *\r\n * @param file\r\n * \t\tfile or directory to delete.\r\n * @throws IOException\r\n * \t\tin case deletion is unsuccessful\r\n */\r\npublic static void forceDelete(java.io.File file) throws java.io.IOException {\r\n    if (file.isDirectory()) {\r\n        org.apache.commons.io.FileUtils.deleteDirectory(file);\r\n    } else {\r\n        if (!file.exists()) {\r\n            throw new java.io.FileNotFoundException(\"File does not exist: \" + file);\r\n        }\r\n        if (!file.delete()) {\r\n            java.lang.String message = \"Unable to delete file: \" + file;\r\n            throw new java.io.IOException(message);\r\n        }\r\n    }\r\n}", "docComment": "<p>\r\nDelete a file. If file is a directory, delete it and all sub-directories.\r\n</p>\r\n<p>\r\nThe difference between File.delete() and this method are:\r\n</p>\r\n<ul>\r\n<li>A directory to be deleted does not have to be empty.</li>\r\n<li>You get exceptions when a file or directory cannot be deleted.\r\n     (java.io.File methods returns a boolean)</li>\r\n</ul>\r\n\r\n@param file\r\n\t\tfile or directory to delete.\r\n@throws IOException\r\n\t\tin case deletion is unsuccessful\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToOutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_charArrayToOutputStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(str.toCharArray(), out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.close()", "kind": "method", "sourceText": "/**\r\n * Closes stream associated with current thread.\r\n *\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\npublic void close() throws java.io.IOException {\r\n    java.io.OutputStream output = this.getStream();\r\n    if (null != output) {\r\n        output.close();\r\n    }\r\n}", "docComment": "Closes stream associated with current thread.\r\n\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter(java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "proxy", "qualifiedName": "org.apache.commons.io.output.ProxyWriter(java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getName(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Gets the name minus the path from a full filename.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The text after the last forward or backslash is returned.\r\n * <pre>\r\n * a/b/c.txt --> c.txt\r\n * a.txt     --> a.txt\r\n * a/b/c     --> c\r\n * a/b/c/    --> \"\"\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the name of the file without the path, or an empty string if none exists\r\n */\r\npublic static java.lang.String getName(java.lang.String filename) {\r\n    if (filename == null) {\r\n        return null;\r\n    }\r\n    int index = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\r\n    return filename.substring(index + 1);\r\n}", "docComment": "Gets the name minus the path from a full filename.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe text after the last forward or backslash is returned.\r\n<pre>\r\na/b/c.txt --> c.txt\r\na.txt     --> a.txt\r\na/b/c     --> c\r\na/b/c/    --> \"\"\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the name of the file without the path, or an empty string if none exists\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump._lbuffer", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.StringBuffer _lbuffer = new java.lang.StringBuffer(8);", "visibility": "private", "simpleName": "_lbuffer", "qualifiedName": "org.apache.commons.io.HexDump._lbuffer", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "mode", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toHex(int).0", "labels": ["Variable"], "properties": {"simpleName": "n", "qualifiedName": "org.apache.commons.io.HexDumpTest.toHex(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(char[])", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(char[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.Writer#write(char[])\r\n */\r\npublic void write(char[] chr) throws java.io.IOException {\r\n    this.out.write(chr);\r\n}", "docComment": "\r\n@see java.io.Writer#write(char[])\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File)", "qualifiedName": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the File should be accepted by this filter.\r\n *\r\n * @param file\r\n * \t\tthe File to check\r\n * @return true if this file matches the test\r\n */\r\npublic boolean accept(java.io.File file) {\r\n    return this.accept(file.getParentFile(), file.getName());\r\n}", "docComment": "Checks to see if the File should be accepted by this filter.\r\n\r\n@param file\r\n\t\tthe File to check\r\n@return true if this file matches the test\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getLocalTestDirectory()", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "kind": "method", "sourceText": "private java.io.File getLocalTestDirectory() {\r\n    return new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"list-files\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "kind": "constructor", "sourceText": "/**\r\n * Construct a new wildcard filter for an array of wildcards\r\n *\r\n * @param wildcards\r\n * \t\twildcards to match\r\n * @throws IllegalArgumentException\r\n * \t\tif the pattern array is null\r\n */\r\npublic WildcardFilter(java.lang.String[] wildcards) {\r\n    super();\r\n    if (wildcards == null) {\r\n        throw new java.lang.IllegalArgumentException();\r\n    }\r\n    this.wildcards = wildcards;\r\n}", "docComment": "Construct a new wildcard filter for an array of wildcards\r\n\r\n@param wildcards\r\n\t\twildcards to match\r\n@throws IllegalArgumentException\r\n\t\tif the pattern array is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String DEFAULT_WORKING_PATH = \"./AndFileFilterTestCase/\";", "visibility": "private", "simpleName": "DEFAULT_WORKING_PATH", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String,boolean,java.lang.String)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter.\r\n *\r\n * @param fileName\r\n * \t\tthe file to write to, not null\r\n * @param append\r\n * \t\ttrue if content should be appended, false to overwrite\r\n * @param lockDir\r\n * \t\tthe directory in which the lock file should be held\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.lang.String fileName, boolean append, java.lang.String lockDir) throws java.io.IOException {\r\n    this(new java.io.File(fileName), append, lockDir);\r\n}", "docComment": "Constructs a LockableFileWriter.\r\n\r\n@param fileName\r\n\t\tthe file to write to, not null\r\n@param append\r\n\t\ttrue if content should be appended, false to overwrite\r\n@param lockDir\r\n\t\tthe directory in which the lock file should be held\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.Reader,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// Reader -> OutputStream\r\n// ----------------------------------------------------------------\r\n/**\r\n * Serialize chars from a <code>Reader</code> to bytes on an\r\n * <code>OutputStream</code>, and flush the <code>OutputStream</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(java.io.Reader input, java.io.OutputStream output) throws java.io.IOException {\r\n    java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(output);\r\n    org.apache.commons.io.CopyUtils.copy(input, out);\r\n    // XXX Unless anyone is planning on rewriting OutputStreamWriter, we\r\n    // have to flush here.\r\n    out.flush();\r\n}", "docComment": "Serialize chars from a <code>Reader</code> to bytes on an\r\n<code>OutputStream</code>, and flush the <code>OutputStream</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The Windows directory separator character.\r\n */\r\npublic static final char DIR_SEPARATOR_WINDOWS = '\\\\';", "visibility": "public", "simpleName": "DIR_SEPARATOR_WINDOWS", "qualifiedName": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileUtilsTestCase(java.lang.String name) throws java.io.IOException {\r\n    super(name);\r\n    this.testFile1 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file1-test.txt\");\r\n    this.testFile2 = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file1a-test.txt\");\r\n    org.apache.commons.io.FileUtilsTestCase.testFile1Size = ((int) (this.testFile1.length()));\r\n    org.apache.commons.io.FileUtilsTestCase.testFile2Size = ((int) (this.testFile2.length()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "labels": ["Variable"], "properties": {"sourceText": "private static int testFile1Size;", "visibility": "private", "simpleName": "testFile1Size", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testInputStreamToString()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()", "kind": "method", "sourceText": "public void testInputStreamToString() throws java.lang.Exception {\r\n    java.io.FileInputStream fin = new java.io.FileInputStream(this.m_testFile);\r\n    try {\r\n        java.lang.String out = org.apache.commons.io.IOUtils.toString(fin);\r\n        this.assertNotNull(out);\r\n        this.assertTrue(\"Not all bytes were read\", fin.available() == 0);\r\n        this.assertTrue(((\"Wrong output size: out.length()=\" + out.length()) + \"!=\") + org.apache.commons.io.IOUtilsTestCase.FILE_SIZE, out.length() == org.apache.commons.io.IOUtilsTestCase.FILE_SIZE);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIndexOfLastSeparator()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()", "kind": "method", "sourceText": "public void testIndexOfLastSeparator() {\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfLastSeparator(null));\r\n    this.assertEquals(-1, org.apache.commons.io.FilenameUtils.indexOfLastSeparator(\"noseperator.inthispath\"));\r\n    this.assertEquals(3, org.apache.commons.io.FilenameUtils.indexOfLastSeparator(\"a/b/c\"));\r\n    this.assertEquals(3, org.apache.commons.io.FilenameUtils.indexOfLastSeparator(\"a\\\\b\\\\c\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "fileName", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.filefilter.FileFilterTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.INSTANCE", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Singleton instance, used mainly for testing.\r\n */\r\nprivate static final org.apache.commons.io.FileSystemUtils INSTANCE = new org.apache.commons.io.FileSystemUtils();", "visibility": "private", "simpleName": "INSTANCE", "qualifiedName": "org.apache.commons.io.FileSystemUtils.INSTANCE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readChar()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readChar()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readChar()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.DataInput#readChar()\r\n */\r\npublic char readChar() throws java.io.IOException, java.io.EOFException {\r\n    return ((char) (this.readShort()));\r\n}", "docComment": "\r\n@see java.io.DataInput#readChar()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "isSeparator(char)", "qualifiedName": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Checks if the character is a separator.\r\n *\r\n * @param ch\r\n * \t\tthe character to check\r\n * @return true if it is a separator character\r\n */\r\nprivate static boolean isSeparator(char ch) {\r\n    return (ch == org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR) || (ch == org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR);\r\n}", "docComment": "Checks if the character is a separator.\r\n\r\n@param ch\r\n\t\tthe character to check\r\n@return true if it is a separator character\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNameFilterNullListArgument()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()", "kind": "method", "sourceText": "public void testNameFilterNullListArgument() throws java.lang.Exception {\r\n    java.util.List test = null;\r\n    try {\r\n        new org.apache.commons.io.filefilter.NameFileFilter(test);\r\n        this.fail(\"constructing a NameFileFilter with a null List argument should fail.\");\r\n    } catch (java.lang.IllegalArgumentException iae) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.FileSystemUtilsTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.filter", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The filter\r\n */\r\nprivate org.apache.commons.io.filefilter.IOFileFilter filter;", "visibility": "private", "simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter.filter", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "st", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "kind": "method", "sourceText": "public void testCopy_inputStreamToWriter() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.CopyUtils.copy(in, writer);\r\n    writer.flush();\r\n    this.assertTrue(\"Not all bytes were read\", in.available() == 0);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Returns false.\r\n *\r\n * @param dir\r\n * \t\tthe directory to check\r\n * @param name\r\n * \t\tthe filename\r\n * @return false\r\n */\r\npublic boolean accept(java.io.File dir, java.lang.String name) {\r\n    return false;\r\n}", "docComment": "Returns false.\r\n\r\n@param dir\r\n\t\tthe directory to check\r\n@param name\r\n\t\tthe filename\r\n@return false\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.StringBuffer,java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)", "kind": "static method", "sourceText": "// write StringBuffer\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Writes chars from a <code>StringBuffer</code> to a <code>Writer</code>.\r\n *\r\n * @param data\r\n * \t\tthe <code>StringBuffer</code> to write, null ignored\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(data.toString());\r\n    }\r\n}", "docComment": "Writes chars from a <code>StringBuffer</code> to a <code>Writer</code>.\r\n\r\n@param data\r\n\t\tthe <code>StringBuffer</code> to write, null ignored\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "prefixes", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testInputStreamToByteArray()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "kind": "method", "sourceText": "public void testInputStreamToByteArray() throws java.lang.Exception {\r\n    java.io.FileInputStream fin = new java.io.FileInputStream(this.m_testFile);\r\n    try {\r\n        byte[] out = org.apache.commons.io.IOUtils.toByteArray(fin);\r\n        this.assertNotNull(out);\r\n        this.assertTrue(\"Not all bytes were read\", fin.available() == 0);\r\n        this.assertTrue(((\"Wrong output size: out.length=\" + out.length) + \"!=\") + org.apache.commons.io.IOUtilsTestCase.FILE_SIZE, out.length == org.apache.commons.io.IOUtilsTestCase.FILE_SIZE);\r\n        this.assertEqualContent(out, this.m_testFile);\r\n    } finally {\r\n        fin.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean).0", "labels": ["Variable"], "properties": {"simpleName": "invoked", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testForceDeleteAFile1()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()", "kind": "method", "sourceText": "// forceDelete\r\npublic void testForceDeleteAFile1() throws java.lang.Exception {\r\n    java.io.File destination = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"copy1.txt\");\r\n    destination.createNewFile();\r\n    this.assertTrue(\"Copy1.txt doesn't exist to delete\", destination.exists());\r\n    org.apache.commons.io.FileUtils.forceDelete(destination);\r\n    this.assertTrue(\"Check No Exist\", !destination.exists());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).1", "labels": ["Variable"], "properties": {"simpleName": "cmp", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_byteArrayToWriter()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "kind": "method", "sourceText": "public void testCopy_byteArrayToWriter() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.CopyUtils.copy(this.inData, writer);\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.String,java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "kind": "static method", "sourceText": "/**\r\n * Writes chars from a <code>String</code> to bytes on an\r\n * <code>OutputStream</code> using the default character encoding of the\r\n * platform.\r\n * <p>\r\n * This method uses {@link String#getBytes()}.\r\n *\r\n * @param data\r\n * \t\tthe <code>String</code> to write, null ignored\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(java.lang.String data, java.io.OutputStream output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(data.getBytes());\r\n    }\r\n}", "docComment": "Writes chars from a <code>String</code> to bytes on an\r\n<code>OutputStream</code> using the default character encoding of the\r\nplatform.\r\n<p>\r\nThis method uses {@link String#getBytes()}.\r\n\r\n@param data\r\n\t\tthe <code>String</code> to write, null ignored\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The Filename filter\r\n */\r\nprivate java.io.FilenameFilter filenameFilter;", "visibility": "private", "simpleName": "filenameFilter", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest", "labels": ["Structure"], "properties": {"docComment": "\r\n@author Scott Sanders (sanders at apache dot org)\r\n@author Marc Johnson (mjohnson at apache dot org)\r\n@version $Revision$ $Date$\r\n", "simpleName": "HexDumpTest", "qualifiedName": "org.apache.commons.io.HexDumpTest", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).1", "labels": ["Variable"], "properties": {"simpleName": "input2", "qualifiedName": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List testTrueResults;", "visibility": "private", "simpleName": "testTrueResults", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()", "kind": "method", "sourceText": "public void setUp() {\r\n    this.bytes = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8 };\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(this.bytes);\r\n    this.sdis = new org.apache.commons.io.input.SwappedDataInputStream(bais);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getStream()", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "kind": "method", "sourceText": "/**\r\n * Utility method to retrieve stream bound to current thread (if any).\r\n *\r\n * @return the output stream\r\n */\r\nprivate java.io.OutputStream getStream() {\r\n    return ((java.io.OutputStream) (this.m_streams.get()));\r\n}", "docComment": "Utility method to retrieve stream bound to current thread (if any).\r\n\r\n@return the output stream\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "includeSeparator", "qualifiedName": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToWriter_Encoding_nullEncoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "kind": "method", "sourceText": "public void testWrite_byteArrayToWriter_Encoding_nullEncoding() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(this.inData, writer, null);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new ProxyInputStream.\r\n *\r\n * @param proxy\r\n * \t\tthe InputStream to delegate to\r\n */\r\npublic ProxyInputStream(java.io.InputStream proxy) {\r\n    super(proxy);\r\n    // the proxy is stored in a protected superclass variable named 'in'\r\n}", "docComment": "Constructs a new ProxyInputStream.\r\n\r\n@param proxy\r\n\t\tthe InputStream to delegate to\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.write(int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "preserveFileDate", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "labels": ["Variable"], "properties": {"sourceText": "final java.io.File top = this.getLocalTestDirectory();", "visibility": "default", "simpleName": "top", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream", "labels": ["Structure"], "properties": {"docComment": "DataInput for systems relying on little endian data formats.\r\nWhen read, values will be changed from little endian to big \r\nendian formats for internal usage. \r\n\r\n<p><b>Origin of code: </b>Avalon Excalibur (IO)</p>\r\n\r\n@author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\r\n@version CVS $Revision$ $Date$\r\n", "simpleName": "SwappedDataInputStream", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toInputStream(java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Convert the specified string to an input stream, encoded as bytes\r\n * using the default character encoding of the platform.\r\n *\r\n * @param input\r\n * \t\tthe string to convert\r\n * @return an input stream\r\n * @since Commons IO 1.1\r\n */\r\npublic static java.io.InputStream toInputStream(java.lang.String input) {\r\n    byte[] bytes = input.getBytes();\r\n    return new java.io.ByteArrayInputStream(bytes);\r\n}", "docComment": "Convert the specified string to an input stream, encoded as bytes\r\nusing the default character encoding of the platform.\r\n\r\n@param input\r\n\t\tthe string to convert\r\n@return an input stream\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest", "labels": ["Structure"], "properties": {"docComment": "\r\n@author Henri Yandell (bayard at apache dot org)\r\n@version $Revision$ $Date$\r\n", "simpleName": "TeeOutputStreamTest", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadSwappedUnsignedShort()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()", "kind": "method", "sourceText": "public void testReadSwappedUnsignedShort() throws java.io.IOException {\r\n    byte[] bytes = new byte[]{ 0x2, 0x1 };\r\n    this.assertEquals(0x102, org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(bytes, 0));\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(bytes);\r\n    this.assertEquals(0x102, org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(input));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "time", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_Encoding_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()", "kind": "method", "sourceText": "public void testWriteLines_OutputStream_Encoding_nullStream() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", \"world\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    try {\r\n        org.apache.commons.io.IOUtils.writeLines(list, \"*\", ((java.io.OutputStream) (null)), \"US-ASCII\");\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],int,int)", "qualifiedName": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[], int, int)\r\n */\r\npublic void write(byte[] b, int off, int len) throws java.io.IOException {\r\n    this.count += len;\r\n    super.write(b, off, len);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "destDir", "qualifiedName": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNormalizeNoEndSeparator()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testNormalizeNoEndSeparator() throws java.lang.Exception {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(null));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\":\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"1:\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"1:\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"1:a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"\\\\\\\\\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"\\\\\\\\a\"));\r\n    this.assertEquals((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((((((\"\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"\\\\\\\\server\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c.txt\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user\\\\a\\\\b/c.txt\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../c\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../../c\"));\r\n    this.assertEquals(\"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../../c/\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../../../c\"));\r\n    this.assertEquals(\"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/..\"));\r\n    this.assertEquals(\"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../..\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../../\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../../..\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../c/../d\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/../c/../d/\"));\r\n    this.assertEquals((((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b//d\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/././.\"));\r\n    this.assertEquals((\"a\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"a/b/./././\"));\r\n    this.assertEquals(\"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"./a/\"));\r\n    this.assertEquals(\"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"./a\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"./\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\".\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"..\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/\"));\r\n    this.assertEquals(((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/../c\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/../../../c\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/..\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/../../..\"));\r\n    this.assertEquals(((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/../c/../d\"));\r\n    this.assertEquals(((((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b//d\"));\r\n    this.assertEquals(((org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/a/b/././.\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/./a\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/./\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/..\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.SEP + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"/\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/\"));\r\n    this.assertEquals((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/../c\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/../../../c\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/..\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/../../..\"));\r\n    this.assertEquals((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/../c/../d\"));\r\n    this.assertEquals((((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b//d\"));\r\n    this.assertEquals((((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/a/b/././.\"));\r\n    this.assertEquals((\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/./a\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/./\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/..\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~/\"));\r\n    this.assertEquals(\"~\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/\"));\r\n    this.assertEquals((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/../c\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/../../../c\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/..\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/../../..\"));\r\n    this.assertEquals((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/../c/../d\"));\r\n    this.assertEquals((((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b//d\"));\r\n    this.assertEquals((((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/a/b/././.\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/./a\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/./\"));\r\n    this.assertEquals((\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/..\"));\r\n    this.assertEquals(\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user/\"));\r\n    this.assertEquals(\"~user\" + org.apache.commons.io.FilenameUtilsTestCase.SEP, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"~user\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/\"));\r\n    this.assertEquals((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/../c\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/../../../c\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/..\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/../../..\"));\r\n    this.assertEquals((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/../c/../d\"));\r\n    this.assertEquals((((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b//d\"));\r\n    this.assertEquals((((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/a/b/././.\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/./a\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/./\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/..\"));\r\n    this.assertEquals((\"C:\" + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:/\"));\r\n    this.assertEquals(\"C:\" + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a\"));\r\n    this.assertEquals(\"C:\" + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/\"));\r\n    this.assertEquals(((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/../c\"));\r\n    this.assertEquals(\"C:\" + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/../../../c\"));\r\n    this.assertEquals(\"C:\" + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/..\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/../../..\"));\r\n    this.assertEquals(((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/../c/../d\"));\r\n    this.assertEquals(((((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b//d\"));\r\n    this.assertEquals(((\"C:\" + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:a/b/././.\"));\r\n    this.assertEquals(\"C:\" + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:./a\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:./\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:..\"));\r\n    this.assertEquals(\"C:\" + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"C:\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/\"));\r\n    this.assertEquals((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/../c\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"c\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/../../c\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/../../../c\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/..\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/../..\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/../../..\"));\r\n    this.assertEquals((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/../c/../d\"));\r\n    this.assertEquals((((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"d\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b//d\"));\r\n    this.assertEquals((((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"b\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/a/b/././.\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"a\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/./a\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/./\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/.\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/../a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/..\"));\r\n    this.assertEquals((((org.apache.commons.io.FilenameUtilsTestCase.SEP + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"server\") + org.apache.commons.io.FilenameUtilsTestCase.SEP) + \"\", org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(\"//server/\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "proxy", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNameFilterNullArgument()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()", "kind": "method", "sourceText": "public void testNameFilterNullArgument() throws java.lang.Exception {\r\n    java.lang.String test = null;\r\n    try {\r\n        new org.apache.commons.io.filefilter.NameFileFilter(test);\r\n        this.fail(\"constructing a NameFileFilter with a null String argument should fail.\");\r\n    } catch (java.lang.IllegalArgumentException iae) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPrefixLength(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Returns the length of the filename prefix, such as <code>C:/</code> or <code>~/</code>.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * <p>\r\n * The prefix length includes the first slash in the full filename\r\n * if applicable. Thus, it is possible that the length returned is greater\r\n * than the length of the input string.\r\n * <pre>\r\n * Windows:\r\n * a\\b\\c.txt           --> \"\"          --> relative\r\n * \\a\\b\\c.txt          --> \"\\\"         --> current drive absolute\r\n * C:a\\b\\c.txt         --> \"C:\"        --> drive relative\r\n * C:\\a\\b\\c.txt        --> \"C:\\\"       --> absolute\r\n * \\\\server\\a\\b\\c.txt  --> \"\\\\server\\\" --> UNC\r\n *\r\n * Unix:\r\n * a/b/c.txt           --> \"\"          --> relative\r\n * /a/b/c.txt          --> \"/\"         --> absolute\r\n * ~/a/b/c.txt         --> \"~/\"        --> current user\r\n * ~                   --> \"~/\"        --> current user (slash added)\r\n * ~user/a/b/c.txt     --> \"~user/\"    --> named user\r\n * ~user               --> \"~user/\"    --> named user (slash added)\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n * ie. both Unix and Windows prefixes are matched regardless.\r\n *\r\n * @param filename\r\n * \t\tthe filename to find the prefix in, null returns -1\r\n * @return the length of the prefix, -1 if invalid or null\r\n */\r\npublic static int getPrefixLength(java.lang.String filename) {\r\n    if (filename == null) {\r\n        return -1;\r\n    }\r\n    int len = filename.length();\r\n    if (len == 0) {\r\n        return 0;\r\n    }\r\n    char ch0 = filename.charAt(0);\r\n    if (ch0 == ':') {\r\n        return -1;\r\n    }\r\n    if (len == 1) {\r\n        if (ch0 == '~') {\r\n            return 2;// return a length greater than the input\r\n\r\n        }\r\n        return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\r\n    } else {\r\n        if (ch0 == '~') {\r\n            int posUnix = filename.indexOf(org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR, 1);\r\n            int posWin = filename.indexOf(org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR, 1);\r\n            if ((posUnix == (-1)) && (posWin == (-1))) {\r\n                return len + 1;// return a length greater than the input\r\n\r\n            }\r\n            posUnix = (posUnix == (-1)) ? posWin : posUnix;\r\n            posWin = (posWin == (-1)) ? posUnix : posWin;\r\n            return java.lang.Math.min(posUnix, posWin) + 1;\r\n        }\r\n        char ch1 = filename.charAt(1);\r\n        if (ch1 == ':') {\r\n            ch0 = java.lang.Character.toUpperCase(ch0);\r\n            if ((ch0 >= 'A') && (ch0 <= 'Z')) {\r\n                if ((len == 2) || (org.apache.commons.io.FilenameUtils.isSeparator(filename.charAt(2)) == false)) {\r\n                    return 2;\r\n                }\r\n                return 3;\r\n            }\r\n            return -1;\r\n        } else if (org.apache.commons.io.FilenameUtils.isSeparator(ch0) && org.apache.commons.io.FilenameUtils.isSeparator(ch1)) {\r\n            int posUnix = filename.indexOf(org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR, 2);\r\n            int posWin = filename.indexOf(org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR, 2);\r\n            if ((((posUnix == (-1)) && (posWin == (-1))) || (posUnix == 2)) || (posWin == 2)) {\r\n                return -1;\r\n            }\r\n            posUnix = (posUnix == (-1)) ? posWin : posUnix;\r\n            posWin = (posWin == (-1)) ? posUnix : posWin;\r\n            return java.lang.Math.min(posUnix, posWin) + 1;\r\n        } else {\r\n            return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\r\n        }\r\n    }\r\n}", "docComment": "Returns the length of the filename prefix, such as <code>C:/</code> or <code>~/</code>.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\n<p>\r\nThe prefix length includes the first slash in the full filename\r\nif applicable. Thus, it is possible that the length returned is greater\r\nthan the length of the input string.\r\n<pre>\r\nWindows:\r\na\\b\\c.txt           --> \"\"          --> relative\r\n\\a\\b\\c.txt          --> \"\\\"         --> current drive absolute\r\nC:a\\b\\c.txt         --> \"C:\"        --> drive relative\r\nC:\\a\\b\\c.txt        --> \"C:\\\"       --> absolute\r\n\\\\server\\a\\b\\c.txt  --> \"\\\\server\\\" --> UNC\r\n\r\nUnix:\r\na/b/c.txt           --> \"\"          --> relative\r\n/a/b/c.txt          --> \"/\"         --> absolute\r\n~/a/b/c.txt         --> \"~/\"        --> current user\r\n~                   --> \"~/\"        --> current user (slash added)\r\n~user/a/b/c.txt     --> \"~user/\"    --> named user\r\n~user               --> \"~user/\"    --> named user (slash added)\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\nie. both Unix and Windows prefixes are matched regardless.\r\n\r\n@param filename\r\n\t\tthe filename to find the prefix in, null returns -1\r\n@return the length of the prefix, -1 if invalid or null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream_Encoding()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testCopy_readerToOutputStream_Encoding() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.copy(reader, out, \"UTF16\");\r\n    // note: this method *does* flush.\r\n    // note: we don't flush here; this IOUtils method does it for us\r\n    byte[] bytes = baout.toByteArray();\r\n    bytes = new java.lang.String(bytes, \"UTF16\").getBytes(\"US-ASCII\");\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, bytes));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest", "labels": ["Structure"], "properties": {"docComment": "\r\n@author Henri Yandell (bayard at apache dot org)\r\n@version $Revision$ $Date$\r\n", "simpleName": "CountingOutputStreamTest", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "freeSpaceUnix(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Find free space on the *nix platform using the 'df' command.\r\n *\r\n * @param path\r\n * \t\tthe path to get free space for\r\n * @return the amount of free drive space on the volume\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\nlong freeSpaceUnix(java.lang.String path) throws java.io.IOException {\r\n    if (path.length() == 0) {\r\n        throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\r\n    }\r\n    path = org.apache.commons.io.FilenameUtils.normalize(path);\r\n    // build and run the 'dir' command\r\n    java.lang.String[] cmdAttribs = new java.lang.String[]{ \"df\", path };\r\n    // read the output from the command until we come to the second line\r\n    long bytes = -1;\r\n    java.io.BufferedReader in = null;\r\n    try {\r\n        in = this.openProcessStream(cmdAttribs);\r\n        java.lang.String line1 = in.readLine();// header line (ignore it)\r\n\r\n        java.lang.String line2 = in.readLine();// the line we're interested in\r\n\r\n        java.lang.String line3 = in.readLine();// possibly interesting line\r\n\r\n        if (line2 == null) {\r\n            // unknown problem, throw exception\r\n            throw new java.io.IOException(((((\"Command line 'df' did not return info as expected \" + \"for path '\") + path) + \"'- response on first line was '\") + line1) + \"'\");\r\n        }\r\n        line2 = line2.trim();\r\n        // Now, we tokenize the string. The fourth element is what we want.\r\n        java.util.StringTokenizer tok = new java.util.StringTokenizer(line2, \" \");\r\n        if (tok.countTokens() < 4) {\r\n            // could be long Filesystem, thus data on third line\r\n            if ((tok.countTokens() == 1) && (line3 != null)) {\r\n                line3 = line3.trim();\r\n                tok = new java.util.StringTokenizer(line3, \" \");\r\n            } else {\r\n                throw new java.io.IOException(((\"Command line 'df' did not return data as expected \" + \"for path '\") + path) + \"'- check path is valid\");\r\n            }\r\n        } else {\r\n            tok.nextToken();// Ignore Filesystem\r\n\r\n        }\r\n        tok.nextToken();// Ignore 1K-blocks\r\n\r\n        tok.nextToken();// Ignore Used\r\n\r\n        java.lang.String freeSpace = tok.nextToken();\r\n        try {\r\n            bytes = java.lang.Long.parseLong(freeSpace);\r\n        } catch (java.lang.NumberFormatException ex) {\r\n            throw new java.io.IOException(((\"Command line 'df' did not return numeric data as expected \" + \"for path '\") + path) + \"'- check path is valid\");\r\n        }\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n    }\r\n    if (bytes < 0) {\r\n        throw new java.io.IOException(((\"Command line 'df' did not find free space in response \" + \"for path '\") + path) + \"'- check path is valid\");\r\n    }\r\n    return bytes;\r\n}", "docComment": "Find free space on the *nix platform using the 'df' command.\r\n\r\n@param path\r\n\t\tthe path to get free space for\r\n@return the amount of free drive space on the volume\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "chmod(java.io.File,int,boolean)", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "kind": "method", "sourceText": "private boolean chmod(java.io.File file, int mode, boolean recurse) throws java.io.IOException, java.lang.InterruptedException {\r\n    // TODO: Refactor this to FileSystemUtils\r\n    java.util.List args = new java.util.ArrayList();\r\n    args.add(\"chmod\");\r\n    if (recurse) {\r\n        args.add(\"-R\");\r\n    }\r\n    args.add(java.lang.Integer.toString(mode));\r\n    args.add(file.getAbsolutePath());\r\n    java.lang.Process proc;\r\n    try {\r\n        proc = java.lang.Runtime.getRuntime().exec(((java.lang.String[]) (args.toArray(new java.lang.String[args.size()]))));\r\n    } catch (java.io.IOException e) {\r\n        return false;\r\n    }\r\n    int result = proc.waitFor();\r\n    this.assertEquals(0, result);\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.FilenameFilter)", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a delegate file filter around an existing FilenameFilter.\r\n *\r\n * @param filter\r\n * \t\tthe filter to decorate\r\n */\r\npublic DelegateFileFilter(java.io.FilenameFilter filter) {\r\n    super();\r\n    if (filter == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The FilenameFilter must not be null\");\r\n    }\r\n    this.filenameFilter = filter;\r\n}", "docComment": "Constructs a delegate file filter around an existing FilenameFilter.\r\n\r\n@param filter\r\n\t\tthe filter to decorate\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "preserveFileDate", "qualifiedName": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[])", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(byte[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[])\r\n */\r\npublic synchronized void write(byte[] b) throws java.io.IOException {\r\n    super.write(b);\r\n    this.branch.write(b);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[])\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSeparatorsToWindows()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()", "kind": "method", "sourceText": "public void testSeparatorsToWindows() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.separatorsToWindows(null));\r\n    this.assertEquals(\"\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToWindows(\"\\\\a\\\\b\\\\c\"));\r\n    this.assertEquals(\"\\\\a\\\\b\\\\c.txt\", org.apache.commons.io.FilenameUtils.separatorsToWindows(\"\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToWindows(\"\\\\a\\\\b/c\"));\r\n    this.assertEquals(\"\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToWindows(\"/a/b/c\"));\r\n    this.assertEquals(\"D:\\\\a\\\\b\\\\c\", org.apache.commons.io.FilenameUtils.separatorsToWindows(\"D:/a/b/c\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadLines_InputStream_String()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testReadLines_InputStream_String() throws java.lang.Exception {\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    java.io.InputStream in = null;\r\n    try {\r\n        java.lang.String[] data = new java.lang.String[]{ \"hello\", \"/u1234\", \"\", \"this is\", \"some text\" };\r\n        this.createLineBasedFile(file, data);\r\n        in = new java.io.FileInputStream(file);\r\n        java.util.List lines = org.apache.commons.io.IOUtils.readLines(in, \"UTF-8\");\r\n        this.assertEquals(java.util.Arrays.asList(data), lines);\r\n        this.assertEquals(-1, in.read());\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n        this.deleteFile(file);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildFilterUsingAdd(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "kind": "method", "sourceText": "protected abstract org.apache.commons.io.filefilter.IOFileFilter buildFilterUsingAdd(java.util.List filters);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testFileLocked()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testFileLocked() throws java.io.IOException {\r\n    org.apache.commons.io.output.LockableFileWriter lfw = new org.apache.commons.io.output.LockableFileWriter(this.file);\r\n    try {\r\n        new org.apache.commons.io.output.LockableFileWriter(this.file);\r\n        this.fail(\"Somehow able to open a locked file. \");\r\n    } catch (java.io.IOException ioe) {\r\n        java.lang.String msg = ioe.getMessage();\r\n        this.assertTrue(\"Exception message does not start correctly. \", msg.startsWith(\"Can't write file, lock \"));\r\n    } finally {\r\n        lfw.close();\r\n    }\r\n    this.assertEquals(false, this.lockFile.exists());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "byteCountToDisplaySize(long)", "qualifiedName": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "kind": "static method", "sourceText": "/**\r\n * Returns a human-readable version of the file size (original is in\r\n * bytes).\r\n *\r\n * @param size\r\n * \t\tThe number of bytes.\r\n * @return A human-readable display value (includes units).\r\n * @todo need for I18N?\r\n */\r\npublic static java.lang.String byteCountToDisplaySize(long size) {\r\n    java.lang.String displaySize;\r\n    if ((size / org.apache.commons.io.FileUtils.ONE_GB) > 0) {\r\n        displaySize = java.lang.String.valueOf(size / org.apache.commons.io.FileUtils.ONE_GB) + \" GB\";\r\n    } else if ((size / org.apache.commons.io.FileUtils.ONE_MB) > 0) {\r\n        displaySize = java.lang.String.valueOf(size / org.apache.commons.io.FileUtils.ONE_MB) + \" MB\";\r\n    } else if ((size / org.apache.commons.io.FileUtils.ONE_KB) > 0) {\r\n        displaySize = java.lang.String.valueOf(size / org.apache.commons.io.FileUtils.ONE_KB) + \" KB\";\r\n    } else {\r\n        displaySize = java.lang.String.valueOf(size) + \" bytes\";\r\n    }\r\n    return displaySize;\r\n}", "docComment": "Returns a human-readable version of the file size (original is in\r\nbytes).\r\n\r\n@param size\r\n\t\tThe number of bytes.\r\n@return A human-readable display value (includes units).\r\n@todo need for I18N?\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.FileCleanerTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getTrueResults()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "kind": "method", "sourceText": "protected abstract java.util.List getTrueResults();", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File m_testFile1;", "visibility": "private", "simpleName": "m_testFile1", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).1", "labels": ["Variable"], "properties": {"simpleName": "extensions", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetPrefix()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testGetPrefix() {\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPrefix(null));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPrefix(\":\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPrefix(\"1:\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPrefix(\"1:\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPrefix(\"1:a\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPrefix(\"\\\\\\\\\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(null, org.apache.commons.io.FilenameUtils.getPrefix(\"\\\\\\\\a\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPrefix(\"\"));\r\n    this.assertEquals(\"\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"\\\\\"));\r\n    this.assertEquals(\"C:\", org.apache.commons.io.FilenameUtils.getPrefix(\"C:\"));\r\n    this.assertEquals(\"C:\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"C:\\\\\"));\r\n    this.assertEquals(\"//server/\", org.apache.commons.io.FilenameUtils.getPrefix(\"//server/\"));\r\n    this.assertEquals(\"~/\", org.apache.commons.io.FilenameUtils.getPrefix(\"~\"));\r\n    this.assertEquals(\"~/\", org.apache.commons.io.FilenameUtils.getPrefix(\"~/\"));\r\n    this.assertEquals(\"~user/\", org.apache.commons.io.FilenameUtils.getPrefix(\"~user\"));\r\n    this.assertEquals(\"~user/\", org.apache.commons.io.FilenameUtils.getPrefix(\"~user/\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPrefix(\"a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"C:\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"C:\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"\\\\\\\\server\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"\\\\\\\\server\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPrefix(\"a/b/c.txt\"));\r\n    this.assertEquals(\"/\", org.apache.commons.io.FilenameUtils.getPrefix(\"/a/b/c.txt\"));\r\n    this.assertEquals(\"C:/\", org.apache.commons.io.FilenameUtils.getPrefix(\"C:/a/b/c.txt\"));\r\n    this.assertEquals(\"//server/\", org.apache.commons.io.FilenameUtils.getPrefix(\"//server/a/b/c.txt\"));\r\n    this.assertEquals(\"~/\", org.apache.commons.io.FilenameUtils.getPrefix(\"~/a/b/c.txt\"));\r\n    this.assertEquals(\"~user/\", org.apache.commons.io.FilenameUtils.getPrefix(\"~user/a/b/c.txt\"));\r\n    this.assertEquals(\"\", org.apache.commons.io.FilenameUtils.getPrefix(\"a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"~\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"~\\\\a\\\\b\\\\c.txt\"));\r\n    this.assertEquals(\"~user\\\\\", org.apache.commons.io.FilenameUtils.getPrefix(\"~user\\\\a\\\\b\\\\c.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The filename suffixes to search for\r\n */\r\nprivate java.lang.String[] suffixes;", "visibility": "private", "simpleName": "suffixes", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testTouch()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testTouch()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testTouch()", "kind": "method", "sourceText": "public void testTouch() throws java.io.IOException {\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"touch.txt\");\r\n    if (file.exists()) {\r\n        file.delete();\r\n    }\r\n    this.assertTrue(\"Bad test: test file still exists\", !file.exists());\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    this.assertTrue(\"FileUtils.touch() created file\", file.exists());\r\n    java.io.FileOutputStream out = new java.io.FileOutputStream(file);\r\n    this.assertEquals(\"Created empty file.\", 0, file.length());\r\n    out.write(0);\r\n    out.close();\r\n    this.assertEquals(\"Wrote one byte to file\", 1, file.length());\r\n    long y2k = new java.util.GregorianCalendar(2000, 0, 1).getTime().getTime();\r\n    boolean res = file.setLastModified(y2k);// 0L fails on Win98\r\n\r\n    this.assertEquals(\"Bad test: set lastModified failed\", true, res);\r\n    this.assertEquals(\"Bad test: set lastModified set incorrect value\", y2k, file.lastModified());\r\n    long now = java.lang.System.currentTimeMillis();\r\n    org.apache.commons.io.FileUtils.touch(file);\r\n    this.assertEquals(\"FileUtils.touch() didn't empty the file.\", 1, file.length());\r\n    this.assertEquals(\"FileUtils.touch() changed lastModified\", false, y2k == file.lastModified());\r\n    this.assertEquals(\"FileUtils.touch() changed lastModified to more than now-3s\", true, file.lastModified() >= (now - 3000));\r\n    this.assertEquals(\"FileUtils.touch() changed lastModified to less than now+3s\", true, file.lastModified() <= (now + 3000));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String TEST_FILE_TYPE = \".tst\";", "visibility": "private", "simpleName": "TEST_FILE_TYPE", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.read()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read()", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream.read()", "kind": "method", "sourceText": "/**\r\n * Read byte from stream associated with current thread.\r\n *\r\n * @return the byte read from stream\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\npublic int read() throws java.io.IOException {\r\n    java.io.InputStream input = this.getStream();\r\n    if (null != input) {\r\n        return input.read();\r\n    } else {\r\n        return -1;\r\n    }\r\n}", "docComment": "Read byte from stream associated with current thread.\r\n\r\n@return the byte read from stream\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getLocalTestDirectory()", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()", "kind": "method", "sourceText": "private java.io.File getLocalTestDirectory() {\r\n    return new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"list-files\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPrefix(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Gets the prefix from a full filename, such as <code>C:/</code>\r\n * or <code>~/</code>.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The prefix includes the first slash in the full filename where applicable.\r\n * <pre>\r\n * Windows:\r\n * a\\b\\c.txt           --> \"\"          --> relative\r\n * \\a\\b\\c.txt          --> \"\\\"         --> current drive absolute\r\n * C:a\\b\\c.txt         --> \"C:\"        --> drive relative\r\n * C:\\a\\b\\c.txt        --> \"C:\\\"       --> absolute\r\n * \\\\server\\a\\b\\c.txt  --> \"\\\\server\\\" --> UNC\r\n *\r\n * Unix:\r\n * a/b/c.txt           --> \"\"          --> relative\r\n * /a/b/c.txt          --> \"/\"         --> absolute\r\n * ~/a/b/c.txt         --> \"~/\"        --> current user\r\n * ~                   --> \"~/\"        --> current user (slash added)\r\n * ~user/a/b/c.txt     --> \"~user/\"    --> named user\r\n * ~user               --> \"~user/\"    --> named user (slash added)\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n * ie. both Unix and Windows prefixes are matched regardless.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the prefix of the file, null if invalid\r\n */\r\npublic static java.lang.String getPrefix(java.lang.String filename) {\r\n    if (filename == null) {\r\n        return null;\r\n    }\r\n    int len = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\r\n    if (len < 0) {\r\n        return null;\r\n    }\r\n    if (len > filename.length()) {\r\n        return filename + org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR;// we know this only happens for unix\r\n\r\n    }\r\n    return filename.substring(0, len);\r\n}", "docComment": "Gets the prefix from a full filename, such as <code>C:/</code>\r\nor <code>~/</code>.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe prefix includes the first slash in the full filename where applicable.\r\n<pre>\r\nWindows:\r\na\\b\\c.txt           --> \"\"          --> relative\r\n\\a\\b\\c.txt          --> \"\\\"         --> current drive absolute\r\nC:a\\b\\c.txt         --> \"C:\"        --> drive relative\r\nC:\\a\\b\\c.txt        --> \"C:\\\"       --> absolute\r\n\\\\server\\a\\b\\c.txt  --> \"\\\\server\\\" --> UNC\r\n\r\nUnix:\r\na/b/c.txt           --> \"\"          --> relative\r\n/a/b/c.txt          --> \"/\"         --> absolute\r\n~/a/b/c.txt         --> \"~/\"        --> current user\r\n~                   --> \"~/\"        --> current user (slash added)\r\n~user/a/b/c.txt     --> \"~user/\"    --> named user\r\n~user               --> \"~user/\"    --> named user (slash added)\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\nie. both Unix and Windows prefixes are matched regardless.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the prefix of the file, null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "wildcard", "qualifiedName": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setFileFilters(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void setFileFilters(final java.util.List fileFilters) {\r\n    this.fileFilters = new java.util.ArrayList(fileFilters);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopyToSelf()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()", "kind": "method", "sourceText": "public void testCopyToSelf() throws java.lang.Exception {\r\n    java.io.File destination = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"copy3.txt\");\r\n    // Prepare a test file\r\n    org.apache.commons.io.FileUtils.copyFile(this.testFile1, destination);\r\n    try {\r\n        org.apache.commons.io.FileUtils.copyFile(destination, destination);\r\n        this.fail(\"file copy to self should not be possible\");\r\n    } catch (java.io.IOException ioe) {\r\n        // we want the exception, copy to self should be illegal\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "labels": ["Variable"], "properties": {"sourceText": "private static final boolean WINDOWS = java.io.File.separatorChar == '\\\\';", "visibility": "private", "simpleName": "WINDOWS", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "files", "qualifiedName": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadShort()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()", "kind": "method", "sourceText": "public void testReadShort() throws java.io.IOException {\r\n    this.assertEquals(((short) (0x201)), this.sdis.readShort());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "append", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Checks to see if the filename matches.\r\n *\r\n * @param file\r\n * \t\tthe File directory\r\n * @param name\r\n * \t\tthe filename\r\n * @return true if the filename matches\r\n */\r\npublic boolean accept(java.io.File file, java.lang.String name) {\r\n    for (int i = 0; i < this.names.length; i++) {\r\n        if (name.equals(this.names[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks to see if the filename matches.\r\n\r\n@param file\r\n\t\tthe File directory\r\n@param name\r\n\t\tthe filename\r\n@return true if the filename matches\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "labels": ["Variable"], "properties": {"sourceText": "private byte[] m_data;", "visibility": "private", "simpleName": "m_data", "qualifiedName": "org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.File,java.lang.String,boolean,java.lang.String)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter with a file encoding.\r\n *\r\n * @param file\r\n * \t\tthe file to write to, not null\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @param append\r\n * \t\ttrue if content should be appended, false to overwrite\r\n * @param lockDir\r\n * \t\tthe directory in which the lock file should be held\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.io.File file, java.lang.String encoding, boolean append, java.lang.String lockDir) throws java.io.IOException {\r\n    super();\r\n    // init file to create/append\r\n    file = file.getAbsoluteFile();\r\n    if (file.getParentFile() != null) {\r\n        org.apache.commons.io.FileUtils.forceMkdir(file.getParentFile());\r\n    }\r\n    if (file.isDirectory()) {\r\n        throw new java.io.IOException(\"File specified is a directory\");\r\n    }\r\n    // init lock file\r\n    if (lockDir == null) {\r\n        lockDir = java.lang.System.getProperty(\"java.io.tmpdir\");\r\n    }\r\n    java.io.File lockDirFile = new java.io.File(lockDir);\r\n    org.apache.commons.io.FileUtils.forceMkdir(lockDirFile);\r\n    this.testLockDir(lockDirFile);\r\n    this.lockFile = new java.io.File(lockDirFile, file.getName() + org.apache.commons.io.output.LockableFileWriter.LCK);\r\n    // init wrapped writer\r\n    try {\r\n        this.createLock();\r\n        if (encoding == null) {\r\n            this.out = new java.io.FileWriter(file.getAbsolutePath(), append);\r\n        } else {\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(file.getAbsolutePath(), append);\r\n            this.out = new java.io.OutputStreamWriter(fos, encoding);\r\n        }\r\n    } catch (java.io.IOException ioe) {\r\n        this.lockFile.delete();\r\n        throw ioe;\r\n    }\r\n    this.out = new java.io.FileWriter(file.getAbsolutePath(), append);\r\n}", "docComment": "Constructs a LockableFileWriter with a file encoding.\r\n\r\n@param file\r\n\t\tthe file to write to, not null\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@param append\r\n\t\ttrue if content should be appended, false to overwrite\r\n@param lockDir\r\n\t\tthe directory in which the lock file should be held\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    junit.textui.TestRunner.run(org.apache.commons.io.FilenameUtilsTestCase.suite());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testGetFreeSpaceUnix_String_EmptyResponse()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()", "kind": "method", "sourceText": "public void testGetFreeSpaceUnix_String_EmptyResponse() throws java.lang.Exception {\r\n    java.lang.String lines = \"\";\r\n    final java.io.StringReader reader = new java.io.StringReader(lines);\r\n    org.apache.commons.io.FileSystemUtils fsu = new org.apache.commons.io.FileSystemUtils() {\r\n        10() {\r\n            super();\r\n        }\r\n\r\n        protected java.io.BufferedReader openProcessStream(java.lang.String[] params) {\r\n            return new java.io.BufferedReader(reader);\r\n        }\r\n    };\r\n    try {\r\n        fsu.freeSpaceUnix(\"/home/users/s\");\r\n        this.fail();\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_inputStreamToWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testCopy_inputStreamToWriter() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.copy(in, writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertTrue(\"Not all bytes were read\", in.available() == 0);\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "nameFileFilter(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Returns a filter that returns true if the filename matches the specified text.\r\n *\r\n * @param name\r\n * \t\tthe filename\r\n * @return a name checking filter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String name) {\r\n    return new org.apache.commons.io.filefilter.NameFileFilter(name);\r\n}", "docComment": "Returns a filter that returns true if the filename matches the specified text.\r\n\r\n@param name\r\n\t\tthe filename\r\n@return a name checking filter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "filename2", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils", "labels": ["Structure"], "properties": {"docComment": "General IO stream manipulation utilities.\r\n<p>\r\nThis class provides static utility methods for input/output operations.\r\n<ul>\r\n<li>closeQuietly - these methods close a stream ignoring nulls and exceptions\r\n<li>toXxx/read - these methods read data from a stream\r\n<li>write - these methods write data to a stream\r\n<li>copy - these methods copy all the data from one stream to another\r\n<li>contentEquals - these methods compare the content of two streams\r\n</ul>\r\n<p>\r\nThe byte-to-char methods and char-to-byte methods involve a conversion step.\r\nTwo methods are provided in each case, one that uses the platform default\r\nencoding and the other which allows you to specify an encoding. You are\r\nencouraged to always specify an encoding because relying on the platform\r\ndefault can lead to unexpected results, for example when moving from\r\ndevelopment to production.\r\n<p>\r\nAll the methods in this class that read a stream are buffered internally.\r\nThis means that there is no cause to use a <code>BufferedInputStream</code>\r\nor <code>BufferedReader</code>. The default buffer size of 4K has been shown\r\nto be efficient in tests.\r\n<p>\r\nWherever possible, the methods in this class do <em>not</em> flush or close\r\nthe stream. This is to avoid making non-portable assumptions about the\r\nstreams' origin and further use. Thus the caller is still responsible for\r\nclosing streams after use.\r\n<p>\r\nOrigin of code: Excalibur.\r\n\r\n@author Peter Donald\r\n@author Jeff Turner\r\n@author Matthew Hawthorne\r\n@author Stephen Colebourne\r\n@author Gareth Davis\r\n@author Ian Springer\r\n@version $Id$\r\n", "simpleName": "IOUtils", "qualifiedName": "org.apache.commons.io.IOUtils", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.INIT_PROBLEM", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Operating system state flag for error.\r\n */\r\nprivate static final int INIT_PROBLEM = -1;", "visibility": "private", "simpleName": "INIT_PROBLEM", "qualifiedName": "org.apache.commons.io.FileSystemUtils.INIT_PROBLEM", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).2", "labels": ["Variable"], "properties": {"simpleName": "recursive", "qualifiedName": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "reset()", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()", "kind": "method", "sourceText": "public void reset() {\r\n    this.setInvoked(false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream.close()", "kind": "method", "sourceText": "/**\r\n * Closes stream associated with current thread.\r\n *\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\npublic void close() throws java.io.IOException {\r\n    java.io.InputStream input = this.getStream();\r\n    if (null != input) {\r\n        input.close();\r\n    }\r\n}", "docComment": "Closes stream associated with current thread.\r\n\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.close()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#close()\r\n */\r\npublic void close() throws java.io.IOException {\r\n    this.out.close();\r\n}", "docComment": "\r\n@see java.io.OutputStream#close()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).1", "labels": ["Variable"], "properties": {"simpleName": "date", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new instance of <code>AndFileFilter</code>\r\n * with the specified list of filters.\r\n *\r\n * @param fileFilters\r\n * \t\ta List of IOFileFilter instances, copied, null ignored\r\n * @since Commons IO 1.1\r\n */\r\npublic AndFileFilter(final java.util.List fileFilters) {\r\n    super();\r\n    if (fileFilters == null) {\r\n        this.fileFilters = new java.util.ArrayList();\r\n    } else {\r\n        this.fileFilters = new java.util.ArrayList(fileFilters);\r\n    }\r\n}", "docComment": "Constructs a new instance of <code>AndFileFilter</code>\r\nwith the specified list of filters.\r\n\r\n@param fileFilters\r\n\t\ta List of IOFileFilter instances, copied, null ignored\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testMatchOnSystem()", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()", "kind": "method", "sourceText": "public void testMatchOnSystem() {\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(null, \"Foo\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo\", null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(null, null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo\", \"Foo\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo\", \"Fo*\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo\", \"Fo?\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo Bar and Catflap\", \"Fo*\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"New Bookmarks\", \"N?w ?o?k??r?s\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo\", \"Bar\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo Bar Foo\", \"F*o Bar*\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Adobe Acrobat Installer\", \"Ad*er\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo\", \"*Foo\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"Foo\", \"Foo*\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS, org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(\"FOO\", \"Foo*\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.TestSuite suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.filefilter.FileFilterTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.<clinit>()", "labels": ["Script"], "properties": {"visibility": "default", "simpleName": "<clinit>()", "qualifiedName": "org.apache.commons.io.FilenameUtils.<clinit>()", "kind": "class initializer", "sourceText": "static {\r\n    if (org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR == org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR) {\r\n        org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR = org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR;\r\n    } else {\r\n        org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR = org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.File)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter.\r\n * If the file exists, it is overwritten.\r\n *\r\n * @param file\r\n * \t\tthe file to write to, not null\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.io.File file) throws java.io.IOException {\r\n    this(file, false, null);\r\n}", "docComment": "Constructs a LockableFileWriter.\r\nIf the file exists, it is overwritten.\r\n\r\n@param file\r\n\t\tthe file to write to, not null\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "tearDown()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()", "kind": "method", "sourceText": "public void tearDown() throws java.lang.Exception {\r\n    org.apache.commons.io.FileUtils.deleteDirectory(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream(int)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(int)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream(int)", "kind": "constructor", "sourceText": "/**\r\n * Creates a new byte array output stream, with a buffer capacity of\r\n * the specified size, in bytes.\r\n *\r\n * @param size\r\n * \t\tthe initial size.\r\n * @exception IllegalArgumentException\r\n * \t\tif size is negative.\r\n */\r\npublic ByteArrayOutputStream(int size) {\r\n    super();\r\n    if (size < 0) {\r\n        throw new java.lang.IllegalArgumentException(\"Negative initial size: \" + size);\r\n    }\r\n    this.needNewBuffer(size);\r\n}", "docComment": "Creates a new byte array output stream, with a buffer capacity of \r\nthe specified size, in bytes.\r\n\r\n@param size\r\n\t\tthe initial size.\r\n@exception IllegalArgumentException\r\n\t\tif size is negative.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_Encoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWriteLines_OutputStream_Encoding() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\u8364\", new java.lang.StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.writeLines(list, \"*\", out, \"UTF-8\");\r\n    out.off();\r\n    out.flush();\r\n    java.lang.String expected = \"hello\u8364*world**this is**some text*\";\r\n    java.lang.String actual = baout.toString(\"UTF-8\");\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "start", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream", "labels": ["Structure"], "properties": {"docComment": "A decorating input stream that counts the number of bytes that\r\nhave passed through so far.\r\n\r\n@author Henri Yandell\r\n@author Marcelo Liberato\r\n@version $Id$\r\n", "simpleName": "CountingInputStream", "qualifiedName": "org.apache.commons.io.input.CountingInputStream", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedUnsignedShort(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads a unsigned short (16-bit) from an InputStream. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param input\r\n * \t\tsource InputStream\r\n * @return the value just read\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static int readSwappedUnsignedShort(java.io.InputStream input) throws java.io.IOException {\r\n    int value1 = org.apache.commons.io.EndianUtils.read(input);\r\n    int value2 = org.apache.commons.io.EndianUtils.read(input);\r\n    return ((int) (((value1 & 0xff) << 0) + ((value2 & 0xff) << 8)));\r\n}", "docComment": "Reads a unsigned short (16-bit) from an InputStream. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param input\r\n\t\tsource InputStream\r\n@return the value just read\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "labels": ["Variable"], "properties": {"sourceText": "private boolean yellForFlush;", "visibility": "private", "simpleName": "yellForFlush", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.output.NullOutputStream()", "kind": "constructor", "sourceText": "NullOutputStream() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.m_threadMap", "labels": ["Variable"], "properties": {"sourceText": "private java.util.HashMap m_threadMap = new java.util.HashMap();", "visibility": "private", "simpleName": "m_threadMap", "qualifiedName": "org.apache.commons.io.DemuxTestCase.m_threadMap", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toCharArray(java.io.Reader)", "qualifiedName": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of a <code>Reader</code> as a character array.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedReader</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>Reader</code> to read from\r\n * @return the requested character array\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static char[] toCharArray(java.io.Reader input) throws java.io.IOException {\r\n    java.io.CharArrayWriter sw = new java.io.CharArrayWriter();\r\n    org.apache.commons.io.IOUtils.copy(input, sw);\r\n    return sw.toCharArray();\r\n}", "docComment": "Get the contents of a <code>Reader</code> as a character array.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedReader</code>.\r\n\r\n@param input\r\n\t\tthe <code>Reader</code> to read from\r\n@return the requested character array\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileSystemUtilsTestCase(java.lang.String name) throws java.io.IOException {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.setUp()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.setUp()", "kind": "method", "sourceText": "protected void setUp() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.flush()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "flush()", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.flush()", "kind": "method", "sourceText": "/**\r\n * Flushes both streams.\r\n *\r\n * @see java.io.OutputStream#flush()\r\n */\r\npublic void flush() throws java.io.IOException {\r\n    super.flush();\r\n    this.branch.flush();\r\n}", "docComment": "Flushes both streams.\r\n\r\n@see java.io.OutputStream#flush()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "convertFileCollectionToFileArray(java.util.Collection)", "qualifiedName": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection)", "kind": "static method", "sourceText": "/**\r\n * Converts a Collection containing java.io.File instanced into array\r\n * representation. This is to account for the difference between\r\n * File.listFiles() and FileUtils.listFiles().\r\n *\r\n * @param files\r\n * \t\ta Collection containing java.io.File instances\r\n * @return an array of java.io.File\r\n */\r\npublic static java.io.File[] convertFileCollectionToFileArray(java.util.Collection files) {\r\n    return ((java.io.File[]) (files.toArray(new java.io.File[files.size()])));\r\n}", "docComment": "Converts a Collection containing java.io.File instanced into array\r\nrepresentation. This is to account for the difference between\r\nFile.listFiles() and FileUtils.listFiles().\r\n\r\n@param files\r\n\t\ta Collection containing java.io.File instances\r\n@return an array of java.io.File\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadBoolean()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()", "kind": "method", "sourceText": "public void testReadBoolean() throws java.io.IOException {\r\n    this.assertEquals(false, this.sdis.readBoolean());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "st", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Singleton instance of true filter\r\n */\r\npublic static final org.apache.commons.io.filefilter.IOFileFilter INSTANCE = new org.apache.commons.io.filefilter.TrueFileFilter();", "visibility": "public", "simpleName": "INSTANCE", "qualifiedName": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.flush()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "flush()", "qualifiedName": "org.apache.commons.io.output.ThresholdingOutputStream.flush()", "kind": "method", "sourceText": "/**\r\n * Flushes this output stream and forces any buffered output bytes to be\r\n * written out.\r\n *\r\n * @exception IOException\r\n * \t\tif an error occurs.\r\n */\r\npublic void flush() throws java.io.IOException {\r\n    this.getStream().flush();\r\n}", "docComment": "Flushes this output stream and forces any buffered output bytes to be\r\nwritten out.\r\n\r\n@exception IOException\r\n\t\tif an error occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public FileCleanerTestCase(java.lang.String name) throws java.io.IOException {\r\n    super(name);\r\n    this.testFile = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"file-test.txt\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteSwappedLong()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()", "kind": "method", "sourceText": "public void testWriteSwappedLong() throws java.io.IOException {\r\n    byte[] bytes = new byte[8];\r\n    org.apache.commons.io.EndianUtils.writeSwappedLong(bytes, 0, 0x102030405060708L);\r\n    this.assertEquals(0x8, bytes[0]);\r\n    this.assertEquals(0x7, bytes[1]);\r\n    this.assertEquals(0x6, bytes[2]);\r\n    this.assertEquals(0x5, bytes[3]);\r\n    this.assertEquals(0x4, bytes[4]);\r\n    this.assertEquals(0x3, bytes[5]);\r\n    this.assertEquals(0x2, bytes[6]);\r\n    this.assertEquals(0x1, bytes[7]);\r\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(8);\r\n    org.apache.commons.io.EndianUtils.writeSwappedLong(baos, 0x102030405060708L);\r\n    bytes = baos.toByteArray();\r\n    this.assertEquals(0x8, bytes[0]);\r\n    this.assertEquals(0x7, bytes[1]);\r\n    this.assertEquals(0x6, bytes[2]);\r\n    this.assertEquals(0x5, bytes[3]);\r\n    this.assertEquals(0x4, bytes[4]);\r\n    this.assertEquals(0x3, bytes[5]);\r\n    this.assertEquals(0x2, bytes[6]);\r\n    this.assertEquals(0x1, bytes[7]);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],int,int)", "qualifiedName": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[], int, int)\r\n */\r\npublic void write(byte[] b, int off, int len) {\r\n    // to /dev/null\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testNot()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "kind": "method", "sourceText": "public void testNot() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());\r\n    this.assertFiltering(filter, new java.io.File(\"foo.test\"), false);\r\n    this.assertFiltering(filter, new java.io.File(\"foo\"), false);\r\n    this.assertFiltering(filter, null, false);\r\n    try {\r\n        new org.apache.commons.io.filefilter.NotFileFilter(null);\r\n        this.fail();\r\n    } catch (java.lang.IllegalArgumentException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles3()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testToFiles3()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testToFiles3()", "kind": "method", "sourceText": "public void testToFiles3() throws java.lang.Exception {\r\n    java.net.URL[] urls = null;\r\n    java.io.File[] files = org.apache.commons.io.FileUtils.toFiles(urls);\r\n    this.assertEquals(0, files.length);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "wantedResult", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToOutputStream_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "kind": "method", "sourceText": "public void testWrite_charArrayToOutputStream_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(((char[]) (null)), out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToOutputStream_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()", "kind": "method", "sourceText": "public void testWrite_charArrayToOutputStream_nullStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(str.toCharArray(), ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read(byte[],int,int)", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#read(byte[], int, int)\r\n */\r\npublic int read(byte[] bts, int st, int end) throws java.io.IOException {\r\n    return this.in.read(bts, st, end);\r\n}", "docComment": "\r\n@see java.io.InputStream#read(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],int,int)", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(byte[], int, int)\r\n */\r\npublic synchronized void write(byte[] b, int off, int len) throws java.io.IOException {\r\n    super.write(b, off, len);\r\n    this.branch.write(b, off, len);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(byte[], int, int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.setUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setUp()", "qualifiedName": "org.apache.commons.io.CopyUtilsTest.setUp()", "kind": "method", "sourceText": "// ----------------------------------------------------------------\r\n// Setup\r\n// ----------------------------------------------------------------\r\npublic void setUp() throws java.lang.Exception {\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.util.List)", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new Prefix file filter for a list of prefixes.\r\n *\r\n * @param prefixes\r\n * \t\tthe prefixes to allow, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif the prefix list is null\r\n * @throws ClassCastException\r\n * \t\tif the list does not contain Strings\r\n */\r\npublic PrefixFileFilter(java.util.List prefixes) {\r\n    super();\r\n    if (prefixes == null) {\r\n        throw new java.lang.IllegalArgumentException(\"The list of prefixes must not be null\");\r\n    }\r\n    this.prefixes = ((java.lang.String[]) (prefixes.toArray(new java.lang.String[prefixes.size()])));\r\n}", "docComment": "Constructs a new Prefix file filter for a list of prefixes.\r\n\r\n@param prefixes\r\n\t\tthe prefixes to allow, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif the prefix list is null\r\n@throws ClassCastException\r\n\t\tif the list does not contain Strings\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).1", "labels": ["Variable"], "properties": {"simpleName": "ref", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.available()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "available()", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.available()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#available()\r\n */\r\npublic int available() throws java.io.IOException {\r\n    return this.in.available();\r\n}", "docComment": "\r\n@see java.io.InputStream#available()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeByteArrayToFile(java.io.File,byte[])", "qualifiedName": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "kind": "static method", "sourceText": "/**\r\n * <p>\r\n * Writes a byte array to a file creating the file if it does not exist.\r\n * </p>\r\n *\r\n * @param file\r\n * \t\tthe file to write to\r\n * @param data\r\n * \t\tthe content to write to the file\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @since Commons IO 1.1\r\n */\r\npublic static void writeByteArrayToFile(java.io.File file, byte[] data) throws java.io.IOException {\r\n    java.io.OutputStream out = new java.io.FileOutputStream(file);\r\n    try {\r\n        out.write(data);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(out);\r\n    }\r\n}", "docComment": "<p>\r\nWrites a byte array to a file creating the file if it does not exist.\r\n</p>\r\n\r\n@param file\r\n\t\tthe file to write to\r\n@param data\r\n\t\tthe content to write to the file\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testMakeCVSAware()", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "kind": "method", "sourceText": "public void testMakeCVSAware() throws java.lang.Exception {\r\n    org.apache.commons.io.filefilter.IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);\r\n    org.apache.commons.io.filefilter.IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(\"test-file1.txt\"));\r\n    java.io.File file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"CVS\");\r\n    file.mkdirs();\r\n    this.assertFiltering(filter1, file, false);\r\n    this.assertFiltering(filter2, file, false);\r\n    org.apache.commons.io.FileUtils.deleteDirectory(file);\r\n    file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"test-file1.txt\");\r\n    this.createFile(file, 0);\r\n    this.assertFiltering(filter1, file, true);\r\n    this.assertFiltering(filter2, file, true);\r\n    file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"test-file2.log\");\r\n    this.createFile(file, 0);\r\n    this.assertFiltering(filter1, file, true);\r\n    this.assertFiltering(filter2, file, false);\r\n    file = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), \"CVS\");\r\n    this.createFile(file, 0);\r\n    this.assertFiltering(filter1, file, true);\r\n    this.assertFiltering(filter2, file, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testSkipping()", "qualifiedName": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "kind": "method", "sourceText": "public void testSkipping() throws java.io.IOException {\r\n    java.lang.String text = \"Hello World!\";\r\n    byte[] bytes = text.getBytes();\r\n    java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(bytes);\r\n    org.apache.commons.io.input.CountingInputStream cis = new org.apache.commons.io.input.CountingInputStream(bais);\r\n    this.assertEquals(6, cis.skip(6));\r\n    this.assertEquals(6, cis.getCount());\r\n    final byte[] result = new byte[6];\r\n    cis.read(result);\r\n    this.assertEquals(\"World!\", new java.lang.String(result));\r\n    this.assertEquals(12, cis.getCount());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_Encoding_nullEncoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "kind": "method", "sourceText": "public void testWriteLines_OutputStream_Encoding_nullEncoding() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", new java.lang.StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.writeLines(list, \"*\", out, null);\r\n    out.off();\r\n    out.flush();\r\n    java.lang.String expected = \"hello*world**this is**some text*\";\r\n    java.lang.String actual = baout.toString();\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).0", "labels": ["Variable"], "properties": {"simpleName": "testNumber", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).1", "labels": ["Variable"], "properties": {"simpleName": "os", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).1", "labels": ["Variable"], "properties": {"simpleName": "timeMillis", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.flush()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "flush()", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.flush()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#flush()\r\n */\r\npublic void flush() throws java.io.IOException {\r\n    this.out.flush();\r\n}", "docComment": "\r\n@see java.io.OutputStream#flush()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "str", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testEqualsOnSystem()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()", "kind": "method", "sourceText": "public void testEqualsOnSystem() {\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsOnSystem(null, null));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsOnSystem(null, \"\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsOnSystem(\"\", null));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsOnSystem(\"\", \"\"));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.equalsOnSystem(\"file.txt\", \"file.txt\"));\r\n    this.assertEquals(org.apache.commons.io.FilenameUtilsTestCase.WINDOWS, org.apache.commons.io.FilenameUtils.equalsOnSystem(\"file.txt\", \"FILE.TXT\"));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.equalsOnSystem(\"a\\\\b\\\\file.txt\", \"a/b/file.txt\"));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadSwappedLong()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()", "kind": "method", "sourceText": "public void testReadSwappedLong() throws java.io.IOException {\r\n    byte[] bytes = new byte[]{ 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1 };\r\n    this.assertEquals(0x102030405060708L, org.apache.commons.io.EndianUtils.readSwappedLong(bytes, 0));\r\n    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(bytes);\r\n    this.assertEquals(0x102030405060708L, org.apache.commons.io.EndianUtils.readSwappedLong(input));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "kind": "method", "sourceText": "public boolean assertFilenameFiltering(final int testNumber, final org.apache.commons.io.filefilter.IOFileFilter filter, final java.io.File file, final boolean expected) throws java.lang.Exception {\r\n    // Assumes file has parent and is not passed as null\r\n    this.assertTrue(((((((\"test \" + testNumber) + \" Filter(File, String) \") + filter.getClass().getName()) + \" not \") + expected) + \" for \") + file, filter.accept(file.getParentFile(), file.getName()) == expected);\r\n    return true;// return is irrelevant\r\n\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.skip(long)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skip(long)", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.skip(long)", "kind": "method", "sourceText": "/**\r\n * Increases the count by the number of skipped bytes.\r\n *\r\n * @see java.io.InputStream#skip(long)\r\n */\r\npublic long skip(final long length) throws java.io.IOException {\r\n    final long skip = super.skip(length);\r\n    this.count += skip;\r\n    return skip;\r\n}", "docComment": "Increases the count by the number of skipped bytes.\r\n\r\n@see java.io.InputStream#skip(long)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "equals(java.lang.String,java.lang.String,boolean,boolean)", "qualifiedName": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "kind": "static method", "sourceText": "/**\r\n * Checks whether two filenames are equal after both have been normalized\r\n * and optionally using the case rules of the system.\r\n * <p>\r\n * Both filenames are first passed to {@link #normalize(String)}.\r\n *\r\n * @param filename1\r\n * \t\tthe first filename to query, may be null\r\n * @param filename2\r\n * \t\tthe second filename to query, may be null\r\n * @param system\r\n * \t\twhether to use the system (windows or unix)\r\n * @param normalized\r\n * \t\twhether to normalize the filenames\r\n * @return true if the filenames are equal, null equals null\r\n */\r\nprivate static boolean equals(java.lang.String filename1, java.lang.String filename2, boolean system, boolean normalized) {\r\n    if (filename1 == filename2) {\r\n        return true;\r\n    }\r\n    if ((filename1 == null) || (filename2 == null)) {\r\n        return false;\r\n    }\r\n    if (normalized) {\r\n        filename1 = org.apache.commons.io.FilenameUtils.normalize(filename1);\r\n        filename2 = org.apache.commons.io.FilenameUtils.normalize(filename2);\r\n    }\r\n    if (system && (org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR == org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR)) {\r\n        return filename1.equalsIgnoreCase(filename2);\r\n    } else {\r\n        return filename1.equals(filename2);\r\n    }\r\n}", "docComment": "Checks whether two filenames are equal after both have been normalized\r\nand optionally using the case rules of the system.\r\n<p>\r\nBoth filenames are first passed to {@link #normalize(String)}.\r\n\r\n@param filename1\r\n\t\tthe first filename to query, may be null\r\n@param filename2\r\n\t\tthe second filename to query, may be null\r\n@param system\r\n\t\twhether to use the system (windows or unix)\r\n@param normalized\r\n\t\twhether to normalize the filenames\r\n@return true if the filenames are equal, null equals null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).2", "labels": ["Variable"], "properties": {"simpleName": "stream", "qualifiedName": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.touch(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.touch(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter1", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "equalsOnSystem(java.lang.String,java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Checks whether two filenames are equal using the case rules of the system.\r\n * <p>\r\n * No processing is performed on the filenames other than comparison.\r\n * The check is case-sensitive on Unix and case-insensitive on Windows.\r\n *\r\n * @param filename1\r\n * \t\tthe first filename to query, may be null\r\n * @param filename2\r\n * \t\tthe second filename to query, may be null\r\n * @return true if the filenames are equal, null equals null\r\n */\r\npublic static boolean equalsOnSystem(java.lang.String filename1, java.lang.String filename2) {\r\n    return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, false);\r\n}", "docComment": "Checks whether two filenames are equal using the case rules of the system.\r\n<p>\r\nNo processing is performed on the filenames other than comparison.\r\nThe check is case-sensitive on Unix and case-insensitive on Windows.\r\n\r\n@param filename1\r\n\t\tthe first filename to query, may be null\r\n@param filename2\r\n\t\tthe second filename to query, may be null\r\n@return true if the filenames are equal, null equals null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new ProxyOutputStream.\r\n *\r\n * @param proxy\r\n * \t\tthe OutputStream to delegate to\r\n */\r\npublic ProxyOutputStream(java.io.OutputStream proxy) {\r\n    super(proxy);\r\n    // the proxy is stored in a protected superclass variable named 'out'\r\n}", "docComment": "Constructs a new ProxyOutputStream.\r\n\r\n@param proxy\r\n\t\tthe OutputStream to delegate to\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "labels": ["Structure"], "properties": {"docComment": "Unit tests for the <code>DeferredFileOutputStream</code> class.\r\n\r\n@author <a href=\"mailto:martinc@apache.org\">Martin Cooper</a>\r\n@version $Id$\r\n", "simpleName": "DeferredFileOutputStreamTest", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.close()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "close()", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.close()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#close()\r\n */\r\npublic void close() throws java.io.IOException {\r\n    this.in.close();\r\n}", "docComment": "\r\n@see java.io.InputStream#close()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_byteArrayToWriter()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_byteArrayToWriter() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    java.io.Writer writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\");\r\n    org.apache.commons.io.IOUtils.write(this.inData, writer);\r\n    out.off();\r\n    writer.flush();\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "filter1", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream()", "kind": "constructor", "sourceText": "DemuxOutputStream() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.TestSuite suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.filefilter.AndFileFilterTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "fullFilenameToAdd", "qualifiedName": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "encoding", "qualifiedName": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFullPath(java.lang.String)", "qualifiedName": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Gets the full path from a full filename, which is the prefix + path.\r\n * <p>\r\n * This method will handle a file in either Unix or Windows format.\r\n * The method is entirely text based, and returns the text before and\r\n * including the last forward or backslash.\r\n * <pre>\r\n * C:\\a\\b\\c.txt --> C:\\a\\b\\\r\n * ~/a/b/c.txt  --> ~/a/b/\r\n * a.txt        --> \"\"\r\n * a/b/c        --> a/b/\r\n * a/b/c/       --> a/b/c/\r\n * C:           --> C:\r\n * C:\\          --> C:\\\r\n * ~            --> ~/\r\n * ~/           --> ~/\r\n * ~user        --> ~user/\r\n * ~user/       --> ~user/\r\n * </pre>\r\n * <p>\r\n * The output will be the same irrespective of the machine that the code is running on.\r\n *\r\n * @param filename\r\n * \t\tthe filename to query, null returns null\r\n * @return the path of the file, an empty string if none exists, null if invalid\r\n */\r\npublic static java.lang.String getFullPath(java.lang.String filename) {\r\n    return org.apache.commons.io.FilenameUtils.doGetFullPath(filename, true);\r\n}", "docComment": "Gets the full path from a full filename, which is the prefix + path.\r\n<p>\r\nThis method will handle a file in either Unix or Windows format.\r\nThe method is entirely text based, and returns the text before and\r\nincluding the last forward or backslash.\r\n<pre>\r\nC:\\a\\b\\c.txt --> C:\\a\\b\\\r\n~/a/b/c.txt  --> ~/a/b/\r\na.txt        --> \"\"\r\na/b/c        --> a/b/\r\na/b/c/       --> a/b/c/\r\nC:           --> C:\r\nC:\\          --> C:\\\r\n~            --> ~/\r\n~/           --> ~/\r\n~user        --> ~user/\r\n~user/       --> ~user/\r\n</pre>\r\n<p>\r\nThe output will be the same irrespective of the machine that the code is running on.\r\n\r\n@param filename\r\n\t\tthe filename to query, null returns null\r\n@return the path of the file, an empty string if none exists, null if invalid\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.createLock()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createLock()", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.createLock()", "kind": "method", "sourceText": "/**\r\n * Creates the lock file.\r\n *\r\n * @throws IOException\r\n * \t\tif we cannot create the file\r\n */\r\nprivate void createLock() throws java.io.IOException {\r\n    synchronized(org.apache.commons.io.output.LockableFileWriter.class) {\r\n        if (!this.lockFile.createNewFile()) {\r\n            throw new java.io.IOException((\"Can't write file, lock \" + this.lockFile.getAbsolutePath()) + \" exists\");\r\n        }\r\n        this.lockFile.deleteOnExit();\r\n    }\r\n}", "docComment": "Creates the lock file.\r\n\r\n@throws IOException\r\n\t\tif we cannot create the file\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.AllIOTestSuite.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    junit.framework.TestSuite suite = new junit.framework.TestSuite(\"IO\");\r\n    suite.addTest(org.apache.commons.io.PackageTestSuite.suite());\r\n    suite.addTest(org.apache.commons.io.filefilter.PackageTestSuite.suite());\r\n    suite.addTest(org.apache.commons.io.input.PackageTestSuite.suite());\r\n    suite.addTest(org.apache.commons.io.output.PackageTestSuite.suite());\r\n    return suite;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).1", "labels": ["Variable"], "properties": {"simpleName": "ref", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "reference", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "fileFilters", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.lang.String,java.io.Writer)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "kind": "static method", "sourceText": "// ----------------------------------------------------------------\r\n// String -> Writer\r\n// ----------------------------------------------------------------\r\n/**\r\n * Copy chars from a <code>String</code> to a <code>Writer</code>.\r\n *\r\n * @param input\r\n * \t\tthe <code>String</code> to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(java.lang.String input, java.io.Writer output) throws java.io.IOException {\r\n    output.write(input);\r\n}", "docComment": "Copy chars from a <code>String</code> to a <code>Writer</code>.\r\n\r\n@param input\r\n\t\tthe <code>String</code> to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setInvoked(boolean)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "kind": "method", "sourceText": "public void setInvoked(boolean invoked) {\r\n    this.invoked = invoked;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteSwappedShort()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()", "kind": "method", "sourceText": "public void testWriteSwappedShort() throws java.io.IOException {\r\n    byte[] bytes = new byte[2];\r\n    org.apache.commons.io.EndianUtils.writeSwappedShort(bytes, 0, ((short) (0x102)));\r\n    this.assertEquals(0x2, bytes[0]);\r\n    this.assertEquals(0x1, bytes[1]);\r\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(2);\r\n    org.apache.commons.io.EndianUtils.writeSwappedShort(baos, ((short) (0x102)));\r\n    bytes = baos.toByteArray();\r\n    this.assertEquals(0x2, bytes[0]);\r\n    this.assertEquals(0x1, bytes[1]);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "bts", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copy(java.io.InputStream,java.io.Writer,java.lang.String)", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Copy and convert bytes from an <code>InputStream</code> to chars on a\r\n * <code>Writer</code>, using the specified encoding.\r\n *\r\n * @param input\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @param encoding\r\n * \t\tThe name of a supported character encoding. See the\r\n * \t\t<a href=\"http://www.iana.org/assignments/character-sets\">IANA\r\n * \t\tCharset Registry</a> for a list of valid encoding types.\r\n * @throws IOException\r\n * \t\tIn case of an I/O problem\r\n */\r\npublic static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\r\n    java.io.InputStreamReader in = new java.io.InputStreamReader(input, encoding);\r\n    org.apache.commons.io.CopyUtils.copy(in, output);\r\n}", "docComment": "Copy and convert bytes from an <code>InputStream</code> to chars on a\r\n<code>Writer</code>, using the specified encoding.\r\n\r\n@param input\r\n\t\tthe <code>InputStream</code> to read from\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@param encoding\r\n\t\tThe name of a supported character encoding. See the\r\n\t\t<a href=\"http://www.iana.org/assignments/character-sets\">IANA\r\n\t\tCharset Registry</a> for a list of valid encoding types.\r\n@throws IOException\r\n\t\tIn case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).0", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.SEP", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String SEP = \"\" + java.io.File.separatorChar;", "visibility": "private", "simpleName": "SEP", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.SEP", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "prefixFileFilter(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Returns a filter that returns true if the filename starts with the specified text.\r\n *\r\n * @param prefix\r\n * \t\tthe filename prefix\r\n * @return a prefix checking filter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix) {\r\n    return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix);\r\n}", "docComment": "Returns a filter that returns true if the filename starts with the specified text.\r\n\r\n@param prefix\r\n\t\tthe filename prefix\r\n@return a prefix checking filter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).2", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new file filter that ORs the result of two other filters.\r\n *\r\n * @param filter1\r\n * \t\tthe first filter, must not be null\r\n * @param filter2\r\n * \t\tthe second filter, must not be null\r\n * @throws IllegalArgumentException\r\n * \t\tif either filter is null\r\n */\r\npublic OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\r\n    super();\r\n    if ((filter1 == null) || (filter2 == null)) {\r\n        throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\r\n    }\r\n    this.fileFilters = new java.util.ArrayList();\r\n    this.addFileFilter(filter1);\r\n    this.addFileFilter(filter2);\r\n}", "docComment": "Constructs a new file filter that ORs the result of two other filters.\r\n\r\n@param filter1\r\n\t\tthe first filter, must not be null\r\n@param filter2\r\n\t\tthe second filter, must not be null\r\n@throws IllegalArgumentException\r\n\t\tif either filter is null\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "off()", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "kind": "method", "sourceText": "public void off() {\r\n    this.yellForFlush = false;\r\n    this.yellForClose = false;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "freeSpace(java.lang.String)", "qualifiedName": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Returns the free space on a drive or volume in a cross-platform manner.\r\n * Note that some OS's are NOT currently supported, including OS/390.\r\n * <pre>\r\n * FileSystemUtils.freeSpace(\"C:\");  // Windows\r\n * FileSystemUtils.freeSpace(\"/volume\");  // *nix\r\n * </pre>\r\n * The free space is calculated via the command line.\r\n * It uses 'dir /-c' on Windows and 'df' on *nix.\r\n *\r\n * @param path\r\n * \t\tthe path to get free space for, not null, not empty on Unix\r\n * @return the amount of free drive space on the drive or volume\r\n * @throws IllegalArgumentException\r\n * \t\tif the path is invalid\r\n * @throws IllegalStateException\r\n * \t\tif an error occurred in initialisation\r\n * @throws IOException\r\n * \t\tif an error occurs when finding the free space\r\n */\r\npublic static long freeSpace(java.lang.String path) throws java.io.IOException {\r\n    return org.apache.commons.io.FileSystemUtils.INSTANCE.freeSpaceOS(path, org.apache.commons.io.FileSystemUtils.OS);\r\n}", "docComment": "Returns the free space on a drive or volume in a cross-platform manner.\r\nNote that some OS's are NOT currently supported, including OS/390.\r\n<pre>\r\nFileSystemUtils.freeSpace(\"C:\");  // Windows\r\nFileSystemUtils.freeSpace(\"/volume\");  // *nix\r\n</pre>\r\nThe free space is calculated via the command line.\r\nIt uses 'dir /-c' on Windows and 'df' on *nix.\r\n\r\n@param path\r\n\t\tthe path to get free space for, not null, not empty on Unix\r\n@return the amount of free drive space on the drive or volume\r\n@throws IllegalArgumentException\r\n\t\tif the path is invalid\r\n@throws IllegalStateException\r\n\t\tif an error occurred in initialisation\r\n@throws IOException\r\n\t\tif an error occurs when finding the free space\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The list of file filters.\r\n */\r\nprivate java.util.List fileFilters;", "visibility": "private", "simpleName": "fileFilters", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testString", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The test data as a string (which is the simplest form).\r\n */\r\nprivate java.lang.String testString = \"0123456789\";", "visibility": "private", "simpleName": "testString", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testString", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_4arg_nullSeparator()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "kind": "method", "sourceText": "public void testWriteLines_4arg_nullSeparator() throws java.lang.Exception {\r\n    java.lang.Object[] data = new java.lang.Object[]{ \"hello\", new java.lang.StringBuffer(\"world\"), \"\", \"this is\", null, \"some text\" };\r\n    java.util.List list = java.util.Arrays.asList(data);\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    org.apache.commons.io.FileUtils.writeLines(file, \"US-ASCII\", list, null);\r\n    java.lang.String expected = ((((((((\"hello\" + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"world\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"this is\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + org.apache.commons.io.IOUtils.LINE_SEPARATOR) + \"some text\") + org.apache.commons.io.IOUtils.LINE_SEPARATOR;\r\n    java.lang.String actual = org.apache.commons.io.FileUtils.readFileToString(file, \"US-ASCII\");\r\n    this.assertEquals(expected, actual);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "chr", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedDouble(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads a \"double\" value from an InputStream. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param input\r\n * \t\tsource InputStream\r\n * @return the value just read\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static double readSwappedDouble(java.io.InputStream input) throws java.io.IOException {\r\n    return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(input));\r\n}", "docComment": "Reads a \"double\" value from an InputStream. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param input\r\n\t\tsource InputStream\r\n@return the value just read\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "OrFileFilterTestCase", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toAscii(int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "toAscii(int)", "qualifiedName": "org.apache.commons.io.HexDumpTest.toAscii(int)", "kind": "method", "sourceText": "private char toAscii(int c) {\r\n    char rval = '.';\r\n    if ((c >= 32) && (c <= 126)) {\r\n        rval = ((char) (c));\r\n    }\r\n    return rval;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "generateTestData(long)", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "kind": "method", "sourceText": "protected byte[] generateTestData(long size) {\r\n    try {\r\n        org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n        this.generateTestData(baout, size);\r\n        return baout.toByteArray();\r\n    } catch (java.io.IOException ioe) {\r\n        throw new java.lang.RuntimeException(\"This should never happen: \" + ioe.getMessage());\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.lockDir", "labels": ["Variable"], "properties": {"sourceText": "private java.io.File lockDir;", "visibility": "private", "simpleName": "lockDir", "qualifiedName": "org.apache.commons.io.output.LockableFileWriterTest.lockDir", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "org.apache.commons.io.FileSystemUtils()", "kind": "constructor", "sourceText": "/**\r\n * Instances should NOT be constructed in standard programming.\r\n */\r\npublic FileSystemUtils() {\r\n    super();\r\n}", "docComment": "Instances should NOT be constructed in standard programming.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "preserveFileDate", "qualifiedName": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setInvoked(boolean)", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "kind": "method", "sourceText": "public void setInvoked(boolean invoked) {\r\n    this.invoked = invoked;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[]).0", "labels": ["Variable"], "properties": {"simpleName": "chr", "qualifiedName": "org.apache.commons.io.input.ProxyReader.read(char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readUTF()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readUTF()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStream.readUTF()", "kind": "method", "sourceText": "/**\r\n * Not currently supported.\r\n *\r\n * @see java.io.DataInput#readUTF()\r\n */\r\npublic java.lang.String readUTF() throws java.io.IOException, java.io.EOFException {\r\n    throw new java.lang.UnsupportedOperationException(\"Operation not supported: readUTF()\");\r\n}", "docComment": "Not currently supported.\r\n\r\n@see java.io.DataInput#readUTF()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).2", "labels": ["Variable"], "properties": {"simpleName": "demux", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testFileCleaner()", "qualifiedName": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()", "kind": "method", "sourceText": "/**\r\n * Test the FileCleaner implementation.\r\n */\r\npublic void testFileCleaner() throws java.lang.Exception {\r\n    java.lang.String path = this.testFile.getPath();\r\n    this.assertFalse(\"File does not exist\", this.testFile.exists());\r\n    java.io.RandomAccessFile r = new java.io.RandomAccessFile(this.testFile, \"rw\");\r\n    this.assertTrue(\"File exists\", this.testFile.exists());\r\n    this.assertTrue(\"No files tracked\", org.apache.commons.io.FileCleaner.getTrackCount() == 0);\r\n    org.apache.commons.io.FileCleaner.track(path, r);\r\n    this.assertTrue(\"One file tracked\", org.apache.commons.io.FileCleaner.getTrackCount() == 1);\r\n    r.close();\r\n    this.testFile = null;\r\n    r = null;\r\n    while (org.apache.commons.io.FileCleaner.getTrackCount() != 0) {\r\n        java.lang.System.gc();\r\n    } \r\n    this.assertTrue(\"No files tracked\", org.apache.commons.io.FileCleaner.getTrackCount() == 0);\r\n    this.assertFalse(\"File does not exist\", new java.io.File(path).exists());\r\n}", "docComment": "Test the FileCleaner implementation.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "destDir", "qualifiedName": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).1", "labels": ["Variable"], "properties": {"simpleName": "array", "qualifiedName": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "kind": "static method", "sourceText": "/**\r\n * <p>Finds files within a given directory (and optionally its\r\n * subdirectories). All files found are filtered by an IOFileFilter.</p>\r\n *\r\n * @param files\r\n * \t\tthe collection of files found.\r\n * @param directory\r\n * \t\tthe directory to search in.\r\n * @param filter\r\n * \t\tthe filter to apply to files and directories.\r\n */\r\nprivate static void innerListFiles(java.util.Collection files, java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter filter) {\r\n    java.io.File[] found = directory.listFiles(((java.io.FileFilter) (filter)));\r\n    if (found != null) {\r\n        for (int i = 0; i < found.length; i++) {\r\n            if (found[i].isDirectory()) {\r\n                org.apache.commons.io.FileUtils.innerListFiles(files, found[i], filter);\r\n            } else {\r\n                files.add(found[i]);\r\n            }\r\n        }\r\n    }\r\n}", "docComment": "<p>Finds files within a given directory (and optionally its\r\nsubdirectories). All files found are filtered by an IOFileFilter.</p>\r\n\r\n@param files\r\n\t\tthe collection of files found.\r\n@param directory\r\n\t\tthe directory to search in.\r\n@param filter\r\n\t\tthe filter to apply to files and directories.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "run()", "qualifiedName": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "kind": "method", "sourceText": "public void run() {\r\n    this.m_demux.bindStream(this.m_input);\r\n    try {\r\n        int ch = this.m_demux.read();\r\n        while ((-1) != ch) {\r\n            // System.out.println( \"Reading: \" + (char)ch );\r\n            this.m_buffer.append(((char) (ch)));\r\n            int sleepTime = java.lang.Math.abs(org.apache.commons.io.DemuxTestCase.c_random.nextInt() % 10);\r\n            java.lang.Thread.sleep(sleepTime);\r\n            ch = this.m_demux.read();\r\n        } \r\n    } catch (java.lang.Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).2", "labels": ["Variable"], "properties": {"simpleName": "end", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.ProxyOutputStream.write(int)", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.OutputStream#write(int)\r\n */\r\npublic void write(int idx) throws java.io.IOException {\r\n    this.out.write(idx);\r\n}", "docComment": "\r\n@see java.io.OutputStream#write(int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA2", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String DATA2 = \"Data for thread2\";", "visibility": "private", "simpleName": "DATA2", "qualifiedName": "org.apache.commons.io.DemuxTestCase.DATA2", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "testNumber", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Standard JUnit test case constructor.\r\n *\r\n * @param name\r\n * \t\tThe name of the test case.\r\n */\r\npublic DeferredFileOutputStreamTest(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "Standard JUnit test case constructor.\r\n\r\n@param name\r\n\t\tThe name of the test case.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readLines(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * <p>\r\n * Reads the contents of a file line by line to a List of Strings.\r\n * </p>\r\n * <p>\r\n * There is no readLines method without encoding parameter because\r\n * the default encoding can differ between platforms and therefore results\r\n * in inconsistent results.\r\n * </p>\r\n *\r\n * @param file\r\n * \t\tthe file to read\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @return the list of Strings representing each line in the file\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @throws UnsupportedEncodingException\r\n * \t\tif the encoding is not supported by the VM\r\n * @since Commons IO 1.1\r\n */\r\npublic static java.util.List readLines(java.io.File file, java.lang.String encoding) throws java.io.IOException {\r\n    java.io.InputStream in = new java.io.FileInputStream(file);\r\n    try {\r\n        return org.apache.commons.io.IOUtils.readLines(in, encoding);\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n    }\r\n}", "docComment": "<p>\r\nReads the contents of a file line by line to a List of Strings.\r\n</p>\r\n<p>\r\nThere is no readLines method without encoding parameter because\r\nthe default encoding can differ between platforms and therefore results\r\nin inconsistent results.\r\n</p>\r\n\r\n@param file\r\n\t\tthe file to read\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@return the list of Strings representing each line in the file\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@throws UnsupportedEncodingException\r\n\t\tif the encoding is not supported by the VM\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "labels": ["Variable"], "properties": {"sourceText": "private static int testFile2Size;", "visibility": "private", "simpleName": "testFile2Size", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToOutputStream_Encoding_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "kind": "method", "sourceText": "public void testWrite_charArrayToOutputStream_Encoding_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(((char[]) (null)), out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testStringToInputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "kind": "method", "sourceText": "/**\r\n * Test for {@link IOUtils#toInputStream(String)} and {@link IOUtils#toInputStream(String, String)}.\r\n * Note, this test utilizes on {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on\r\n * {@link #testInputStreamToByteArray()} to ensure this method functions correctly.\r\n *\r\n * @throws Exception\r\n * \t\ton error\r\n */\r\npublic void testStringToInputStream() throws java.lang.Exception {\r\n    java.lang.String str = \"Abc123Xyz!\";\r\n    java.io.InputStream inStream = org.apache.commons.io.IOUtils.toInputStream(str);\r\n    byte[] bytes = org.apache.commons.io.IOUtils.toByteArray(inStream);\r\n    this.assertEqualContent(str.getBytes(), bytes);\r\n    inStream = org.apache.commons.io.IOUtils.toInputStream(str, null);\r\n    bytes = org.apache.commons.io.IOUtils.toByteArray(inStream);\r\n    this.assertEqualContent(str.getBytes(), bytes);\r\n    inStream = org.apache.commons.io.IOUtils.toInputStream(str, \"UTF-8\");\r\n    bytes = org.apache.commons.io.IOUtils.toByteArray(inStream);\r\n    this.assertEqualContent(str.getBytes(\"UTF-8\"), bytes);\r\n}", "docComment": "Test for {@link IOUtils#toInputStream(String)} and {@link IOUtils#toInputStream(String, String)}.\r\nNote, this test utilizes on {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on\r\n{@link #testInputStreamToByteArray()} to ensure this method functions correctly.\r\n\r\n@throws Exception\r\n\t\ton error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "output", "qualifiedName": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "filename", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "log(java.lang.Object)", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object)", "kind": "method", "sourceText": "// TODO Remove after debugging\r\nprivate void log(java.lang.Object obj) {\r\n    java.lang.System.out.println((((org.apache.commons.io.FileUtilsTestCase.class + \" \") + this.getName()) + \" \") + obj);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.WINDOWS", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Determine if this is windows.\r\n */\r\nprivate static final boolean WINDOWS = java.io.File.separatorChar == '\\\\';", "visibility": "private", "simpleName": "WINDOWS", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.WINDOWS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "f1", "qualifiedName": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getData()", "qualifiedName": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "kind": "method", "sourceText": "/**\r\n * Returns the data for this output stream as an array of bytes, assuming\r\n * that the data has been retained in memory. If the data was written to\r\n * disk, this method returns <code>null</code>.\r\n *\r\n * @return The data for this output stream, or <code>null</code> if no such\r\ndata is available.\r\n */\r\npublic byte[] getData() {\r\n    if (this.memoryOutputStream != null) {\r\n        return this.memoryOutputStream.toByteArray();\r\n    }\r\n    return null;\r\n}", "docComment": "Returns the data for this output stream as an array of bytes, assuming\r\nthat the data has been retained in memory. If the data was written to\r\ndisk, this method returns <code>null</code>.\r\n\r\n@return The data for this output stream, or <code>null</code> if no such\r\ndata is available.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "labels": ["Structure"], "properties": {"docComment": "Basic unit tests for the alternative ByteArrayOutputStream implementation.\r\n\r\n@author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\r\n", "simpleName": "ByteArrayOutputStreamTestCase", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.trackers", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Collection of <code>Tracker</code> instances in existence.\r\n */\r\n/* Tracker */\r\nprivate static java.util.Collection trackers = new java.util.Vector();", "visibility": "private", "simpleName": "trackers", "qualifiedName": "org.apache.commons.io.FileCleaner.trackers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "file1", "qualifiedName": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.ClassLoader,java.io.InputStream)", "qualifiedName": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a new ClassLoaderObjectInputStream.\r\n *\r\n * @param classLoader\r\n * \t\tthe ClassLoader from which classes should be loaded\r\n * @param inputStream\r\n * \t\tthe InputStream to work on\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n * @throws StreamCorruptedException\r\n * \t\tif the stream is corrupted\r\n */\r\npublic ClassLoaderObjectInputStream(java.lang.ClassLoader classLoader, java.io.InputStream inputStream) throws java.io.IOException, java.io.StreamCorruptedException {\r\n    super(inputStream);\r\n    this.classLoader = classLoader;\r\n}", "docComment": "Constructs a new ClassLoaderObjectInputStream.\r\n\r\n@param classLoader\r\n\t\tthe ClassLoader from which classes should be loaded\r\n@param inputStream\r\n\t\tthe InputStream to work on\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n@throws StreamCorruptedException\r\n\t\tif the stream is corrupted\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "filter", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isInvoked()", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "kind": "method", "sourceText": "public boolean isInvoked() {\r\n    return this.invoked;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "labels": ["Variable"], "properties": {"sourceText": "private static final byte[] DATA;", "visibility": "private", "simpleName": "DATA", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(java.lang.String,java.io.OutputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Writes chars from a <code>String</code> to bytes on an\r\n * <code>OutputStream</code> using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method uses {@link String#getBytes(String)}.\r\n *\r\n * @param data\r\n * \t\tthe <code>String</code> to write, null ignored\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(java.lang.String data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\r\n    if (data != null) {\r\n        if (encoding == null) {\r\n            org.apache.commons.io.IOUtils.write(data, output);\r\n        } else {\r\n            output.write(data.getBytes(encoding));\r\n        }\r\n    }\r\n}", "docComment": "Writes chars from a <code>String</code> to bytes on an\r\n<code>OutputStream</code> using the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method uses {@link String#getBytes(String)}.\r\n\r\n@param data\r\n\t\tthe <code>String</code> to write, null ignored\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.flush()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "flush()", "qualifiedName": "org.apache.commons.io.output.DemuxOutputStream.flush()", "kind": "method", "sourceText": "/**\r\n * Flushes stream associated with current thread.\r\n *\r\n * @throws IOException\r\n * \t\tif an error occurs\r\n */\r\npublic void flush() throws java.io.IOException {\r\n    java.io.OutputStream output = this.getStream();\r\n    if (null != output) {\r\n        output.flush();\r\n    }\r\n}", "docComment": "Flushes stream associated with current thread.\r\n\r\n@throws IOException\r\n\t\tif an error occurs\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "writeSwappedInteger(java.io.OutputStream,int)", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "kind": "static method", "sourceText": "/**\r\n * Writes a \"int\" value to an OutputStream. The value is\r\n * converted to the opposed endian system while writing.\r\n *\r\n * @param output\r\n * \t\ttarget OutputStream\r\n * @param value\r\n * \t\tvalue to write\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\r\n    output.write(((byte) ((value >> 0) & 0xff)));\r\n    output.write(((byte) ((value >> 8) & 0xff)));\r\n    output.write(((byte) ((value >> 16) & 0xff)));\r\n    output.write(((byte) ((value >> 24) & 0xff)));\r\n}", "docComment": "Writes a \"int\" value to an OutputStream. The value is\r\nconverted to the opposed endian system while writing.\r\n\r\n@param output\r\n\t\ttarget OutputStream\r\n@param value\r\n\t\tvalue to write\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "file", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).2", "labels": ["Variable"], "properties": {"simpleName": "queue", "qualifiedName": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],java.io.OutputStream)", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "kind": "static method", "sourceText": "// write byte[]\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Writes bytes from a <code>byte[]</code> to an <code>OutputStream</code>.\r\n *\r\n * @param data\r\n * \t\tthe byte array to write, do not modify during output,\r\n * \t\tnull ignored\r\n * @param output\r\n * \t\tthe <code>OutputStream</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(byte[] data, java.io.OutputStream output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(data);\r\n    }\r\n}", "docComment": "Writes bytes from a <code>byte[]</code> to an <code>OutputStream</code>.\r\n\r\n@param data\r\n\t\tthe byte array to write, do not modify during output,\r\n\t\tnull ignored\r\n@param output\r\n\t\tthe <code>OutputStream</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getConditionalFileFilter()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()", "kind": "method", "sourceText": "protected org.apache.commons.io.filefilter.ConditionalFileFilter getConditionalFileFilter() {\r\n    return new org.apache.commons.io.filefilter.OrFileFilter();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "readSwappedUnsignedInteger(java.io.InputStream)", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "kind": "static method", "sourceText": "/**\r\n * Reads a unsigned integer (32-bit) from an InputStream. The value is\r\n * converted to the opposed endian system while reading.\r\n *\r\n * @param input\r\n * \t\tsource InputStream\r\n * @return the value just read\r\n * @throws IOException\r\n * \t\tin case of an I/O problem\r\n */\r\npublic static long readSwappedUnsignedInteger(java.io.InputStream input) throws java.io.IOException {\r\n    int value1 = org.apache.commons.io.EndianUtils.read(input);\r\n    int value2 = org.apache.commons.io.EndianUtils.read(input);\r\n    int value3 = org.apache.commons.io.EndianUtils.read(input);\r\n    int value4 = org.apache.commons.io.EndianUtils.read(input);\r\n    return ((long) (((((value1 & 0xff) << 0) + ((value2 & 0xff) << 8)) + ((value3 & 0xff) << 16)) + ((value4 & 0xff) << 24)));\r\n}", "docComment": "Reads a unsigned integer (32-bit) from an InputStream. The value is\r\nconverted to the opposed endian system while reading.\r\n\r\n@param input\r\n\t\tsource InputStream\r\n@return the value just read\r\n@throws IOException\r\n\t\tin case of an I/O problem\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[]).0", "labels": ["Variable"], "properties": {"simpleName": "chr", "qualifiedName": "org.apache.commons.io.output.ProxyWriter.write(char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read(byte[])", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.read(byte[])", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#read(byte[])\r\n */\r\npublic int read(byte[] bts) throws java.io.IOException {\r\n    return this.in.read(bts);\r\n}", "docComment": "\r\n@see java.io.InputStream#read(byte[])\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "wildcardMatcher", "qualifiedName": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).1", "labels": ["Variable"], "properties": {"simpleName": "offset", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadLines_InputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testReadLines_InputStream() throws java.lang.Exception {\r\n    java.io.File file = this.newFile(\"lines.txt\");\r\n    java.io.InputStream in = null;\r\n    try {\r\n        java.lang.String[] data = new java.lang.String[]{ \"hello\", \"world\", \"\", \"this is\", \"some text\" };\r\n        this.createLineBasedFile(file, data);\r\n        in = new java.io.FileInputStream(file);\r\n        java.util.List lines = org.apache.commons.io.IOUtils.readLines(in);\r\n        this.assertEquals(java.util.Arrays.asList(data), lines);\r\n        this.assertEquals(-1, in.read());\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(in);\r\n        this.deleteFile(file);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    return new junit.framework.TestSuite(org.apache.commons.io.FilenameUtilsTestCase.class);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteSwappedInteger()", "qualifiedName": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()", "kind": "method", "sourceText": "public void testWriteSwappedInteger() throws java.io.IOException {\r\n    byte[] bytes = new byte[4];\r\n    org.apache.commons.io.EndianUtils.writeSwappedInteger(bytes, 0, 0x1020304);\r\n    this.assertEquals(0x4, bytes[0]);\r\n    this.assertEquals(0x3, bytes[1]);\r\n    this.assertEquals(0x2, bytes[2]);\r\n    this.assertEquals(0x1, bytes[3]);\r\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(4);\r\n    org.apache.commons.io.EndianUtils.writeSwappedInteger(baos, 0x1020304);\r\n    bytes = baos.toByteArray();\r\n    this.assertEquals(0x4, bytes[0]);\r\n    this.assertEquals(0x3, bytes[1]);\r\n    this.assertEquals(0x2, bytes[2]);\r\n    this.assertEquals(0x1, bytes[3]);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.io.File,boolean,java.lang.String)", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Constructs a LockableFileWriter.\r\n *\r\n * @param file\r\n * \t\tthe file to write to, not null\r\n * @param append\r\n * \t\ttrue if content should be appended, false to overwrite\r\n * @param lockDir\r\n * \t\tthe directory in which the lock file should be held\r\n * @throws NullPointerException\r\n * \t\tif the file is null\r\n * @throws IOException\r\n * \t\tin case of an I/O error\r\n */\r\npublic LockableFileWriter(java.io.File file, boolean append, java.lang.String lockDir) throws java.io.IOException {\r\n    this(file, null, append, lockDir);\r\n}", "docComment": "Constructs a LockableFileWriter.\r\n\r\n@param file\r\n\t\tthe file to write to, not null\r\n@param append\r\n\t\ttrue if content should be appended, false to overwrite\r\n@param lockDir\r\n\t\tthe directory in which the lock file should be held\r\n@throws NullPointerException\r\n\t\tif the file is null\r\n@throws IOException\r\n\t\tin case of an I/O error\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "yellForFlush", "qualifiedName": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(char[],java.io.Writer)", "qualifiedName": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "kind": "static method", "sourceText": "// write char[]\r\n// -----------------------------------------------------------------------\r\n/**\r\n * Writes chars from a <code>char[]</code> to a <code>Writer</code>\r\n * using the default character encoding of the platform.\r\n *\r\n * @param data\r\n * \t\tthe char array to write, do not modify during output,\r\n * \t\tnull ignored\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(char[] data, java.io.Writer output) throws java.io.IOException {\r\n    if (data != null) {\r\n        output.write(data);\r\n    }\r\n}", "docComment": "Writes chars from a <code>char[]</code> to a <code>Writer</code>\r\nusing the default character encoding of the platform.\r\n\r\n@param data\r\n\t\tthe char array to write, do not modify during output,\r\n\t\tnull ignored\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).2", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long).0", "labels": ["Variable"], "properties": {"simpleName": "size", "qualifiedName": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.branch", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * the second OutputStream to write to\r\n */\r\nprotected java.io.OutputStream branch;", "visibility": "protected", "simpleName": "branch", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.branch", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).0", "labels": ["Variable"], "properties": {"simpleName": "b", "qualifiedName": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream).0", "labels": ["Variable"], "properties": {"simpleName": "is", "qualifiedName": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(byte[],java.io.Writer,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>\r\n * using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method uses {@link String#String(byte[], String)}.\r\n *\r\n * @param data\r\n * \t\tthe byte array to write, do not modify during output,\r\n * \t\tnull ignored\r\n * @param output\r\n * \t\tthe <code>Writer</code> to write to\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @throws NullPointerException\r\n * \t\tif output is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static void write(byte[] data, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\r\n    if (data != null) {\r\n        if (encoding == null) {\r\n            org.apache.commons.io.IOUtils.write(data, output);\r\n        } else {\r\n            output.write(new java.lang.String(data, encoding));\r\n        }\r\n    }\r\n}", "docComment": "Writes bytes from a <code>byte[]</code> to chars on a <code>Writer</code>\r\nusing the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method uses {@link String#String(byte[], String)}.\r\n\r\n@param data\r\n\t\tthe byte array to write, do not modify during output,\r\n\t\tnull ignored\r\n@param output\r\n\t\tthe <code>Writer</code> to write to\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@throws NullPointerException\r\n\t\tif output is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "org.apache.commons.io.DemuxTestCase(java.lang.String)", "kind": "constructor", "sourceText": "public DemuxTestCase(java.lang.String name) {\r\n    super(name);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite.suite()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suite()", "qualifiedName": "org.apache.commons.io.filefilter.PackageTestSuite.suite()", "kind": "static method", "sourceText": "public static junit.framework.Test suite() {\r\n    junit.framework.TestSuite suite = new junit.framework.TestSuite(\"IO Utilities - file filters\");\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.filefilter.AndFileFilterTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.filefilter.FileFilterTestCase.class));\r\n    suite.addTest(new junit.framework.TestSuite(org.apache.commons.io.filefilter.OrFileFilterTestCase.class));\r\n    return suite;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).1", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "write(int)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "kind": "method", "sourceText": "/**\r\n * Calls the write(byte[]) method.\r\n *\r\n * @see java.io.OutputStream#write(int)\r\n */\r\npublic synchronized void write(int b) {\r\n    this.write(new byte[]{ ((byte) (b)) }, 0, 1);\r\n}", "docComment": "Calls the write(byte[]) method.\r\n\r\n@see java.io.OutputStream#write(int)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "accept(java.io.File,java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic boolean accept(final java.io.File file, final java.lang.String name) {\r\n    for (java.util.Iterator iter = this.fileFilters.iterator(); iter.hasNext();) {\r\n        org.apache.commons.io.filefilter.IOFileFilter fileFilter = ((org.apache.commons.io.filefilter.IOFileFilter) (iter.next()));\r\n        if (fileFilter.accept(file, name)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "qualifiedName": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "kind": "method", "sourceText": "private void startWriter(java.lang.String name, java.lang.String data, org.apache.commons.io.output.DemuxOutputStream demux) throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream output = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    this.m_outputMap.put(name, output);\r\n    org.apache.commons.io.DemuxTestCase.WriterThread thread = new org.apache.commons.io.DemuxTestCase.WriterThread(name, data, output, demux);\r\n    this.m_threadMap.put(name, thread);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doGetFullPath(java.lang.String,boolean)", "qualifiedName": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "kind": "static method", "sourceText": "/**\r\n * Does the work of getting the path.\r\n *\r\n * @param filename\r\n * \t\tthe filename\r\n * @param includeSeparator\r\n * \t\ttrue to include the end separator\r\n * @return the path\r\n */\r\nprivate static java.lang.String doGetFullPath(java.lang.String filename, boolean includeSeparator) {\r\n    if (filename == null) {\r\n        return null;\r\n    }\r\n    int prefix = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\r\n    if (prefix < 0) {\r\n        return null;\r\n    }\r\n    if (prefix >= filename.length()) {\r\n        if (includeSeparator) {\r\n            return org.apache.commons.io.FilenameUtils.getPrefix(filename);// add end slash if necessary\r\n\r\n        } else {\r\n            return filename;\r\n        }\r\n    }\r\n    int index = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\r\n    if (index < 0) {\r\n        return filename.substring(0, prefix);\r\n    }\r\n    int end = index + (includeSeparator ? 1 : 0);\r\n    return filename.substring(0, end);\r\n}", "docComment": "Does the work of getting the path.\r\n\r\n@param filename\r\n\t\tthe filename\r\n@param includeSeparator\r\n\t\ttrue to include the end separator\r\n@return the path\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.HexDumpTest(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testForceMkdir()", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()", "kind": "method", "sourceText": "// forceMkdir\r\npublic void testForceMkdir() throws java.lang.Exception {\r\n    // Tests with existing directory\r\n    org.apache.commons.io.FileUtils.forceMkdir(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory());\r\n    // Creates test file\r\n    java.io.File testFile = new java.io.File(org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory(), this.getName());\r\n    testFile.deleteOnExit();\r\n    testFile.createNewFile();\r\n    this.assertTrue(\"Test file does not exist.\", testFile.exists());\r\n    // Tests with existing file\r\n    try {\r\n        org.apache.commons.io.FileUtils.forceMkdir(testFile);\r\n        this.fail(\"Exception expected.\");\r\n    } catch (java.io.IOException ex) {\r\n    }\r\n    testFile.delete();\r\n    // Tests with non-existent directory\r\n    org.apache.commons.io.FileUtils.forceMkdir(testFile);\r\n    this.assertTrue(\"Directory was not created.\", testFile.exists());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "suffixFileFilter(java.lang.String)", "qualifiedName": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Returns a filter that returns true if the filename ends with the specified text.\r\n *\r\n * @param suffix\r\n * \t\tthe filename suffix\r\n * @return a suffix checking filter\r\n */\r\npublic static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String suffix) {\r\n    return new org.apache.commons.io.filefilter.SuffixFileFilter(suffix);\r\n}", "docComment": "Returns a filter that returns true if the filename ends with the specified text.\r\n\r\n@param suffix\r\n\t\tthe filename suffix\r\n@return a suffix checking filter\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.markSupported()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "markSupported()", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.markSupported()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see java.io.InputStream#markSupported()\r\n */\r\npublic boolean markSupported() {\r\n    return this.in.markSupported();\r\n}", "docComment": "\r\n@see java.io.InputStream#markSupported()\r\n", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testIsExtensionArray()", "qualifiedName": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()", "kind": "method", "sourceText": "public void testIsExtensionArray() {\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(null, ((java.lang.String[]) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", ((java.lang.String[]) (null))));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file\", ((java.lang.String[]) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.lang.String[0]));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.lang.String[]{ \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.lang.String[]{ \"rtf\" }));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file\", new java.lang.String[]{ \"rtf\", \"\" }));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"file.txt\", new java.lang.String[]{ \"rtf\", \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", ((java.lang.String[]) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.lang.String[0]));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.lang.String[]{ \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.lang.String[]{ \"rtf\" }));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a/b/file.txt\", new java.lang.String[]{ \"rtf\", \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", ((java.lang.String[]) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.lang.String[0]));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.lang.String[]{ \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.lang.String[]{ \"rtf\" }));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b/file.txt\", new java.lang.String[]{ \"rtf\", \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", ((java.lang.String[]) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.lang.String[0]));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.lang.String[]{ \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.lang.String[]{ \"rtf\" }));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a\\\\b\\\\file.txt\", new java.lang.String[]{ \"rtf\", \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", ((java.lang.String[]) (null))));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.lang.String[0]));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.lang.String[]{ \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.lang.String[]{ \"rtf\" }));\r\n    this.assertEquals(true, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.lang.String[]{ \"rtf\", \"txt\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.lang.String[]{ \"TXT\" }));\r\n    this.assertEquals(false, org.apache.commons.io.FilenameUtils.isExtension(\"a.b\\\\file.txt\", new java.lang.String[]{ \"TXT\", \"RTF\" }));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "lineEnding", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_charArrayToOutputStream_Encoding()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testWrite_charArrayToOutputStream_Encoding() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, true, true);\r\n    org.apache.commons.io.IOUtils.write(str.toCharArray(), out, \"UTF16\");\r\n    out.off();\r\n    out.flush();\r\n    byte[] bytes = baout.toByteArray();\r\n    bytes = new java.lang.String(bytes, \"UTF16\").getBytes(\"US-ASCII\");\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, bytes));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyURLToFile(java.net.URL,java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "kind": "static method", "sourceText": "// -----------------------------------------------------------------------\r\n/**\r\n * Copies bytes from the URL <code>source</code> to a file\r\n * <code>destination</code>. The directories up to <code>destination</code>\r\n * will be created if they don't already exist. <code>destination</code>\r\n * will be overwritten if it already exists.\r\n *\r\n * @param source\r\n * \t\tA <code>URL</code> to copy bytes from.\r\n * @param destination\r\n * \t\tA non-directory <code>File</code> to write bytes to\r\n * \t\t(possibly overwriting).\r\n * @throws IOException\r\n * \t\tif\r\n * \t\t<ul>\r\n * \t\t<li><code>source</code> URL cannot be opened</li>\r\n * \t\t<li><code>destination</code> cannot be written to</li>\r\n * \t\t<li>an IO error occurs during copying</li>\r\n * \t\t</ul>\r\n */\r\npublic static void copyURLToFile(java.net.URL source, java.io.File destination) throws java.io.IOException {\r\n    // does destination directory exist ?\r\n    if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {\r\n        destination.getParentFile().mkdirs();\r\n    }\r\n    // make sure we can write to destination\r\n    if (destination.exists() && (!destination.canWrite())) {\r\n        java.lang.String message = (\"Unable to open file \" + destination) + \" for writing.\";\r\n        throw new java.io.IOException(message);\r\n    }\r\n    java.io.InputStream input = source.openStream();\r\n    try {\r\n        java.io.FileOutputStream output = new java.io.FileOutputStream(destination);\r\n        try {\r\n            org.apache.commons.io.IOUtils.copy(input, output);\r\n        } finally {\r\n            org.apache.commons.io.IOUtils.closeQuietly(output);\r\n        }\r\n    } finally {\r\n        org.apache.commons.io.IOUtils.closeQuietly(input);\r\n    }\r\n}", "docComment": "Copies bytes from the URL <code>source</code> to a file\r\n<code>destination</code>. The directories up to <code>destination</code>\r\nwill be created if they don't already exist. <code>destination</code>\r\nwill be overwritten if it already exists.\r\n\r\n@param source\r\n\t\tA <code>URL</code> to copy bytes from.\r\n@param destination\r\n\t\tA non-directory <code>File</code> to write bytes to\r\n\t\t(possibly overwriting).\r\n@throws IOException\r\n\t\tif\r\n\t\t<ul>\r\n\t\t<li><code>source</code> URL cannot be opened</li>\r\n\t\t<li><code>destination</code> cannot be written to</li>\r\n\t\t<li>an IO error occurs during copying</li>\r\n\t\t</ul>\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE", "labels": ["Variable"], "properties": {"sourceText": "private static final int FILE2_SIZE = (1024 * 4) + 1;", "visibility": "private", "simpleName": "FILE2_SIZE", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "kind": "method", "sourceText": "/**\r\n * Removes the specified file filter.\r\n *\r\n * @param ioFileFilter\r\n * \t\tfilter to be removed\r\n * @return <code>true</code> if the filter was found in the list,\r\n<code>false</code> otherwise\r\n * @since Commons IO 1.1\r\n */\r\npublic boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter ioFileFilter);", "docComment": "Removes the specified file filter.\r\n\r\n@param ioFileFilter\r\n\t\tfilter to be removed\r\n@return <code>true</code> if the filter was found in the list,\r\n<code>false</code> otherwise\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "read(byte[])", "qualifiedName": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "kind": "method", "sourceText": "/**\r\n * Increases the count by super.read(b)'s return count\r\n *\r\n * @see java.io.InputStream#read(byte[])\r\n */\r\npublic int read(byte[] b) throws java.io.IOException {\r\n    int found = super.read(b);\r\n    this.count += (found >= 0) ? found : 0;\r\n    return found;\r\n}", "docComment": "Increases the count by super.read(b)'s return count\r\n\r\n@see java.io.InputStream#read(byte[])\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "append", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "labels": ["Variable"], "properties": {"sourceText": "private boolean invoked;", "visibility": "private", "simpleName": "invoked", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "setUpTestFilters()", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "kind": "method", "sourceText": "private void setUpTestFilters() {\r\n    // filters\r\n    // tests\r\n    this.testFilters = new java.util.ArrayList();\r\n    this.testTrueResults = new java.util.ArrayList();\r\n    this.testFalseResults = new java.util.ArrayList();\r\n    this.testFileResults = new java.util.ArrayList();\r\n    this.testFilenameResults = new java.util.ArrayList();\r\n    // test 0 - add empty elements\r\n    {\r\n        this.testFilters.add(0, null);\r\n        this.testTrueResults.add(0, null);\r\n        this.testFalseResults.add(0, null);\r\n        this.testFileResults.add(0, null);\r\n        this.testFilenameResults.add(0, null);\r\n    }\r\n    // test 1 - Test conditional or with all filters returning true\r\n    {\r\n        // test 1 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        // test 1 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 1 false results\r\n        boolean[] falseResults = new boolean[]{ false, false, false };\r\n        this.testFilters.add(1, filters);\r\n        this.testTrueResults.add(1, trueResults);\r\n        this.testFalseResults.add(1, falseResults);\r\n        this.testFileResults.add(1, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(1, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 2 - Test conditional or with first filter returning false\r\n    {\r\n        // test 2 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 2 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 2 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(2, filters);\r\n        this.testTrueResults.add(2, trueResults);\r\n        this.testFalseResults.add(2, falseResults);\r\n        this.testFileResults.add(2, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(2, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 3 - Test conditional or with second filter returning false\r\n    {\r\n        // test 3 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 3 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 3 false results\r\n        boolean[] falseResults = new boolean[]{ false, false, false };\r\n        this.testFilters.add(3, filters);\r\n        this.testTrueResults.add(3, trueResults);\r\n        this.testFalseResults.add(3, falseResults);\r\n        this.testFileResults.add(3, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(3, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 4 - Test conditional or with third filter returning false\r\n    {\r\n        // test 4 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 4 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 4 false results\r\n        boolean[] falseResults = new boolean[]{ false, false, false };\r\n        this.testFilters.add(4, filters);\r\n        this.testTrueResults.add(4, trueResults);\r\n        this.testFalseResults.add(4, falseResults);\r\n        this.testFileResults.add(4, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(4, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 5 - Test conditional or with first and third filters returning false\r\n    {\r\n        // test 5 filters\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        // test 5 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 5 false results\r\n        boolean[] falseResults = new boolean[]{ true, false, false };\r\n        this.testFilters.add(5, filters);\r\n        this.testTrueResults.add(5, trueResults);\r\n        this.testFalseResults.add(5, falseResults);\r\n        this.testFileResults.add(5, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(5, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 6 - Test conditional or with second and third filters returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 6 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 6 false results\r\n        boolean[] falseResults = new boolean[]{ false, false, false };\r\n        this.testFilters.add(6, filters);\r\n        this.testTrueResults.add(6, trueResults);\r\n        this.testFalseResults.add(6, falseResults);\r\n        this.testFileResults.add(6, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(6, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 7 - Test conditional or with first and second filters returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.falseFilters[3]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        // test 7 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 7 false results\r\n        boolean[] falseResults = new boolean[]{ true, true, false };\r\n        this.testFilters.add(7, filters);\r\n        this.testTrueResults.add(7, trueResults);\r\n        this.testFalseResults.add(7, falseResults);\r\n        this.testFileResults.add(7, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(7, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 8 - Test conditional or with fourth filter returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.trueFilters[1]);\r\n        filters.add(this.trueFilters[2]);\r\n        filters.add(this.trueFilters[3]);\r\n        filters.add(this.falseFilters[1]);\r\n        // test 8 true results\r\n        boolean[] trueResults = new boolean[]{ true, false, false };\r\n        // test 8 false results\r\n        boolean[] falseResults = new boolean[]{ false, false, false };\r\n        this.testFilters.add(8, filters);\r\n        this.testTrueResults.add(8, trueResults);\r\n        this.testFalseResults.add(8, falseResults);\r\n        this.testFileResults.add(8, java.lang.Boolean.TRUE);\r\n        this.testFilenameResults.add(8, java.lang.Boolean.TRUE);\r\n    }\r\n    // test 9 - Test conditional or with all filters returning false\r\n    {\r\n        java.util.List filters = new java.util.ArrayList();\r\n        filters.add(this.falseFilters[1]);\r\n        filters.add(this.falseFilters[2]);\r\n        filters.add(this.falseFilters[3]);\r\n        // test 9 true results\r\n        boolean[] trueResults = new boolean[]{ false, false, false };\r\n        // test 9 false results\r\n        boolean[] falseResults = new boolean[]{ true, true, true };\r\n        this.testFilters.add(9, filters);\r\n        this.testTrueResults.add(9, trueResults);\r\n        this.testFalseResults.add(9, falseResults);\r\n        this.testFileResults.add(9, java.lang.Boolean.FALSE);\r\n        this.testFilenameResults.add(9, java.lang.Boolean.FALSE);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "reset()", "qualifiedName": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()", "kind": "method", "sourceText": "public void reset() {\r\n    this.setInvoked(false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.skip(long).0", "labels": ["Variable"], "properties": {"simpleName": "ln", "qualifiedName": "org.apache.commons.io.input.ProxyInputStream.skip(long).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWrite_stringToOutputStream_Encoding_nullStream()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()", "kind": "method", "sourceText": "public void testWrite_stringToOutputStream_Encoding_nullStream() throws java.lang.Exception {\r\n    java.lang.String str = new java.lang.String(this.inData, \"US-ASCII\");\r\n    try {\r\n        org.apache.commons.io.IOUtils.write(str, ((java.io.OutputStream) (null)));\r\n        this.fail();\r\n    } catch (java.lang.NullPointerException ex) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testAdd()", "qualifiedName": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "kind": "method", "sourceText": "public void testAdd() {\r\n    java.util.List filters = new java.util.ArrayList();\r\n    org.apache.commons.io.filefilter.ConditionalFileFilter fileFilter = this.getConditionalFileFilter();\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    filters.add(new org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter());\r\n    for (int i = 0; i < filters.size(); i++) {\r\n        this.assertEquals(\"file filters count: \", i, fileFilter.getFileFilters().size());\r\n        fileFilter.addFileFilter(((org.apache.commons.io.filefilter.IOFileFilter) (filters.get(i))));\r\n        this.assertEquals(\"file filters count: \", i + 1, fileFilter.getFileFilters().size());\r\n    }\r\n    for (java.util.Iterator iter = fileFilter.getFileFilters().iterator(); iter.hasNext();) {\r\n        org.apache.commons.io.filefilter.IOFileFilter filter = ((org.apache.commons.io.filefilter.IOFileFilter) (iter.next()));\r\n        this.assertTrue(\"found file filter\", filters.contains(filter));\r\n    }\r\n    this.assertEquals(\"file filters count\", filters.size(), fileFilter.getFileFilters().size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "short", "labels": ["Primitive"], "properties": {"simpleName": "short", "qualifiedName": "short", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).0", "labels": ["Variable"], "properties": {"simpleName": "data", "qualifiedName": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "input", "qualifiedName": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testCopy_readerToOutputStream()", "qualifiedName": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "kind": "method", "sourceText": "// -----------------------------------------------------------------------\r\npublic void testCopy_readerToOutputStream() throws java.lang.Exception {\r\n    java.io.InputStream in = new java.io.ByteArrayInputStream(this.inData);\r\n    in = new org.apache.commons.io.testtools.YellOnCloseInputStream(in);\r\n    java.io.Reader reader = new java.io.InputStreamReader(in, \"US-ASCII\");\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    java.io.OutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.copy(reader, out);\r\n    // Note: this method *does* flush. It is equivalent to:\r\n    // OutputStreamWriter _out = new OutputStreamWriter(fout);\r\n    // IOUtils.copy( fin, _out, 4096 ); // copy( Reader, Writer, int );\r\n    // _out.flush();\r\n    // out = fout;\r\n    // Note: rely on the method to flush\r\n    this.assertEquals(\"Sizes differ\", this.inData.length, baout.size());\r\n    this.assertTrue(\"Content differs\", java.util.Arrays.equals(this.inData, baout.toByteArray()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Singleton instance of directory filter\r\n */\r\npublic static final org.apache.commons.io.filefilter.IOFileFilter INSTANCE = new org.apache.commons.io.filefilter.DirectoryFileFilter();", "visibility": "public", "simpleName": "INSTANCE", "qualifiedName": "org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter", "labels": ["Structure"], "properties": {"docComment": "A Proxy stream which acts as expected, that is it passes the method \r\ncalls on to the proxied stream and doesn't change which methods are \r\nbeing called. It is an alternative base class to FilterWriter\r\nto increase reusability, because FilterWriter changes the \r\nmethods being called, such as write(char[]) to write(char[], int, int)\r\nand write(String) to write(String, int, int).\r\n\r\n@author Henri Yandell\r\n@author Stephen Colebourne\r\n@version $Id$\r\n", "simpleName": "ProxyWriter", "qualifiedName": "org.apache.commons.io.output.ProxyWriter", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toCharArray(java.io.InputStream,java.lang.String)", "qualifiedName": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Get the contents of an <code>InputStream</code> as a character array\r\n * using the specified character encoding.\r\n * <p>\r\n * Character encoding names can be found at\r\n * <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n *\r\n * @param is\r\n * \t\tthe <code>InputStream</code> to read from\r\n * @param encoding\r\n * \t\tthe encoding to use, null means platform default\r\n * @return the requested character array\r\n * @throws NullPointerException\r\n * \t\tif the input is null\r\n * @throws IOException\r\n * \t\tif an I/O error occurs\r\n * @since Commons IO 1.1\r\n */\r\npublic static char[] toCharArray(java.io.InputStream is, java.lang.String encoding) throws java.io.IOException {\r\n    java.io.CharArrayWriter output = new java.io.CharArrayWriter();\r\n    org.apache.commons.io.IOUtils.copy(is, output, encoding);\r\n    return output.toCharArray();\r\n}", "docComment": "Get the contents of an <code>InputStream</code> as a character array\r\nusing the specified character encoding.\r\n<p>\r\nCharacter encoding names can be found at\r\n<a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.\r\n<p>\r\nThis method buffers the input internally, so there is no need to use a\r\n<code>BufferedInputStream</code>.\r\n\r\n@param is\r\n\t\tthe <code>InputStream</code> to read from\r\n@param encoding\r\n\t\tthe encoding to use, null means platform default\r\n@return the requested character array\r\n@throws NullPointerException\r\n\t\tif the input is null\r\n@throws IOException\r\n\t\tif an I/O error occurs\r\n@since Commons IO 1.1\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapShort(short)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "swapShort(short)", "qualifiedName": "org.apache.commons.io.EndianUtils.swapShort(short)", "kind": "static method", "sourceText": "// ========================================== Swapping routines\r\n/**\r\n * Converts a \"short\" value between endian systems.\r\n *\r\n * @param value\r\n * \t\tvalue to convert\r\n * @return the converted value\r\n */\r\npublic static short swapShort(short value) {\r\n    return ((short) ((((value >> 0) & 0xff) << 8) + (((value >> 8) & 0xff) << 0)));\r\n}", "docComment": "Converts a \"short\" value between endian systems.\r\n\r\n@param value\r\n\t\tvalue to convert\r\n@return the converted value\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testWriteLines_OutputStream_nullData()", "qualifiedName": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "kind": "method", "sourceText": "public void testWriteLines_OutputStream_nullData() throws java.lang.Exception {\r\n    org.apache.commons.io.output.ByteArrayOutputStream baout = new org.apache.commons.io.output.ByteArrayOutputStream();\r\n    org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream out = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(baout, false, true);\r\n    org.apache.commons.io.IOUtils.writeLines(((java.util.List) (null)), \"*\", out);\r\n    out.off();\r\n    out.flush();\r\n    this.assertEquals(\"Sizes differ\", 0, baout.size());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isSeparator(char).0", "labels": ["Variable"], "properties": {"simpleName": "ch", "qualifiedName": "org.apache.commons.io.FilenameUtils.isSeparator(char).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "testReadByte()", "qualifiedName": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()", "kind": "method", "sourceText": "public void testReadByte() throws java.io.IOException {\r\n    this.assertEquals(0x1, this.sdis.readByte());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "qualifiedName": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "kind": "method", "sourceText": "private void checkStreams(org.apache.commons.io.output.ByteArrayOutputStream actual, java.io.ByteArrayOutputStream expected) {\r\n    this.assertEquals(\"Sizes are not equal\", expected.size(), actual.size());\r\n    byte[] buf = actual.toByteArray();\r\n    byte[] refbuf = expected.toByteArray();\r\n    this.checkByteArrays(buf, refbuf);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getWorkingPathNamePropertyKey()", "qualifiedName": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()", "kind": "method", "sourceText": "protected java.lang.String getWorkingPathNamePropertyKey() {\r\n    return org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "labels": ["Variable"], "properties": {"simpleName": "ioFileFilter", "qualifiedName": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "lockDir", "qualifiedName": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isFileNewer(java.io.File,java.io.File)", "qualifiedName": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Tests if the specified <code>File</code> is newer than the reference\r\n * <code>File</code>.\r\n *\r\n * @param file\r\n * \t\tthe <code>File</code> of which the modification date must\r\n * \t\tbe compared.\r\n * @param reference\r\n * \t\tthe <code>File</code> of which the modification date\r\n * \t\tis used.\r\n * @return true if the <code>File</code> exists and has been modified more\r\nrecently than the reference <code>File</code>.\r\n */\r\npublic static boolean isFileNewer(java.io.File file, java.io.File reference) {\r\n    if (reference == null) {\r\n        throw new java.lang.IllegalArgumentException(\"No specified reference file\");\r\n    }\r\n    if (!reference.exists()) {\r\n        throw new java.lang.IllegalArgumentException((\"The reference file '\" + file) + \"' doesn't exist\");\r\n    }\r\n    return org.apache.commons.io.FileUtils.isFileNewer(file, reference.lastModified());\r\n}", "docComment": "Tests if the specified <code>File</code> is newer than the reference\r\n<code>File</code>.\r\n\r\n@param file\r\n\t\tthe <code>File</code> of which the modification date must\r\n\t\tbe compared.\r\n@param reference\r\n\t\tthe <code>File</code> of which the modification date\r\n\t\tis used.\r\n@return true if the <code>File</code> exists and has been modified more\r\nrecently than the reference <code>File</code>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).1", "labels": ["Variable"], "properties": {"simpleName": "lineEnding", "qualifiedName": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "layer:Presentation Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Presentation Layer", "qualifiedName": "Presentation Layer", "description": "Manages the user interface, defines UI elements and behavior, displays information, responds to user input, and updates views.", "layerOrder": 0}}}, {"data": {"id": "layer:Service Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Service Layer", "qualifiedName": "Service Layer", "description": "Controls the application flow, orchestrates domain operations, connects UI events with domain logic, and synchronizes domain changes with the UI.", "layerOrder": 1}}}, {"data": {"id": "layer:Domain Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Domain Layer", "qualifiedName": "Domain Layer", "description": "Handles business logic, represents domain data and behavior, and performs necessary computations for domain operations.", "layerOrder": 2}}}, {"data": {"id": "layer:Data Source Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Data Source Layer", "qualifiedName": "Data Source Layer", "description": "Interacts with databases, filesystems, hardware, messaging systems, or other data sources, performs CRUD operations, handles data conversion, and ensures data integrity.", "layerOrder": 3}}}], "edges": [{"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter-hasScript-org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "source": "org.apache.commons.io.filefilter.PrefixFileFilter", "target": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasScript-org.apache.commons.io.HexDump.dump(byte)", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump.dump(byte)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasScript-org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils()", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toInputStream(java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.markSupported()", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.markSupported()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-hasScript-org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream-hasScript-org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.NullOutputStream", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFiles4()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFiles4()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasScript-org.apache.commons.io.input.CountingInputStream.read(byte[])", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite-hasScript-org.apache.commons.io.input.PackageTestSuite.suite()", "source": "org.apache.commons.io.input.PackageTestSuite", "target": "org.apache.commons.io.input.PackageTestSuite.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter-hasScript-org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.DelegateFileFilter", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter-hasScript-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.AbstractFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object)", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasScript-org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.swapDouble(double)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.swapDouble(double)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream-hasScript-org.apache.commons.io.input.DemuxInputStream.read()", "source": "org.apache.commons.io.input.DemuxInputStream", "target": "org.apache.commons.io.input.DemuxInputStream.read()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-hasScript-org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter-hasScript-org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "source": "org.apache.commons.io.filefilter.SuffixFileFilter", "target": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testForceMkdir()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.toFile(java.net.URL)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-hasScript-org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-hasScript-org.apache.commons.io.FileCleanerTestCase.setUp()", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.FileCleanerTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasScript-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasScript-org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter-hasScript-org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "source": "org.apache.commons.io.filefilter.DelegateFileFilter", "target": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest-hasScript-org.apache.commons.io.output.NullOutputStreamTest.testNull()", "source": "org.apache.commons.io.output.NullOutputStreamTest", "target": "org.apache.commons.io.output.NullOutputStreamTest.testNull()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.swapLong(long)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.swapLong(long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest.tearDown()", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite-hasScript-org.apache.commons.io.AllIOTestSuite()", "source": "org.apache.commons.io.AllIOTestSuite", "target": "org.apache.commons.io.AllIOTestSuite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFile1()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFile1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter(java.io.Writer)", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter(java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter-hasScript-org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.NotFileFilter", "target": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter-hasScript-org.apache.commons.io.filefilter.FalseFileFilter()", "source": "org.apache.commons.io.filefilter.FalseFileFilter", "target": "org.apache.commons.io.filefilter.FalseFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.doStart()", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.doStart()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter.write(char[])", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter.write(char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream-hasScript-org.apache.commons.io.output.NullOutputStream.write(byte[])", "source": "org.apache.commons.io.output.NullOutputStream", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.testInputStream()", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.testInputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-hasScript-org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest-hasScript-org.apache.commons.io.HexDumpTest.toHex(int)", "source": "org.apache.commons.io.HexDumpTest", "target": "org.apache.commons.io.HexDumpTest.toHex(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testSwapShort()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testSwapShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite-hasScript-org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])", "source": "org.apache.commons.io.filefilter.PackageTestSuite", "target": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.touch(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.touch(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.close()", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter-hasScript-org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.NameFileFilter", "target": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest(java.lang.String)", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter-hasScript-org.apache.commons.io.filefilter.TrueFileFilter()", "source": "org.apache.commons.io.filefilter.TrueFileFilter", "target": "org.apache.commons.io.filefilter.TrueFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.XtestIsFileNewer()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.XtestIsFileNewer()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testTouch()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testTouch()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.tearDown()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasScript-org.apache.commons.io.input.CountingInputStream.resetCount()", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream.resetCount()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream-hasScript-org.apache.commons.io.input.DemuxInputStream()", "source": "org.apache.commons.io.input.DemuxInputStream", "target": "org.apache.commons.io.input.DemuxInputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.IOFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter-hasScript-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.AbstractFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.setUp()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter-hasScript-org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.FalseFileFilter", "target": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase(java.lang.String)", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest-hasScript-org.apache.commons.io.HexDumpTest.main(java.lang.String[])", "source": "org.apache.commons.io.HexDumpTest", "target": "org.apache.commons.io.HexDumpTest.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest-hasScript-org.apache.commons.io.HexDumpTest.testDump()", "source": "org.apache.commons.io.HexDumpTest", "target": "org.apache.commons.io.HexDumpTest.testDump()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils()", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter-hasScript-org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.NotFileFilter", "target": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter-hasScript-org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.WildcardFilter", "target": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-hasScript-org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.close()", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest-hasScript-org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "source": "org.apache.commons.io.output.CountingOutputStreamTest", "target": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testReadLines()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testReadLines()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter-hasScript-org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "source": "org.apache.commons.io.filefilter.PrefixFileFilter", "target": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasScript-org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream-hasScript-org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "source": "org.apache.commons.io.input.DemuxInputStream", "target": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testSwapDouble()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testSwapDouble()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite-hasScript-org.apache.commons.io.filefilter.PackageTestSuite.suite()", "source": "org.apache.commons.io.filefilter.PackageTestSuite", "target": "org.apache.commons.io.filefilter.PackageTestSuite.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.read()", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.read()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.createLock()", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.createLock()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-hasScript-org.apache.commons.io.output.CountingOutputStream.write(int)", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.CountingOutputStream.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-hasScript-org.apache.commons.io.output.TeeOutputStream.write(int)", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.TeeOutputStream.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.available()", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.available()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasScript-org.apache.commons.io.FileCleaner.getTrackCount()", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner.getTrackCount()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter-hasScript-org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "source": "org.apache.commons.io.filefilter.SuffixFileFilter", "target": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFile4()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFile4()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker-hasScript-org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "source": "org.apache.commons.io.FileCleaner$Tracker", "target": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.setUp()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.setUp()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toString(java.io.Reader)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.tearDown()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasScript-org.apache.commons.io.input.CountingInputStream.skip(long)", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream.skip(long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest(java.lang.String)", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.suite()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasScript-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest-hasScript-org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "source": "org.apache.commons.io.output.CountingOutputStreamTest", "target": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest-hasScript-org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)", "source": "org.apache.commons.io.output.NullOutputStreamTest", "target": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils()", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter.write(char[],int,int)", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-hasScript-org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testEOF3()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread-hasScript-org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "source": "org.apache.commons.io.DemuxTestCase$WriterThread", "target": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite-hasScript-org.apache.commons.io.PackageTestSuite.suite()", "source": "org.apache.commons.io.PackageTestSuite", "target": "org.apache.commons.io.PackageTestSuite.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.setUp()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-hasScript-org.apache.commons.io.output.TeeOutputStream.close()", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.TeeOutputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-hasScript-org.apache.commons.io.output.CountingOutputStream.resetCount()", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.CountingOutputStream.resetCount()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.close()", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasScript-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream.getData()", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker-hasScript-org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "source": "org.apache.commons.io.FileCleaner$Tracker", "target": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.read(char[])", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.read(char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFiles3()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFiles3()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-hasScript-org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite-hasScript-org.apache.commons.io.PackageTestSuite.main(java.lang.String[])", "source": "org.apache.commons.io.PackageTestSuite", "target": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readUTF()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readUTF()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.<clinit>()", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.<clinit>()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readShort()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter-hasScript-org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "source": "org.apache.commons.io.filefilter.WildcardFilter", "target": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasScript-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream-hasScript-org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-hasScript-org.apache.commons.io.FileCleanerTestCase.testFileCleaner()", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.suite()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.tearDown()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.flush()", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.flush()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readInt()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readInt()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.skip(long)", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.skip(long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.reset()", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasScript-org.apache.commons.io.HexDump.dump(long)", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump.dump(long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter-hasScript-org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "source": "org.apache.commons.io.filefilter.NameFileFilter", "target": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream-hasScript-org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "source": "org.apache.commons.io.output.DemuxOutputStream", "target": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.skip(long)", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.skip(long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread-hasScript-org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream-hasScript-org.apache.commons.io.output.NullOutputStream()", "source": "org.apache.commons.io.output.NullOutputStream", "target": "org.apache.commons.io.output.NullOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.tearDown()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasScript-org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter.write(java.lang.String)", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream-hasScript-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter.close()", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker-hasScript-org.apache.commons.io.FileCleaner$Tracker.delete()", "source": "org.apache.commons.io.FileCleaner$Tracker", "target": "org.apache.commons.io.FileCleaner$Tracker.delete()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter-hasScript-org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.SuffixFileFilter", "target": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread-hasScript-org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasScript-org.apache.commons.io.FileCleaner.<init>1()", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner.<init>1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter-hasScript-org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.TrueFileFilter", "target": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.swapInteger(int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.swapInteger(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasScript-org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter-hasScript-org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.SuffixFileFilter", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-hasScript-org.apache.commons.io.FileUtilsListFilesTestCase.setUp()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream-hasScript-org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "source": "org.apache.commons.io.output.ProxyOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream-hasScript-org.apache.commons.io.input.DemuxInputStream.getStream()", "source": "org.apache.commons.io.input.DemuxInputStream", "target": "org.apache.commons.io.input.DemuxInputStream.getStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testContentEquals()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.suite()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-hasScript-org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testSymmetry()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream-hasScript-org.apache.commons.io.output.ProxyOutputStream.flush()", "source": "org.apache.commons.io.output.ProxyOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream.flush()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.write(char[])", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.write(char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest-hasScript-org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasScript-org.apache.commons.io.input.CountingInputStream.read()", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream.read()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-hasScript-org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasScript-org.apache.commons.io.FileSystemUtils.<clinit>()", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.<clinit>()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest-hasScript-org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toString(byte[])", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toString(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream-hasScript-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasScript-org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFiles2()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFiles2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-hasScript-org.apache.commons.io.FileCleanerTestCase.tearDown()", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.FileCleanerTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite-hasScript-org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])", "source": "org.apache.commons.io.AllIOTestSuite", "target": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFile3()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFile3()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-hasScript-org.apache.commons.io.output.CountingOutputStream.getCount()", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.CountingOutputStream.getCount()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.write(int)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.close()", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream-hasScript-org.apache.commons.io.output.DemuxOutputStream()", "source": "org.apache.commons.io.output.DemuxOutputStream", "target": "org.apache.commons.io.output.DemuxOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream-hasScript-org.apache.commons.io.output.DemuxOutputStream.close()", "source": "org.apache.commons.io.output.DemuxOutputStream", "target": "org.apache.commons.io.output.DemuxOutputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readByte()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readByte()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream-hasScript-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testEOF2()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite-hasScript-org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])", "source": "org.apache.commons.io.input.PackageTestSuite", "target": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasScript-org.apache.commons.io.HexDump()", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWaitFor()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWaitFor()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter-hasScript-org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.TrueFileFilter", "target": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream-hasScript-org.apache.commons.io.output.ProxyOutputStream.write(int)", "source": "org.apache.commons.io.output.ProxyOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter-hasScript-org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "source": "org.apache.commons.io.filefilter.NameFileFilter", "target": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream.getStream()", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.getStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream-hasScript-org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "source": "org.apache.commons.io.output.ProxyOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetName()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream(int)", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter()", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySize()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySize()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.suite()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasScript-org.apache.commons.io.FileCleaner()", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.tearDown()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.suite()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.reset()", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.reset()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testNormalize()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testNormalize()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter-hasScript-org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.NotFileFilter", "target": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readLine()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readLine()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testEquals()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testEquals()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest-hasScript-org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)", "source": "org.apache.commons.io.output.CountingOutputStreamTest", "target": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream-hasScript-org.apache.commons.io.input.DemuxInputStream.close()", "source": "org.apache.commons.io.input.DemuxInputStream", "target": "org.apache.commons.io.input.DemuxInputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-hasScript-org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter-hasScript-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.AbstractFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite-hasScript-org.apache.commons.io.filefilter.PackageTestSuite()", "source": "org.apache.commons.io.filefilter.PackageTestSuite", "target": "org.apache.commons.io.filefilter.PackageTestSuite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite-hasScript-org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])", "source": "org.apache.commons.io.output.PackageTestSuite", "target": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter-hasScript-org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.PrefixFileFilter", "target": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-hasScript-org.apache.commons.io.FileCleanerTestCase.suite()", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.FileCleanerTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter-hasScript-org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.SuffixFileFilter", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.io.File)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils()", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testConcat()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testConcat()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.tearDown()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasScript-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasScript-org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-hasScript-org.apache.commons.io.output.CountingOutputStream.write(byte[])", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader(java.io.Reader)", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader(java.io.Reader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter-hasScript-org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.WildcardFilter", "target": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-hasScript-org.apache.commons.io.output.TeeOutputStream.write(byte[])", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.setUp()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils()", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite-hasScript-org.apache.commons.io.PackageTestSuite()", "source": "org.apache.commons.io.PackageTestSuite", "target": "org.apache.commons.io.PackageTestSuite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.mark(int)", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.mark(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter-hasScript-org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.PrefixFileFilter", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testConstants()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.ready()", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.ready()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream-hasScript-org.apache.commons.io.output.DemuxOutputStream.flush()", "source": "org.apache.commons.io.output.DemuxOutputStream", "target": "org.apache.commons.io.output.DemuxOutputStream.flush()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-hasScript-org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter()", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter-hasScript-org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.DelegateFileFilter", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readChar()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readChar()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.toURLs(java.io.File[])", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.toURLs(java.io.File[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream-hasScript-org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)", "source": "org.apache.commons.io.testtools.YellOnCloseInputStream", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFiles1()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFiles1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.mark(int)", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.mark(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest-hasScript-org.apache.commons.io.HexDumpTest(java.lang.String)", "source": "org.apache.commons.io.HexDumpTest", "target": "org.apache.commons.io.HexDumpTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest-hasScript-org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "source": "org.apache.commons.io.output.TeeOutputStreamTest", "target": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest-hasScript-org.apache.commons.io.HexDumpTest.toAscii(int)", "source": "org.apache.commons.io.HexDumpTest", "target": "org.apache.commons.io.HexDumpTest.toAscii(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.doJoin()", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.doJoin()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.setUp()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite-hasScript-org.apache.commons.io.input.PackageTestSuite()", "source": "org.apache.commons.io.input.PackageTestSuite", "target": "org.apache.commons.io.input.PackageTestSuite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testSwapFloat()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testSwapFloat()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread-hasScript-org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter.flush()", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.flush()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter.flush()", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter.flush()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.suite()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testReadFileToString()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testReadFileToString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.close()", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter-hasScript-org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.NameFileFilter", "target": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testSwapInteger()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testSwapInteger()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter-hasScript-org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testEOF1()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest.setUp()", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasScript-org.apache.commons.io.output.ByteArrayOutputStream()", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter-hasScript-org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.NameFileFilter", "target": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasScript-org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.setUp()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.read()", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.read()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream-hasScript-org.apache.commons.io.input.ProxyInputStream.read(byte[])", "source": "org.apache.commons.io.input.ProxyInputStream", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter-hasScript-org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.FalseFileFilter", "target": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasScript-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToFile2()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToFile2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest-hasScript-org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)", "source": "org.apache.commons.io.output.TeeOutputStreamTest", "target": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testToURLs1()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasScript-org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readLong()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readLong()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasScript-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest-hasScript-org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "source": "org.apache.commons.io.output.TeeOutputStreamTest", "target": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream-hasScript-org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread-hasScript-org.apache.commons.io.DemuxTestCase$WriterThread.run()", "source": "org.apache.commons.io.DemuxTestCase$WriterThread", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasScript-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream-hasScript-org.apache.commons.io.output.DemuxOutputStream.getStream()", "source": "org.apache.commons.io.output.DemuxOutputStream", "target": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testGetPath()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testGetPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasScript-org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.swapFloat(float)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.swapFloat(float)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.suite()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream-hasScript-org.apache.commons.io.output.NullOutputStream.write(int)", "source": "org.apache.commons.io.output.NullOutputStream", "target": "org.apache.commons.io.output.NullOutputStream.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasScript-org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasScript-org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils()", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream-hasScript-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasScript-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter-hasScript-org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.PrefixFileFilter", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.<clinit>()", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.<clinit>()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasScript-org.apache.commons.io.input.CountingInputStream(java.io.InputStream)", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.swapShort(short)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.swapShort(short)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.tearDown()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.tearDown()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasScript-org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasScript-org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.<clinit>()", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.<clinit>()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testFileUtils()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest-hasScript-org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()", "source": "org.apache.commons.io.input.CountingInputStreamTest", "target": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-hasScript-org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter-hasScript-org.apache.commons.io.filefilter.DirectoryFileFilter()", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter-hasScript-org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.WildcardFilter", "target": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasScript-org.apache.commons.io.DemuxTestCase.testOutputStream()", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasScript-org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasScript-org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasScript-org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasScript-org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasScript-org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream-hasScript-org.apache.commons.io.output.DemuxOutputStream.write(int)", "source": "org.apache.commons.io.output.DemuxOutputStream", "target": "org.apache.commons.io.output.DemuxOutputStream.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite-hasScript-org.apache.commons.io.AllIOTestSuite.suite()", "source": "org.apache.commons.io.AllIOTestSuite", "target": "org.apache.commons.io.AllIOTestSuite.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testReaderToString()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite-hasScript-org.apache.commons.io.output.PackageTestSuite()", "source": "org.apache.commons.io.output.PackageTestSuite", "target": "org.apache.commons.io.output.PackageTestSuite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasScript-org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasScript-org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream-hasScript-org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.ProxyOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream-hasScript-org.apache.commons.io.testtools.YellOnCloseInputStream.close()", "source": "org.apache.commons.io.testtools.YellOnCloseInputStream", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils-hasScript-org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "source": "org.apache.commons.io.EndianUtils", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-hasScript-org.apache.commons.io.output.TeeOutputStream.flush()", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.TeeOutputStream.flush()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasScript-org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.isSeparator(char)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-hasScript-org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasScript-org.apache.commons.io.output.DeferredFileOutputStream.getFile()", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.getFile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-hasScript-org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite-hasScript-org.apache.commons.io.output.PackageTestSuite.suite()", "source": "org.apache.commons.io.output.PackageTestSuite", "target": "org.apache.commons.io.output.PackageTestSuite.suite()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream-hasScript-org.apache.commons.io.output.ProxyOutputStream.close()", "source": "org.apache.commons.io.output.ProxyOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream.close()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasScript-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasScript-org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasScript-org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter-hasScript-org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "source": "org.apache.commons.io.filefilter.WildcardFilter", "target": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasScript-org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.markSupported()", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.markSupported()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter-hasScript-org.apache.commons.io.output.ProxyWriter.write(int)", "source": "org.apache.commons.io.output.ProxyWriter", "target": "org.apache.commons.io.output.ProxyWriter.write(int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest-hasScript-org.apache.commons.io.EndianUtilsTest.testSwapLong()", "source": "org.apache.commons.io.EndianUtilsTest", "target": "org.apache.commons.io.EndianUtilsTest.testSwapLong()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasScript-org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader-hasScript-org.apache.commons.io.input.ProxyReader.reset()", "source": "org.apache.commons.io.input.ProxyReader", "target": "org.apache.commons.io.input.ProxyReader.reset()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-hasScript-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasScript-org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-hasScript-org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasScript-org.apache.commons.io.FilenameUtilsTestCase.setUp()", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasScript-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter-hasScript-org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "source": "org.apache.commons.io.filefilter.DelegateFileFilter", "target": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasScript-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasVariable-org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasVariable-org.apache.commons.io.output.LockableFileWriter.lockFile", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.lockFile", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.DATA4", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.DATA4", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasVariable-org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream-hasVariable-org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasVariable-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter-hasVariable-org.apache.commons.io.filefilter.WildcardFilter.wildcards", "source": "org.apache.commons.io.filefilter.WildcardFilter", "target": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.T3", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.T3", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasVariable-org.apache.commons.io.FileSystemUtils.UNIX", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.UNIX", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasVariable-org.apache.commons.io.HexDump._lbuffer", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump._lbuffer", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasVariable-org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasVariable-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-hasVariable-org.apache.commons.io.input.CountingInputStream.count", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.CountingInputStream.count", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasVariable-org.apache.commons.io.filefilter.FileFilterUtils.svnFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.svnFilter", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasVariable-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasVariable-org.apache.commons.io.output.LockableFileWriter.LCK", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.LCK", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasVariable-org.apache.commons.io.FileUtils.ONE_GB", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.ONE_GB", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasVariable-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.T2", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.T2", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasVariable-org.apache.commons.io.output.ThresholdingOutputStream.threshold", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasVariable-org.apache.commons.io.FilenameUtilsTestCase.SEP", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.SEP", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.DATA3", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.DATA3", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasVariable-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasVariable-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-hasVariable-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasVariable-org.apache.commons.io.HexDump.EOL", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump.EOL", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasVariable-org.apache.commons.io.FileCleaner.reaper", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner.reaper", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasVariable-org.apache.commons.io.FilenameUtilsTestCase.testFile2", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile2", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasVariable-org.apache.commons.io.output.LockableFileWriterTest.lockDir", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockDir", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasVariable-org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasVariable-org.apache.commons.io.FileSystemUtils.OTHER", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.OTHER", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase-hasVariable-org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasVariable-org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasVariable-org.apache.commons.io.FileSystemUtils.OS", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.OS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasVariable-org.apache.commons.io.FileUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.T1", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.T1", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasVariable-org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest-hasVariable-org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.c_random", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.c_random", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasVariable-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasVariable-org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasVariable-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread-hasVariable-org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "source": "org.apache.commons.io.DemuxTestCase$WriterThread", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-hasVariable-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasVariable-org.apache.commons.io.output.ThresholdingOutputStream.written", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.written", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.m_threadMap", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.m_threadMap", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter-hasVariable-org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter-hasVariable-org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "source": "org.apache.commons.io.filefilter.PrefixFileFilter", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasVariable-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter-hasVariable-org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FalseFileFilter", "target": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasVariable-org.apache.commons.io.FileSystemUtils.WINDOWS", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.WINDOWS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream-hasVariable-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter-hasVariable-org.apache.commons.io.filefilter.NotFileFilter.filter", "source": "org.apache.commons.io.filefilter.NotFileFilter", "target": "org.apache.commons.io.filefilter.NotFileFilter.filter", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasVariable-org.apache.commons.io.output.ByteArrayOutputStream.count", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.count", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-hasVariable-org.apache.commons.io.IOUtilsWriteTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.IOUtilsWriteTestCase.FILE_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils-hasVariable-org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils", "target": "org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasVariable-org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasVariable-org.apache.commons.io.output.DeferredFileOutputStream.closed", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.closed", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter-hasVariable-org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasVariable-org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter-hasVariable-org.apache.commons.io.filefilter.NameFileFilter.names", "source": "org.apache.commons.io.filefilter.NameFileFilter", "target": "org.apache.commons.io.filefilter.NameFileFilter.names", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasVariable-org.apache.commons.io.HexDump._cbuffer", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump._cbuffer", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasVariable-org.apache.commons.io.IOUtils.DIR_SEPARATOR", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.DIR_SEPARATOR", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-hasVariable-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasVariable-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker-hasVariable-org.apache.commons.io.FileCleaner$Tracker.path", "source": "org.apache.commons.io.FileCleaner$Tracker", "target": "org.apache.commons.io.FileCleaner$Tracker.path", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasVariable-org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasVariable-org.apache.commons.io.FileSystemUtils.INIT_PROBLEM", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.INIT_PROBLEM", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasVariable-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils-hasVariable-org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "source": "org.apache.commons.io.CopyUtils", "target": "org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasVariable-org.apache.commons.io.FileUtils.ONE_KB", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.ONE_KB", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasVariable-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream-hasVariable-org.apache.commons.io.input.DemuxInputStream.m_streams", "source": "org.apache.commons.io.input.DemuxInputStream", "target": "org.apache.commons.io.input.DemuxInputStream.m_streams", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasVariable-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread-hasVariable-org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasVariable-org.apache.commons.io.FileCleaner.q", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner.q", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasVariable-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-hasVariable-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-hasVariable-org.apache.commons.io.output.TeeOutputStream.branch", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.TeeOutputStream.branch", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread-hasVariable-org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "source": "org.apache.commons.io.DemuxTestCase$WriterThread", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-hasVariable-org.apache.commons.io.FileCleaner.trackers", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner.trackers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils-hasVariable-org.apache.commons.io.FileSystemUtils.INSTANCE", "source": "org.apache.commons.io.FileSystemUtils", "target": "org.apache.commons.io.FileSystemUtils.INSTANCE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasVariable-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter-hasVariable-org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.TrueFileFilter", "target": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasVariable-org.apache.commons.io.output.ByteArrayOutputStream.buffers", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.buffers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream-hasVariable-org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "source": "org.apache.commons.io.output.ByteArrayOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasVariable-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-hasVariable-org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream-hasVariable-org.apache.commons.io.output.DemuxOutputStream.m_streams", "source": "org.apache.commons.io.output.DemuxOutputStream", "target": "org.apache.commons.io.output.DemuxOutputStream.m_streams", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream-hasVariable-org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded", "source": "org.apache.commons.io.output.ThresholdingOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasVariable-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter-hasVariable-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasVariable-org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasVariable-org.apache.commons.io.FileUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasVariable-org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream-hasVariable-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.m_outputMap", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.m_outputMap", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread-hasVariable-org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "source": "org.apache.commons.io.DemuxTestCase$WriterThread", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasVariable-org.apache.commons.io.HexDump._shifts", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump._shifts", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasVariable-org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest-hasVariable-org.apache.commons.io.output.DeferredFileOutputStreamTest.testString", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testString", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter-hasVariable-org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasVariable-org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase-hasVariable-org.apache.commons.io.testtools.FileBasedTestCase.testDir", "source": "org.apache.commons.io.testtools.FileBasedTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase.testDir", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasVariable-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasVariable-org.apache.commons.io.FileUtils.ONE_MB", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.ONE_MB", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-hasVariable-org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils-hasVariable-org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY", "source": "org.apache.commons.io.FileUtils", "target": "org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter-hasVariable-org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "source": "org.apache.commons.io.filefilter.SuffixFileFilter", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils-hasVariable-org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX", "source": "org.apache.commons.io.IOUtils", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump-hasVariable-org.apache.commons.io.HexDump._hexcodes", "source": "org.apache.commons.io.HexDump", "target": "org.apache.commons.io.HexDump._hexcodes", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-hasVariable-org.apache.commons.io.IOUtilsCopyTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.IOUtilsCopyTestCase.FILE_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasVariable-org.apache.commons.io.FilenameUtilsTestCase.testFile1", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile1", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasVariable-org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.DATA2", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.DATA2", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase-hasVariable-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread-hasVariable-org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasVariable-org.apache.commons.io.FileUtilsTestCase.testFile2", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-hasVariable-org.apache.commons.io.output.CountingOutputStream.count", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.CountingOutputStream.count", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-hasVariable-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-hasVariable-org.apache.commons.io.CopyUtilsTest.FILE_SIZE", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.CopyUtilsTest.FILE_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-hasVariable-org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-hasVariable-org.apache.commons.io.FileCleanerTestCase.testFile", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.FileCleanerTestCase.testFile", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.T4", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.T4", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-hasVariable-org.apache.commons.io.IOUtilsTestCase.WINDOWS", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.IOUtilsTestCase.WINDOWS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread-hasVariable-org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils-hasVariable-org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils", "target": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-hasVariable-org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-hasVariable-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-hasVariable-org.apache.commons.io.DemuxTestCase.DATA1", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase.DATA1", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest-hasVariable-org.apache.commons.io.output.LockableFileWriterTest.file", "source": "org.apache.commons.io.output.LockableFileWriterTest", "target": "org.apache.commons.io.output.LockableFileWriterTest.file", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-hasVariable-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).0-type-char", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).2-type-int", "source": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX-type-java.lang.String", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).1-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.m_demux-type-org.apache.commons.io.output.DemuxOutputStream", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "target": "org.apache.commons.io.output.DemuxOutputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).1-type-int", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int).0-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[]).0-type-byte", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).1-type-byte", "source": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).1", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte).0-type-byte", "source": "org.apache.commons.io.HexDump.dump(byte).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.skip(long).0-type-long", "source": "org.apache.commons.io.input.CountingInputStream.skip(long).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis-type-org.apache.commons.io.input.SwappedDataInputStream", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "target": "org.apache.commons.io.input.SwappedDataInputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).2-type-int", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).2-type-int", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA4-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.DATA4", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).2-type-int", "source": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.WINDOWS-type-int", "source": "org.apache.commons.io.FileSystemUtils.WINDOWS", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).0-type-byte", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtilsTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes-type-java.lang.String", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(int).0-type-int", "source": "org.apache.commons.io.output.TeeOutputStream.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).2-type-int", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).2-type-boolean", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toAscii(int).0-type-int", "source": "org.apache.commons.io.HexDumpTest.toAscii(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[]).0-type-byte", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).0-type-byte", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T4-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.T4", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).0-type-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).1-type-boolean", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).0-type-java.lang.String", "source": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).1-type-int", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).1-type-long", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).1", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).2-type-int", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long).0-type-long", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).1-type-int", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.UNIX-type-int", "source": "org.apache.commons.io.FileSystemUtils.UNIX", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[]).0-type-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[]).0", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).0-type-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).0", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.LCK-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter.LCK", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).0-type-byte", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).0-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).0-type-java.lang.String", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.EOL-type-java.lang.String", "source": "org.apache.commons.io.HexDump.EOL", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).2-type-boolean", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.FILE_SIZE-type-int", "source": "org.apache.commons.io.CopyUtilsTest.FILE_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH-type-java.lang.String", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[]).0-type-byte", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean).0-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).0-type-byte", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).2-type-org.apache.commons.io.input.DemuxInputStream", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).2", "target": "org.apache.commons.io.input.DemuxInputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).0-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).0-type-byte", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).2-type-boolean", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).0-type-int", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).0-type-byte", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE-type-int", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).2-type-boolean", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int).0-type-int", "source": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).2-type-double", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).2", "target": "double", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int).0-type-int", "source": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFile1Size-type-int", "source": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.INIT_PROBLEM-type-int", "source": "org.apache.commons.io.FileSystemUtils.INIT_PROBLEM", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[]).0-type-byte", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DIR_SEPARATOR-type-char", "source": "org.apache.commons.io.IOUtils.DIR_SEPARATOR", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).2-type-long", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).2", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).3-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).3", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).2-type-org.apache.commons.io.input.DemuxInputStream", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).2", "target": "org.apache.commons.io.input.DemuxInputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapShort(short).0-type-short", "source": "org.apache.commons.io.EndianUtils.swapShort(short).0", "target": "short", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).1-type-int", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).1-type-int", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getName(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getName(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapDouble(double).0-type-double", "source": "org.apache.commons.io.EndianUtils.swapDouble(double).0", "target": "double", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).0-type-int", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).2-type-boolean", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).2-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).1-type-int", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).0-type-byte", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).0-type-char", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.OS-type-int", "source": "org.apache.commons.io.FileSystemUtils.OS", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).1-type-int", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(int).0-type-int", "source": "org.apache.commons.io.output.ProxyWriter.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR-type-char", "source": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes-type-byte", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).2-type-short", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).2", "target": "short", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).1-type-byte", "source": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).1", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).2-type-boolean", "source": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).3-type-boolean", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).0-type-byte", "source": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).0-type-java.lang.String", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T1-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.T1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).1-type-int", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[]).0-type-byte", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).0-type-java.lang.String", "source": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE-type-int", "source": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).1-type-int", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).0-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).0-type-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.CopyUtilsTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).1-type-int", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE-type-int", "source": "org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer-type-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).0-type-byte", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE-type-java.lang.String", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).1-type-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).1", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).0-type-java.lang.String", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).0-type-char", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker.path-type-java.lang.String", "source": "org.apache.commons.io.FileCleaner$Tracker.path", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).1-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.mark(int).0-type-int", "source": "org.apache.commons.io.input.ProxyReader.mark(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).1-type-boolean", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toHex(int).0-type-int", "source": "org.apache.commons.io.HexDumpTest.toHex(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).1-type-byte", "source": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).1", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.count-type-int", "source": "org.apache.commons.io.output.CountingOutputStream.count", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).2-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).2-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).1-type-int", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR-type-char", "source": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0-type-int", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(int).0-type-int", "source": "org.apache.commons.io.output.LockableFileWriter.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.EndianUtilsTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).2-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).2", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileCleanerTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T2-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.T2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.inData-type-byte", "source": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY-type-java.lang.String", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).1-type-int", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded-type-boolean", "source": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapFloat(float).0-type-float", "source": "org.apache.commons.io.EndianUtils.swapFloat(float).0", "target": "float", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS-type-boolean", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0-type-int", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).1-type-int", "source": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush-type-boolean", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).2-type-int", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA1-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.DATA1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).2-type-long", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).2", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).2-type-int", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0-type-int", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).1-type-int", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).1-type-int", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).0-type-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).0", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.inData-type-byte", "source": "org.apache.commons.io.CopyUtilsTest.inData", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.ONE_GB-type-long", "source": "org.apache.commons.io.FileUtils.ONE_GB", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).1-type-int", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE-type-int", "source": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.SEP-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtilsTestCase.SEP", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.WINDOWS-type-boolean", "source": "org.apache.commons.io.IOUtilsTestCase.WINDOWS", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.OTHER-type-int", "source": "org.apache.commons.io.FileSystemUtils.OTHER", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).1-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).1-type-int", "source": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testFile2Size-type-int", "source": "org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).0-type-java.lang.String", "source": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux-type-org.apache.commons.io.input.DemuxInputStream", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "target": "org.apache.commons.io.input.DemuxInputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.INSTANCE-type-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtils.INSTANCE", "target": "org.apache.commons.io.FileSystemUtils", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapLong(long).0-type-long", "source": "org.apache.commons.io.EndianUtils.swapLong(long).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).1-type-float", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).1", "target": "float", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).1-type-long", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).1", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.FILE_SIZE-type-int", "source": "org.apache.commons.io.IOUtilsWriteTestCase.FILE_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).0-type-byte", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).2-type-int", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).2-type-int", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA-type-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.ONE_KB-type-long", "source": "org.apache.commons.io.FileUtils.ONE_KB", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).1-type-int", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(long).0-type-long", "source": "org.apache.commons.io.HexDump.dump(long).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).3-type-int", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).3-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).3", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump._shifts-type-int", "source": "org.apache.commons.io.HexDump._shifts", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).1-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.HexDumpTest.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS-type-boolean", "source": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).0-type-char", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean).0-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).0-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).0-type-java.lang.String", "source": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).0-type-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).0", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).1-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY-type-java.lang.String", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.LINE_SEPARATOR-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose-type-boolean", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int).0-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).2-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[]).0-type-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[]).0", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.filter-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.NotFileFilter.filter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).0-type-int", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).2-type-byte", "source": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).2", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).1-type-int", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).1-type-short", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).1", "target": "short", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.mark(int).0-type-int", "source": "org.apache.commons.io.input.ProxyInputStream.mark(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).0-type-java.lang.String", "source": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters-type-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[]).0-type-byte", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.count-type-int", "source": "org.apache.commons.io.input.CountingInputStream.count", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(int).0-type-int", "source": "org.apache.commons.io.output.ProxyOutputStream.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.write(int).0-type-int", "source": "org.apache.commons.io.output.DemuxOutputStream.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).2-type-int", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).1-type-long", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).1", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).0-type-byte", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).2-type-int", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).2-type-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).1-type-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).1", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS-type-char", "source": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.closed-type-boolean", "source": "org.apache.commons.io.output.DeferredFileOutputStream.closed", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).1-type-int", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA3-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.DATA3", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE-type-int", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[]).0-type-byte", "source": "org.apache.commons.io.IOUtils.toString(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.inData-type-byte", "source": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).1-type-int", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).1-type-boolean", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).2-type-org.apache.commons.io.output.DemuxOutputStream", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).2", "target": "org.apache.commons.io.output.DemuxOutputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[]).0-type-char", "source": "org.apache.commons.io.input.ProxyReader.read(char[]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isSeparator(char).0-type-char", "source": "org.apache.commons.io.FilenameUtils.isSeparator(char).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).0-type-char", "source": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).1-type-boolean", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump._hexcodes-type-char", "source": "org.apache.commons.io.HexDump._hexcodes", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.bytes-type-byte", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.skip(long).0-type-long", "source": "org.apache.commons.io.input.ProxyInputStream.skip(long).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).1-type-int", "source": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).3-type-org.apache.commons.io.output.DemuxOutputStream", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).3", "target": "org.apache.commons.io.output.DemuxOutputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).2-type-boolean", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).0-type-byte", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).2-type-boolean", "source": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.skip(long).0-type-long", "source": "org.apache.commons.io.input.ProxyReader.skip(long).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).1-type-int", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).3-type-boolean", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.svnFilter-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.svnFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.ONE_MB-type-long", "source": "org.apache.commons.io.FileUtils.ONE_MB", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(int).0-type-int", "source": "org.apache.commons.io.output.CountingOutputStream.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[]).0-type-byte", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).0-type-char", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.m_data-type-byte", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.DATA2-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.DATA2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).1-type-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).1", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.written-type-long", "source": "org.apache.commons.io.output.ThresholdingOutputStream.written", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).1-type-boolean", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[]).0-type-char", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).2-type-int", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.threshold-type-int", "source": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapInteger(int).0-type-int", "source": "org.apache.commons.io.EndianUtils.swapInteger(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).2-type-boolean", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream(int).0-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).1-type-int", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.HexDumpTest(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).0-type-char", "source": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testFile1Size-type-int", "source": "org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream(int).0-type-int", "source": "org.apache.commons.io.output.ThresholdingOutputStream(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).1-type-int", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).1-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).1-type-int", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).2-type-int", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).0-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR-type-char", "source": "org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.names-type-java.lang.String", "source": "org.apache.commons.io.filefilter.NameFileFilter.names", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).1-type-boolean", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR-type-char", "source": "org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).1-type-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).1", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[]).0-type-byte", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).2-type-boolean", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long).0-type-long", "source": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR-type-char", "source": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).1-type-byte", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).1", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2-type-boolean", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.count-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.count", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).2-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).2-type-boolean", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).0-type-byte", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFile2Size-type-int", "source": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).1-type-int", "source": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(int).0-type-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).1-type-boolean", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).1-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.wildcards-type-java.lang.String", "source": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).0-type-byte", "source": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).0-type-byte", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).3-type-int", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH-type-java.lang.String", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).0-type-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).0-type-byte", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).0", "target": "byte", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.T3-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.T3", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE-type-int", "source": "org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(int).0-type-int", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).1-type-java.lang.String", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).1-type-int", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[]).0-type-char", "source": "org.apache.commons.io.output.ProxyWriter.write(char[]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(int).0-type-int", "source": "org.apache.commons.io.output.NullOutputStream.write(int).0", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream-type-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).2-type-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).2", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).0-type-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testString-type-java.lang.String", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testString", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.FILE_SIZE-type-int", "source": "org.apache.commons.io.IOUtilsCopyTestCase.FILE_SIZE", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).2-type-float", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).2", "target": "float", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).2-type-int", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).1-type-double", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).1", "target": "double", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).1-type-int", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX-type-char", "source": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[]).0-type-java.lang.String", "source": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).1-type-long", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).1", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).1-type-java.lang.String", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY-type-int", "source": "org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes-type-java.lang.String", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String).0-type-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters-type-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).1-type-long", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).1", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).1-type-int", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).3-type-java.lang.String", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).3", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()-invokes-org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()", "target": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSymmetry()-invokes-org.apache.commons.io.EndianUtils.swapFloat(float)", "source": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "target": "org.apache.commons.io.EndianUtils.swapFloat(float)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)-invokes-org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "source": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadLines()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testReadLines()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)-invokes-org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.tearDown()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.tearDown()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.tearDown()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.IOUtilsTestCase.tearDown()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()-invokes-org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()-invokes-org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()", "target": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 138, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)-invokes-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.testDump()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.HexDumpTest.testDump()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])-invokes-org.apache.commons.io.output.PackageTestSuite.suite()", "source": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.output.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()-invokes-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileCleanerTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()-invokes-org.apache.commons.io.input.DemuxInputStream.read()", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "target": "org.apache.commons.io.input.DemuxInputStream.read()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()-invokes-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()-invokes-org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "target": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()-invokes-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()-invokes-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)-invokes-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()-invokes-org.apache.commons.io.output.CountingOutputStream.resetCount()", "source": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "target": "org.apache.commons.io.output.CountingOutputStream.resetCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()-invokes-org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()", "target": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.read()-invokes-org.apache.commons.io.input.DemuxInputStream.getStream()", "source": "org.apache.commons.io.input.DemuxInputStream.read()", "target": "org.apache.commons.io.input.DemuxInputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles4()-invokes-org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "source": "org.apache.commons.io.FileUtilsTestCase.testToFiles4()", "target": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadLines()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "source": "org.apache.commons.io.FileUtilsTestCase.testReadLines()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()-invokes-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()-invokes-org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[])-invokes-org.apache.commons.io.PackageTestSuite.suite()", "source": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.getData()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()-invokes-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-invokes-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()-invokes-org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)-invokes-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.run()-invokes-org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "target": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-invokes-org.apache.commons.io.DemuxTestCase.doJoin()", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.doJoin()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)-invokes-org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()", "source": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()-invokes-org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()-invokes-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 15, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()-invokes-org.apache.commons.io.output.TeeOutputStream.write(int)", "source": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "target": "org.apache.commons.io.output.TeeOutputStream.write(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[])-invokes-org.apache.commons.io.input.ProxyInputStream.read(byte[])", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)-invokes-org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()-invokes-org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()-invokes-org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()", "target": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "label": "invokes", "properties": {"weight": 30, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()-invokes-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "label": "invokes", "properties": {"weight": 31, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "source": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[])", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()-invokes-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-invokes-org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.isSeparator(char)", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()-invokes-org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()", "target": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()-invokes-org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()", "target": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 28, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()-invokes-org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()", "target": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)-invokes-org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "source": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "target": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()-invokes-org.apache.commons.io.FileUtils.toURLs(java.io.File[])", "source": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()", "target": "org.apache.commons.io.FileUtils.toURLs(java.io.File[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])-invokes-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "source": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()-invokes-org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()", "target": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()-invokes-org.apache.commons.io.FileCleaner.getTrackCount()", "source": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()", "target": "org.apache.commons.io.FileCleaner.getTrackCount()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testTouch()-invokes-org.apache.commons.io.FileUtils.touch(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testTouch()", "target": "org.apache.commons.io.FileUtils.touch(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)-invokes-org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()-invokes-org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.CopyUtilsTest(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()-invokes-org.apache.commons.io.output.LockableFileWriter.close()", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "target": "org.apache.commons.io.output.LockableFileWriter.close()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.setUp()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()-invokes-org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "target": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()-invokes-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.testDump()-invokes-org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "source": "org.apache.commons.io.HexDumpTest.testDump()", "target": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "label": "invokes", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)-invokes-org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "source": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])-invokes-org.apache.commons.io.AllIOTestSuite.suite()", "source": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.AllIOTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-invokes-org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)-invokes-org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "target": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-invokes-org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File)-invokes-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.FileCleanerTestCase.suite()", "source": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileCleanerTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()-invokes-org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()-invokes-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()-invokes-org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "target": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetName()-invokes-org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetName()", "target": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "label": "invokes", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 9, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapInteger()-invokes-org.apache.commons.io.EndianUtils.swapInteger(int)", "source": "org.apache.commons.io.EndianUtilsTest.testSwapInteger()", "target": "org.apache.commons.io.EndianUtils.swapInteger(int)", "label": "invokes", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()-invokes-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()-invokes-org.apache.commons.io.IOUtils.toString(byte[])", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "target": "org.apache.commons.io.IOUtils.toString(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)-invokes-org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "source": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-invokes-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()-invokes-org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()", "target": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)-invokes-org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)-invokes-org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "source": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "target": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()-invokes-org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()-invokes-org.apache.commons.io.IOUtils.toString(java.io.Reader)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "target": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)-invokes-org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()-invokes-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)-invokes-org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()-invokes-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()-invokes-org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)-invokes-org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()-invokes-org.apache.commons.io.input.CountingInputStream.read()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "target": "org.apache.commons.io.input.CountingInputStream.read()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()-invokes-org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.FileSystemUtilsTestCase.suite()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileSystemUtilsTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.testDump()-invokes-org.apache.commons.io.HexDumpTest.toAscii(int)", "source": "org.apache.commons.io.HexDumpTest.testDump()", "target": "org.apache.commons.io.HexDumpTest.toAscii(int)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)-invokes-org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.suite()-invokes-org.apache.commons.io.output.PackageTestSuite.suite()", "source": "org.apache.commons.io.AllIOTestSuite.suite()", "target": "org.apache.commons.io.output.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()-invokes-org.apache.commons.io.FileUtils.touch(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()", "target": "org.apache.commons.io.FileUtils.touch(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)-invokes-org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)-invokes-org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "target": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)-invokes-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.close()-invokes-org.apache.commons.io.input.DemuxInputStream.getStream()", "source": "org.apache.commons.io.input.DemuxInputStream.close()", "target": "org.apache.commons.io.input.DemuxInputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()-invokes-org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)-invokes-org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "source": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()-invokes-org.apache.commons.io.input.CountingInputStream.skip(long)", "source": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "target": "org.apache.commons.io.input.CountingInputStream.skip(long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[])-invokes-org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[])", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapFloat(float)-invokes-org.apache.commons.io.EndianUtils.swapInteger(int)", "source": "org.apache.commons.io.EndianUtils.swapFloat(float)", "target": "org.apache.commons.io.EndianUtils.swapInteger(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()-invokes-org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "source": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "target": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()-invokes-org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.touch(java.io.File)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.touch(java.io.File)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter()-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.AndFileFilter()", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readInt()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readInt()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapShort()-invokes-org.apache.commons.io.EndianUtils.swapShort(short)", "source": "org.apache.commons.io.EndianUtilsTest.testSwapShort()", "target": "org.apache.commons.io.EndianUtils.swapShort(short)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-invokes-org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()-invokes-org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()", "target": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 26, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()-invokes-org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "target": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)-invokes-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()-invokes-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()-invokes-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "source": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()-invokes-org.apache.commons.io.input.CountingInputStream.resetCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "target": "org.apache.commons.io.input.CountingInputStream.resetCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()-invokes-org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()", "target": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "label": "invokes", "properties": {"weight": 28, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()-invokes-org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.flush()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "source": "org.apache.commons.io.output.ThresholdingOutputStream.flush()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()-invokes-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.Reader)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)-invokes-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readChar()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readShort()", "source": "org.apache.commons.io.input.SwappedDataInputStream.readChar()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readShort()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()-invokes-org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapFloat()-invokes-org.apache.commons.io.EndianUtils.swapFloat(float)", "source": "org.apache.commons.io.EndianUtilsTest.testSwapFloat()", "target": "org.apache.commons.io.EndianUtils.swapFloat(float)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()-invokes-org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "target": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.reset()", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()-invokes-org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "target": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)-invokes-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()-invokes-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()-invokes-org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)-invokes-org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)-invokes-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)-invokes-org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()-invokes-org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()", "target": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadFileToString()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testReadFileToString()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.FilenameUtilsTestCase.suite()", "source": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FilenameUtilsTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()-invokes-org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()", "target": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapLong()-invokes-org.apache.commons.io.EndianUtils.swapLong(long)", "source": "org.apache.commons.io.EndianUtilsTest.testSwapLong()", "target": "org.apache.commons.io.EndianUtils.swapLong(long)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readShort()-invokes-org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readShort()", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)-invokes-org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()-invokes-org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()", "target": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)-invokes-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])-invokes-org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "target": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readLong()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readLong()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()-invokes-org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()", "target": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()-invokes-org.apache.commons.io.FileUtils.touch(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()", "target": "org.apache.commons.io.FileUtils.touch(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.getData()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySize()-invokes-org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "source": "org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySize()", "target": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.reset()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "source": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readLine()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readLine()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEquals()-invokes-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testEquals()", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[])-invokes-org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[])", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)-invokes-org.apache.commons.io.HexDump.dump(byte)", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "target": "org.apache.commons.io.HexDump.dump(byte)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.suite()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()-invokes-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles1()-invokes-org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "source": "org.apache.commons.io.FileUtilsTestCase.testToFiles1()", "target": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)-invokes-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()-invokes-org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()", "target": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()-invokes-org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()", "target": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "label": "invokes", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)-invokes-org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "source": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)-invokes-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)-invokes-org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)-invokes-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()-invokes-org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "target": "org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testNormalize()-invokes-org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testNormalize()", "target": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "label": "invokes", "properties": {"weight": 138, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile1()-invokes-org.apache.commons.io.FileUtils.toFile(java.net.URL)", "source": "org.apache.commons.io.FileUtilsTestCase.testToFile1()", "target": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testConcat()-invokes-org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testConcat()", "target": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 29, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()-invokes-org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "source": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "source": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()-invokes-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)-invokes-org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-invokes-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-invokes-org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-invokes-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.close()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "source": "org.apache.commons.io.output.ThresholdingOutputStream.close()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)-invokes-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)-invokes-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()-invokes-org.apache.commons.io.output.ProxyOutputStream.close()", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()", "target": "org.apache.commons.io.output.ProxyOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()-invokes-org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.testDump()-invokes-org.apache.commons.io.HexDumpTest.toHex(int)", "source": "org.apache.commons.io.HexDumpTest.testDump()", "target": "org.apache.commons.io.HexDumpTest.toHex(int)", "label": "invokes", "properties": {"weight": 12, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.flush()-invokes-org.apache.commons.io.output.ProxyOutputStream.flush()", "source": "org.apache.commons.io.output.TeeOutputStream.flush()", "target": "org.apache.commons.io.output.ProxyOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()-invokes-org.apache.commons.io.input.CountingInputStream.read()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()", "target": "org.apache.commons.io.input.CountingInputStream.read()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()-invokes-org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "source": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()", "target": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.suite()-invokes-org.apache.commons.io.filefilter.PackageTestSuite.suite()", "source": "org.apache.commons.io.AllIOTestSuite.suite()", "target": "org.apache.commons.io.filefilter.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "source": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-invokes-org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()-invokes-org.apache.commons.io.output.CountingOutputStream.getCount()", "source": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "target": "org.apache.commons.io.output.CountingOutputStream.getCount()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readByte()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readByte()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-invokes-org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()-invokes-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readLong()-invokes-org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readLong()", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)-invokes-org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "source": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-invokes-org.apache.commons.io.DemuxTestCase.doStart()", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.doStart()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-invokes-org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()-invokes-org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "source": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "target": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()-invokes-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()-invokes-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)-invokes-org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)-invokes-org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.IOUtilsTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)-invokes-org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)-invokes-org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)-invokes-org.apache.commons.io.output.DemuxOutputStream.getStream()", "source": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.close()-invokes-org.apache.commons.io.output.ProxyOutputStream.close()", "source": "org.apache.commons.io.output.TeeOutputStream.close()", "target": "org.apache.commons.io.output.ProxyOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()-invokes-org.apache.commons.io.output.ProxyOutputStream.flush()", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "target": "org.apache.commons.io.output.ProxyOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()-invokes-org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()-invokes-org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()", "target": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.FileUtilsTestCase.suite()", "source": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileUtilsTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)-invokes-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()-invokes-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readByte()", "source": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readByte()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetPath()-invokes-org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetPath()", "target": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "label": "invokes", "properties": {"weight": 28, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.getData()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()-invokes-org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()-invokes-org.apache.commons.io.FileUtils.touch(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "target": "org.apache.commons.io.FileUtils.touch(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()-invokes-org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(int)-invokes-org.apache.commons.io.output.ProxyOutputStream.write(int)", "source": "org.apache.commons.io.output.TeeOutputStream.write(int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()-invokes-org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testForceMkdir()", "target": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()-invokes-org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)-invokes-org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "source": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "target": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()-invokes-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()-invokes-org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()", "target": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()-invokes-org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)-invokes-org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "source": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadLines()-invokes-org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testReadLines()", "target": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()-invokes-org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()", "target": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)-invokes-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()-invokes-org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()-invokes-org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()-invokes-org.apache.commons.io.IOUtils.toString(java.io.Reader)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "target": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSymmetry()-invokes-org.apache.commons.io.EndianUtils.swapLong(long)", "source": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "target": "org.apache.commons.io.EndianUtils.swapLong(long)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.suite()-invokes-org.apache.commons.io.PackageTestSuite.suite()", "source": "org.apache.commons.io.AllIOTestSuite.suite()", "target": "org.apache.commons.io.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()-invokes-org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()", "target": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-invokes-org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()-invokes-org.apache.commons.io.IOUtils.toString(java.io.Reader)", "source": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()", "target": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)-invokes-org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()-invokes-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest.testNull()-invokes-org.apache.commons.io.output.NullOutputStream.write(int)", "source": "org.apache.commons.io.output.NullOutputStreamTest.testNull()", "target": "org.apache.commons.io.output.NullOutputStream.write(int)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readShort()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readShort()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()-invokes-org.apache.commons.io.output.TeeOutputStream.write(byte[])", "source": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)-invokes-org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "source": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "target": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()-invokes-org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()", "target": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 13, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()-invokes-org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()", "target": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.tearDown()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FilenameUtilsTestCase.tearDown()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()-invokes-org.apache.commons.io.output.CountingOutputStream.write(byte[])", "source": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.suite()-invokes-org.apache.commons.io.input.PackageTestSuite.suite()", "source": "org.apache.commons.io.AllIOTestSuite.suite()", "target": "org.apache.commons.io.input.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.skip(long)-invokes-org.apache.commons.io.input.ProxyInputStream.skip(long)", "source": "org.apache.commons.io.input.CountingInputStream.skip(long)", "target": "org.apache.commons.io.input.ProxyInputStream.skip(long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()-invokes-org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "target": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)-invokes-org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])-invokes-org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "target": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "source": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)-invokes-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()-invokes-org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.close()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.flush()", "source": "org.apache.commons.io.output.ThresholdingOutputStream.close()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()-invokes-org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()-invokes-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()-invokes-org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()", "target": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()-invokes-org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()", "target": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 15, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.flush()-invokes-org.apache.commons.io.output.DemuxOutputStream.getStream()", "source": "org.apache.commons.io.output.DemuxOutputStream.flush()", "target": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])-invokes-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)-invokes-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)-invokes-org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()-invokes-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()-invokes-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()-invokes-org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()-invokes-org.apache.commons.io.filefilter.FalseFileFilter()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()", "target": "org.apache.commons.io.filefilter.FalseFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)-invokes-org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)-invokes-org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "source": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles2()-invokes-org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "source": "org.apache.commons.io.FileUtilsTestCase.testToFiles2()", "target": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()-invokes-org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()-invokes-org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)-invokes-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()-invokes-org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()-invokes-org.apache.commons.io.IOUtils.toString(java.io.Reader)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "target": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter()-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.OrFileFilter()", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])-invokes-org.apache.commons.io.filefilter.PackageTestSuite.suite()", "source": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(int)-invokes-org.apache.commons.io.output.ProxyOutputStream.write(int)", "source": "org.apache.commons.io.output.CountingOutputStream.write(int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSymmetry()-invokes-org.apache.commons.io.EndianUtils.swapDouble(double)", "source": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "target": "org.apache.commons.io.EndianUtils.swapDouble(double)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)-invokes-org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])-invokes-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)-invokes-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSymmetry()-invokes-org.apache.commons.io.EndianUtils.swapInteger(int)", "source": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "target": "org.apache.commons.io.EndianUtils.swapInteger(int)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()-invokes-org.apache.commons.io.filefilter.TrueFileFilter()", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()", "target": "org.apache.commons.io.filefilter.TrueFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.tearDown()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FilenameUtilsTestCase.tearDown()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()-invokes-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()-invokes-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()-invokes-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "source": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "label": "invokes", "properties": {"weight": 30, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-invokes-org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readChar()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readChar()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-invokes-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)-invokes-org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()-invokes-org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()", "target": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-invokes-org.apache.commons.io.output.LockableFileWriter.createLock()", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter.createLock()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSymmetry()-invokes-org.apache.commons.io.EndianUtils.swapShort(short)", "source": "org.apache.commons.io.EndianUtilsTest.testSymmetry()", "target": "org.apache.commons.io.EndianUtils.swapShort(short)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest.testNull()-invokes-org.apache.commons.io.output.NullOutputStream.write(byte[])", "source": "org.apache.commons.io.output.NullOutputStreamTest.testNull()", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()-invokes-org.apache.commons.io.output.CountingOutputStream.write(int)", "source": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "target": "org.apache.commons.io.output.CountingOutputStream.write(int)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-invokes-org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()-invokes-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])-invokes-org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "target": "org.apache.commons.io.output.ThresholdingOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])-invokes-org.apache.commons.io.input.PackageTestSuite.suite()", "source": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.input.PackageTestSuite.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile2()-invokes-org.apache.commons.io.FileUtils.toFile(java.net.URL)", "source": "org.apache.commons.io.FileUtilsTestCase.testToFile2()", "target": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testContentEquals()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()-invokes-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "label": "invokes", "properties": {"weight": 30, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-invokes-org.apache.commons.io.DemuxTestCase.doJoin()", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.doJoin()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)-invokes-org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "source": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()-invokes-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()-invokes-org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()-invokes-org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)-invokes-org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "source": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "target": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()-invokes-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)-invokes-org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testToURLs1()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapDouble(double)-invokes-org.apache.commons.io.EndianUtils.swapLong(long)", "source": "org.apache.commons.io.EndianUtils.swapDouble(double)", "target": "org.apache.commons.io.EndianUtils.swapLong(long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()-invokes-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()-invokes-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()-invokes-org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()", "target": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "label": "invokes", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])-invokes-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)-invokes-org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()-invokes-org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)-invokes-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()-invokes-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()-invokes-org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadLines()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testReadLines()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.getData()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()-invokes-org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "target": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()-invokes-org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.close()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()-invokes-org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()-invokes-org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()", "target": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 13, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()-invokes-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()-invokes-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 24, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()-invokes-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFiles3()-invokes-org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "source": "org.apache.commons.io.FileUtilsTestCase.testToFiles3()", "target": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()-invokes-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testReadFileToString()-invokes-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testReadFileToString()", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "source": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testTouch()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testTouch()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile4()-invokes-org.apache.commons.io.FileUtils.toFile(java.net.URL)", "source": "org.apache.commons.io.FileUtilsTestCase.testToFile4()", "target": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()-invokes-org.apache.commons.io.input.CountingInputStream.read()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()", "target": "org.apache.commons.io.input.CountingInputStream.read()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()-invokes-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "label": "invokes", "properties": {"weight": 32, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-invokes-org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)-invokes-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.tearDown()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.tearDown()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.close()-invokes-org.apache.commons.io.output.DemuxOutputStream.getStream()", "source": "org.apache.commons.io.output.DemuxOutputStream.close()", "target": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.write(int)-invokes-org.apache.commons.io.output.DemuxOutputStream.getStream()", "source": "org.apache.commons.io.output.DemuxOutputStream.write(int)", "target": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.IOUtilsCopyTestCase.suite()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.IOUtilsCopyTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()-invokes-org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)-invokes-org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()-invokes-org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()", "target": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()-invokes-org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "source": "org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getData()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read()-invokes-org.apache.commons.io.input.ProxyInputStream.read()", "source": "org.apache.commons.io.input.CountingInputStream.read()", "target": "org.apache.commons.io.input.ProxyInputStream.read()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-invokes-org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.FileUtilsTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()-invokes-org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "target": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)-invokes-org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-invokes-org.apache.commons.io.output.ThresholdingOutputStream(int)", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.ThresholdingOutputStream(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)-invokes-org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "source": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "target": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()-invokes-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readInt()-invokes-org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "source": "org.apache.commons.io.input.SwappedDataInputStream.readInt()", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()-invokes-org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "source": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()", "target": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "label": "invokes", "properties": {"weight": 12, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()-invokes-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testFileUtils()", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()-invokes-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()-invokes-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])-invokes-org.apache.commons.io.FileUtils.toFile(java.net.URL)", "source": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "target": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])-invokes-org.apache.commons.io.CopyUtilsTest.suite()", "source": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])", "target": "org.apache.commons.io.CopyUtilsTest.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream(int)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()-invokes-org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "source": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()-invokes-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()-invokes-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)-invokes-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)-invokes-org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[])", "source": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()-invokes-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-invokes-org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.tearDown()-invokes-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "source": "org.apache.commons.io.FileCleanerTestCase.tearDown()", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-invokes-org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()-invokes-org.apache.commons.io.input.CountingInputStream.getCount()", "source": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "target": "org.apache.commons.io.input.CountingInputStream.getCount()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)-invokes-org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "source": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.isSeparator(char)", "source": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()-invokes-org.apache.commons.io.FileSystemUtils()", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()", "target": "org.apache.commons.io.FileSystemUtils()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)-invokes-org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest.testNull()-invokes-org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "source": "org.apache.commons.io.output.NullOutputStreamTest.testNull()", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-invokes-org.apache.commons.io.output.DeferredFileOutputStream.close()", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.IOUtilsTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)-invokes-org.apache.commons.io.HexDump.dump(long)", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "target": "org.apache.commons.io.HexDump.dump(long)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)-invokes-org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.run()-invokes-org.apache.commons.io.output.DemuxOutputStream.write(int)", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "target": "org.apache.commons.io.output.DemuxOutputStream.write(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()-invokes-org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testSwapDouble()-invokes-org.apache.commons.io.EndianUtils.swapDouble(double)", "source": "org.apache.commons.io.EndianUtilsTest.testSwapDouble()", "target": "org.apache.commons.io.EndianUtils.swapDouble(double)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testToFile3()-invokes-org.apache.commons.io.FileUtils.toFile(java.net.URL)", "source": "org.apache.commons.io.FileUtilsTestCase.testToFile3()", "target": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.tearDown()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase.tearDown()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()-invokes-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.size()", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()-invokes-org.apache.commons.io.IOUtils.toInputStream(java.lang.String)", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()", "target": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWaitFor()-invokes-org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "source": "org.apache.commons.io.FileUtilsTestCase.testWaitFor()", "target": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])-invokes-org.apache.commons.io.IOUtilsWriteTestCase.suite()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.IOUtilsWriteTestCase.suite()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toString()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)-invokes-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)-invokes-org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "source": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()-invokes-org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()", "target": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()-invokes-org.apache.commons.io.output.LockableFileWriter.close()", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "target": "org.apache.commons.io.output.LockableFileWriter.close()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter()-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter()", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()-invokes-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 13, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[])", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)-invokes-org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "source": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()-invokes-org.apache.commons.io.FileUtils.touch(java.io.File)", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.setUp()", "target": "org.apache.commons.io.FileUtils.touch(java.io.File)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)-invokes-org.apache.commons.io.input.DemuxInputStream.getStream()", "source": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "target": "org.apache.commons.io.input.DemuxInputStream.getStream()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()-invokes-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)-invokes-org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "source": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)-invokes-org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "target": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()-invokes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "source": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()-invokes-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)-invokes-org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()-invokes-org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()-invokes-org.apache.commons.io.input.CountingInputStream.read(byte[])", "source": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()-invokes-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()-invokes-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readInt()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readInt()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-invokes-org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)-invokes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-invokes-org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-invokes-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-invokes-org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()-invokes-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)-invokes-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "source": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()-invokes-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)-invokes-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()-invokes-org.apache.commons.io.input.SwappedDataInputStream.readUTF()", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()", "target": "org.apache.commons.io.input.SwappedDataInputStream.readUTF()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()-invokes-org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "source": "org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.tearDown()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileCleanerTestCase.tearDown()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-invokes-org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()-invokes-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)-invokes-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-invokes-org.apache.commons.io.DemuxTestCase.doStart()", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.doStart()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()-invokes-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-invokes-org.apache.commons.io.filefilter.AbstractFileFilter()", "source": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-invokes-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()-invokes-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()-returnType-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)-returnType-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.size()-returnType-int", "source": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)-returnType-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase(java.lang.String)-returnType-org.apache.commons.io.DemuxTestCase", "source": "org.apache.commons.io.DemuxTestCase(java.lang.String)", "target": "org.apache.commons.io.DemuxTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)-returnType-int", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-returnType-long", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readChar()-returnType-char", "source": "org.apache.commons.io.input.SwappedDataInputStream.readChar()", "target": "char", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter()-returnType-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.AbstractFileFilter()", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter()-returnType-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter()", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)-returnType-org.apache.commons.io.input.ProxyInputStream", "source": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.ProxyInputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.getCount()-returnType-int", "source": "org.apache.commons.io.input.CountingInputStream.getCount()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils()-returnType-org.apache.commons.io.IOUtils", "source": "org.apache.commons.io.IOUtils()", "target": "org.apache.commons.io.IOUtils", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-returnType-org.apache.commons.io.DemuxTestCase$WriterThread", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readShort()-returnType-short", "source": "org.apache.commons.io.input.SwappedDataInputStream.readShort()", "target": "short", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)-returnType-org.apache.commons.io.filefilter.OrFileFilterTestCase", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)-returnType-org.apache.commons.io.filefilter.FileFilterTestCase", "source": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.FileFilterTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)-returnType-int", "source": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.resetCount()-returnType-int", "source": "org.apache.commons.io.input.CountingInputStream.resetCount()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()-returnType-java.lang.String", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()-returnType-long", "source": "org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-returnType-boolean", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream()-returnType-org.apache.commons.io.input.DemuxInputStream", "source": "org.apache.commons.io.input.DemuxInputStream()", "target": "org.apache.commons.io.input.DemuxInputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream(int)-returnType-org.apache.commons.io.output.ThresholdingOutputStream", "source": "org.apache.commons.io.output.ThresholdingOutputStream(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter()-returnType-org.apache.commons.io.filefilter.TrueFileFilter", "source": "org.apache.commons.io.filefilter.TrueFileFilter()", "target": "org.apache.commons.io.filefilter.TrueFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream()-returnType-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.ByteArrayOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter()-returnType-org.apache.commons.io.filefilter.DirectoryFileFilter", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter()", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)-returnType-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapShort(short)-returnType-short", "source": "org.apache.commons.io.EndianUtils.swapShort(short)", "target": "short", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read()-returnType-int", "source": "org.apache.commons.io.input.ProxyReader.read()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()-returnType-int", "source": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter()-returnType-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter()", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream(int)-returnType-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.ByteArrayOutputStream(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[])-returnType-int", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()-returnType-java.lang.String", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()-returnType-int", "source": "org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])-returnType-org.apache.commons.io.filefilter.WildcardFilter", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.WildcardFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite()-returnType-org.apache.commons.io.output.PackageTestSuite", "source": "org.apache.commons.io.output.PackageTestSuite()", "target": "org.apache.commons.io.output.PackageTestSuite", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()-returnType-boolean", "source": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()-returnType-org.apache.commons.io.filefilter.ConditionalFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)-returnType-byte", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)-returnType-org.apache.commons.io.input.ClassLoaderObjectInputStream", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)-returnType-long", "source": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-returnType-boolean", "source": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapInteger(int)-returnType-int", "source": "org.apache.commons.io.EndianUtils.swapInteger(int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)-returnType-boolean", "source": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)-returnType-byte", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)-returnType-org.apache.commons.io.filefilter.AndFileFilterTestCase", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest(java.lang.String)-returnType-org.apache.commons.io.HexDumpTest", "source": "org.apache.commons.io.HexDumpTest(java.lang.String)", "target": "org.apache.commons.io.HexDumpTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)-returnType-org.apache.commons.io.FileCleanerTestCase", "source": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "target": "org.apache.commons.io.FileCleanerTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader(java.io.Reader)-returnType-org.apache.commons.io.input.ProxyReader", "source": "org.apache.commons.io.input.ProxyReader(java.io.Reader)", "target": "org.apache.commons.io.input.ProxyReader", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)-returnType-org.apache.commons.io.input.SwappedDataInputStreamTest", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)-returnType-boolean", "source": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils()-returnType-org.apache.commons.io.FileUtils", "source": "org.apache.commons.io.FileUtils()", "target": "org.apache.commons.io.FileUtils", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)-returnType-org.apache.commons.io.filefilter.DelegateFileFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump()-returnType-org.apache.commons.io.HexDump", "source": "org.apache.commons.io.HexDump()", "target": "org.apache.commons.io.HexDump", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)-returnType-long", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)-returnType-long", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)-returnType-int", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)-returnType-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)-returnType-org.apache.commons.io.output.TeeOutputStreamTest", "source": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.TeeOutputStreamTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)-returnType-org.apache.commons.io.filefilter.SuffixFileFilter", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)-returnType-org.apache.commons.io.FileCleaner$Tracker", "source": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapDouble(double)-returnType-double", "source": "org.apache.commons.io.EndianUtils.swapDouble(double)", "target": "double", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)-returnType-int", "source": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)-returnType-org.apache.commons.io.DemuxTestCase$ReaderThread", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)-returnType-int", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner()-returnType-org.apache.commons.io.FileCleaner", "source": "org.apache.commons.io.FileCleaner()", "target": "org.apache.commons.io.FileCleaner", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)-returnType-short", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "target": "short", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read()-returnType-int", "source": "org.apache.commons.io.input.CountingInputStream.read()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)-returnType-char", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "target": "char", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()-returnType-java.lang.String", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)-returnType-org.apache.commons.io.FileCleaner$Tracker", "source": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)-returnType-org.apache.commons.io.IOUtilsTestCase", "source": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.IOUtilsTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.skip(long)-returnType-long", "source": "org.apache.commons.io.input.ProxyReader.skip(long)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()-returnType-float", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFloat()", "target": "float", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)-returnType-long", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.getTrackCount()-returnType-int", "source": "org.apache.commons.io.FileCleaner.getTrackCount()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite()-returnType-org.apache.commons.io.filefilter.PackageTestSuite", "source": "org.apache.commons.io.filefilter.PackageTestSuite()", "target": "org.apache.commons.io.filefilter.PackageTestSuite", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readInt()-returnType-int", "source": "org.apache.commons.io.input.SwappedDataInputStream.readInt()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()-returnType-boolean", "source": "org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read()-returnType-int", "source": "org.apache.commons.io.input.ProxyInputStream.read()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite()-returnType-org.apache.commons.io.AllIOTestSuite", "source": "org.apache.commons.io.AllIOTestSuite()", "target": "org.apache.commons.io.AllIOTestSuite", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()-returnType-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)-returnType-org.apache.commons.io.output.DeferredFileOutputStreamTest", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)-returnType-org.apache.commons.io.IOUtilsCopyTestCase", "source": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)", "target": "org.apache.commons.io.IOUtilsCopyTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])-returnType-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapLong(long)-returnType-long", "source": "org.apache.commons.io.EndianUtils.swapLong(long)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)-returnType-boolean", "source": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils()-returnType-org.apache.commons.io.filefilter.FileFilterUtils", "source": "org.apache.commons.io.filefilter.FileFilterUtils()", "target": "org.apache.commons.io.filefilter.FileFilterUtils", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)-returnType-byte", "source": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)-returnType-org.apache.commons.io.filefilter.WildcardFilter", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.WildcardFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)-returnType-double", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "target": "double", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)-returnType-java.lang.String", "source": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()-returnType-java.lang.String", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)-returnType-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.CountingInputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)-returnType-int", "source": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])-returnType-int", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readUTF()-returnType-java.lang.String", "source": "org.apache.commons.io.input.SwappedDataInputStream.readUTF()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)-returnType-byte", "source": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()-returnType-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.read()-returnType-int", "source": "org.apache.commons.io.input.DemuxInputStream.read()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.ready()-returnType-boolean", "source": "org.apache.commons.io.input.ProxyReader.ready()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)-returnType-org.apache.commons.io.FileSystemUtilsTestCase", "source": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtilsTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)-returnType-long", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker.delete()-returnType-boolean", "source": "org.apache.commons.io.FileCleaner$Tracker.delete()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)-returnType-org.apache.commons.io.FilenameUtilsWildcardTestCase", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)-returnType-org.apache.commons.io.output.ProxyOutputStream", "source": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.ProxyOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)-returnType-org.apache.commons.io.output.CountingOutputStream", "source": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.CountingOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils()-returnType-org.apache.commons.io.CopyUtils", "source": "org.apache.commons.io.CopyUtils()", "target": "org.apache.commons.io.CopyUtils", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[])-returnType-int", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[])", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.NotFileFilter", "source": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.NotFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)-returnType-org.apache.commons.io.input.CountingInputStreamTest", "source": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)", "target": "org.apache.commons.io.input.CountingInputStreamTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)-returnType-org.apache.commons.io.FileUtilsFileNewerTestCase", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)-returnType-float", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "target": "float", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-returnType-boolean", "source": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest(java.lang.String)-returnType-org.apache.commons.io.CopyUtilsTest", "source": "org.apache.commons.io.CopyUtilsTest(java.lang.String)", "target": "org.apache.commons.io.CopyUtilsTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readByte()-returnType-byte", "source": "org.apache.commons.io.input.SwappedDataInputStream.readByte()", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)-returnType-org.apache.commons.io.output.CountingOutputStreamTest", "source": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.CountingOutputStreamTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)-returnType-double", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "target": "double", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)-returnType-int", "source": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)-returnType-long", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])-returnType-org.apache.commons.io.filefilter.SuffixFileFilter", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.SuffixFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)-returnType-byte", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[])-returnType-int", "source": "org.apache.commons.io.input.ProxyReader.read(char[])", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()-returnType-java.lang.String", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)-returnType-org.apache.commons.io.filefilter.DelegateFileFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.Reader)-returnType-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.markSupported()-returnType-boolean", "source": "org.apache.commons.io.input.ProxyReader.markSupported()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.skip(long)-returnType-long", "source": "org.apache.commons.io.input.ProxyInputStream.skip(long)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)-returnType-org.apache.commons.io.filefilter.WildcardFilter", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.WildcardFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)-returnType-boolean", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)-returnType-char", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "target": "char", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)-returnType-org.apache.commons.io.IOUtilsWriteTestCase", "source": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)", "target": "org.apache.commons.io.IOUtilsWriteTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)-returnType-int", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)-returnType-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.markSupported()-returnType-boolean", "source": "org.apache.commons.io.input.ProxyInputStream.markSupported()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)-returnType-short", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "target": "short", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)-returnType-boolean", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite()-returnType-org.apache.commons.io.PackageTestSuite", "source": "org.apache.commons.io.PackageTestSuite()", "target": "org.apache.commons.io.PackageTestSuite", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite()-returnType-org.apache.commons.io.input.PackageTestSuite", "source": "org.apache.commons.io.input.PackageTestSuite()", "target": "org.apache.commons.io.input.PackageTestSuite", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()-returnType-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)-returnType-long", "source": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)-returnType-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)-returnType-org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isSeparator(char)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)-returnType-boolean", "source": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)-returnType-int", "source": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapFloat(float)-returnType-float", "source": "org.apache.commons.io.EndianUtils.swapFloat(float)", "target": "float", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)-returnType-byte", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()-returnType-boolean", "source": "org.apache.commons.io.input.SwappedDataInputStream.readBoolean()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])-returnType-java.lang.String", "source": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)-returnType-int", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils()-returnType-org.apache.commons.io.FilenameUtils", "source": "org.apache.commons.io.FilenameUtils()", "target": "org.apache.commons.io.FilenameUtils", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)-returnType-org.apache.commons.io.output.LockableFileWriterTest", "source": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriterTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)-returnType-boolean", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter()-returnType-org.apache.commons.io.filefilter.FalseFileFilter", "source": "org.apache.commons.io.filefilter.FalseFileFilter()", "target": "org.apache.commons.io.filefilter.FalseFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)-returnType-float", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "target": "float", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)-returnType-boolean", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.resetCount()-returnType-int", "source": "org.apache.commons.io.output.CountingOutputStream.resetCount()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[])-returnType-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(byte[])", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)-returnType-org.apache.commons.io.output.NullOutputStreamTest", "source": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.NullOutputStreamTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getData()-returnType-byte", "source": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)-returnType-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readLine()-returnType-java.lang.String", "source": "org.apache.commons.io.input.SwappedDataInputStream.readLine()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toAscii(int)-returnType-char", "source": "org.apache.commons.io.HexDumpTest.toAscii(int)", "target": "char", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)-returnType-int", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)-returnType-boolean", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)-returnType-org.apache.commons.io.input.SwappedDataInputStream", "source": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.SwappedDataInputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)-returnType-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)-returnType-long", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)-returnType-org.apache.commons.io.output.TeeOutputStream", "source": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "target": "org.apache.commons.io.output.TeeOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])-returnType-org.apache.commons.io.filefilter.PrefixFileFilter", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.PrefixFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils()-returnType-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtils()", "target": "org.apache.commons.io.FileSystemUtils", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)-returnType-int", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()-returnType-org.apache.commons.io.filefilter.ConditionalFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)-returnType-boolean", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-returnType-org.apache.commons.io.FileUtilsTestCase", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils()-returnType-org.apache.commons.io.EndianUtils", "source": "org.apache.commons.io.EndianUtils()", "target": "org.apache.commons.io.EndianUtils", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)-returnType-char", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "target": "char", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)-returnType-org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString()-returnType-java.lang.String", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.getCount()-returnType-int", "source": "org.apache.commons.io.output.CountingOutputStream.getCount()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)-returnType-int", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.available()-returnType-int", "source": "org.apache.commons.io.input.ProxyInputStream.available()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readLong()-returnType-long", "source": "org.apache.commons.io.input.SwappedDataInputStream.readLong()", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()-returnType-java.lang.String", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)-returnType-org.apache.commons.io.FileUtilsListFilesTestCase", "source": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsListFilesTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter(java.io.Writer)-returnType-org.apache.commons.io.output.ProxyWriter", "source": "org.apache.commons.io.output.ProxyWriter(java.io.Writer)", "target": "org.apache.commons.io.output.ProxyWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-returnType-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest(java.lang.String)-returnType-org.apache.commons.io.EndianUtilsTest", "source": "org.apache.commons.io.EndianUtilsTest(java.lang.String)", "target": "org.apache.commons.io.EndianUtilsTest", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()-returnType-int", "source": "org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream()-returnType-org.apache.commons.io.output.DemuxOutputStream", "source": "org.apache.commons.io.output.DemuxOutputStream()", "target": "org.apache.commons.io.output.DemuxOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)-returnType-org.apache.commons.io.filefilter.PrefixFileFilter", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)-returnType-byte", "source": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "target": "byte", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)-returnType-org.apache.commons.io.filefilter.PrefixFileFilter", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)-returnType-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)-returnType-org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)-returnType-int", "source": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toHex(int)-returnType-char", "source": "org.apache.commons.io.HexDumpTest.toHex(int)", "target": "char", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream()-returnType-org.apache.commons.io.output.NullOutputStream", "source": "org.apache.commons.io.output.NullOutputStream()", "target": "org.apache.commons.io.output.NullOutputStream", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()-returnType-double", "source": "org.apache.commons.io.input.SwappedDataInputStream.readDouble()", "target": "double", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)-returnType-boolean", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()-returnType-org.apache.commons.io.filefilter.ConditionalFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-returnType-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)-returnType-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)-returnType-java.lang.String", "source": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)-returnType-int", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)-returnType-int", "source": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])-returnType-boolean", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)-returnType-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)-returnType-org.apache.commons.io.filefilter.SuffixFileFilter", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-returnType-org.apache.commons.io.FilenameUtilsTestCase", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsTestCase", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)-returnType-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.skip(long)-returnType-long", "source": "org.apache.commons.io.input.CountingInputStream.skip(long)", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)-returnType-int", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).2", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).1", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).1", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)-hasParameter-org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String).0", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String)", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).1", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).0", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)-hasParameter-org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).0", "source": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "target": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String).0", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)-hasParameter-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).1", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)-hasParameter-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).1", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).1", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])-hasParameter-org.apache.commons.io.AllIOTestSuite.main(java.lang.String[]).0", "source": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.AllIOTestSuite.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).1", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).1", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.Reader)-hasParameter-org.apache.commons.io.IOUtils.toString(java.io.Reader).0", "source": "org.apache.commons.io.IOUtils.toString(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.toString(java.io.Reader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFile(java.net.URL)-hasParameter-org.apache.commons.io.FileUtils.toFile(java.net.URL).0", "source": "org.apache.commons.io.FileUtils.toFile(java.net.URL)", "target": "org.apache.commons.io.FileUtils.toFile(java.net.URL).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)-hasParameter-org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).2", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).2", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)-hasParameter-org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream).0", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FilenameUtilsTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)-hasParameter-org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).1", "source": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)-hasParameter-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).2", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).2", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isSeparator(char)-hasParameter-org.apache.commons.io.FilenameUtils.isSeparator(char).0", "source": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "target": "org.apache.commons.io.FilenameUtils.isSeparator(char).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.skip(long)-hasParameter-org.apache.commons.io.input.ProxyInputStream.skip(long).0", "source": "org.apache.commons.io.input.ProxyInputStream.skip(long)", "target": "org.apache.commons.io.input.ProxyInputStream.skip(long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])-hasParameter-org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).1", "source": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "target": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(java.lang.String).0", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).0", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)", "target": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)-hasParameter-org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).0", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)-hasParameter-org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).3", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "target": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).1", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).1", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "source": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)-hasParameter-org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).1", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)-hasParameter-org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int).0", "source": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)", "target": "org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)-hasParameter-org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).1", "source": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).1", "source": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).3", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)-hasParameter-org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).1", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)-hasParameter-org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream).0", "source": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.ProxyOutputStream(java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).1", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)-hasParameter-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).0", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)-hasParameter-org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream).0", "source": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).1", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)-hasParameter-org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter).0", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).0", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File).0", "source": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)", "target": "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])-hasParameter-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).0", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)-hasParameter-org.apache.commons.io.IOUtils.readLines(java.io.Reader).0", "source": "org.apache.commons.io.IOUtils.readLines(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.Reader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtilsTest(java.lang.String)-hasParameter-org.apache.commons.io.EndianUtilsTest(java.lang.String).0", "source": "org.apache.commons.io.EndianUtilsTest(java.lang.String)", "target": "org.apache.commons.io.EndianUtilsTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).2", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).1", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)-hasParameter-org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String).0", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).1", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)-hasParameter-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).2", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).0", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "source": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).2", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).1", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.normalize(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.normalize(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).1", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileUtilsTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).2", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.deleteDirectory(java.io.File).0", "source": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)", "target": "org.apache.commons.io.FileUtils.deleteDirectory(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)-hasParameter-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).1", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)-hasParameter-org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).0", "source": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader)", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.Reader,java.io.Reader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).0", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)-hasParameter-org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).3", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).1", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])-hasParameter-org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).2", "source": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "target": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).2", "source": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int).0", "source": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)-hasParameter-org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).0", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).1", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)-hasParameter-org.apache.commons.io.IOUtils.toCharArray(java.io.Reader).0", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.Reader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)-hasParameter-org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String).0", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-hasParameter-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).0", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)-hasParameter-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).2", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])-hasParameter-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).0", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).1", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[])", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File,java.lang.String[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)-hasParameter-org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).2", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "target": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).0", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)-hasParameter-org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream).0", "source": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "target": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)-hasParameter-org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass).0", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).2", "source": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String).0", "source": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtilsTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)-hasParameter-org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).2", "source": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String).0", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).0", "source": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.contentEquals(java.io.File,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).1", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(int)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(int).0", "source": "org.apache.commons.io.output.LockableFileWriter.write(int)", "target": "org.apache.commons.io.output.LockableFileWriter.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapFloat(float)-hasParameter-org.apache.commons.io.EndianUtils.swapFloat(float).0", "source": "org.apache.commons.io.EndianUtils.swapFloat(float)", "target": "org.apache.commons.io.EndianUtils.swapFloat(float).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)-hasParameter-org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).2", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)-hasParameter-org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).1", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "target": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double)", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream,double).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).2", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File).0", "source": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)", "target": "org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.skip(long)-hasParameter-org.apache.commons.io.input.ProxyReader.skip(long).0", "source": "org.apache.commons.io.input.ProxyReader.skip(long)", "target": "org.apache.commons.io.input.ProxyReader.skip(long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File).0", "source": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)", "target": "org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List).0", "source": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).2", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).1", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getName(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getName(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getName(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])-hasParameter-org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).0", "source": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "target": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).0", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)-hasParameter-org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).0", "source": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).1", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)-hasParameter-org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).1", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)-hasParameter-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).1", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).1", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).1", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])-hasParameter-org.apache.commons.io.FileUtils.toFiles(java.net.URL[]).0", "source": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "target": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String).0", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).1", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).1", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)-hasParameter-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).0", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).2", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).2", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).2", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])-hasParameter-org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).1", "source": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[])", "target": "org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File,byte[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).0", "source": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(int)-hasParameter-org.apache.commons.io.output.TeeOutputStream.write(int).0", "source": "org.apache.commons.io.output.TeeOutputStream.write(int)", "target": "org.apache.commons.io.output.TeeOutputStream.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toByteArray(java.lang.String).0", "source": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String)", "target": "org.apache.commons.io.IOUtils.toByteArray(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)-hasParameter-org.apache.commons.io.FileUtils.waitFor(java.io.File,int).0", "source": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "target": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[])-hasParameter-org.apache.commons.io.IOUtils.toString(byte[]).0", "source": "org.apache.commons.io.IOUtils.toString(byte[])", "target": "org.apache.commons.io.IOUtils.toString(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).2", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).1", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileSystemUtilsTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).1", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).1", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[])-hasParameter-org.apache.commons.io.output.CountingOutputStream.write(byte[]).0", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[])", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).1", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).1", "source": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "target": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).2", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)", "target": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).0", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)-hasParameter-org.apache.commons.io.output.NullOutputStreamTest(java.lang.String).0", "source": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.NullOutputStreamTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)-hasParameter-org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).2", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).1", "source": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).1", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(java.lang.String).0", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String)", "target": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).1", "source": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[])-hasParameter-org.apache.commons.io.output.TeeOutputStream.write(byte[]).0", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[])", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-hasParameter-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).1", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).2", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)-hasParameter-org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).0", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "target": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).0", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)-hasParameter-org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File).0", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).1", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List).0", "source": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[])-hasParameter-org.apache.commons.io.output.ProxyOutputStream.write(byte[]).0", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[])", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)-hasParameter-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).0", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).2", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)-hasParameter-org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream).0", "source": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).1", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)-hasParameter-org.apache.commons.io.FileUtils.waitFor(java.io.File,int).1", "source": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int)", "target": "org.apache.commons.io.FileUtils.waitFor(java.io.File,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).3", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).3", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.skip(long)-hasParameter-org.apache.commons.io.input.CountingInputStream.skip(long).0", "source": "org.apache.commons.io.input.CountingInputStream.skip(long)", "target": "org.apache.commons.io.input.CountingInputStream.skip(long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FileUtilsTestCase(java.lang.String).0", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-hasParameter-org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).1", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)-hasParameter-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).0", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean)", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File,int,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)-hasParameter-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).0", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])-hasParameter-org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).0", "source": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "target": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)-hasParameter-org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).1", "source": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream,java.io.InputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(char[],java.io.Writer).1", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).0", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)-hasParameter-org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String).0", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[])-hasParameter-org.apache.commons.io.input.CountingInputStream.read(byte[]).0", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).1", "source": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[])-hasParameter-org.apache.commons.io.input.ProxyReader.read(char[]).0", "source": "org.apache.commons.io.input.ProxyReader.read(char[])", "target": "org.apache.commons.io.input.ProxyReader.read(char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).0", "source": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)-hasParameter-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).1", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)-hasParameter-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List).0", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)-hasParameter-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).2", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FileUtils.writeStringToFile(java.io.File,java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).0", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).2", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[])-hasParameter-org.apache.commons.io.input.ProxyInputStream.read(byte[]).0", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[])", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).1", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.lang.String).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).0", "source": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "target": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).1", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)-hasParameter-org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).1", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).0", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).1", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).0", "source": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float)", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream,float).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).0", "source": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short)", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream,short).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File,long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).0", "source": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int).0", "source": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])-hasParameter-org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).0", "source": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[])", "target": "org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).1", "source": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int)", "target": "org.apache.commons.io.output.ProxyWriter.write(java.lang.String,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).1", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter(java.util.List).0", "source": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).0", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)-hasParameter-org.apache.commons.io.FileUtils.byteCountToDisplaySize(long).0", "source": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "target": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).2", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String).0", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).0", "source": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).1", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)-hasParameter-org.apache.commons.io.output.ThresholdingOutputStream.write(int).0", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).0", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapDouble(double)-hasParameter-org.apache.commons.io.EndianUtils.swapDouble(double).0", "source": "org.apache.commons.io.EndianUtils.swapDouble(double)", "target": "org.apache.commons.io.EndianUtils.swapDouble(double).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.TrueFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest(java.lang.String)-hasParameter-org.apache.commons.io.HexDumpTest(java.lang.String).0", "source": "org.apache.commons.io.HexDumpTest(java.lang.String)", "target": "org.apache.commons.io.HexDumpTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-hasParameter-org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).0", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream(int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream(int).0", "source": "org.apache.commons.io.output.ByteArrayOutputStream(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).1", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).0", "source": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyFile(java.io.File,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-hasParameter-org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).3", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int)", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).1", "source": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String).0", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)-hasParameter-org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream).0", "source": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.SwappedDataInputStream(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toHex(int)-hasParameter-org.apache.commons.io.HexDumpTest.toHex(int).0", "source": "org.apache.commons.io.HexDumpTest.toHex(int)", "target": "org.apache.commons.io.HexDumpTest.toHex(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter(java.io.Writer)-hasParameter-org.apache.commons.io.output.ProxyWriter(java.io.Writer).0", "source": "org.apache.commons.io.output.ProxyWriter(java.io.Writer)", "target": "org.apache.commons.io.output.ProxyWriter(java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).0", "source": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)", "target": "org.apache.commons.io.FileUtils.writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toInputStream(java.lang.String).0", "source": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String)", "target": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)-hasParameter-org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader).0", "source": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[])-hasParameter-org.apache.commons.io.output.NullOutputStream.write(byte[]).0", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[])", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File).0", "source": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)", "target": "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)-hasParameter-org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String).0", "source": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String)", "target": "org.apache.commons.io.IOUtilsWriteTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)-hasParameter-org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).0", "source": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).2", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).1", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)", "target": "org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(char[],java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)-hasParameter-org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).0", "source": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).0", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-hasParameter-org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).0", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])-hasParameter-org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[]).0", "source": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[])", "target": "org.apache.commons.io.FileSystemUtils.openProcessStream(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.forceMkdir(java.io.File).0", "source": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File)", "target": "org.apache.commons.io.FileUtils.forceMkdir(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object)-hasParameter-org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object).0", "source": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object)", "target": "org.apache.commons.io.FileUtilsTestCase.log(java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-hasParameter-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).3", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).2", "source": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.doCopyFile(java.io.File,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).2", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).2", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-hasParameter-org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).2", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream).0", "source": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.main(java.lang.String[])-hasParameter-org.apache.commons.io.HexDumpTest.main(java.lang.String[]).0", "source": "org.apache.commons.io.HexDumpTest.main(java.lang.String[])", "target": "org.apache.commons.io.HexDumpTest.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)-hasParameter-org.apache.commons.io.input.ProxyReader.read(char[],int,int).0", "source": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "target": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).0", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)-hasParameter-org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter).0", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)-hasParameter-org.apache.commons.io.DemuxTestCase.getInput(java.lang.String).0", "source": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "target": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)-hasParameter-org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)-hasParameter-org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).1", "source": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)-hasParameter-org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).0", "source": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "target": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.forceDelete(java.io.File).0", "source": "org.apache.commons.io.FileUtils.forceDelete(java.io.File)", "target": "org.apache.commons.io.FileUtils.forceDelete(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)-hasParameter-org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).1", "source": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).1", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.NameFileFilter(java.lang.String).0", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)-hasParameter-org.apache.commons.io.input.CountingInputStreamTest(java.lang.String).0", "source": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String)", "target": "org.apache.commons.io.input.CountingInputStreamTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toInputStream(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)-hasParameter-org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).0", "source": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String).0", "source": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsListFilesTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)-hasParameter-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).2", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).0", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])-hasParameter-org.apache.commons.io.CopyUtilsTest.main(java.lang.String[]).0", "source": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[])", "target": "org.apache.commons.io.CopyUtilsTest.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).1", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapLong(long)-hasParameter-org.apache.commons.io.EndianUtils.swapLong(long).0", "source": "org.apache.commons.io.EndianUtils.swapLong(long)", "target": "org.apache.commons.io.EndianUtils.swapLong(long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)-hasParameter-org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String).0", "source": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "target": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.touch(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.touch(java.io.File).0", "source": "org.apache.commons.io.FileUtils.touch(java.io.File)", "target": "org.apache.commons.io.FileUtils.touch(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-hasParameter-org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).2", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtilsTestCase(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)-hasParameter-org.apache.commons.io.input.ProxyInputStream(java.io.InputStream).0", "source": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.ProxyInputStream(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)-hasParameter-org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).1", "source": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).1", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).2", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)-hasParameter-org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String).0", "source": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.TeeOutputStreamTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).2", "source": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).1", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[],boolean[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileCleanerTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)-hasParameter-org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String).0", "source": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.OutputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)-hasParameter-org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).0", "source": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String).0", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).3", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[]).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).0", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).2", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).1", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)-hasParameter-org.apache.commons.io.input.ProxyReader.read(char[],int,int).1", "source": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "target": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)", "target": "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).0", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[])-hasParameter-org.apache.commons.io.output.ProxyWriter.write(char[]).0", "source": "org.apache.commons.io.output.ProxyWriter.write(char[])", "target": "org.apache.commons.io.output.ProxyWriter.write(char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "target": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)-hasParameter-org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).2", "source": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)-hasParameter-org.apache.commons.io.IOUtilsTestCase(java.lang.String).0", "source": "org.apache.commons.io.IOUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.IOUtilsTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)-hasParameter-org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File).0", "source": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)", "target": "org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)", "target": "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])-hasParameter-org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[]).0", "source": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.input.PackageTestSuite.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])-hasParameter-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[]).0", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)-hasParameter-org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).1", "source": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int)", "target": "org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).1", "source": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.concat(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-hasParameter-org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).1", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).2", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStream.write(int).0", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)-hasParameter-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).1", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,java.util.Date).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])-hasParameter-org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).1", "source": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])", "target": "org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)-hasParameter-org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream).0", "source": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.CountingOutputStream(java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)-hasParameter-org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String).0", "source": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String)", "target": "org.apache.commons.io.IOUtilsCopyTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[])-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(char[]).0", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[])", "target": "org.apache.commons.io.output.LockableFileWriter.write(char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(int)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(int).0", "source": "org.apache.commons.io.output.ProxyWriter.write(int)", "target": "org.apache.commons.io.output.ProxyWriter.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).1", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String)", "target": "org.apache.commons.io.FileUtils.readLines(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)-hasParameter-org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).1", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.toAscii(int)-hasParameter-org.apache.commons.io.HexDumpTest.toAscii(int).0", "source": "org.apache.commons.io.HexDumpTest.toAscii(int)", "target": "org.apache.commons.io.HexDumpTest.toAscii(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).1", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).2", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).2", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.IOUtilsCopyTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream(int)-hasParameter-org.apache.commons.io.output.ThresholdingOutputStream(int).0", "source": "org.apache.commons.io.output.ThresholdingOutputStream(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)-hasParameter-org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List).0", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).2", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)-hasParameter-org.apache.commons.io.IOUtils.toByteArray(java.io.Reader).0", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)-hasParameter-org.apache.commons.io.IOUtils.toString(java.io.InputStream).0", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.toString(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.cleanDirectory(java.io.File).0", "source": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)", "target": "org.apache.commons.io.FileUtils.cleanDirectory(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)-hasParameter-org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream).0", "source": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream)", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).2", "source": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).0", "source": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(long)-hasParameter-org.apache.commons.io.HexDump.dump(long).0", "source": "org.apache.commons.io.HexDump.dump(long)", "target": "org.apache.commons.io.HexDump.dump(long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).0", "source": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(char[],int,int).0", "source": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)", "target": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)-hasParameter-org.apache.commons.io.input.ProxyReader.read(char[],int,int).2", "source": "org.apache.commons.io.input.ProxyReader.read(char[],int,int)", "target": "org.apache.commons.io.input.ProxyReader.read(char[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String).0", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String).0", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).1", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).2", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)-hasParameter-org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).0", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-hasParameter-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FileCleanerTestCase(java.lang.String).0", "source": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "target": "org.apache.commons.io.FileCleanerTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).0", "source": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.NullOutputStream.write(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])-hasParameter-org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[]).0", "source": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.filefilter.PackageTestSuite.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader(java.io.Reader)-hasParameter-org.apache.commons.io.input.ProxyReader(java.io.Reader).0", "source": "org.apache.commons.io.input.ProxyReader(java.io.Reader)", "target": "org.apache.commons.io.input.ProxyReader(java.io.Reader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).0", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).2", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)-hasParameter-org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).0", "source": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long)", "target": "org.apache.commons.io.FileUtils.isFileNewer(java.io.File,long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String).0", "source": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.FileFilterTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)-hasParameter-org.apache.commons.io.filefilter.WildcardFilter(java.util.List).0", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-hasParameter-org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).0", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)-hasParameter-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).0", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)", "target": "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])-hasParameter-org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[]).0", "source": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.output.PackageTestSuite.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)-hasParameter-org.apache.commons.io.EndianUtils.read(java.io.InputStream).0", "source": "org.apache.commons.io.EndianUtils.read(java.io.InputStream)", "target": "org.apache.commons.io.EndianUtils.read(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyReader.mark(int)-hasParameter-org.apache.commons.io.input.ProxyReader.mark(int).0", "source": "org.apache.commons.io.input.ProxyReader.mark(int)", "target": "org.apache.commons.io.input.ProxyReader.mark(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])-hasParameter-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).1", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[])", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(java.lang.Object[],java.lang.Object[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long)", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream,long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).1", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).0", "source": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)-hasParameter-org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).1", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)-hasParameter-org.apache.commons.io.IOUtils.readLines(java.io.InputStream).0", "source": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.readLines(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).0", "source": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).0", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)-hasParameter-org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection).0", "source": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)", "target": "org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).1", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)-hasParameter-org.apache.commons.io.input.CountingInputStream(java.io.InputStream).0", "source": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream)", "target": "org.apache.commons.io.input.CountingInputStream(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).2", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).1", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase.replaceAll(java.lang.String,java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.FalseFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-hasParameter-org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).0", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)-hasParameter-org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List).0", "source": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter.setFileFilters(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)-hasParameter-org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).1", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).0", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getPath(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getPath(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-hasParameter-org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream).0", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String).0", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapInteger(int)-hasParameter-org.apache.commons.io.EndianUtils.swapInteger(int).0", "source": "org.apache.commons.io.EndianUtils.swapInteger(int)", "target": "org.apache.commons.io.EndianUtils.swapInteger(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)-hasParameter-org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).0", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).2", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[],boolean[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).0", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).1", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).1", "source": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).2", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).0", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])-hasParameter-org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[]).0", "source": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[])", "target": "org.apache.commons.io.IOUtilsWriteTestCase.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)-hasParameter-org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List).0", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).1", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).1", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream,long).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).0", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte)-hasParameter-org.apache.commons.io.HexDump.dump(byte).0", "source": "org.apache.commons.io.HexDump.dump(byte)", "target": "org.apache.commons.io.HexDump.dump(byte).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).2", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).0", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).0", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).2", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(char[],int,int).1", "source": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)", "target": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).0", "source": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[])-hasParameter-org.apache.commons.io.PackageTestSuite.main(java.lang.String[]).0", "source": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[])", "target": "org.apache.commons.io.PackageTestSuite.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)-hasParameter-org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).0", "source": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)", "target": "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).0", "source": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)", "target": "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)-hasParameter-org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String).0", "source": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String)", "target": "org.apache.commons.io.output.CountingOutputStreamTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)-hasParameter-org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).2", "source": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean)", "target": "org.apache.commons.io.FileUtils.copyDirectory(java.io.File,java.io.File,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase(java.lang.String)-hasParameter-org.apache.commons.io.DemuxTestCase(java.lang.String).0", "source": "org.apache.commons.io.DemuxTestCase(java.lang.String)", "target": "org.apache.commons.io.DemuxTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)-hasParameter-org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).1", "source": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String,byte[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)-hasParameter-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List).0", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).1", "source": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)-hasParameter-org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).1", "source": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "target": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.swapShort(short)-hasParameter-org.apache.commons.io.EndianUtils.swapShort(short).0", "source": "org.apache.commons.io.EndianUtils.swapShort(short)", "target": "org.apache.commons.io.EndianUtils.swapShort(short).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(int)-hasParameter-org.apache.commons.io.output.CountingOutputStream.write(int).0", "source": "org.apache.commons.io.output.CountingOutputStream.write(int)", "target": "org.apache.commons.io.output.CountingOutputStream.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).0", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).1", "source": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)-hasParameter-org.apache.commons.io.filefilter.NameFileFilter(java.util.List).0", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).1", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).0", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)-hasParameter-org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).2", "source": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)", "target": "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-hasParameter-org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).1", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)-hasParameter-org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int).0", "source": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-hasParameter-org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).2", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)-hasParameter-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).0", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.WildcardFilter(java.lang.String).0", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriterTest(java.lang.String).0", "source": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriterTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)-hasParameter-org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).1", "source": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File)", "target": "org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[]).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[])", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(int)-hasParameter-org.apache.commons.io.output.ProxyOutputStream.write(int).0", "source": "org.apache.commons.io.output.ProxyOutputStream.write(int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)-hasParameter-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).1", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)-hasParameter-org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).2", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest(java.lang.String)-hasParameter-org.apache.commons.io.CopyUtilsTest(java.lang.String).0", "source": "org.apache.commons.io.CopyUtilsTest(java.lang.String)", "target": "org.apache.commons.io.CopyUtilsTest(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)-hasParameter-org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String).0", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)-hasParameter-org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).2", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)-hasParameter-org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).0", "source": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker(java.io.File,java.lang.Object,java.lang.ref.ReferenceQueue).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)-hasParameter-org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).1", "source": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)-hasParameter-org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String).0", "source": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)-hasParameter-org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File).0", "source": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toURLs(java.io.File[])-hasParameter-org.apache.commons.io.FileUtils.toURLs(java.io.File[]).0", "source": "org.apache.commons.io.FileUtils.toURLs(java.io.File[])", "target": "org.apache.commons.io.FileUtils.toURLs(java.io.File[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream).0", "source": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)-hasParameter-org.apache.commons.io.filefilter.OrFileFilter(java.util.List).0", "source": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection)-hasParameter-org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection).0", "source": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection)", "target": "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)-hasParameter-org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).1", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).2", "source": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.write(java.lang.String,java.io.OutputStream,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStream.write(int)-hasParameter-org.apache.commons.io.output.NullOutputStream.write(int).0", "source": "org.apache.commons.io.output.NullOutputStream.write(int)", "target": "org.apache.commons.io.output.NullOutputStream.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)-hasParameter-org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File).0", "source": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)", "target": "org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)-hasParameter-org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).1", "source": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.write(java.lang.StringBuffer,java.io.OutputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.write(int)-hasParameter-org.apache.commons.io.output.DemuxOutputStream.write(int).0", "source": "org.apache.commons.io.output.DemuxOutputStream.write(int)", "target": "org.apache.commons.io.output.DemuxOutputStream.write(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)-hasParameter-org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).1", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)-hasParameter-org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).0", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)-hasParameter-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).0", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter(java.io.File,boolean,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).1", "source": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)-hasParameter-org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).1", "source": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.copy(java.lang.String,java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])-hasParameter-org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).1", "source": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[])", "target": "org.apache.commons.io.FilenameUtils.isExtension(java.lang.String,java.lang.String[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)-hasParameter-org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).1", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "target": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)-hasParameter-org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).0", "source": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean)", "target": "org.apache.commons.io.output.LockableFileWriter(java.lang.String,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).0", "source": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)-hasParameter-org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).1", "source": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String)", "target": "org.apache.commons.io.CopyUtils.copy(byte[],java.io.Writer,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])-hasParameter-org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[]).0", "source": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])", "target": "org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)-hasParameter-org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).1", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).1", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.accept(java.io.File,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)-hasParameter-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-hasParameter-org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).0", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)-hasParameter-org.apache.commons.io.output.ProxyWriter.write(char[],int,int).2", "source": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int)", "target": "org.apache.commons.io.output.ProxyWriter.write(char[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)-hasParameter-org.apache.commons.io.FilenameUtils.getExtension(java.lang.String).0", "source": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.getExtension(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).0", "source": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)-hasParameter-org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).2", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)-hasParameter-org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).0", "source": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String)", "target": "org.apache.commons.io.FileUtils.readFileToString(java.io.File,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-hasParameter-org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)-hasParameter-org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).1", "source": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File)", "target": "org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)-hasParameter-org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream).0", "source": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)", "target": "org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)-hasParameter-org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).0", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String,java.lang.String,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ProxyInputStream.mark(int)-hasParameter-org.apache.commons.io.input.ProxyInputStream.mark(int).0", "source": "org.apache.commons.io.input.ProxyInputStream.mark(int)", "target": "org.apache.commons.io.input.ProxyInputStream.mark(int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])-hasParameter-org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[]).0", "source": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[])", "target": "org.apache.commons.io.FileUtils.toSuffixes(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.CountingInputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools-contains-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.testtools", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileCleanerTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileCleanerTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.ProxyInputStream", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.ProxyInputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.DeferredFileOutputStreamTest", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.HexDump", "source": "org.apache.commons.io", "target": "org.apache.commons.io.HexDump", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner-contains-org.apache.commons.io.FileCleaner$Tracker", "source": "org.apache.commons.io.FileCleaner", "target": "org.apache.commons.io.FileCleaner$Tracker", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools-contains-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.testtools", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.IOUtilsTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.IOUtilsTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.DelegateFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.DelegateFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools-contains-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.testtools", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileCleaner", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileCleaner", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.ConditionalFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.DemuxInputStream", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.DemuxInputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileUtilsFileNewerTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileUtils", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileUtils", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.ProxyWriter", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.ProxyWriter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.ProxyOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.ProxyOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.FileFilterUtils", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.FileFilterUtils", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.NullOutputStreamTest", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.NullOutputStreamTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.LockableFileWriterTest", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.LockableFileWriterTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-contains-org.apache.commons.io.DemuxTestCase$ReaderThread", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.filefilter", "source": "org.apache.commons.io", "target": "org.apache.commons.io.filefilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.OrFileFilterTestCase", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons-contains-org.apache.commons.io", "source": "org.apache.commons", "target": "org.apache.commons.io", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.FalseFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.FalseFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.TeeOutputStreamTest", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.TeeOutputStreamTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.IOUtilsWriteTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.IOUtilsWriteTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.output", "source": "org.apache.commons.io", "target": "org.apache.commons.io.output", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FilenameUtilsTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FilenameUtilsTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.TeeOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.TeeOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.CountingInputStreamTest", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.CountingInputStreamTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileUtilsListFilesTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileUtilsListFilesTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.CountingOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.CountingOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.AndFileFilterTestCase", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.DemuxTestCase$ReaderThread", "source": "org.apache.commons.io", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.SwappedDataInputStreamTest", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.ClassLoaderObjectInputStream", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-contains-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase-contains-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.NotFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.NotFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.EndianUtilsTest", "source": "org.apache.commons.io", "target": "org.apache.commons.io.EndianUtilsTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.AllIOTestSuite", "source": "org.apache.commons.io", "target": "org.apache.commons.io.AllIOTestSuite", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.IOUtilsCopyTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.IOUtilsCopyTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileSystemUtils", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.TrueFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.TrueFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.PackageTestSuite", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.PackageTestSuite", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.DirectoryFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache-contains-org.apache.commons", "source": "org.apache", "target": "org.apache.commons", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.CopyUtilsTest", "source": "org.apache.commons.io", "target": "org.apache.commons.io.CopyUtilsTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.EndianUtils", "source": "org.apache.commons.io", "target": "org.apache.commons.io.EndianUtils", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.ThresholdingOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.ThresholdingOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FilenameUtilsWildcardTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.PackageTestSuite", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.PackageTestSuite", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org-contains-org.apache", "source": "org", "target": "org.apache", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileUtilsTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileUtilsTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.DemuxOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.DemuxOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase-contains-org.apache.commons.io.DemuxTestCase$WriterThread", "source": "org.apache.commons.io.DemuxTestCase", "target": "org.apache.commons.io.DemuxTestCase$WriterThread", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.HexDumpTest", "source": "org.apache.commons.io", "target": "org.apache.commons.io.HexDumpTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.DemuxTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.DemuxTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.FileFilterTestCase", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.FileFilterTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileCleaner$Tracker", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileCleaner$Tracker", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.PackageTestSuite", "source": "org.apache.commons.io", "target": "org.apache.commons.io.PackageTestSuite", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.CopyUtils", "source": "org.apache.commons.io", "target": "org.apache.commons.io.CopyUtils", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.SwappedDataInputStream", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.SwappedDataInputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.PackageTestSuite", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.PackageTestSuite", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.PrefixFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.PrefixFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.DemuxTestCase$WriterThread", "source": "org.apache.commons.io", "target": "org.apache.commons.io.DemuxTestCase$WriterThread", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.CountingOutputStreamTest", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.CountingOutputStreamTest", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input-contains-org.apache.commons.io.input.ProxyReader", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io.input.ProxyReader", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.IOUtils", "source": "org.apache.commons.io", "target": "org.apache.commons.io.IOUtils", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.NullOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.NullOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.SuffixFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.SuffixFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.input", "source": "org.apache.commons.io", "target": "org.apache.commons.io.input", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FilenameUtils", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FilenameUtils", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.WildcardFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.WildcardFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter-contains-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output-contains-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.testtools", "source": "org.apache.commons.io", "target": "org.apache.commons.io.testtools", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io-contains-org.apache.commons.io.FileSystemUtilsTestCase", "source": "org.apache.commons.io", "target": "org.apache.commons.io.FileSystemUtilsTestCase", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FileUtilsTestCase.testFile2", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)-uses-org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(long)-uses-org.apache.commons.io.HexDump._hexcodes", "source": "org.apache.commons.io.HexDump.dump(long)", "target": "org.apache.commons.io.HexDump._hexcodes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)-uses-org.apache.commons.io.output.ThresholdingOutputStream.threshold", "source": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)-uses-org.apache.commons.io.output.CountingOutputStream.count", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.CountingOutputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()-uses-org.apache.commons.io.FileUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String,int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[])-uses-org.apache.commons.io.input.CountingInputStream.count", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[])", "target": "org.apache.commons.io.input.CountingInputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.<clinit>()-uses-org.apache.commons.io.FileSystemUtils.INIT_PROBLEM", "source": "org.apache.commons.io.FileSystemUtils.<clinit>()", "target": "org.apache.commons.io.FileSystemUtils.INIT_PROBLEM", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()-uses-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isSeparator(char)-uses-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.T1", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.T1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)-uses-org.apache.commons.io.DemuxTestCase.m_outputMap", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase.m_outputMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()-uses-org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "source": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.reset()-uses-org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "source": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA3", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA3", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()-uses-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "uses", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)-uses-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-uses-org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-uses-org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testNormalize()-uses-org.apache.commons.io.FilenameUtilsTestCase.SEP", "source": "org.apache.commons.io.FilenameUtilsTestCase.testNormalize()", "target": "org.apache.commons.io.FilenameUtilsTestCase.SEP", "label": "uses", "properties": {"weight": 174, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)-uses-org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "source": "org.apache.commons.io.IOUtils.copy(java.io.Reader,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA1", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()-uses-org.apache.commons.io.output.ByteArrayOutputStream.buffers", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.buffers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)-uses-org.apache.commons.io.FileUtils.ONE_GB", "source": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "target": "org.apache.commons.io.FileUtils.ONE_GB", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.createLock()-uses-org.apache.commons.io.output.LockableFileWriter.lockFile", "source": "org.apache.commons.io.output.LockableFileWriter.createLock()", "target": "org.apache.commons.io.output.LockableFileWriter.lockFile", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()-uses-org.apache.commons.io.output.ThresholdingOutputStream.written", "source": "org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.written", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.getCount()-uses-org.apache.commons.io.input.CountingInputStream.count", "source": "org.apache.commons.io.input.CountingInputStream.getCount()", "target": "org.apache.commons.io.input.CountingInputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-uses-org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.run()-uses-org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()-uses-org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "source": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()", "target": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.NotFileFilter.filter", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.NotFileFilter.filter", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.T1", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.T1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)-uses-org.apache.commons.io.FileSystemUtils.INSTANCE", "source": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()-uses-org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)-uses-org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)-uses-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilenameResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.resetCount()-uses-org.apache.commons.io.input.CountingInputStream.count", "source": "org.apache.commons.io.input.CountingInputStream.resetCount()", "target": "org.apache.commons.io.input.CountingInputStream.count", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])-uses-org.apache.commons.io.filefilter.WildcardFilter.wildcards", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String,java.io.File,long,boolean)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.<clinit>()-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.<clinit>()", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)-uses-org.apache.commons.io.FileUtils.ONE_MB", "source": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "target": "org.apache.commons.io.FileUtils.ONE_MB", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()-uses-org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.flush()-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter.flush()", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)-uses-org.apache.commons.io.output.ThresholdingOutputStream.written", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.written", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.setUp()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockDir", "source": "org.apache.commons.io.output.LockableFileWriterTest.setUp()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockDir", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-uses-org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)-uses-org.apache.commons.io.filefilter.WildcardFilter.wildcards", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()-uses-org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "target": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.getStream()-uses-org.apache.commons.io.output.DemuxOutputStream.m_streams", "source": "org.apache.commons.io.output.DemuxOutputStream.getStream()", "target": "org.apache.commons.io.output.DemuxOutputStream.m_streams", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE2_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)-uses-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()-uses-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.<clinit>()-uses-org.apache.commons.io.FileSystemUtils.WINDOWS", "source": "org.apache.commons.io.FileSystemUtils.<clinit>()", "target": "org.apache.commons.io.FileSystemUtils.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)-uses-org.apache.commons.io.filefilter.NameFileFilter.names", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.NameFileFilter.names", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile2", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()-uses-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()-uses-org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "target": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.tearDown()-uses-org.apache.commons.io.output.LockableFileWriterTest.file", "source": "org.apache.commons.io.output.LockableFileWriterTest.tearDown()", "target": "org.apache.commons.io.output.LockableFileWriterTest.file", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()-uses-org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()", "target": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(int)-uses-org.apache.commons.io.output.TeeOutputStream.branch", "source": "org.apache.commons.io.output.TeeOutputStream.write(int)", "target": "org.apache.commons.io.output.TeeOutputStream.branch", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-uses-org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_demux", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA2", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)-uses-org.apache.commons.io.output.TeeOutputStream.branch", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.TeeOutputStream.branch", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()-uses-org.apache.commons.io.FileUtilsTestCase.testFile2", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FileUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-uses-org.apache.commons.io.output.DeferredFileOutputStream.closed", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.closed", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()-uses-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA2", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.close()-uses-org.apache.commons.io.output.DeferredFileOutputStream.closed", "source": "org.apache.commons.io.output.DeferredFileOutputStream.close()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.closed", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA3", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA3", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.buffers", "source": "org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.buffers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(byte[])-uses-org.apache.commons.io.output.CountingOutputStream.count", "source": "org.apache.commons.io.output.CountingOutputStream.write(byte[])", "target": "org.apache.commons.io.output.CountingOutputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)-uses-org.apache.commons.io.output.ByteArrayOutputStream.buffers", "source": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.buffers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()-uses-org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE", "source": "org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()", "target": "org.apache.commons.io.FileUtilsTestCase.TEST_DIRECTORY_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.close()-uses-org.apache.commons.io.output.LockableFileWriter.lockFile", "source": "org.apache.commons.io.output.LockableFileWriter.close()", "target": "org.apache.commons.io.output.LockableFileWriter.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "source": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "label": "uses", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()-uses-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.NameFileFilter.names", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.NameFileFilter.names", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.FILE1_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-uses-org.apache.commons.io.FileSystemUtils.WINDOWS", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "org.apache.commons.io.FileSystemUtils.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.<clinit>()-uses-org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.<clinit>()", "target": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.DATA", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()-uses-org.apache.commons.io.FileUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.T4", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.T4", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToWriter()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS", "source": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream(int)-uses-org.apache.commons.io.output.ThresholdingOutputStream.threshold", "source": "org.apache.commons.io.output.ThresholdingOutputStream(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)-uses-org.apache.commons.io.FileCleaner.q", "source": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.q", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()-uses-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()-uses-org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS", "source": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "target": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()-uses-org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile1", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA1", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.<clinit>()-uses-org.apache.commons.io.FileSystemUtils.OTHER", "source": "org.apache.commons.io.FileSystemUtils.<clinit>()", "target": "org.apache.commons.io.FileSystemUtils.OTHER", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-uses-org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX", "source": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR_UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.WildcardFilter.wildcards", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()-uses-org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "source": "org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()", "target": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()-uses-org.apache.commons.io.FileCleanerTestCase.testFile", "source": "org.apache.commons.io.FileCleanerTestCase.testFileCleaner()", "target": "org.apache.commons.io.FileCleanerTestCase.testFile", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)-uses-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "label": "uses", "properties": {"weight": 22, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte)-uses-org.apache.commons.io.HexDump._hexcodes", "source": "org.apache.commons.io.HexDump.dump(byte)", "target": "org.apache.commons.io.HexDump._hexcodes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "source": "org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.doStart()-uses-org.apache.commons.io.DemuxTestCase.m_threadMap", "source": "org.apache.commons.io.DemuxTestCase.doStart()", "target": "org.apache.commons.io.DemuxTestCase.m_threadMap", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA4", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA4", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)-uses-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(boolean)", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.DEFAULT_WORKING_PATH", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()-uses-org.apache.commons.io.output.ThresholdingOutputStream.threshold", "source": "org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])-uses-org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.getTrackCount()-uses-org.apache.commons.io.FileCleaner.trackers", "source": "org.apache.commons.io.FileCleaner.getTrackCount()", "target": "org.apache.commons.io.FileCleaner.trackers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter()-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter()", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)-uses-org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.NotFileFilter.filter", "source": "org.apache.commons.io.filefilter.NotFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.NotFileFilter.filter", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])-uses-org.apache.commons.io.filefilter.NameFileFilter.names", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.NameFileFilter.names", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()-uses-org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS", "source": "org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()", "target": "org.apache.commons.io.FilenameUtilsWildcardTestCase.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-uses-org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-uses-org.apache.commons.io.FileSystemUtils.OTHER", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "org.apache.commons.io.FileSystemUtils.OTHER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "source": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.filledBufferSum", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()-uses-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.count", "source": "org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.count", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.T3", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.T3", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])-uses-org.apache.commons.io.output.ThresholdingOutputStream.written", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])", "target": "org.apache.commons.io.output.ThresholdingOutputStream.written", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)-uses-org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()-uses-org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(long)-uses-org.apache.commons.io.HexDump._lbuffer", "source": "org.apache.commons.io.HexDump.dump(long)", "target": "org.apache.commons.io.HexDump._lbuffer", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.close()-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter.close()", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)-uses-org.apache.commons.io.FileCleaner.trackers", "source": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.trackers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)-uses-org.apache.commons.io.output.DemuxOutputStream.m_streams", "source": "org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "target": "org.apache.commons.io.output.DemuxOutputStream.m_streams", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(char[])-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter.write(char[])", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte)-uses-org.apache.commons.io.HexDump._shifts", "source": "org.apache.commons.io.HexDump.dump(byte)", "target": "org.apache.commons.io.HexDump._shifts", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.<clinit>()-uses-org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.<clinit>()", "target": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)-uses-org.apache.commons.io.DemuxTestCase.m_threadMap", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase.m_threadMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.T2", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.T2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getStream()-uses-org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream.getStream()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.NotFileFilter.filter", "source": "org.apache.commons.io.filefilter.NotFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.NotFileFilter.filter", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)-uses-org.apache.commons.io.input.CountingInputStream.count", "source": "org.apache.commons.io.input.CountingInputStream.read(byte[],int,int)", "target": "org.apache.commons.io.input.CountingInputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.WORKING_PATH_NAME_PROPERTY_KEY", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.tearDown()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest.tearDown()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)-uses-org.apache.commons.io.FileCleaner.q", "source": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.q", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "source": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-uses-org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()-uses-org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX", "source": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "target": "org.apache.commons.io.IOUtils.DIR_SEPARATOR_UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.getStream()-uses-org.apache.commons.io.input.DemuxInputStream.m_streams", "source": "org.apache.commons.io.input.DemuxInputStream.getStream()", "target": "org.apache.commons.io.input.DemuxInputStream.m_streams", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-uses-org.apache.commons.io.FileUtilsTestCase.testFile2", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()-uses-org.apache.commons.io.IOUtils.DIR_SEPARATOR", "source": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "target": "org.apache.commons.io.IOUtils.DIR_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()-uses-org.apache.commons.io.IOUtilsTestCase.WINDOWS", "source": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "target": "org.apache.commons.io.IOUtilsTestCase.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)-uses-org.apache.commons.io.DemuxTestCase.m_outputMap", "source": "org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)", "target": "org.apache.commons.io.DemuxTestCase.m_outputMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()-uses-org.apache.commons.io.output.LockableFileWriterTest.file", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "target": "org.apache.commons.io.output.LockableFileWriterTest.file", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-uses-org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-uses-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()-uses-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.invoked", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)-uses-org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded", "source": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.thresholdExceeded", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)-uses-org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)-uses-org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "source": "org.apache.commons.io.filefilter.SuffixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.T4", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.T4", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)-uses-org.apache.commons.io.FileSystemUtils.OS", "source": "org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)", "target": "org.apache.commons.io.FileSystemUtils.OS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])-uses-org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String[])", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)-uses-org.apache.commons.io.DemuxTestCase.m_threadMap", "source": "org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)", "target": "org.apache.commons.io.DemuxTestCase.m_threadMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)-uses-org.apache.commons.io.FileCleaner.trackers", "source": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner.trackers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.isSeparator(char)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.isSeparator(char)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(long)-uses-org.apache.commons.io.HexDump._shifts", "source": "org.apache.commons.io.HexDump.dump(long)", "target": "org.apache.commons.io.HexDump._shifts", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)-uses-org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader,java.io.InputStream)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()-uses-org.apache.commons.io.FileUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)-uses-org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.write(byte[])-uses-org.apache.commons.io.output.TeeOutputStream.branch", "source": "org.apache.commons.io.output.TeeOutputStream.write(byte[])", "target": "org.apache.commons.io.output.TeeOutputStream.branch", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()-uses-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilenameResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.DEFAULT_WORKING_PATH", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.NameFileFilter.names", "source": "org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.NameFileFilter.names", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()-uses-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)-uses-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream(java.io.OutputStream,boolean,boolean)", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-uses-org.apache.commons.io.output.LockableFileWriter.LCK", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter.LCK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "label": "uses", "properties": {"weight": 22, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)-uses-org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "source": "org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter.prefixes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FileUtilsTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1Size", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte)-uses-org.apache.commons.io.HexDump._cbuffer", "source": "org.apache.commons.io.HexDump.dump(byte)", "target": "org.apache.commons.io.HexDump._cbuffer", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.equals(java.lang.String,java.lang.String,boolean,boolean)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()-uses-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)-uses-org.apache.commons.io.output.LockableFileWriter.lockFile", "source": "org.apache.commons.io.output.LockableFileWriter(java.io.File,java.lang.String,boolean,java.lang.String)", "target": "org.apache.commons.io.output.LockableFileWriter.lockFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.<clinit>()-uses-org.apache.commons.io.FileSystemUtils.UNIX", "source": "org.apache.commons.io.FileSystemUtils.<clinit>()", "target": "org.apache.commons.io.FileSystemUtils.UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)-uses-org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "source": "org.apache.commons.io.CopyUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)-uses-org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream.classLoader", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()-uses-org.apache.commons.io.DemuxTestCase.c_random", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "target": "org.apache.commons.io.DemuxTestCase.c_random", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getFile()-uses-org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "source": "org.apache.commons.io.output.DeferredFileOutputStream.getFile()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)-uses-org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "source": "org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.OutputStream)", "target": "org.apache.commons.io.IOUtils.DEFAULT_BUFFER_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFalseResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.WildcardFilter.wildcards", "source": "org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.setUp()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.setUp()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)-uses-org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "source": "org.apache.commons.io.DemuxTestCase$WriterThread(java.lang.String,java.lang.String,java.io.OutputStream,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.<clinit>()-uses-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.<clinit>()", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.fileFilter", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.setUp()-uses-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase.setUp()", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.resetCount()-uses-org.apache.commons.io.output.CountingOutputStream.count", "source": "org.apache.commons.io.output.CountingOutputStream.resetCount()", "target": "org.apache.commons.io.output.CountingOutputStream.count", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.setUp()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest.setUp()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)-uses-org.apache.commons.io.output.ByteArrayOutputStream.buffers", "source": "org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.buffers", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-uses-org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()-uses-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()-uses-org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()", "target": "org.apache.commons.io.IOUtilsTestCase.FILE_SIZE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testTrueResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)-uses-org.apache.commons.io.HexDump.EOL", "source": "org.apache.commons.io.HexDump.dump(byte[],long,java.io.OutputStream,int)", "target": "org.apache.commons.io.HexDump.EOL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()-uses-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()-uses-org.apache.commons.io.FileUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FileUtilsTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)-uses-org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "source": "org.apache.commons.io.CopyUtils.copy(java.io.Reader,java.io.Writer)", "target": "org.apache.commons.io.CopyUtils.DEFAULT_BUFFER_SIZE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)-uses-org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "label": "uses", "properties": {"weight": 10, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)-uses-org.apache.commons.io.output.ThresholdingOutputStream.written", "source": "org.apache.commons.io.output.ThresholdingOutputStream.write(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.written", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.cvsFilter", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.size()-uses-org.apache.commons.io.output.ByteArrayOutputStream.count", "source": "org.apache.commons.io.output.ByteArrayOutputStream.size()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "label": "uses", "properties": {"weight": 24, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FileUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FileUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()-uses-org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.getData()", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_buffer", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()-uses-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.testDump()-uses-org.apache.commons.io.HexDump.EOL", "source": "org.apache.commons.io.HexDumpTest.testDump()", "target": "org.apache.commons.io.HexDump.EOL", "label": "uses", "properties": {"weight": 16, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()-uses-org.apache.commons.io.output.LockableFileWriterTest.file", "source": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()", "target": "org.apache.commons.io.output.LockableFileWriterTest.file", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)-uses-org.apache.commons.io.FileCleaner$Tracker.path", "source": "org.apache.commons.io.FileCleaner$Tracker(java.lang.String,java.lang.Object,java.lang.ref.ReferenceQueue)", "target": "org.apache.commons.io.FileCleaner$Tracker.path", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()-uses-org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "source": "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()", "target": "org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)-uses-org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread(java.lang.String,java.io.InputStream,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_input", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)-uses-org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testReaderToString()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFilters", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testTrueResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.<clinit>()-uses-org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.<clinit>()", "target": "org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase(java.lang.String)", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile2", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()-uses-org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "source": "org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()", "target": "org.apache.commons.io.FilenameUtilsTestCase.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriter.write(int)-uses-org.apache.commons.io.output.LockableFileWriter.out", "source": "org.apache.commons.io.output.LockableFileWriter.write(int)", "target": "org.apache.commons.io.output.LockableFileWriter.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.T2", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.T2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile1()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()-uses-org.apache.commons.io.IOUtilsTestCase.m_testFile", "source": "org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()", "target": "org.apache.commons.io.IOUtilsTestCase.m_testFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFilters", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile1", "source": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()-uses-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForFlush", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.AndFileFilterTestCase.testFileResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-uses-org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.<init>1()-uses-org.apache.commons.io.FileCleaner.reaper", "source": "org.apache.commons.io.FileCleaner.<init>1()", "target": "org.apache.commons.io.FileCleaner.reaper", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.bytes", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)-uses-org.apache.commons.io.DemuxTestCase.m_threadMap", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase.m_threadMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.reset()-uses-org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "source": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.currentBuffer", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()-uses-org.apache.commons.io.FileUtilsTestCase.testFile2", "source": "org.apache.commons.io.FileUtilsTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)-uses-org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.doJoin()-uses-org.apache.commons.io.DemuxTestCase.m_threadMap", "source": "org.apache.commons.io.DemuxTestCase.doJoin()", "target": "org.apache.commons.io.DemuxTestCase.m_threadMap", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testConcat()-uses-org.apache.commons.io.FilenameUtilsTestCase.SEP", "source": "org.apache.commons.io.FilenameUtilsTestCase.testConcat()", "target": "org.apache.commons.io.FilenameUtilsTestCase.SEP", "label": "uses", "properties": {"weight": 37, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()-uses-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.UNIX_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.close()-uses-org.apache.commons.io.output.TeeOutputStream.branch", "source": "org.apache.commons.io.output.TeeOutputStream.close()", "target": "org.apache.commons.io.output.TeeOutputStream.branch", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)-uses-org.apache.commons.io.FileSystemUtils.UNIX", "source": "org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String,int)", "target": "org.apache.commons.io.FileSystemUtils.UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.run()-uses-org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_output", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()-uses-org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY", "source": "org.apache.commons.io.FileUtilsTestCase.testCopyFile2()", "target": "org.apache.commons.io.FileUtilsTestCase.LAST_MODIFIED_DELAY", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.skip(long)-uses-org.apache.commons.io.input.CountingInputStream.count", "source": "org.apache.commons.io.input.CountingInputStream.skip(long)", "target": "org.apache.commons.io.input.CountingInputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-uses-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.getData()-uses-org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream.getData()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.memoryOutputStream", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "source": "org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter.suffixes", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)-uses-org.apache.commons.io.filefilter.NameFileFilter.names", "source": "org.apache.commons.io.filefilter.NameFileFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.NameFileFilter.names", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()-uses-org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "source": "org.apache.commons.io.DemuxTestCase$ReaderThread.run()", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread.m_demux", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()-uses-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)-uses-org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "source": "org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.DeferredFileOutputStream.outputFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_TYPE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String,java.lang.String,boolean)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile2", "source": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile2", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.Writer)", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()-uses-org.apache.commons.io.output.ByteArrayOutputStream.count", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.count", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.getCount()-uses-org.apache.commons.io.output.CountingOutputStream.count", "source": "org.apache.commons.io.output.CountingOutputStream.getCount()", "target": "org.apache.commons.io.output.CountingOutputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter()-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter()", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtils.writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream.write(int)-uses-org.apache.commons.io.output.CountingOutputStream.count", "source": "org.apache.commons.io.output.CountingOutputStream.write(int)", "target": "org.apache.commons.io.output.CountingOutputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)-uses-org.apache.commons.io.output.TeeOutputStream.branch", "source": "org.apache.commons.io.output.TeeOutputStream(java.io.OutputStream,java.io.OutputStream)", "target": "org.apache.commons.io.output.TeeOutputStream.branch", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.workingPath", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)-uses-org.apache.commons.io.filefilter.WildcardFilter.wildcards", "source": "org.apache.commons.io.filefilter.WildcardFilter(java.util.List)", "target": "org.apache.commons.io.filefilter.WildcardFilter.wildcards", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase.testConstants()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtilsTestCase.testConstants()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "source": "org.apache.commons.io.FilenameUtilsTestCase(java.lang.String)", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile1Size", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)-uses-org.apache.commons.io.input.DemuxInputStream.m_streams", "source": "org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "target": "org.apache.commons.io.input.DemuxInputStream.m_streams", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.reset()-uses-org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "source": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.currentBufferIndex", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)-uses-org.apache.commons.io.output.ThresholdingOutputStream.written", "source": "org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)", "target": "org.apache.commons.io.output.ThresholdingOutputStream.written", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.reset()-uses-org.apache.commons.io.output.ByteArrayOutputStream.count", "source": "org.apache.commons.io.output.ByteArrayOutputStream.reset()", "target": "org.apache.commons.io.output.ByteArrayOutputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFalseResults", "label": "uses", "properties": {"weight": 11, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()-uses-org.apache.commons.io.testtools.FileBasedTestCase.testDir", "source": "org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()", "target": "org.apache.commons.io.testtools.FileBasedTestCase.testDir", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)-uses-org.apache.commons.io.FileCleanerTestCase.testFile", "source": "org.apache.commons.io.FileCleanerTestCase(java.lang.String)", "target": "org.apache.commons.io.FileCleanerTestCase.testFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "source": "org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter.fileFilters", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-uses-org.apache.commons.io.DemuxTestCase.T3", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.DemuxTestCase.T3", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.falseFilters", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()-uses-org.apache.commons.io.output.LockableFileWriterTest.lockFile", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "target": "org.apache.commons.io.output.LockableFileWriterTest.lockFile", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()-uses-org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()", "target": "org.apache.commons.io.filefilter.OrFileFilterTestCase.testFileResults", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)-uses-org.apache.commons.io.FileUtils.ONE_KB", "source": "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)", "target": "org.apache.commons.io.FileUtils.ONE_KB", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.run()-uses-org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "target": "org.apache.commons.io.DemuxTestCase$WriterThread.m_data", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)-uses-org.apache.commons.io.output.ByteArrayOutputStream.count", "source": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()-uses-org.apache.commons.io.output.ThresholdingOutputStream.written", "source": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.written", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()-uses-org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()", "target": "org.apache.commons.io.input.SwappedDataInputStreamTest.sdis", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)-uses-org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "source": "org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "target": "org.apache.commons.io.FilenameUtils.WINDOWS_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()-uses-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.invoked", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase.setUp()-uses-org.apache.commons.io.FileUtilsTestCase.testFile1", "source": "org.apache.commons.io.FileUtilsTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsTestCase.testFile1", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()-uses-org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBytes", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()-uses-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.yellForClose", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtils.<clinit>()-uses-org.apache.commons.io.FileSystemUtils.OS", "source": "org.apache.commons.io.FileSystemUtils.<clinit>()", "target": "org.apache.commons.io.FileSystemUtils.OS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase$WriterThread.run()-uses-org.apache.commons.io.DemuxTestCase.c_random", "source": "org.apache.commons.io.DemuxTestCase$WriterThread.run()", "target": "org.apache.commons.io.DemuxTestCase.c_random", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()-uses-org.apache.commons.io.output.ThresholdingOutputStream.threshold", "source": "org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "target": "org.apache.commons.io.output.ThresholdingOutputStream.threshold", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()-uses-org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStream.currentOutputStream", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-uses-org.apache.commons.io.DemuxTestCase.DATA4", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.DemuxTestCase.DATA4", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-uses-org.apache.commons.io.IOUtilsCopyTestCase.inData", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.IOUtilsCopyTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.setUp()-uses-org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "source": "org.apache.commons.io.FilenameUtilsTestCase.setUp()", "target": "org.apache.commons.io.FilenameUtilsTestCase.testFile2Size", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.TEST_FILE_NAME_PREFIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner$Tracker.delete()-uses-org.apache.commons.io.FileCleaner$Tracker.path", "source": "org.apache.commons.io.FileCleaner$Tracker.delete()", "target": "org.apache.commons.io.FileCleaner$Tracker.path", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.<clinit>()-uses-org.apache.commons.io.IOUtils.LINE_SEPARATOR", "source": "org.apache.commons.io.IOUtils.<clinit>()", "target": "org.apache.commons.io.IOUtils.LINE_SEPARATOR", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream.read()-uses-org.apache.commons.io.input.CountingInputStream.count", "source": "org.apache.commons.io.input.CountingInputStream.read()", "target": "org.apache.commons.io.input.CountingInputStream.count", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.setUp()-uses-org.apache.commons.io.output.LockableFileWriterTest.file", "source": "org.apache.commons.io.output.LockableFileWriterTest.setUp()", "target": "org.apache.commons.io.output.LockableFileWriterTest.file", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)-uses-org.apache.commons.io.filefilter.FileFilterUtils.svnFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.FileFilterUtils.svnFilter", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream.flush()-uses-org.apache.commons.io.output.TeeOutputStream.branch", "source": "org.apache.commons.io.output.TeeOutputStream.flush()", "target": "org.apache.commons.io.output.TeeOutputStream.branch", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.trueFilters", "label": "uses", "properties": {"weight": 24, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()-uses-org.apache.commons.io.output.LockableFileWriterTest.file", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "target": "org.apache.commons.io.output.LockableFileWriterTest.file", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()-uses-org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()", "target": "org.apache.commons.io.FileUtilsFileNewerTestCase.m_testFile1", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()-uses-org.apache.commons.io.IOUtilsWriteTestCase.inData", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.IOUtilsWriteTestCase.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()-uses-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.file", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)-uses-org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter.accept(java.io.File,java.lang.String)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter.filenameFilter", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()-uses-org.apache.commons.io.CopyUtilsTest.inData", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.CopyUtilsTest.inData", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()-uses-org.apache.commons.io.FilenameUtilsTestCase.SEP", "source": "org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()", "target": "org.apache.commons.io.FilenameUtilsTestCase.SEP", "label": "uses", "properties": {"weight": 149, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])-uses-org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY", "source": "org.apache.commons.io.FileUtils.toFiles(java.net.URL[])", "target": "org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()-uses-org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()", "target": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase.top", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)-instantiates-org.apache.commons.io.filefilter.NotFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.NotFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()-instantiates-java.lang.String", "source": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()-instantiates-org.apache.commons.io.filefilter.SuffixFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()", "target": "org.apache.commons.io.filefilter.SuffixFileFilter", "label": "instantiates", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()-instantiates-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testOr()", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "instantiates", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testOutputStream()-instantiates-org.apache.commons.io.output.DemuxOutputStream", "source": "org.apache.commons.io.DemuxTestCase.testOutputStream()", "target": "org.apache.commons.io.output.DemuxOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()-instantiates-org.apache.commons.io.filefilter.DelegateFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()", "target": "org.apache.commons.io.filefilter.DelegateFileFilter", "label": "instantiates", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-instantiates-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)-instantiates-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)-instantiates-org.apache.commons.io.filefilter.DelegateFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-instantiates-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "instantiates", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()-instantiates-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()-instantiates-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)-instantiates-java.lang.String", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()-instantiates-org.apache.commons.io.filefilter.PrefixFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()", "target": "org.apache.commons.io.filefilter.PrefixFileFilter", "label": "instantiates", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)-instantiates-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.HexDumpTest.testDump()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.HexDumpTest.testDump()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()-instantiates-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "instantiates", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)-instantiates-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)-instantiates-org.apache.commons.io.DemuxTestCase$ReaderThread", "source": "org.apache.commons.io.DemuxTestCase.startReader(java.lang.String,java.lang.String,org.apache.commons.io.input.DemuxInputStream)", "target": "org.apache.commons.io.DemuxTestCase$ReaderThread", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)-instantiates-org.apache.commons.io.filefilter.SuffixFileFilter", "source": "org.apache.commons.io.FileUtils.listFiles(java.io.File,java.lang.String[],boolean)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()-instantiates-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "label": "instantiates", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()-instantiates-org.apache.commons.io.filefilter.NotFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNot()", "target": "org.apache.commons.io.filefilter.NotFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(byte[],java.lang.String)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF3()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toString(byte[])-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtils.toString(byte[])", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)-instantiates-org.apache.commons.io.DemuxTestCase$WriterThread", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.DemuxTestCase$WriterThread", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)-instantiates-org.apache.commons.io.FileCleaner$Tracker", "source": "org.apache.commons.io.FileCleaner.track(java.io.File,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner$Tracker", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()-instantiates-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()-instantiates-org.apache.commons.io.output.CountingOutputStream", "source": "org.apache.commons.io.output.CountingOutputStreamTest.testCounting()", "target": "org.apache.commons.io.output.CountingOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()-instantiates-java.lang.String", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)-instantiates-org.apache.commons.io.FileCleaner$Tracker", "source": "org.apache.commons.io.FileCleaner.track(java.lang.String,java.lang.Object)", "target": "org.apache.commons.io.FileCleaner$Tracker", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testResetting()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()-instantiates-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.ByteArrayOutputStream.toString()-instantiates-java.lang.String", "source": "org.apache.commons.io.output.ByteArrayOutputStream.toString()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()-instantiates-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "instantiates", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String,java.lang.String,org.apache.commons.io.output.DemuxOutputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer,java.lang.String)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()-instantiates-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)-instantiates-java.lang.String", "source": "org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String,boolean)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-instantiates-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()-instantiates-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()-instantiates-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF2()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()-instantiates-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(byte[],java.io.Writer)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.NullOutputStreamTest.testNull()-instantiates-org.apache.commons.io.output.NullOutputStream", "source": "org.apache.commons.io.output.NullOutputStreamTest.testNull()", "target": "org.apache.commons.io.output.NullOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)-instantiates-org.apache.commons.io.filefilter.SuffixFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.SuffixFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-instantiates-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()-instantiates-java.lang.String", "source": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)-instantiates-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()-instantiates-org.apache.commons.io.filefilter.NameFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()", "target": "org.apache.commons.io.filefilter.NameFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()-instantiates-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "instantiates", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()-instantiates-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "label": "instantiates", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()-instantiates-org.apache.commons.io.filefilter.DirectoryFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()", "target": "org.apache.commons.io.filefilter.DirectoryFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()-instantiates-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()-instantiates-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)-instantiates-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)-instantiates-org.apache.commons.io.filefilter.PrefixFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "target": "org.apache.commons.io.filefilter.PrefixFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()-instantiates-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream(int,java.io.File)", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.Reader,java.lang.String)", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()-instantiates-org.apache.commons.io.output.LockableFileWriter", "source": "org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()", "target": "org.apache.commons.io.output.LockableFileWriter", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()-instantiates-org.apache.commons.io.input.SwappedDataInputStream", "source": "org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()", "target": "org.apache.commons.io.input.SwappedDataInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testEOF1()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtils.write(char[],java.io.OutputStream,java.lang.String)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testCounting()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)-instantiates-org.apache.commons.io.filefilter.DelegateFileFilter", "source": "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "target": "org.apache.commons.io.filefilter.DelegateFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()-instantiates-java.lang.String", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testSkipping()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()-instantiates-org.apache.commons.io.output.TeeOutputStream", "source": "org.apache.commons.io.output.TeeOutputStreamTest.testTee()", "target": "org.apache.commons.io.output.TeeOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)-instantiates-org.apache.commons.io.filefilter.OrFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(java.util.List)", "target": "org.apache.commons.io.filefilter.OrFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()-instantiates-org.apache.commons.io.input.ClassLoaderObjectInputStream", "source": "org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()", "target": "org.apache.commons.io.input.ClassLoaderObjectInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()-instantiates-org.apache.commons.io.output.DeferredFileOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()", "target": "org.apache.commons.io.output.DeferredFileOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnCloseInputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnCloseInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()-instantiates-org.apache.commons.io.filefilter.AndFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()", "target": "org.apache.commons.io.filefilter.AndFileFilter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()-instantiates-org.apache.commons.io.output.ByteArrayOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()", "target": "org.apache.commons.io.output.ByteArrayOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()-instantiates-org.apache.commons.io.filefilter.WildcardFilter", "source": "org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()", "target": "org.apache.commons.io.filefilter.WildcardFilter", "label": "instantiates", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()-instantiates-org.apache.commons.io.input.CountingInputStream", "source": "org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()", "target": "org.apache.commons.io.input.CountingInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()-instantiates-org.apache.commons.io.FileSystemUtils", "source": "org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()", "target": "org.apache.commons.io.FileSystemUtils", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()-instantiates-org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "source": "org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()", "target": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.DemuxTestCase.testInputStream()-instantiates-org.apache.commons.io.input.DemuxInputStream", "source": "org.apache.commons.io.DemuxTestCase.testInputStream()", "target": "org.apache.commons.io.input.DemuxInputStream", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.TrueFileFilter-specializes-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.TrueFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnCloseInputStream-specializes-org.apache.commons.io.input.ProxyInputStream", "source": "org.apache.commons.io.testtools.YellOnCloseInputStream", "target": "org.apache.commons.io.input.ProxyInputStream", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DelegateFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.DelegateFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilterTestCase-specializes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "source": "org.apache.commons.io.filefilter.OrFileFilterTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-specializes-org.apache.commons.io.filefilter.ConditionalFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileSystemUtilsTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.FileSystemUtilsTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FalseFileFilter-specializes-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.FalseFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NotFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.NotFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.DirectoryFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.DirectoryFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter-specializes-org.apache.commons.io.filefilter.TrueFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter", "target": "org.apache.commons.io.filefilter.TrueFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-specializes-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.PrefixFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.PrefixFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.WildcardFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.WildcardFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.OrFileFilter-specializes-org.apache.commons.io.filefilter.ConditionalFileFilter", "source": "org.apache.commons.io.filefilter.OrFileFilter", "target": "org.apache.commons.io.filefilter.ConditionalFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.FileUtilsTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AbstractFileFilter-specializes-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AbstractFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FilenameUtilsTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.FilenameUtilsTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter-specializes-org.apache.commons.io.filefilter.FalseFileFilter", "source": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter", "target": "org.apache.commons.io.filefilter.FalseFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsCopyTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.IOUtilsCopyTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream-specializes-org.apache.commons.io.output.ProxyOutputStream", "source": "org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.TeeOutputStream-specializes-org.apache.commons.io.output.ProxyOutputStream", "source": "org.apache.commons.io.output.TeeOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.IOUtilsTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.FileFilterTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.filefilter.FileFilterTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.FileUtilsCleanDirectoryTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.CountingInputStream-specializes-org.apache.commons.io.input.ProxyInputStream", "source": "org.apache.commons.io.input.CountingInputStream", "target": "org.apache.commons.io.input.ProxyInputStream", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.input.SwappedDataInputStream-specializes-org.apache.commons.io.input.ProxyInputStream", "source": "org.apache.commons.io.input.SwappedDataInputStream", "target": "org.apache.commons.io.input.ProxyInputStream", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.CopyUtilsTest-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.CopyUtilsTest", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.CountingOutputStream-specializes-org.apache.commons.io.output.ProxyOutputStream", "source": "org.apache.commons.io.output.CountingOutputStream", "target": "org.apache.commons.io.output.ProxyOutputStream", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilter-specializes-org.apache.commons.io.filefilter.IOFileFilter", "source": "org.apache.commons.io.filefilter.AndFileFilter", "target": "org.apache.commons.io.filefilter.IOFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.IOUtilsWriteTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.IOUtilsWriteTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileCleanerTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.FileCleanerTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.NameFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.NameFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.AndFileFilterTestCase-specializes-org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "source": "org.apache.commons.io.filefilter.AndFileFilterTestCase", "target": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase-specializes-org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "source": "org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase", "target": "org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsListFilesTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.FileUtilsListFilesTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.filefilter.SuffixFileFilter-specializes-org.apache.commons.io.filefilter.AbstractFileFilter", "source": "org.apache.commons.io.filefilter.SuffixFileFilter", "target": "org.apache.commons.io.filefilter.AbstractFileFilter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.output.DeferredFileOutputStream-specializes-org.apache.commons.io.output.ThresholdingOutputStream", "source": "org.apache.commons.io.output.DeferredFileOutputStream", "target": "org.apache.commons.io.output.ThresholdingOutputStream", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "org.apache.commons.io.FileUtilsFileNewerTestCase-specializes-org.apache.commons.io.testtools.FileBasedTestCase", "source": "org.apache.commons.io.FileUtilsFileNewerTestCase", "target": "org.apache.commons.io.testtools.FileBasedTestCase", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "layer:Presentation Layer-allowedDependency-layer:Service Layer", "source": "layer:Presentation Layer", "target": "layer:Service Layer", "label": "allowedDependency", "properties": {"weight": 1}}}, {"data": {"id": "layer:Service Layer-allowedDependency-layer:Domain Layer", "source": "layer:Service Layer", "target": "layer:Domain Layer", "label": "allowedDependency", "properties": {"weight": 1}}}, {"data": {"id": "layer:Domain Layer-allowedDependency-layer:Data Source Layer", "source": "layer:Domain Layer", "target": "layer:Data Source Layer", "label": "allowedDependency", "properties": {"weight": 1}}}, {"data": {"id": "org.apache.commons.io.filefilter-dependsOn-org.apache.commons.io.testtools", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io.testtools", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io-dependsOn-org.apache.commons.io.filefilter", "source": "org.apache.commons.io", "target": "org.apache.commons.io.filefilter", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.filefilter-dependsOn-org.apache.commons.io", "source": "org.apache.commons.io.filefilter", "target": "org.apache.commons.io", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools-dependsOn-org.apache.commons.io.output", "source": "org.apache.commons.io.testtools", "target": "org.apache.commons.io.output", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io-dependsOn-org.apache.commons.io.output", "source": "org.apache.commons.io", "target": "org.apache.commons.io.output", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.output-dependsOn-org.apache.commons.io", "source": "org.apache.commons.io.output", "target": "org.apache.commons.io", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools-dependsOn-org.apache.commons.io.input", "source": "org.apache.commons.io.testtools", "target": "org.apache.commons.io.input", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io-dependsOn-org.apache.commons.io.input", "source": "org.apache.commons.io", "target": "org.apache.commons.io.input", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.input-dependsOn-org.apache.commons.io", "source": "org.apache.commons.io.input", "target": "org.apache.commons.io", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io-dependsOn-org.apache.commons.io.testtools", "source": "org.apache.commons.io", "target": "org.apache.commons.io.testtools", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "org.apache.commons.io.testtools-dependsOn-org.apache.commons.io", "source": "org.apache.commons.io.testtools", "target": "org.apache.commons.io", "label": "dependsOn", "properties": {"description": "(no description)"}}}]}}