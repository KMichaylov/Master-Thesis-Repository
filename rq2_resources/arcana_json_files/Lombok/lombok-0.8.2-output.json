{"elements": {"nodes": [{"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "/**\r\n * Called for both methods (MethodDeclaration) and constructors (ConstructorDeclaration), but not for\r\n * Clinit objects, which are a vestigial Eclipse thing that never contain anything. Static initializers\r\n * show up as 'Initializer', in the visitInitializer method, with modifier bit STATIC set.\r\n */\r\nvoid visitMethod(lombok.eclipse.EclipseAST.Node methodNode, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method);", "docComment": "Called for both methods (MethodDeclaration) and constructors (ConstructorDeclaration), but not for\r\nClinit objects, which are a vestigial Eclipse thing that never contain anything. Static initializers\r\nshow up as 'Initializer', in the visitInitializer method, with modifier bit STATIC set.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.eclipseArea", "labels": ["Variable"], "properties": {"sourceText": "private java.awt.Component eclipseArea;", "visibility": "private", "simpleName": "eclipseArea", "qualifiedName": "lombok.installer.Installer.eclipseArea", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.METHOD", "labels": ["Variable"], "properties": {"sourceText": "METHOD()", "visibility": "public", "simpleName": "METHOD", "qualifiedName": "lombok.core.AST$Kind.METHOD", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.MethodDeclaration createToString(lombok.eclipse.EclipseAST.Node type, java.util.Collection<lombok.eclipse.EclipseAST.Node> fields, boolean includeFieldNames, boolean callSuper, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    char[] rawTypeName = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get())).name;\r\n    java.lang.String typeName = (rawTypeName == null) ? \"\" : new java.lang.String(rawTypeName);\r\n    char[] suffix = \")\".toCharArray();\r\n    java.lang.String infixS = \", \";\r\n    char[] infix = infixS.toCharArray();\r\n    long p = (((long) (pos.sourceStart)) << 32) | pos.sourceEnd;\r\n    final int PLUS = org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS;\r\n    char[] prefix;\r\n    if (callSuper) {\r\n        prefix = (typeName + \"(super=\").toCharArray();\r\n    } else if (fields.isEmpty()) {\r\n        prefix = (typeName + \"()\").toCharArray();\r\n    } else if (includeFieldNames) {\r\n        prefix = (((typeName + \"(\") + new java.lang.String(((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (fields.iterator().next().get())).name)) + \"=\").toCharArray();\r\n    } else {\r\n        prefix = (typeName + \"(\").toCharArray();\r\n    }\r\n    boolean first = true;\r\n    org.eclipse.jdt.internal.compiler.ast.Expression current = new org.eclipse.jdt.internal.compiler.ast.StringLiteral(prefix, 0, 0, 0);\r\n    if (callSuper) {\r\n        org.eclipse.jdt.internal.compiler.ast.MessageSend callToSuper = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n        callToSuper.receiver = new org.eclipse.jdt.internal.compiler.ast.SuperReference(0, 0);\r\n        callToSuper.selector = \"toString\".toCharArray();\r\n        current = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(current, callToSuper, PLUS);\r\n        first = false;\r\n    }\r\n    for (lombok.eclipse.EclipseAST.Node field : fields) {\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration f = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (field.get()));\r\n        if ((f.name == null) || (f.type == null)) {\r\n            continue;\r\n        }\r\n        org.eclipse.jdt.internal.compiler.ast.Expression ex;\r\n        if (f.type.dimensions() > 0) {\r\n            org.eclipse.jdt.internal.compiler.ast.MessageSend arrayToString = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n            arrayToString.receiver = this.generateQualifiedNameRef(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA, org.eclipse.jdt.internal.compiler.lookup.TypeConstants.UTIL, \"Arrays\".toCharArray());\r\n            arrayToString.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(f.name, p) };\r\n            if ((f.type.dimensions() > 1) || (!lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES.contains(new java.lang.String(f.type.getLastToken())))) {\r\n                arrayToString.selector = \"deepToString\".toCharArray();\r\n            } else {\r\n                arrayToString.selector = \"toString\".toCharArray();\r\n            }\r\n            ex = arrayToString;\r\n        } else {\r\n            ex = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(f.name, p);\r\n        }\r\n        if (first) {\r\n            current = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(current, ex, PLUS);\r\n            first = false;\r\n            continue;\r\n        }\r\n        if (includeFieldNames) {\r\n            char[] namePlusEqualsSign = ((infixS + new java.lang.String(f.name)) + \"=\").toCharArray();\r\n            current = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(current, new org.eclipse.jdt.internal.compiler.ast.StringLiteral(namePlusEqualsSign, 0, 0, 0), PLUS);\r\n        } else {\r\n            current = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(current, new org.eclipse.jdt.internal.compiler.ast.StringLiteral(infix, 0, 0, 0), PLUS);\r\n        }\r\n        current = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(current, ex, PLUS);\r\n    }\r\n    if (!first) {\r\n        current = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(current, new org.eclipse.jdt.internal.compiler.ast.StringLiteral(suffix, 0, 0, 0), PLUS);\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnStatement = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(current, ((int) (p >> 32)), ((int) (p)));\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (type.top().get())).compilationResult);\r\n    method.modifiers = lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel.PUBLIC);\r\n    method.returnType = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_STRING, new long[]{ 0, 0, 0 });\r\n    method.annotations = new org.eclipse.jdt.internal.compiler.ast.Annotation[]{ new org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation(new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_OVERRIDE, new long[]{ 0, 0, 0 }), 0) };\r\n    method.arguments = null;\r\n    method.selector = \"toString\".toCharArray();\r\n    method.thrownExceptions = null;\r\n    method.typeParameters = null;\r\n    method.bits |= lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n    method.bodyStart = method.declarationSourceStart = method.sourceStart = pos.sourceStart;\r\n    method.bodyEnd = method.declarationSourceEnd = method.sourceEnd = pos.sourceEnd;\r\n    method.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ returnStatement };\r\n    return method;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "qualifiedName": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl type) {\r\n    if (this.setAndGetAsHandled(type)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.javac.JavacAST.Node> childNodes = new java.util.ArrayList<lombok.javac.JavacAST.Node>();\r\n    for (com.sun.tools.javac.tree.JCTree def : type.defs) {\r\n        for (com.sun.tools.javac.tree.JCTree.JCAnnotation annotation : type.mods.annotations) {\r\n            lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildAnnotation(annotation));\r\n        }\r\n        /* A def can be:\n        JCClassDecl for inner types\n        JCMethodDecl for constructors and methods\n        JCVariableDecl for fields\n        JCBlock for (static) initializers\n         */\r\n        if (def instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n            lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildMethod(((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (def))));\r\n        } else if (def instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n            lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildType(((com.sun.tools.javac.tree.JCTree.JCClassDecl) (def))));\r\n        } else if (def instanceof com.sun.tools.javac.tree.JCTree.JCVariableDecl) {\r\n            lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildField(((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (def))));\r\n        } else if (def instanceof com.sun.tools.javac.tree.JCTree.JCBlock) {\r\n            lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildInitializer(((com.sun.tools.javac.tree.JCTree.JCBlock) (def))));\r\n        }\r\n    }\r\n    return this.putInMap(new lombok.javac.JavacAST.Node(type, childNodes, lombok.core.AST.Kind.TYPE));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "getSelectedEclipses()", "qualifiedName": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "kind": "method", "sourceText": "java.util.List<lombok.installer.EclipseLocation> getSelectedEclipses() {\r\n    java.util.List<lombok.installer.EclipseLocation> list = new java.util.ArrayList<lombok.installer.EclipseLocation>();\r\n    for (lombok.installer.EclipseLocation loc : this.locations) {\r\n        if (loc.selected) {\r\n            list.add(loc);\r\n        }\r\n    }\r\n    return list;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitLocal(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCVariableDecl local) {\r\n    this.indent--;\r\n    this.print(\"</LOCAL %s %s>\", local.vartype, local.name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.indent", "labels": ["Variable"], "properties": {"sourceText": "private int indent = 0;", "visibility": "private", "simpleName": "indent", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.indent", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "labels": ["Variable"], "properties": {"sourceText": "private lombok.eclipse.EclipseAnnotationHandler<T> handler;", "visibility": "private", "simpleName": "handler", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).1", "labels": ["Variable"], "properties": {"simpleName": "loader", "qualifiedName": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode()", "kind": "constructor", "sourceText": "HandleEqualsAndHashCode() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "loadWindowsDriveInfoLib()", "qualifiedName": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "kind": "static method", "sourceText": "private static void loadWindowsDriveInfoLib() throws java.io.IOException {\r\n    if (!lombok.installer.EclipseFinder.windowsDriveInfoLibLoaded.compareAndSet(false, true)) {\r\n        return;\r\n    }\r\n    final java.lang.String prefix = (\"lombok-\" + lombok.core.Version.getVersion()) + \"-\";\r\n    java.io.File temp = java.io.File.createTempFile(\"lombok\", \".mark\");\r\n    java.io.File dll1 = new java.io.File(temp.getParentFile(), prefix + \"WindowsDriveInfo-i386.dll\");\r\n    java.io.File dll2 = new java.io.File(temp.getParentFile(), prefix + \"WindowsDriveInfo-x86_64.dll\");\r\n    temp.delete();\r\n    dll1.deleteOnExit();\r\n    dll2.deleteOnExit();\r\n    try {\r\n        if (lombok.installer.EclipseFinder.unpackDLL(\"WindowsDriveInfo-i386.dll\", dll1)) {\r\n            java.lang.System.load(dll1.getAbsolutePath());\r\n            return;\r\n        }\r\n    } catch (java.lang.Throwable ignore) {\r\n    }\r\n    try {\r\n        if (lombok.installer.EclipseFinder.unpackDLL(\"WindowsDriveInfo-x86_64.dll\", dll2)) {\r\n            java.lang.System.load(dll2.getAbsolutePath());\r\n        }\r\n    } catch (java.lang.Throwable ignore) {\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "lombok.installer.WindowsDriveInfo.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "kind": "method", "sourceText": "/**\r\n * Called for static and instance initializers. You can tell the difference via the modifier flag on the\r\n * ASTNode (8 for static, 0 for not static). The content is in the 'block', not in the 'initialization',\r\n * which would always be null for an initializer instance.\r\n */\r\nvoid visitInitializer(lombok.eclipse.EclipseAST.Node initializerNode, org.eclipse.jdt.internal.compiler.ast.Initializer initializer);", "docComment": "Called for static and instance initializers. You can tell the difference via the modifier flag on the\r\nASTNode (8 for static, 0 for not static). The content is in the 'block', not in the 'initialization',\r\nwhich would always be null for an initializer instance.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "public void visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field, lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    this.forcePrint(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.singleton(java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "item", "qualifiedName": "lombok.eclipse.EclipseAST.singleton(java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.setHandled()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setHandled()", "qualifiedName": "lombok.core.AST$Node.setHandled()", "kind": "method", "sourceText": "/**\r\n * Sets the handled flag, then returns 'this'.\r\n *\r\n * @see #handled\r\n */\r\npublic lombok.core.AST<N>.Node setHandled() {\r\n    this.handled = true;\r\n    return this;\r\n}", "docComment": "Sets the handled flag, then returns 'this'.\r\n\r\n@see #handled\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "argNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "getEclipseExecutableName()", "qualifiedName": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "kind": "static method", "sourceText": "/**\r\n * Returns the proper name of the executable for the local OS.\r\n *\r\n * @return 'Eclipse.app' on OS X, 'eclipse.exe' on Windows, and 'eclipse' on other OSes.\r\n */\r\nstatic java.lang.String getEclipseExecutableName() {\r\n    switch (lombok.installer.EclipseFinder.getOS()) {\r\n        case WINDOWS :\r\n            return \"eclipse.exe\";\r\n        case MAC_OS_X :\r\n            return \"Eclipse.app\";\r\n        default :\r\n        case UNIX :\r\n            return \"eclipse\";\r\n    }\r\n}", "docComment": "Returns the proper name of the executable for the local OS.\r\n\r\n@return 'Eclipse.app' on OS X, 'eclipse.exe' on Windows, and 'eclipse' on other OSes.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "method", "sourceText": "public void endVisitCompilationUnit(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit) {\r\n    this.indent--;\r\n    this.print(\"</CUD>\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "int", "labels": ["Primitive"], "properties": {"simpleName": "int", "qualifiedName": "int", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getPackageDeclaration()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPackageDeclaration()", "qualifiedName": "lombok.eclipse.EclipseAST.getPackageDeclaration()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.lang.String getPackageDeclaration() {\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration cud = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (this.top().get()));\r\n    org.eclipse.jdt.internal.compiler.ast.ImportReference pkg = cud.currentPackage;\r\n    return pkg == null ? null : lombok.eclipse.Eclipse.toQualifiedName(pkg.getImportName());\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandlePrintAST()", "kind": "constructor", "sourceText": "HandlePrintAST() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "sourceEnd", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "labels": ["Variable"], "properties": {"sourceText": "EXISTS_BY_USER()", "visibility": "public", "simpleName": "EXISTS_BY_USER", "qualifiedName": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess.dim", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Dimensions of the field. Works for arrays, or for java.util.collections.\r\n */\r\npublic final int dim;", "visibility": "public", "simpleName": "dim", "qualifiedName": "lombok.core.AST$FieldAccess.dim", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "lombok.core.Version.main(java.lang.String[])", "kind": "static method", "sourceText": "/**\r\n * Prints the version followed by a newline, and exits.\r\n */\r\npublic static void main(java.lang.String[] args) {\r\n    java.lang.System.out.println(lombok.core.Version.VERSION);\r\n}", "docComment": "Prints the version followed by a newline, and exits.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "public boolean handle(final lombok.javac.JavacAST.Node node) {\r\n    return this.handler.handle(lombok.javac.Javac.createAnnotation(this.annotationClass, node), ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (node.get())), node);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The index into an array initializer (e.g. if the second value in an array initializer is\r\n * an integer constant expression like '5+SomeOtherClass.CONSTANT', this exception will be thrown,\r\n * and you'll get a '1' for idx.\r\n */\r\npublic final int idx;", "visibility": "public", "simpleName": "idx", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[]).0", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "qualifiedName": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement statement) {\r\n    return this.buildStatementOrExpression(statement);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getFileName()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFileName()", "qualifiedName": "lombok.core.AST$Node.getFileName()", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's getFileName method.\r\n *\r\n * @see AST#getFileName()\r\n */\r\npublic java.lang.String getFileName() {\r\n    return this.fileName;\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's getFileName method.\r\n\r\n@see AST#getFileName()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "static method", "sourceText": "/**\r\n * This method is called immediately after Eclipse finishes building a CompilationUnitDeclaration, which is\r\n * the top-level AST node when Eclipse parses a source file. The signature is 'magic' - you should not\r\n * change it!\r\n *\r\n * Eclipse's parsers often operate in diet mode, which means many parts of the AST have been left blank.\r\n * Be ready to deal with just about anything being null, such as the Statement[] arrays of the Method AST nodes.\r\n *\r\n * @param parser\r\n * \t\tThe Eclipse parser object that generated the AST.\r\n * @param ast\r\n * \t\tThe AST node belonging to the compilation unit (java speak for a single source file).\r\n */\r\npublic static void transform(org.eclipse.jdt.internal.compiler.parser.Parser parser, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration ast) {\r\n    if (lombok.eclipse.TransformEclipseAST.disableLombok) {\r\n        return;\r\n    }\r\n    try {\r\n        lombok.eclipse.EclipseAST existing = lombok.eclipse.TransformEclipseAST.getCache(ast);\r\n        if (existing == null) {\r\n            existing = new lombok.eclipse.EclipseAST(ast);\r\n            lombok.eclipse.TransformEclipseAST.setCache(ast, existing);\r\n        } else {\r\n            existing.reparse();\r\n        }\r\n        new lombok.eclipse.TransformEclipseAST(existing).go();\r\n    } catch (java.lang.Throwable t) {\r\n        try {\r\n            java.lang.String message = \"Lombok can't parse this source: \" + t.toString();\r\n            lombok.eclipse.EclipseAST.addProblemToCompilationResult(ast, false, message, 0, 0);\r\n            t.printStackTrace();\r\n        } catch (java.lang.Throwable t2) {\r\n            lombok.eclipse.Eclipse.error(ast, \"Can't create an error in the problems dialog while adding: \" + t.toString(), t2);\r\n        }\r\n    }\r\n}", "docComment": "This method is called immediately after Eclipse finishes building a CompilationUnitDeclaration, which is\r\nthe top-level AST node when Eclipse parses a source file. The signature is 'magic' - you should not\r\nchange it!\r\n\r\nEclipse's parsers often operate in diet mode, which means many parts of the AST have been left blank.\r\nBe ready to deal with just about anything being null, such as the Statement[] arrays of the Method AST nodes.\r\n\r\n@param parser\r\n\t\tThe Eclipse parser object that generated the AST.\r\n@param ast\r\n\t\tThe AST node belonging to the compilation unit (java speak for a single source file).\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit top = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (annotationNode.top().get()));\r\n    boolean handled = this.handlers.handleAnnotation(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "/**\r\n * Called when an annotation is found that is likely to match the annotation you're interested in.\r\n *\r\n * Be aware that you'll be called for ANY annotation node in the source that looks like a match. There is,\r\n * for example, no guarantee that the annotation node belongs to a method, even if you set your\r\n * TargetType in the annotation to methods only.\r\n *\r\n * @param annotation\r\n * \t\tThe actual annotation - use this object to retrieve the annotation parameters.\r\n * @param ast\r\n * \t\tThe javac AST node representing the annotation.\r\n * @param annotationNode\r\n * \t\tThe Lombok AST wrapper around the 'ast' parameter. You can use this object\r\n * \t\tto travel back up the chain (something javac AST can't do) to the parent of the annotation, as well\r\n * \t\tas access useful methods such as generating warnings or errors focused on the annotation.\r\n * @return <code>true</code> if you don't want to be called again about this annotation during this\r\ncompile session (you've handled it), or <code>false</code> to indicate you aren't done yet.\r\n */\r\nboolean handle(lombok.core.AnnotationValues<T> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode);", "docComment": "Called when an annotation is found that is likely to match the annotation you're interested in.\r\n\r\nBe aware that you'll be called for ANY annotation node in the source that looks like a match. There is,\r\nfor example, no guarantee that the annotation node belongs to a method, even if you set your\r\nTargetType in the annotation to methods only.\r\n\r\n@param annotation\r\n\t\tThe actual annotation - use this object to retrieve the annotation parameters.\r\n@param ast\r\n\t\tThe javac AST node representing the annotation.\r\n@param annotationNode\r\n\t\tThe Lombok AST wrapper around the 'ast' parameter. You can use this object\r\n\t\tto travel back up the chain (something javac AST can't do) to the parent of the annotation, as well\r\n\t\tas access useful methods such as generating warnings or errors focused on the annotation.\r\n@return <code>true</code> if you don't want to be called again about this annotation during this\r\ncompile session (you've handled it), or <code>false</code> to indicate you aren't done yet.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "javacError(java.lang.String,java.lang.Throwable)", "qualifiedName": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "kind": "method", "sourceText": "/**\r\n * Generates an error in the Messager that was used to initialize this HandlerLibrary.\r\n */\r\npublic void javacError(java.lang.String message, java.lang.Throwable t) {\r\n    this.messager.printMessage(javax.tools.Diagnostic.Kind.ERROR, message + (t == null ? \"\" : \": \" + t));\r\n}", "docComment": "Generates an error in the Messager that was used to initialize this HandlerLibrary.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.PrintAST.outfile()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "outfile()", "qualifiedName": "lombok.core.PrintAST.outfile()", "kind": "method", "sourceText": "/**\r\n * Normally, the AST is printed to standard out, but you can pick a filename instead. Useful for many IDEs\r\n * which don't have a console unless you start them from the command line.\r\n */\r\njava.lang.String outfile() default \"\";", "docComment": "Normally, the AST is printed to standard out, but you can pick a filename instead. Useful for many IDEs\r\nwhich don't have a console unless you start them from the command line.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitInitializer(lombok.eclipse.EclipseAST.Node initializerNode, org.eclipse.jdt.internal.compiler.ast.Initializer initializer) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.OS_NEWLINE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String OS_NEWLINE;", "visibility": "private", "simpleName": "OS_NEWLINE", "qualifiedName": "lombok.installer.EclipseLocation.OS_NEWLINE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).2", "labels": ["Variable"], "properties": {"simpleName": "varName", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstallArea", "labels": ["Variable"], "properties": {"sourceText": "private java.awt.Component uninstallArea;", "visibility": "private", "simpleName": "uninstallArea", "qualifiedName": "lombok.installer.Installer.uninstallArea", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.STATEMENT", "labels": ["Variable"], "properties": {"sourceText": "STATEMENT()", "visibility": "public", "simpleName": "STATEMENT", "qualifiedName": "lombok.core.AST$Kind.STATEMENT", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.show()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "show()", "qualifiedName": "lombok.installer.Installer.show()", "kind": "method", "sourceText": "/**\r\n * Makes the installer window visible.\r\n */\r\npublic void show() {\r\n    this.appWindow.setVisible(true);\r\n    if (lombok.installer.EclipseFinder.getOS() == lombok.installer.EclipseFinder.OS.MAC_OS_X) {\r\n        try {\r\n            lombok.installer.AppleNativeLook.go();\r\n        } catch (java.lang.Throwable ignore) {\r\n            // We're just prettying up the app. If it fails, meh.\r\n        }\r\n    }\r\n}", "docComment": "Makes the installer window visible.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "static method", "sourceText": "static void injectMethod(lombok.eclipse.EclipseAST.Node type, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration parent = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get()));\r\n    if (parent.methods == null) {\r\n        parent.methods = new org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[1];\r\n        parent.methods[0] = method;\r\n    } else {\r\n        boolean injectionComplete = false;\r\n        if (method instanceof org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) {\r\n            for (int i = 0; i < parent.methods.length; i++) {\r\n                if ((parent.methods[i] instanceof org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) && ((parent.methods[i].bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsDefaultConstructor) != 0)) {\r\n                    lombok.eclipse.EclipseAST.Node tossMe = type.getNodeFor(parent.methods[i]);\r\n                    parent.methods[i] = method;\r\n                    if (tossMe != null) {\r\n                        tossMe.up().removeChild(tossMe);\r\n                    }\r\n                    injectionComplete = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!injectionComplete) {\r\n            org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] newArray = new org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[parent.methods.length + 1];\r\n            java.lang.System.arraycopy(parent.methods, 0, newArray, 0, parent.methods.length);\r\n            newArray[parent.methods.length] = method;\r\n            parent.methods = newArray;\r\n        }\r\n    }\r\n    type.add(method, lombok.core.AST.Kind.METHOD).recursiveSetHandled();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "argumentNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl field, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit top = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (annotationNode.top().get()));\r\n    boolean handled = this.handlers.handleAnnotation(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(boolean,java.lang.String,int,int)", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "kind": "constructor", "sourceText": "ParseProblem(boolean isWarning, java.lang.String message, int sourceStart, int sourceEnd) {\r\n    super();\r\n    this.isWarning = isWarning;\r\n    this.message = message;\r\n    this.sourceStart = sourceStart;\r\n    this.sourceEnd = sourceEnd;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "kind": "method", "sourceText": "private boolean createSetterForField(lombok.AccessLevel level, lombok.eclipse.EclipseAST.Node fieldNode, lombok.eclipse.EclipseAST.Node errorNode, org.eclipse.jdt.internal.compiler.ast.ASTNode pos, boolean whineIfExists) {\r\n    if (fieldNode.getKind() != lombok.core.AST.Kind.FIELD) {\r\n        errorNode.addError(\"@Setter is only supported on a field.\");\r\n        return true;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (fieldNode.get()));\r\n    java.lang.String setterName = lombok.core.TransformationsUtil.toSetterName(new java.lang.String(field.name));\r\n    int modifier = lombok.eclipse.handlers.PKG.toModifier(level) | (field.modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccStatic);\r\n    switch (lombok.eclipse.handlers.PKG.methodExists(setterName, fieldNode)) {\r\n        case EXISTS_BY_LOMBOK :\r\n            return true;\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(java.lang.String.format(\"Not generating %s(%s %s): A method with that name already exists\", setterName, field.type, new java.lang.String(field.name)));\r\n            }\r\n            return true;\r\n        default :\r\n        case NOT_EXISTS :\r\n            // continue with creating the setter\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = this.generateSetter(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (fieldNode.up().get())), field, setterName, modifier, pos);\r\n    lombok.eclipse.handlers.PKG.injectMethod(fieldNode.up(), method);\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "direction", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isHandled()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isHandled()", "qualifiedName": "lombok.core.AST$Node.isHandled()", "kind": "method", "sourceText": "/**\r\n * returns the value of the 'handled' flag.\r\n *\r\n * @see #handled\r\n */\r\npublic boolean isHandled() {\r\n    return this.handled;\r\n}", "docComment": "returns the value of the 'handled' flag.\r\n\r\n@see #handled\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "letter", "qualifiedName": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateQualifiedNameRef(char[][])", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.NameReference generateQualifiedNameRef(char[]... varNames) {\r\n    if (varNames.length > 1) {\r\n        return new org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference(varNames, new long[varNames.length], 0, 0);\r\n    } else {\r\n        return new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(varNames[0], 0);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public boolean handle(lombok.core.AnnotationValues<lombok.Getter> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    lombok.eclipse.EclipseAST.Node fieldNode = annotationNode.up();\r\n    lombok.AccessLevel level = annotation.getInstance().value();\r\n    return this.createGetterForField(level, fieldNode, annotationNode, annotationNode.get(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "qualifiedName": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\nprotected lombok.javac.JavacAST.Node buildTree(com.sun.tools.javac.tree.JCTree node, lombok.core.AST.Kind kind) {\r\n    switch (kind) {\r\n        case COMPILATION_UNIT :\r\n            return this.buildCompilationUnit(((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (node)));\r\n        case TYPE :\r\n            return this.buildType(((com.sun.tools.javac.tree.JCTree.JCClassDecl) (node)));\r\n        case FIELD :\r\n            return this.buildField(((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (node)));\r\n        case INITIALIZER :\r\n            return this.buildInitializer(((com.sun.tools.javac.tree.JCTree.JCBlock) (node)));\r\n        case METHOD :\r\n            return this.buildMethod(((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (node)));\r\n        case ARGUMENT :\r\n            return this.buildLocalVar(((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (node)), kind);\r\n        case LOCAL :\r\n            return this.buildLocalVar(((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (node)), kind);\r\n        case STATEMENT :\r\n            return this.buildStatementOrExpression(node);\r\n        case ANNOTATION :\r\n            return this.buildAnnotation(((com.sun.tools.javac.tree.JCTree.JCAnnotation) (node)));\r\n        default :\r\n            throw new java.lang.AssertionError(\"Did not expect: \" + kind);\r\n    }\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).1", "labels": ["Variable"], "properties": {"simpleName": "out", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.handleException(java.lang.Throwable)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "handleException(java.lang.Throwable)", "qualifiedName": "lombok.installer.Installer.handleException(java.lang.Throwable)", "kind": "method", "sourceText": "private void handleException(final java.lang.Throwable t) {\r\n    javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() {\r\n        2() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void run() {\r\n            javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, \"There was a problem during the installation process:\\n\" + t, \"Uh Oh!\", javax.swing.JOptionPane.ERROR_MESSAGE);\r\n            t.printStackTrace();\r\n            java.lang.System.exit(1);\r\n        }\r\n    });\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).1", "labels": ["Variable"], "properties": {"simpleName": "refField", "qualifiedName": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitType(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCClassDecl type) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    this.indent--;\r\n    this.print(\"</TYPE %s>\", type.name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "labels": ["Variable"], "properties": {"sourceText": "private int disablePrinting = 0;", "visibility": "private", "simpleName": "disablePrinting", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "qualifiedName": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "kind": "constructor", "sourceText": "/**\r\n * See the {@link AST.Node} constructor for information.\r\n */\r\npublic Node(com.sun.tools.javac.tree.JCTree node, java.util.List<lombok.javac.JavacAST.Node> children, lombok.core.AST.Kind kind) {\r\n    super(node, children, kind);\r\n}", "docComment": "See the {@link AST.Node} constructor for information.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.MethodDeclaration generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration parent, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field, java.lang.String name, int modifier, org.eclipse.jdt.internal.compiler.ast.ASTNode ast) {\r\n    long pos = (((long) (ast.sourceStart)) << 32) | ast.sourceEnd;\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration(parent.compilationResult);\r\n    method.modifiers = modifier;\r\n    method.returnType = org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_void, 0);\r\n    method.annotations = null;\r\n    org.eclipse.jdt.internal.compiler.ast.Argument param = new org.eclipse.jdt.internal.compiler.ast.Argument(field.name, pos, lombok.eclipse.Eclipse.copyType(field.type), 0);\r\n    method.arguments = new org.eclipse.jdt.internal.compiler.ast.Argument[]{ param };\r\n    method.selector = name.toCharArray();\r\n    method.binding = null;\r\n    method.thrownExceptions = null;\r\n    method.typeParameters = null;\r\n    method.scope = (parent.scope == null) ? null : new org.eclipse.jdt.internal.compiler.lookup.MethodScope(parent.scope, method, false);\r\n    method.bits |= lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n    org.eclipse.jdt.internal.compiler.ast.FieldReference thisX = new org.eclipse.jdt.internal.compiler.ast.FieldReference(field.name, pos);\r\n    thisX.receiver = new org.eclipse.jdt.internal.compiler.ast.ThisReference(ast.sourceStart, ast.sourceEnd);\r\n    org.eclipse.jdt.internal.compiler.ast.Assignment assignment = new org.eclipse.jdt.internal.compiler.ast.Assignment(thisX, new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(field.name, pos), ((int) (pos)));\r\n    method.bodyStart = method.declarationSourceStart = method.sourceStart = ast.sourceStart;\r\n    method.bodyEnd = method.declarationSourceEnd = method.sourceEnd = ast.sourceEnd;\r\n    method.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ assignment };\r\n    return method;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "string", "qualifiedName": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.skipPrintAST", "labels": ["Variable"], "properties": {"sourceText": "private boolean skipPrintAST;", "visibility": "private", "simpleName": "skipPrintAST", "qualifiedName": "lombok.eclipse.HandlerLibrary.skipPrintAST", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitStatement(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree statement) {\r\n    this.print(\"<%s>\", statement.getClass());\r\n    this.indent++;\r\n    this.print(\"%s\", statement);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "constructorExists(lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "kind": "static method", "sourceText": "/**\r\n * Checks if there is a (non-default) constructor. In case of multiple constructors (overloading), only\r\n * the first constructor decides if EXISTS_BY_USER or EXISTS_BY_LOMBOK is returned.\r\n *\r\n * @param node\r\n * \t\tAny node that represents the Type (JCClassDecl) to check for, or any child node thereof.\r\n */\r\nstatic lombok.javac.handlers.PKG.MemberExistsResult constructorExists(lombok.javac.JavacAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl))) {\r\n        node = node.up();\r\n    } \r\n    if ((node != null) && (node.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl)) {\r\n        for (com.sun.tools.javac.tree.JCTree def : ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (node.get())).defs) {\r\n            if (def instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n                if (((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (def)).name.contentEquals(\"<init>\")) {\r\n                    if ((((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (def)).mods.flags & com.sun.tools.javac.code.Flags.GENERATEDCONSTR) != 0) {\r\n                        continue;\r\n                    }\r\n                    lombok.javac.JavacAST.Node existing = node.getNodeFor(def);\r\n                    if ((existing == null) || (!existing.isHandled())) {\r\n                        return lombok.javac.handlers.PKG.MemberExistsResult.EXISTS_BY_USER;\r\n                    }\r\n                    return lombok.javac.handlers.PKG.MemberExistsResult.EXISTS_BY_LOMBOK;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return lombok.javac.handlers.PKG.MemberExistsResult.NOT_EXISTS;\r\n}", "docComment": "Checks if there is a (non-default) constructor. In case of multiple constructors (overloading), only\r\nthe first constructor decides if EXISTS_BY_USER or EXISTS_BY_LOMBOK is returned.\r\n\r\n@param node\r\n\t\tAny node that represents the Type (JCClassDecl) to check for, or any child node thereof.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary", "labels": ["Structure", "Container"], "properties": {"docComment": "This class tracks 'handlers' and knows how to invoke them for any given AST node.\r\n\r\nThis class can find the handlers (via SPI discovery) and will set up the given AST node, such as\r\nbuilding an AnnotationValues instance.\r\n", "simpleName": "HandlerLibrary", "qualifiedName": "lombok.javac.HandlerLibrary", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.addWarning(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addWarning(java.lang.String)", "qualifiedName": "lombok.core.AST$Node.addWarning(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generate a compiler warning on this node.\r\n */\r\npublic abstract void addWarning(java.lang.String message);", "docComment": "Generate a compiler warning on this node.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "kind": "method", "sourceText": "public boolean generateToString(lombok.eclipse.EclipseAST.Node typeNode, lombok.eclipse.EclipseAST.Node errorNode, java.util.List<java.lang.String> excludes, boolean includeFieldNames, boolean callSuper, boolean whineIfExists) {\r\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = null;\r\n    if (typeNode.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (typeNode.get()));\r\n    }\r\n    int modifiers = (typeDecl == null) ? 0 : typeDecl.modifiers;\r\n    boolean notAClass = (modifiers & ((org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccInterface | org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccAnnotation) | org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccEnum)) != 0;\r\n    if ((typeDecl == null) || notAClass) {\r\n        errorNode.addError(\"@ToString is only supported on a class.\");\r\n        return false;\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> nodesForToString = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    for (lombok.eclipse.EclipseAST.Node child : typeNode.down()) {\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (child.get()));\r\n        // Skip static fields.\r\n        if ((fieldDecl.modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccStatic) != 0) {\r\n            continue;\r\n        }\r\n        // Skip excluded fields.\r\n        if (excludes.contains(new java.lang.String(fieldDecl.name))) {\r\n            continue;\r\n        }\r\n        nodesForToString.add(child);\r\n    }\r\n    switch (lombok.eclipse.handlers.PKG.methodExists(\"toString\", typeNode)) {\r\n        case NOT_EXISTS :\r\n            org.eclipse.jdt.internal.compiler.ast.MethodDeclaration toString = this.createToString(typeNode, nodesForToString, includeFieldNames, callSuper, errorNode.get());\r\n            lombok.eclipse.handlers.PKG.injectMethod(typeNode, toString);\r\n            return true;\r\n        case EXISTS_BY_LOMBOK :\r\n            return true;\r\n        default :\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(\"Not generating toString(): A method with that name already exists\");\r\n            }\r\n            return true;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel).0", "labels": ["Variable"], "properties": {"simpleName": "accessLevel", "qualifiedName": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Cleanup</code> annotation for eclipse.\r\n", "simpleName": "HandleCleanup", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.symtab", "labels": ["Variable"], "properties": {"sourceText": "private final com.sun.tools.javac.code.Symtab symtab;", "visibility": "private", "simpleName": "symtab", "qualifiedName": "lombok.javac.JavacAST.symtab", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.putInMap(lombok.core.AST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.core.AST.putInMap(lombok.core.AST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "lombok.installer.Installer$JHyperLink(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "astNode", "qualifiedName": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.addWarning(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AST$Node.addWarning(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitCompilationUnit(lombok.javac.JavacAST.Node top, com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.up()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "up()", "qualifiedName": "lombok.javac.JavacAST$Node.up()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.javac.JavacAST.Node up() {\r\n    return ((lombok.javac.JavacAST.Node) (super.up()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).2", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fieldsOf(java.lang.Class)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "fieldsOf(java.lang.Class)", "qualifiedName": "lombok.core.AST.fieldsOf(java.lang.Class)", "kind": "method", "sourceText": "/**\r\n * Returns FieldAccess objects for the stated class. Each field that contains objects of the kind returned by\r\n * {@link #getStatementTypes()}, either directly or inside of an array or java.util.collection (or array-of-arrays,\r\n * or collection-of-collections, etcetera), is returned.\r\n */\r\nprotected java.util.Collection<lombok.core.AST.FieldAccess> fieldsOf(java.lang.Class<? extends java.lang.Object> c) {\r\n    java.util.Collection<lombok.core.AST.FieldAccess> fields = lombok.core.AST.fieldsOfASTClasses.get(c);\r\n    if (fields != null) {\r\n        return fields;\r\n    }\r\n    fields = new java.util.ArrayList<lombok.core.AST.FieldAccess>();\r\n    this.getFields(c, fields);\r\n    lombok.core.AST.fieldsOfASTClasses.put(c, fields);\r\n    return fields;\r\n}", "docComment": "Returns FieldAccess objects for the stated class. Each field that contains objects of the kind returned by\r\n{@link #getStatementTypes()}, either directly or inside of an array or java.util.collection (or array-of-arrays,\r\nor collection-of-collections, etcetera), is returned.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.apt.Processor()", "kind": "constructor", "sourceText": "Processor() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "c", "qualifiedName": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.isWarning", "labels": ["Variable"], "properties": {"sourceText": "final boolean isWarning;", "visibility": "default", "simpleName": "isWarning", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem.isWarning", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString", "labels": ["Structure"], "properties": {"docComment": "Generates an implementation for the <code>toString</code> method inherited by all objects.\r\n<p>\r\nIf the method already exists, then <code>&#64;ToString</code> will not generate any method, and instead warns\r\nthat it's doing nothing at all. The parameter list and return type are not relevant when deciding to skip generation of\r\nthe method; any method named <code>toString</code> will make <code>&#64;ToString</code> not generate anything.\r\n<p>\r\nAll fields that are non-static are used in the toString generation. You can exclude fields by specifying them\r\nin the <code>exclude</code> parameter.\r\n<p>\r\nArray fields are handled by way of {@link java.util.Arrays#deepToString(Object[])} where necessary.\r\nThe downside is that arrays with circular references (arrays that contain themselves,\r\npossibly indirectly) results in calls to <code>toString</code> throwing a\r\n{@link java.lang.StackOverflowError}. However, the implementations for java's own {@link java.util.ArrayList} suffer\r\nfrom the same flaw.\r\n<p>\r\nThe <code>toString</code> method that is generated will print the class name as well as each field. You can optionally\r\nalso print the names of each field, by setting the <code>includeFieldNames</code> flag to <em>true</em>.\r\n<p>\r\nYou can also choose to include the result of <code>toString</code> in your class's superclass by setting the\r\n<code>callSuper</code> to <em>true</em>.\r\n", "simpleName": "ToString", "qualifiedName": "lombok.ToString", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.buildJavacArea()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildJavacArea()", "qualifiedName": "lombok.installer.Installer.buildJavacArea()", "kind": "method", "sourceText": "private java.awt.Component buildJavacArea() {\r\n    javax.swing.JPanel container = new javax.swing.JPanel();\r\n    container.setLayout(new java.awt.GridBagLayout());\r\n    java.awt.GridBagConstraints constraints = new java.awt.GridBagConstraints();\r\n    constraints.anchor = java.awt.GridBagConstraints.WEST;\r\n    constraints.insets = new java.awt.Insets(8, 0, 0, 16);\r\n    container.add(new javax.swing.JLabel(lombok.installer.Installer.JAVAC_TITLE), constraints);\r\n    constraints.gridy = 1;\r\n    constraints.weightx = 1.0;\r\n    constraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\r\n    container.add(new javax.swing.JLabel(lombok.installer.Installer.JAVAC_EXPLANATION), constraints);\r\n    javax.swing.JLabel example = new javax.swing.JLabel(lombok.installer.Installer.JAVAC_EXAMPLE);\r\n    constraints.gridy = 2;\r\n    container.add(example, constraints);\r\n    return container;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCStatement returnBool(com.sun.tools.javac.tree.TreeMaker maker, boolean bool) {\r\n    return maker.Return(maker.Literal(TypeTags.BOOLEAN, bool ? 1 : 0));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleData()", "kind": "constructor", "sourceText": "HandleData() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "removeChild(lombok.core.AST$Node)", "qualifiedName": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "kind": "method", "sourceText": "/**\r\n * Removes the stated node, which must be a direct child of this node, from the AST.\r\n *\r\n * Does not change the underlying (javac/Eclipse) AST, only the wrapped view.\r\n */\r\npublic void removeChild(lombok.core.AST<N>.Node child) {\r\n    this.children.remove(child);\r\n}", "docComment": "Removes the stated node, which must be a direct child of this node, from the AST.\r\n\r\nDoes not change the underlying (javac/Eclipse) AST, only the wrapped view.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "kind": "method", "sourceText": "private void checkForBogusExcludes(lombok.eclipse.EclipseAST.Node type, lombok.core.AnnotationValues<lombok.EqualsAndHashCode> annotation) {\r\n    java.util.List<java.lang.String> list = java.util.Arrays.asList(annotation.getInstance().exclude());\r\n    boolean[] matched = new boolean[list.size()];\r\n    for (lombok.eclipse.EclipseAST.Node child : type.down()) {\r\n        if (list.isEmpty()) {\r\n            break;\r\n        }\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        if ((((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (child.get())).modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccStatic) != 0) {\r\n            continue;\r\n        }\r\n        if ((((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (child.get())).modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccTransient) != 0) {\r\n            continue;\r\n        }\r\n        int idx = list.indexOf(child.getName());\r\n        if (idx > (-1)) {\r\n            matched[idx] = true;\r\n        }\r\n    }\r\n    for (int i = 0; i < list.size(); i++) {\r\n        if (!matched[i]) {\r\n            annotation.setWarning(\"exclude\", \"This field does not exist, or would have been excluded anyway.\", i);\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.reparse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "reparse()", "qualifiedName": "lombok.eclipse.EclipseAST.reparse()", "kind": "method", "sourceText": "/**\r\n * Call to move an EclipseAST generated for a diet parse to rebuild itself for the full parse -\r\n * with filled in method bodies and such. Also propagates problems and errors, which in diet parse\r\n * mode can't be reliably added to the problems/warnings view.\r\n */\r\npublic void reparse() {\r\n    this.propagateProblems();\r\n    if (this.completeParse) {\r\n        return;\r\n    }\r\n    boolean newCompleteParse = lombok.eclipse.EclipseAST.isComplete(this.compilationUnitDeclaration);\r\n    if (!newCompleteParse) {\r\n        return;\r\n    }\r\n    this.top().rebuild();\r\n    this.completeParse = true;\r\n}", "docComment": "Call to move an EclipseAST generated for a diet parse to rebuild itself for the full parse -\r\nwith filled in method bodies and such. Also propagates problems and errors, which in diet parse\r\nmode can't be reliably added to the problems/warnings view.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleData", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Data</code> annotation for javac.\r\n", "simpleName": "HandleData", "qualifiedName": "lombok.javac.handlers.HandleData", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "lombok.installer.Installer.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    if (lombok.installer.EclipseFinder.getOS() == lombok.installer.EclipseFinder.OS.MAC_OS_X) {\r\n        java.lang.System.setProperty(\"com.apple.mrj.application.apple.menu.about.name\", \"Lombok Installer\");\r\n        java.lang.System.setProperty(\"com.apple.macos.use-file-dialog-packages\", \"true\");\r\n    }\r\n    try {\r\n        javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() {\r\n            1() {\r\n                super();\r\n            }\r\n\r\n            public void run() {\r\n                try {\r\n                    try {\r\n                        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());\r\n                    } catch (java.lang.Exception ignore) {\r\n                    }\r\n                    new lombok.installer.Installer().show();\r\n                } catch (java.awt.HeadlessException e) {\r\n                    lombok.installer.Installer.printHeadlessInfo();\r\n                }\r\n            }\r\n        });\r\n    } catch (java.awt.HeadlessException e) {\r\n        lombok.installer.Installer.printHeadlessInfo();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "OS", "qualifiedName": "lombok.installer.EclipseFinder$OS", "kind": "enum", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "argNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "increaseErrorCount(javax.annotation.processing.Messager)", "qualifiedName": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)", "kind": "method", "sourceText": "private void increaseErrorCount(javax.annotation.processing.Messager messager) {\r\n    try {\r\n        java.lang.reflect.Field f = messager.getClass().getDeclaredField(\"errorCount\");\r\n        f.setAccessible(true);\r\n        if (f.getType() == int.class) {\r\n            int val = ((java.lang.Number) (f.get(messager))).intValue();\r\n            f.set(messager, val + 1);\r\n        }\r\n    } catch (java.lang.Throwable t) {\r\n        // Very unfortunate, but in most cases it still works fine, so we'll silently swallow it.\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse", "labels": ["Container"], "properties": {"simpleName": "eclipse", "qualifiedName": "lombok.eclipse", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "sourceStart", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler", "labels": ["Structure"], "properties": {"docComment": "Implement this interface if you want to be triggered for a specific annotation.\r\n\r\nYou MUST replace 'T' with a specific annotation type, such as:\r\n\r\n<code>public class HandleGetter implements EclipseAnnotationHandler&lt;<b>Getter</b>&gt;</code>\r\n\r\nBecause this generics parameter is inspected to figure out which class you're interested in.\r\n\r\nYou also need to register yourself via SPI discovery as being an implementation of <code>EclipseAnnotationHandler</code>.\r\n", "simpleName": "EclipseAnnotationHandler", "qualifiedName": "lombok.eclipse.EclipseAnnotationHandler", "kind": "interface", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.annotationHandlers", "labels": ["Variable"], "properties": {"sourceText": "private final java.util.Map<java.lang.String, lombok.javac.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object>> annotationHandlers = new java.util.HashMap<java.lang.String, lombok.javac.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object>>();", "visibility": "private", "simpleName": "annotationHandlers", "qualifiedName": "lombok.javac.HandlerLibrary.annotationHandlers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "qualifiedName": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression expression) {\r\n    return this.buildStatementOrExpression(expression);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toSetterName(java.lang.CharSequence)", "qualifiedName": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "kind": "static method", "sourceText": "/**\r\n * Generates a getter name from a given field name.\r\n *\r\n * Strategy:\r\n *\r\n * Check if the first character of the field is lowercase. If so, check if the second character\r\n * exists and is title or upper case. If so, uppercase the first character. If not, titlecase the first character.\r\n *\r\n * return \"set\" plus the possibly title/uppercased first character, and the rest of the field name.\r\n *\r\n * @param fieldName\r\n * \t\tthe name of the field.\r\n */\r\npublic static java.lang.String toSetterName(java.lang.CharSequence fieldName) {\r\n    return lombok.core.TransformationsUtil.buildName(\"set\", fieldName.toString());\r\n}", "docComment": "Generates a getter name from a given field name.\r\n\r\nStrategy:\r\n\r\nCheck if the first character of the field is lowercase. If so, check if the second character\r\nexists and is title or upper case. If so, uppercase the first character. If not, titlecase the first character.\r\n\r\nreturn \"set\" plus the possibly title/uppercased first character, and the rest of the field name.\r\n\r\n@param fieldName\r\n\t\tthe name of the field.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "qualifiedName": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "kind": "method", "sourceText": "private java.lang.Object guessToType(java.lang.Object guess, java.lang.Class<? extends java.lang.Object> expected, lombok.core.AnnotationValues.AnnotationValue v, int pos) {\r\n    if (expected == int.class) {\r\n        if (((guess instanceof java.lang.Integer) || (guess instanceof java.lang.Short)) || (guess instanceof java.lang.Byte)) {\r\n            return ((java.lang.Number) (guess)).intValue();\r\n        }\r\n    }\r\n    if (expected == long.class) {\r\n        if ((((guess instanceof java.lang.Long) || (guess instanceof java.lang.Integer)) || (guess instanceof java.lang.Short)) || (guess instanceof java.lang.Byte)) {\r\n            return ((java.lang.Number) (guess)).longValue();\r\n        }\r\n    }\r\n    if (expected == short.class) {\r\n        if (((guess instanceof java.lang.Integer) || (guess instanceof java.lang.Short)) || (guess instanceof java.lang.Byte)) {\r\n            int intVal = ((java.lang.Number) (guess)).intValue();\r\n            int shortVal = ((java.lang.Number) (guess)).shortValue();\r\n            if (shortVal == intVal) {\r\n                return shortVal;\r\n            }\r\n        }\r\n    }\r\n    if (expected == byte.class) {\r\n        if (((guess instanceof java.lang.Integer) || (guess instanceof java.lang.Short)) || (guess instanceof java.lang.Byte)) {\r\n            int intVal = ((java.lang.Number) (guess)).intValue();\r\n            int byteVal = ((java.lang.Number) (guess)).byteValue();\r\n            if (byteVal == intVal) {\r\n                return byteVal;\r\n            }\r\n        }\r\n    }\r\n    if (expected == double.class) {\r\n        if (guess instanceof java.lang.Number) {\r\n            return ((java.lang.Number) (guess)).doubleValue();\r\n        }\r\n    }\r\n    if (expected == float.class) {\r\n        if (guess instanceof java.lang.Number) {\r\n            return ((java.lang.Number) (guess)).floatValue();\r\n        }\r\n    }\r\n    if (expected == boolean.class) {\r\n        if (guess instanceof java.lang.Boolean) {\r\n            return ((java.lang.Boolean) (guess)).booleanValue();\r\n        }\r\n    }\r\n    if (expected == char.class) {\r\n        if (guess instanceof java.lang.Character) {\r\n            return ((java.lang.Character) (guess)).charValue();\r\n        }\r\n    }\r\n    if (expected == java.lang.String.class) {\r\n        if (guess instanceof java.lang.String) {\r\n            return guess;\r\n        }\r\n    }\r\n    if (java.lang.Enum.class.isAssignableFrom(expected)) {\r\n        if (guess instanceof java.lang.String) {\r\n            for (java.lang.Object enumConstant : expected.getEnumConstants()) {\r\n                java.lang.String target = ((java.lang.Enum<? extends java.lang.Object>) (enumConstant)).name();\r\n                if (target.equals(guess)) {\r\n                    return enumConstant;\r\n                }\r\n            }\r\n            throw new lombok.core.AnnotationValues.AnnotationValueDecodeFail(v, ((\"Can't translate \" + guess) + \" to an enum of type \") + expected, pos);\r\n        }\r\n    }\r\n    if (java.lang.Class.class == expected) {\r\n        if (guess instanceof java.lang.String) {\r\n            try {\r\n                return java.lang.Class.forName(this.toFQ(((java.lang.String) (guess))));\r\n            } catch (java.lang.ClassNotFoundException e) {\r\n                throw new lombok.core.AnnotationValues.AnnotationValueDecodeFail(v, (\"Can't translate \" + guess) + \" to a class object.\", pos);\r\n            }\r\n        }\r\n    }\r\n    throw new lombok.core.AnnotationValues.AnnotationValueDecodeFail(v, ((\"Can't translate a \" + guess.getClass()) + \" to the expected \") + expected, pos);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitMethod(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n    final java.lang.String type;\r\n    if (method.name.contentEquals(\"<init>\")) {\r\n        if ((method.mods.flags & com.sun.tools.javac.code.Flags.GENERATEDCONSTR) != 0) {\r\n            type = \"DEFAULTCONSTRUCTOR\";\r\n        } else {\r\n            type = \"CONSTRUCTOR\";\r\n        }\r\n    } else {\r\n        type = \"METHOD\";\r\n    }\r\n    this.print(\"<%s %s> returns: %s\", type, method.name, method.restype);\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        if (method.body == null) {\r\n            this.print(\"(ABSTRACT)\");\r\n        } else {\r\n            this.print(\"%s\", method.body);\r\n        }\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "argumentNode", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "qualifiedName": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCMethodDecl createStaticConstructor(java.lang.String name, lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> fields) {\r\n    com.sun.tools.javac.tree.TreeMaker maker = typeNode.getTreeMaker();\r\n    com.sun.tools.javac.tree.JCTree.JCClassDecl type = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get()));\r\n    com.sun.tools.javac.tree.JCTree.JCModifiers mods = maker.Modifiers(Flags.STATIC);\r\n    com.sun.tools.javac.tree.JCTree.JCExpression returnType;\r\n    com.sun.tools.javac.tree.JCTree.JCExpression constructorType;\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCTypeParameter> typeParams = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCVariableDecl> params = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> typeArgs1 = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> typeArgs2 = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> args = com.sun.tools.javac.util.List.nil();\r\n    if (!type.typarams.isEmpty()) {\r\n        for (com.sun.tools.javac.tree.JCTree.JCTypeParameter param : type.typarams) {\r\n            typeArgs1 = typeArgs1.append(maker.Ident(param.name));\r\n            typeArgs2 = typeArgs2.append(maker.Ident(param.name));\r\n            typeParams = typeParams.append(maker.TypeParameter(param.name, param.bounds));\r\n        }\r\n        returnType = maker.TypeApply(maker.Ident(type.name), typeArgs1);\r\n        constructorType = maker.TypeApply(maker.Ident(type.name), typeArgs2);\r\n    } else {\r\n        returnType = maker.Ident(type.name);\r\n        constructorType = maker.Ident(type.name);\r\n    }\r\n    for (lombok.javac.JavacAST.Node fieldNode : fields) {\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl field = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fieldNode.get()));\r\n        com.sun.tools.javac.tree.JCTree.JCExpression pType;\r\n        if (field.vartype instanceof com.sun.tools.javac.tree.JCTree.JCIdent) {\r\n            pType = maker.Ident(((com.sun.tools.javac.tree.JCTree.JCIdent) (field.vartype)).name);\r\n        } else if (field.vartype instanceof com.sun.tools.javac.tree.JCTree.JCTypeApply) {\r\n            com.sun.tools.javac.tree.JCTree.JCTypeApply typeApply = ((com.sun.tools.javac.tree.JCTree.JCTypeApply) (field.vartype));\r\n            com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> tArgs = com.sun.tools.javac.util.List.nil();\r\n            for (com.sun.tools.javac.tree.JCTree.JCExpression arg : typeApply.arguments) {\r\n                tArgs = tArgs.append(arg);\r\n            }\r\n            pType = maker.TypeApply(typeApply.clazz, tArgs);\r\n        } else {\r\n            pType = field.vartype;\r\n        }\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl param = maker.VarDef(maker.Modifiers(0), field.name, pType, null);\r\n        params = params.append(param);\r\n        args = args.append(maker.Ident(field.name));\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCReturn returnStatement = maker.Return(maker.NewClass(null, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), constructorType, args, null));\r\n    com.sun.tools.javac.tree.JCTree.JCBlock body = maker.Block(0, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCStatement>of(returnStatement));\r\n    return maker.MethodDef(mods, typeNode.toName(name), returnType, typeParams, params, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), body, null);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).1", "labels": ["Variable"], "properties": {"simpleName": "cause", "qualifiedName": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer", "labels": ["Container"], "properties": {"simpleName": "installer", "qualifiedName": "lombok.installer", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary", "labels": ["Structure", "Container"], "properties": {"docComment": "This class tracks 'handlers' and knows how to invoke them for any given AST node.\r\n\r\nThis class can find the handlers (via SPI discovery) and will set up the given AST node, such as\r\nbuilding an AnnotationValues instance.\r\n", "simpleName": "HandlerLibrary", "qualifiedName": "lombok.eclipse.HandlerLibrary", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.get(java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.core.AST.get(java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitLocal(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCVariableDecl local) {\r\n    this.print(\"<LOCAL %s %s>\", local.vartype, local.name);\r\n    this.indent++;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "typeRef", "qualifiedName": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "kind": "static method", "sourceText": "/**\r\n * Checks if there is a field with the provided name.\r\n *\r\n * @param fieldName\r\n * \t\tthe field name to check for.\r\n * @param node\r\n * \t\tAny node that represents the Type (JCClassDecl) to check for, or any child node thereof.\r\n */\r\nstatic lombok.javac.handlers.PKG.MemberExistsResult fieldExists(java.lang.String fieldName, lombok.javac.JavacAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl))) {\r\n        node = node.up();\r\n    } \r\n    if ((node != null) && (node.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl)) {\r\n        for (com.sun.tools.javac.tree.JCTree def : ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (node.get())).defs) {\r\n            if (def instanceof com.sun.tools.javac.tree.JCTree.JCVariableDecl) {\r\n                if (((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (def)).name.contentEquals(fieldName)) {\r\n                    lombok.javac.JavacAST.Node existing = node.getNodeFor(def);\r\n                    if ((existing == null) || (!existing.isHandled())) {\r\n                        return lombok.javac.handlers.PKG.MemberExistsResult.EXISTS_BY_USER;\r\n                    }\r\n                    return lombok.javac.handlers.PKG.MemberExistsResult.EXISTS_BY_LOMBOK;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return lombok.javac.handlers.PKG.MemberExistsResult.NOT_EXISTS;\r\n}", "docComment": "Checks if there is a field with the provided name.\r\n\r\n@param fieldName\r\n\t\tthe field name to check for.\r\n@param node\r\n\t\tAny node that represents the Type (JCClassDecl) to check for, or any child node thereof.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildEclipseArea()", "qualifiedName": "lombok.installer.Installer.buildEclipseArea()", "kind": "method", "sourceText": "private java.awt.Component buildEclipseArea() throws java.io.IOException {\r\n    javax.swing.JPanel container = new javax.swing.JPanel();\r\n    container.setLayout(new java.awt.GridBagLayout());\r\n    java.awt.GridBagConstraints constraints = new java.awt.GridBagConstraints();\r\n    constraints.anchor = java.awt.GridBagConstraints.WEST;\r\n    constraints.insets = new java.awt.Insets(8, 0, 0, 16);\r\n    container.add(new javax.swing.JLabel(lombok.installer.Installer.ECLIPSE_TITLE), constraints);\r\n    constraints.gridy = 1;\r\n    container.add(new javax.swing.JLabel(lombok.installer.Installer.ECLIPSE_EXPLANATION), constraints);\r\n    constraints.gridy = 2;\r\n    this.loadingExpl = javax.swing.Box.createHorizontalBox();\r\n    this.loadingExpl.add(new javax.swing.JLabel(new javax.swing.ImageIcon(lombok.installer.Installer.class.getResource(\"/lombok/installer/loading.gif\"))));\r\n    this.loadingExpl.add(new javax.swing.JLabel(lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION));\r\n    container.add(this.loadingExpl, constraints);\r\n    constraints.weightx = 1.0;\r\n    constraints.gridy = 3;\r\n    constraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\r\n    this.eclipsesList = new lombok.installer.Installer.EclipsesList();\r\n    javax.swing.JScrollPane eclipsesListScroll = new javax.swing.JScrollPane(this.eclipsesList);\r\n    eclipsesListScroll.setBackground(java.awt.Color.WHITE);\r\n    eclipsesListScroll.getViewport().setBackground(java.awt.Color.WHITE);\r\n    container.add(eclipsesListScroll, constraints);\r\n    java.lang.Thread findEclipsesThread = new java.lang.Thread() {\r\n        6() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void run() {\r\n            try {\r\n                final java.util.List<java.lang.String> eclipses = lombok.installer.EclipseFinder.findEclipses();\r\n                final java.util.List<lombok.installer.EclipseLocation> locations = new java.util.ArrayList<lombok.installer.EclipseLocation>();\r\n                final java.util.List<lombok.installer.EclipseLocation.NotAnEclipseException> problems = new java.util.ArrayList<lombok.installer.EclipseLocation.NotAnEclipseException>();\r\n                if (eclipses != null) {\r\n                    for (java.lang.String eclipse : eclipses) {\r\n                        try {\r\n                            locations.add(new lombok.installer.EclipseLocation(eclipse));\r\n                        } catch (lombok.installer.EclipseLocation.NotAnEclipseException e) {\r\n                            problems.add(e);\r\n                        }\r\n                    }\r\n                }\r\n                javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() {\r\n                    1() {\r\n                        super();\r\n                    }\r\n\r\n                    @java.lang.Override\r\n                    public void run() {\r\n                        for (lombok.installer.EclipseLocation location : locations) {\r\n                            try {\r\n                                lombok.installer.Installer.this.eclipsesList.addEclipse(location);\r\n                            } catch (java.lang.Throwable t) {\r\n                                this.handleException(t);\r\n                            }\r\n                        }\r\n                        for (lombok.installer.EclipseLocation.NotAnEclipseException problem : problems) {\r\n                            problem.showDialog(lombok.installer.Installer.this.appWindow);\r\n                        }\r\n                        lombok.installer.Installer.this.loadingExpl.setVisible(false);\r\n                        if (eclipses == null) {\r\n                            javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, \"I don\\'t know how to automatically find Eclipse installations on this platform.\\n\" + (\"Please use the \\'Specify Eclipse Location...\\' button to manually point out the\\n\" + \"location of your Eclipse installation to me. Thanks!\"), \"Can't find Eclipse\", javax.swing.JOptionPane.INFORMATION_MESSAGE);\r\n                        }\r\n                    }\r\n                });\r\n            } catch (java.lang.Throwable t) {\r\n                this.handleException(t);\r\n            }\r\n        }\r\n    };\r\n    findEclipsesThread.start();\r\n    javax.swing.Box buttonBar = javax.swing.Box.createHorizontalBox();\r\n    javax.swing.JButton specifyEclipseLocationButton = new javax.swing.JButton(\"Specify Eclipse location...\");\r\n    buttonBar.add(specifyEclipseLocationButton);\r\n    specifyEclipseLocationButton.addActionListener(new java.awt.event.ActionListener() {\r\n        7() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent event) {\r\n            final java.lang.String name = lombok.installer.EclipseFinder.getEclipseExecutableName();\r\n            java.lang.String file = null;\r\n            if (lombok.installer.EclipseFinder.getOS() == lombok.installer.EclipseFinder.OS.MAC_OS_X) {\r\n                java.awt.FileDialog chooser = new java.awt.FileDialog(lombok.installer.Installer.this.appWindow);\r\n                chooser.setMode(java.awt.FileDialog.LOAD);\r\n                chooser.setFilenameFilter(new java.io.FilenameFilter() {\r\n                    1() {\r\n                        super();\r\n                    }\r\n\r\n                    @java.lang.Override\r\n                    public boolean accept(java.io.File dir, java.lang.String name) {\r\n                        if (name.equalsIgnoreCase(name)) {\r\n                            return true;\r\n                        }\r\n                        if (new java.io.File(dir, name).isDirectory()) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                });\r\n                chooser.setVisible(true);\r\n                file = new java.io.File(chooser.getDirectory(), chooser.getFile()).getAbsolutePath();\r\n            } else {\r\n                javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();\r\n                chooser.setAcceptAllFileFilterUsed(false);\r\n                chooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);\r\n                chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {\r\n                    2() {\r\n                        super();\r\n                    }\r\n\r\n                    @java.lang.Override\r\n                    public boolean accept(java.io.File f) {\r\n                        if (f.getName().equalsIgnoreCase(name)) {\r\n                            return true;\r\n                        }\r\n                        if (f.isDirectory()) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n\r\n                    @java.lang.Override\r\n                    public java.lang.String getDescription() {\r\n                        return \"Eclipse Installation\";\r\n                    }\r\n                });\r\n                switch (chooser.showDialog(lombok.installer.Installer.this.appWindow, \"Select\")) {\r\n                    case javax.swing.JFileChooser.APPROVE_OPTION :\r\n                        file = chooser.getSelectedFile().getAbsolutePath();\r\n                }\r\n            }\r\n            if (file != null) {\r\n                try {\r\n                    lombok.installer.Installer.this.eclipsesList.addEclipse(new lombok.installer.EclipseLocation(file));\r\n                } catch (lombok.installer.EclipseLocation.NotAnEclipseException e) {\r\n                    e.showDialog(lombok.installer.Installer.this.appWindow);\r\n                } catch (java.lang.Throwable t) {\r\n                    this.handleException(t);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    buttonBar.add(javax.swing.Box.createHorizontalGlue());\r\n    this.installButton = new javax.swing.JButton(\"Install / Update\");\r\n    buttonBar.add(this.installButton);\r\n    this.installButton.addActionListener(new java.awt.event.ActionListener() {\r\n        8() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            java.util.List<lombok.installer.EclipseLocation> locationsToInstall = new java.util.ArrayList<lombok.installer.EclipseLocation>(lombok.installer.Installer.this.eclipsesList.getSelectedEclipses());\r\n            if (locationsToInstall.isEmpty()) {\r\n                javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, \"You haven't selected any Eclipse installations!.\", \"No Selection\", javax.swing.JOptionPane.WARNING_MESSAGE);\r\n                return;\r\n            }\r\n            this.install(locationsToInstall);\r\n        }\r\n    });\r\n    constraints.gridy = 4;\r\n    constraints.weightx = 0;\r\n    container.add(buttonBar, constraints);\r\n    constraints.gridy = 5;\r\n    constraints.fill = java.awt.GridBagConstraints.NONE;\r\n    lombok.installer.Installer.JHyperLink showMe = new lombok.installer.Installer.JHyperLink(\"Show me what this installer will do to my Eclipse installation.\");\r\n    container.add(showMe, constraints);\r\n    showMe.addActionListener(new java.awt.event.ActionListener() {\r\n        9() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            this.showWhatIDo();\r\n        }\r\n    });\r\n    constraints.gridy = 6;\r\n    this.uninstallButton = new lombok.installer.Installer.JHyperLink(\"Uninstall lombok from selected Eclipse installations.\");\r\n    this.uninstallPlaceholder = new javax.swing.JLabel(\"<html>&nbsp;</html>\");\r\n    this.uninstallButton.addActionListener(new java.awt.event.ActionListener() {\r\n        10() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            java.util.List<lombok.installer.EclipseLocation> locationsToUninstall = new java.util.ArrayList<lombok.installer.EclipseLocation>();\r\n            for (lombok.installer.EclipseLocation location : lombok.installer.Installer.this.eclipsesList.getSelectedEclipses()) {\r\n                if (location.hasLombok()) {\r\n                    locationsToUninstall.add(location);\r\n                }\r\n            }\r\n            if (locationsToUninstall.isEmpty()) {\r\n                javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, \"You haven't selected any Eclipse installations that have been lombok-enabled.\", \"No Selection\", javax.swing.JOptionPane.WARNING_MESSAGE);\r\n                return;\r\n            }\r\n            this.uninstall(locationsToUninstall);\r\n        }\r\n    });\r\n    container.add(this.uninstallButton, constraints);\r\n    this.uninstallPlaceholder.setVisible(false);\r\n    container.add(this.uninstallPlaceholder, constraints);\r\n    return container;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getName()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getName()", "qualifiedName": "lombok.eclipse.EclipseAST$Node.getName()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.lang.String getName() {\r\n    final char[] n;\r\n    if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        n = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (this.node)).name;\r\n    } else if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {\r\n        n = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (this.node)).name;\r\n    } else if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\r\n        n = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (this.node)).selector;\r\n    } else if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {\r\n        n = ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (this.node)).name;\r\n    } else {\r\n        n = null;\r\n    }\r\n    return n == null ? null : new java.lang.String(n);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "AnnotationHandlerContainer", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).5", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).5", "kind": "parameter", "parameterPosition": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitField(lombok.javac.JavacAST.Node fieldNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[]).0", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFileName()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getFileName()", "qualifiedName": "lombok.core.AST.getFileName()", "kind": "method", "sourceText": "public java.lang.String getFileName() {\r\n    return this.fileName;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).0", "labels": ["Variable"], "properties": {"simpleName": "owner", "qualifiedName": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addError(java.lang.String)", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void addError(java.lang.String message) {\r\n    this.addError(message, this.get().sourceStart, this.get().sourceEnd);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "labels": ["Variable"], "properties": {"simpleName": "array", "qualifiedName": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleSynchronized()", "kind": "constructor", "sourceText": "HandleSynchronized() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.Statement buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[] contents, lombok.eclipse.handlers.HandleSneakyThrows.DeclaredException exception) {\r\n    org.eclipse.jdt.internal.compiler.ast.TryStatement tryStatement = new org.eclipse.jdt.internal.compiler.ast.TryStatement();\r\n    tryStatement.tryBlock = new org.eclipse.jdt.internal.compiler.ast.Block(0);\r\n    tryStatement.tryBlock.statements = contents;\r\n    org.eclipse.jdt.internal.compiler.ast.TypeReference typeReference;\r\n    if (exception.exceptionName.indexOf('.') == (-1)) {\r\n        typeReference = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference(exception.exceptionName.toCharArray(), exception.getPos());\r\n    } else {\r\n        java.lang.String[] x = exception.exceptionName.split(\"\\\\.\");\r\n        char[][] elems = new char[x.length][];\r\n        long[] poss = new long[x.length];\r\n        int start = ((int) (exception.getPos() >> 32));\r\n        for (int i = 0; i < x.length; i++) {\r\n            elems[i] = x[i].trim().toCharArray();\r\n            int end = start + x[i].length();\r\n            poss[i] = (((long) (start)) << 32) | end;\r\n            start = end + 1;\r\n        }\r\n        typeReference = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(elems, poss);\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.Argument catchArg = new org.eclipse.jdt.internal.compiler.ast.Argument(\"$ex\".toCharArray(), exception.getPos(), typeReference, 0);\r\n    tryStatement.catchArguments = new org.eclipse.jdt.internal.compiler.ast.Argument[]{ catchArg };\r\n    org.eclipse.jdt.internal.compiler.ast.MessageSend sneakyThrowStatement = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n    sneakyThrowStatement.receiver = new org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference(new char[][]{ \"lombok\".toCharArray(), \"Lombok\".toCharArray() }, new long[]{ 0, 0 }, 0, 0);\r\n    sneakyThrowStatement.selector = \"sneakyThrow\".toCharArray();\r\n    sneakyThrowStatement.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(\"$ex\".toCharArray(), 0) };\r\n    org.eclipse.jdt.internal.compiler.ast.Statement rethrowStatement = new org.eclipse.jdt.internal.compiler.ast.ThrowStatement(sneakyThrowStatement, 0, 0);\r\n    org.eclipse.jdt.internal.compiler.ast.Block block = new org.eclipse.jdt.internal.compiler.ast.Block(0);\r\n    block.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ rethrowStatement };\r\n    block.sourceStart = block.sourceEnd = -2;\r\n    tryStatement.catchBlocks = new org.eclipse.jdt.internal.compiler.ast.Block[]{ block };\r\n    return tryStatement;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleSetter()", "kind": "constructor", "sourceText": "HandleSetter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic int getScrollableBlockIncrement(java.awt.Rectangle visibleRect, int orientation, int direction) {\r\n    return 12;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Generates an error in the Eclipse error log. Note that most people never look at it!\r\n */\r\npublic static void error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration cud, java.lang.String message, java.lang.String bundleName) {\r\n    lombok.eclipse.Eclipse.error(cud, message, bundleName, null);\r\n}", "docComment": "Generates an error in the Eclipse error log. Note that most people never look at it!\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "/**\r\n * Generates a setter on the stated field.\r\n *\r\n * Used by {@link HandleData}.\r\n *\r\n * The difference between this call and the handle method is as follows:\r\n *\r\n * If there is a <code>lombok.Setter</code> annotation on the field, it is used and the\r\n * same rules apply (e.g. warning if the method already exists, stated access level applies).\r\n * If not, the setter is still generated if it isn't already there, though there will not\r\n * be a warning if its already there. The default access level is used.\r\n */\r\npublic void generateSetterForField(lombok.eclipse.EclipseAST.Node fieldNode, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    for (lombok.eclipse.EclipseAST.Node child : fieldNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.eclipse.Eclipse.annotationTypeMatches(lombok.Setter.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    this.createSetterForField(lombok.AccessLevel.PUBLIC, fieldNode, fieldNode, pos, false);\r\n}", "docComment": "Generates a setter on the stated field.\r\n\r\nUsed by {@link HandleData}.\r\n\r\nThe difference between this call and the handle method is as follows:\r\n\r\nIf there is a <code>lombok.Setter</code> annotation on the field, it is used and the\r\nsame rules apply (e.g. warning if the method already exists, stated access level applies).\r\nIf not, the setter is still generated if it isn't already there, though there will not\r\nbe a warning if its already there. The default access level is used.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.UNINSTALL_TITLE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String UNINSTALL_TITLE = \"<html><font size=\\\"+1\\\"><b><i>Uninstall</i></b></font></html>\";", "visibility": "private", "simpleName": "UNINSTALL_TITLE", "qualifiedName": "lombok.installer.Installer.UNINSTALL_TITLE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "labels": ["Variable"], "properties": {"sourceText": "private final boolean printContent;", "visibility": "private", "simpleName": "printContent", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.top()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "top()", "qualifiedName": "lombok.javac.JavacAST$Node.top()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.javac.JavacAST.Node top() {\r\n    return ((lombok.javac.JavacAST.Node) (super.top()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST", "labels": ["Structure", "Container"], "properties": {"docComment": "Lombok wraps the AST produced by a target platform into its own AST system, mostly because both Eclipse and javac\r\ndo not allow upward traversal (from a method to its owning type, for example).\r\n\r\n@param N\r\n\t\tThe common type of all AST nodes in the internal representation of the target platform.\r\n\t\tFor example, JCTree for javac, and ASTNode for Eclipse.\r\n", "simpleName": "AST", "qualifiedName": "lombok.core.AST", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.addError(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AST$Node.addError(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "static method", "sourceText": "private static java.lang.String toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration ast) {\r\n    return ast.compilationResult.fileName == null ? null : new java.lang.String(ast.compilationResult.fileName);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "argNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "print(java.lang.String,java.lang.Object[])", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "kind": "method", "sourceText": "private void print(java.lang.String text, java.lang.Object... params) {\r\n    if (this.disablePrinting == 0) {\r\n        this.forcePrint(text, params);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "kind": "method", "sourceText": "void endVisitLocal(lombok.eclipse.EclipseAST.Node localNode, org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "dir", "qualifiedName": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Getter</code> annotation for javac.\r\n", "simpleName": "HandleGetter", "qualifiedName": "lombok.javac.handlers.HandleGetter", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "qualifiedName": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "kind": "method", "sourceText": "private java.util.Collection<lombok.eclipse.EclipseAST.Node> buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] children) {\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    if (children != null) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration child : children) {\r\n            this.addIfNotNull(childNodes, this.buildField(child));\r\n        }\r\n    }\r\n    return childNodes;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl local, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setWarning(java.lang.String,int)", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "kind": "method", "sourceText": "/**\r\n * Override this if you want more specific behaviour (to get the source position just right).\r\n *\r\n * @param message\r\n * \t\tEnglish message with the problem.\r\n * @param valueIdx\r\n * \t\tThe index into the values for this annotation key that caused the problem.\r\n * \t\t-1 for a problem that applies to all values, otherwise the 0-based index into an array of values.\r\n * \t\tIf there is no array for this value (e.g. value=1 instead of value={1,2}), then always -1 or 0.\r\n */\r\npublic void setWarning(java.lang.String message, int valueIdx) {\r\n    this.node.addError(message);\r\n}", "docComment": "Override this if you want more specific behaviour (to get the source position just right).\r\n\r\n@param message\r\n\t\tEnglish message with the problem.\r\n@param valueIdx\r\n\t\tThe index into the values for this annotation key that caused the problem.\r\n\t\t-1 for a problem that applies to all values, otherwise the 0-based index into an array of values.\r\n\t\tIf there is no array for this value (e.g. value=1 instead of value={1,2}), then always -1 or 0.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "level", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.equals(java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "o", "qualifiedName": "lombok.installer.EclipseLocation.equals(java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).1", "labels": ["Variable"], "properties": {"simpleName": "ref1", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isStructurallySignificant()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isStructurallySignificant()", "qualifiedName": "lombok.core.AST$Node.isStructurallySignificant()", "kind": "method", "sourceText": "/**\r\n * Structurally significant means: LocalDeclaration, TypeDeclaration, MethodDeclaration, ConstructorDeclaration,\r\n * FieldDeclaration, Initializer, and CompilationUnitDeclaration.\r\n * The rest is e.g. if statements, while loops, etc.\r\n */\r\npublic boolean isStructurallySignificant() {\r\n    return this.isStructurallySignificant;\r\n}", "docComment": "Structurally significant means: LocalDeclaration, TypeDeclaration, MethodDeclaration, ConstructorDeclaration,\r\nFieldDeclaration, Initializer, and CompilationUnitDeclaration.\r\nThe rest is e.g. if statements, while loops, etc.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.toString()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString()", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.toString()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.lang.String toString() {\r\n    return ((\"raws: \" + this.raws) + \" valueGuesses: \") + this.valueGuesses;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).4", "labels": ["Variable"], "properties": {"simpleName": "oldN", "qualifiedName": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandlePrintAST()", "kind": "constructor", "sourceText": "HandlePrintAST() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor).0", "labels": ["Variable"], "properties": {"simpleName": "visitor", "qualifiedName": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.install(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "install(java.util.List)", "qualifiedName": "lombok.installer.Installer.install(java.util.List)", "kind": "method", "sourceText": "private void install(final java.util.List<lombok.installer.EclipseLocation> toInstall) {\r\n    javax.swing.JPanel spinner = new javax.swing.JPanel();\r\n    spinner.setOpaque(true);\r\n    spinner.setLayout(new java.awt.FlowLayout());\r\n    spinner.add(new javax.swing.JLabel(new javax.swing.ImageIcon(lombok.installer.Installer.class.getResource(\"/lombok/installer/loading.gif\"))));\r\n    this.appWindow.setContentPane(spinner);\r\n    final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> success = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean>(true);\r\n    new java.lang.Thread() {\r\n        11() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void run() {\r\n            for (lombok.installer.EclipseLocation loc : toInstall) {\r\n                try {\r\n                    loc.install();\r\n                } catch (final lombok.installer.EclipseLocation.InstallException e) {\r\n                    success.set(false);\r\n                    try {\r\n                        javax.swing.SwingUtilities.invokeAndWait(new java.lang.Runnable() {\r\n                            1() {\r\n                                super();\r\n                            }\r\n\r\n                            @java.lang.Override\r\n                            public void run() {\r\n                                javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, e.getMessage(), \"Install Problem\", javax.swing.JOptionPane.ERROR_MESSAGE);\r\n                            }\r\n                        });\r\n                    } catch (java.lang.Exception e2) {\r\n                        // Shouldn't happen.\r\n                        throw new java.lang.RuntimeException(e2);\r\n                    }\r\n                }\r\n            }\r\n            if (success.get()) {\r\n                javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() {\r\n                    2() {\r\n                        super();\r\n                    }\r\n\r\n                    @java.lang.Override\r\n                    public void run() {\r\n                        javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, \"<html>Lombok has been installed on the selected Eclipse installations.<br>Don't forget to add <code>lombok.jar</code> to your projects!</html>\", \"Install successful\", javax.swing.JOptionPane.INFORMATION_MESSAGE);\r\n                        lombok.installer.Installer.this.appWindow.setVisible(false);\r\n                        java.lang.System.exit(0);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }.start();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.eclipse.EclipseAST.Node getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode obj) {\r\n    return ((lombok.eclipse.EclipseAST.Node) (super.getNodeFor(obj)));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString.callSuper()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "callSuper()", "qualifiedName": "lombok.ToString.callSuper()", "kind": "method", "sourceText": "/**\r\n * Include the result of the superclass's implementation of <code>toString</code> in the output.\r\n * <strong>default: false</strong>\r\n */\r\nboolean callSuper() default false;", "docComment": "Include the result of the superclass's implementation of <code>toString</code> in the output.\r\n<strong>default: false</strong>\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.Javac", "labels": ["Structure"], "properties": {"docComment": "Container for static utility methods relevant to lombok's operation on javac.\r\n", "simpleName": "Javac", "qualifiedName": "lombok.javac.Javac", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "argument", "qualifiedName": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "str(char[])", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "kind": "method", "sourceText": "private java.lang.String str(char[] c) {\r\n    if (c == null) {\r\n        return \"(NULL)\";\r\n    } else {\r\n        return new java.lang.String(c);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Lombok.sneakyThrow0(java.lang.Throwable)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "sneakyThrow0(java.lang.Throwable)", "qualifiedName": "lombok.Lombok.sneakyThrow0(java.lang.Throwable)", "kind": "static method", "sourceText": "@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate static <T extends java.lang.Throwable> void sneakyThrow0(java.lang.Throwable t) throws T {\r\n    throw ((T) (t));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.handled", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * This flag has no specified meaning; you can set and retrieve it.\r\n *\r\n * In practice, for annotation nodes it means: Some AnnotationHandler finished whatever changes were required,\r\n * and for all other nodes it means: This node was made by a lombok operation.\r\n */\r\nprotected boolean handled;", "visibility": "protected", "simpleName": "handled", "qualifiedName": "lombok.core.AST$Node.handled", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.down()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "down()", "qualifiedName": "lombok.core.AST$Node.down()", "kind": "method", "sourceText": "/**\r\n * Returns all children nodes.\r\n *\r\n * A copy is created, so changing the list has no effect. Also, while iterating through this list,\r\n * you may add, remove, or replace children without causing ConcurrentModificationExceptions.\r\n */\r\npublic java.util.Collection<? extends lombok.core.AST<N>.Node> down() {\r\n    return new java.util.ArrayList<lombok.core.AST<N>.Node>(this.children);\r\n}", "docComment": "Returns all children nodes.\r\n\r\nA copy is created, so changing the list has no effect. Also, while iterating through this list,\r\nyou may add, remove, or replace children without causing ConcurrentModificationExceptions.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).0", "labels": ["Variable"], "properties": {"simpleName": "handler", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).2", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "void visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl field, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core", "labels": ["Container"], "properties": {"simpleName": "core", "qualifiedName": "lombok.core", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.<clinit>()", "labels": ["Script"], "properties": {"visibility": "default", "simpleName": "<clinit>()", "qualifiedName": "lombok.eclipse.TransformEclipseAST.<clinit>()", "kind": "class initializer", "sourceText": "static {\r\n    java.lang.reflect.Field f = null;\r\n    lombok.eclipse.HandlerLibrary l = null;\r\n    try {\r\n        l = lombok.eclipse.HandlerLibrary.load();\r\n        f = org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.class.getDeclaredField(\"$lombokAST\");\r\n    } catch (java.lang.Throwable t) {\r\n        lombok.eclipse.Eclipse.error(null, \"Problem initializing lombok\", t);\r\n        lombok.eclipse.TransformEclipseAST.disableLombok = true;\r\n    }\r\n    lombok.eclipse.TransformEclipseAST.astCacheField = f;\r\n    lombok.eclipse.TransformEclipseAST.handlers = l;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).4", "labels": ["Variable"], "properties": {"simpleName": "severity", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).1", "labels": ["Variable"], "properties": {"simpleName": "dim", "qualifiedName": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.COMPILATION_UNIT", "labels": ["Variable"], "properties": {"sourceText": "COMPILATION_UNIT()", "visibility": "public", "simpleName": "COMPILATION_UNIT", "qualifiedName": "lombok.core.AST$Kind.COMPILATION_UNIT", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.printContent", "labels": ["Variable"], "properties": {"sourceText": "private final boolean printContent;", "visibility": "private", "simpleName": "printContent", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.printContent", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "oldO", "qualifiedName": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG", "labels": ["Structure", "Container"], "properties": {"docComment": "Container for static utility methods relevant to this package.\r\n", "simpleName": "PKG", "qualifiedName": "lombok.javac.handlers.PKG", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "qualifiedName": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "kind": "static method", "sourceText": "/**\r\n * Uses SPI Discovery to find implementations of {@link JavacAnnotationHandler}.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate static void loadAnnotationHandlers(lombok.javac.HandlerLibrary lib) {\r\n    // No, that seemingly superfluous reference to JavacAnnotationHandler's classloader is not in fact superfluous!\r\n    java.util.Iterator<lombok.javac.JavacAnnotationHandler> it = java.util.ServiceLoader.load(lombok.javac.JavacAnnotationHandler.class, lombok.javac.JavacAnnotationHandler.class.getClassLoader()).iterator();\r\n    while (it.hasNext()) {\r\n        try {\r\n            lombok.javac.JavacAnnotationHandler<? extends java.lang.Object> handler = it.next();\r\n            java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass = lombok.core.SpiLoadUtil.findAnnotationClass(handler.getClass(), lombok.javac.JavacAnnotationHandler.class);\r\n            lombok.javac.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object> container = new lombok.javac.HandlerLibrary.AnnotationHandlerContainer(handler, annotationClass);\r\n            if (lib.annotationHandlers.put(container.annotationClass.getName(), container) != null) {\r\n                lib.javacWarning(\"Duplicate handlers for annotation type: \" + container.annotationClass.getName());\r\n            }\r\n            lib.typeLibrary.addType(container.annotationClass.getName());\r\n        } catch (java.util.ServiceConfigurationError e) {\r\n            lib.javacWarning(\"Can't load Lombok annotation handler for javac\", e);\r\n        }\r\n    } \r\n}", "docComment": "Uses SPI Discovery to find implementations of {@link JavacAnnotationHandler}.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "nodeAnnotation", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.uninstall()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "uninstall()", "qualifiedName": "lombok.installer.EclipseLocation.uninstall()", "kind": "method", "sourceText": "/**\r\n * Uninstalls lombok from this location.\r\n * It's a no-op if lombok wasn't there in the first place,\r\n * and it will remove a half-succeeded lombok installation as well.\r\n *\r\n * @throws UninstallException\r\n * \t\tIf there's an obvious I/O problem that is preventing installation.\r\n * \t\tbugs in the uninstall code will probably throw other exceptions; this is intentional.\r\n */\r\nvoid uninstall() throws lombok.installer.EclipseLocation.UninstallException {\r\n    for (java.io.File dir : this.getTargetDirs()) {\r\n        java.io.File lombokJar = new java.io.File(dir, \"lombok.jar\");\r\n        if (lombokJar.exists()) {\r\n            if (!lombokJar.delete()) {\r\n                throw new lombok.installer.EclipseLocation.UninstallException((\"Can't delete \" + lombokJar.getAbsolutePath()) + \" - perhaps the installer does not have the access rights to do so.\", null);\r\n            }\r\n        }\r\n        java.io.File agentJar = new java.io.File(dir, \"lombok.eclipse.agent.jar\");\r\n        if (agentJar.exists()) {\r\n            if (!agentJar.delete()) {\r\n                throw new lombok.installer.EclipseLocation.UninstallException((\"Can't delete \" + agentJar.getAbsolutePath()) + \" - perhaps the installer does not have the access rights to do so.\", null);\r\n            }\r\n        }\r\n        java.io.File iniFile = new java.io.File(dir, \"eclipse.ini\");\r\n        java.lang.StringBuilder newContents = new java.lang.StringBuilder();\r\n        if (iniFile.exists()) {\r\n            try {\r\n                java.io.FileInputStream fis = new java.io.FileInputStream(iniFile);\r\n                try {\r\n                    java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(fis));\r\n                    java.lang.String line;\r\n                    while ((line = br.readLine()) != null) {\r\n                        if (this.JAVA_AGENT_LINE_MATCHER.matcher(line).matches()) {\r\n                            continue;\r\n                        }\r\n                        java.util.regex.Matcher m = this.BOOTCLASSPATH_LINE_MATCHER.matcher(line);\r\n                        if (m.matches()) {\r\n                            java.lang.StringBuilder elemBuilder = new java.lang.StringBuilder();\r\n                            elemBuilder.append(\"-Xbootclasspath/a:\");\r\n                            boolean first = true;\r\n                            for (java.lang.String elem : m.group(1).split(java.util.regex.Pattern.quote(java.io.File.pathSeparator))) {\r\n                                if (elem.toLowerCase().endsWith(\"lombok.jar\")) {\r\n                                    continue;\r\n                                }\r\n                                if (elem.toLowerCase().endsWith(\"lombok.eclipse.agent.jar\")) {\r\n                                    continue;\r\n                                }\r\n                                if (first) {\r\n                                    first = false;\r\n                                } else {\r\n                                    elemBuilder.append(java.io.File.pathSeparator);\r\n                                }\r\n                                elemBuilder.append(elem);\r\n                            }\r\n                            if (!first) {\r\n                                newContents.append(elemBuilder.toString()).append(lombok.installer.EclipseLocation.OS_NEWLINE);\r\n                            }\r\n                            continue;\r\n                        }\r\n                        newContents.append(line).append(lombok.installer.EclipseLocation.OS_NEWLINE);\r\n                    } \r\n                } finally {\r\n                    fis.close();\r\n                }\r\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(iniFile);\r\n                try {\r\n                    fos.write(newContents.toString().getBytes());\r\n                } finally {\r\n                    fos.close();\r\n                }\r\n            } catch (java.io.IOException e) {\r\n                throw new lombok.installer.EclipseLocation.UninstallException((\"Cannot uninstall lombok from \" + this.path.getAbsolutePath()) + \" probably because this installer does not have the access rights to do so.\", e);\r\n            }\r\n        }\r\n    }\r\n}", "docComment": "Uninstalls lombok from this location.\r\nIt's a no-op if lombok wasn't there in the first place,\r\nand it will remove a half-succeeded lombok installation as well.\r\n\r\n@throws UninstallException\r\n\t\tIf there's an obvious I/O problem that is preventing installation.\r\n\t\tbugs in the uninstall code will probably throw other exceptions; this is intentional.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "kind": "method", "sourceText": "/**\r\n * Called for static and instance initializers. You can tell the difference via the isStatic() method.\r\n */\r\nvoid visitInitializer(lombok.javac.JavacAST.Node initializerNode, com.sun.tools.javac.tree.JCTree.JCBlock initializer);", "docComment": "Called for static and instance initializers. You can tell the difference via the isStatic() method.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl local, lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    this.print(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.get()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "get()", "qualifiedName": "lombok.core.AST$Node.get()", "kind": "method", "sourceText": "/**\r\n *\r\n * @return The javac/Eclipse internal AST object wrapped by this AST.Node object.\r\n */\r\npublic N get() {\r\n    return this.node;\r\n}", "docComment": "\r\n@return The javac/Eclipse internal AST object wrapped by this AST.Node object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getFields(java.lang.Class,java.util.Collection)", "qualifiedName": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "kind": "method", "sourceText": "private void getFields(java.lang.Class<? extends java.lang.Object> c, java.util.Collection<lombok.core.AST.FieldAccess> fields) {\r\n    if ((c == java.lang.Object.class) || (c == null)) {\r\n        return;\r\n    }\r\n    for (java.lang.reflect.Field f : c.getDeclaredFields()) {\r\n        if (java.lang.reflect.Modifier.isStatic(f.getModifiers())) {\r\n            continue;\r\n        }\r\n        java.lang.Class<? extends java.lang.Object> t = f.getType();\r\n        int dim = 0;\r\n        if (t.isArray()) {\r\n            while (t.isArray()) {\r\n                dim++;\r\n                t = t.getComponentType();\r\n            } \r\n        } else if (java.util.Collection.class.isAssignableFrom(t)) {\r\n            while (java.util.Collection.class.isAssignableFrom(t)) {\r\n                dim++;\r\n                t = this.getComponentType(f.getGenericType());\r\n            } \r\n        }\r\n        for (java.lang.Class<? extends java.lang.Object> statementType : this.getStatementTypes()) {\r\n            if (statementType.isAssignableFrom(t)) {\r\n                f.setAccessible(true);\r\n                fields.add(new lombok.core.AST.FieldAccess(f, dim));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this.getFields(c.getSuperclass(), fields);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "kind": "method", "sourceText": "private void doAssignmentCheck(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Statement[] tryBlock, char[] varName) {\r\n    for (org.eclipse.jdt.internal.compiler.ast.Statement statement : tryBlock) {\r\n        this.doAssignmentCheck0(node, statement, varName);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitStatement(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree statement) {\r\n    this.indent--;\r\n    this.print(\"</%s>\", statement.getClass());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "qualifiedName": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "kind": "method", "sourceText": "/**\r\n * Supply either a position or a node (in that case, position of the node is used)\r\n */\r\nprivate void printMessage(javax.tools.Diagnostic.Kind kind, java.lang.String message, lombok.javac.JavacAST.Node node, com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition pos) {\r\n    javax.tools.JavaFileObject oldSource = null;\r\n    javax.tools.JavaFileObject newSource = null;\r\n    com.sun.tools.javac.tree.JCTree astObject = (node == null) ? null : node.get();\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit top = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (this.top().get()));\r\n    newSource = top.sourcefile;\r\n    if (newSource != null) {\r\n        oldSource = this.log.useSource(newSource);\r\n        if (pos == null) {\r\n            pos = astObject.pos();\r\n        }\r\n    }\r\n    try {\r\n        switch (kind) {\r\n            case ERROR :\r\n                this.increaseErrorCount(this.messager);\r\n                boolean prev = this.log.multipleErrors;\r\n                this.log.multipleErrors = true;\r\n                try {\r\n                    this.log.error(pos, \"proc.messager\", message);\r\n                } finally {\r\n                    this.log.multipleErrors = prev;\r\n                }\r\n                break;\r\n            default :\r\n            case WARNING :\r\n                this.log.warning(pos, \"proc.messager\", message);\r\n                break;\r\n        }\r\n    } finally {\r\n        if (oldSource != null) {\r\n            this.log.useSource(oldSource);\r\n        }\r\n    }\r\n}", "docComment": "Supply either a position or a node (in that case, position of the node is used)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "kind": "static method", "sourceText": "/**\r\n * Checks if the provided annotation type is likely to be the intended type for the given annotation node.\r\n *\r\n * This is a guess, but a decent one.\r\n */\r\npublic static boolean annotationTypeMatches(java.lang.Class<? extends java.lang.annotation.Annotation> type, lombok.eclipse.EclipseAST.Node node) {\r\n    if (node.getKind() != lombok.core.AST.Kind.ANNOTATION) {\r\n        return false;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (node.get())).type;\r\n    if ((typeRef == null) || (typeRef.getTypeName() == null)) {\r\n        return false;\r\n    }\r\n    java.lang.String typeName = lombok.eclipse.Eclipse.toQualifiedName(typeRef.getTypeName());\r\n    lombok.core.TypeLibrary library = new lombok.core.TypeLibrary();\r\n    library.addType(type.getName());\r\n    lombok.core.TypeResolver resolver = new lombok.core.TypeResolver(library, node.getPackageDeclaration(), node.getImportStatements());\r\n    java.util.Collection<java.lang.String> typeMatches = resolver.findTypeMatches(node, typeName);\r\n    for (java.lang.String match : typeMatches) {\r\n        if (match.equals(type.getName())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks if the provided annotation type is likely to be the intended type for the given annotation node.\r\n\r\nThis is a guess, but a decent one.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "fieldName", "qualifiedName": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.PKG()", "kind": "constructor", "sourceText": "private PKG() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.core.PrintAST</code> annotation for javac.\r\n", "simpleName": "HandlePrintAST", "qualifiedName": "lombok.javac.handlers.HandlePrintAST", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public void generateToStringForType(lombok.eclipse.EclipseAST.Node typeNode, lombok.eclipse.EclipseAST.Node errorNode) {\r\n    for (lombok.eclipse.EclipseAST.Node child : typeNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.eclipse.Eclipse.annotationTypeMatches(lombok.ToString.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    boolean includeFieldNames = false;\r\n    boolean callSuper = false;\r\n    try {\r\n        includeFieldNames = ((java.lang.Boolean) (lombok.ToString.class.getMethod(\"includeFieldNames\").getDefaultValue())).booleanValue();\r\n    } catch (java.lang.Exception ignore) {\r\n    }\r\n    try {\r\n        callSuper = ((java.lang.Boolean) (lombok.ToString.class.getMethod(\"callSuper\").getDefaultValue())).booleanValue();\r\n    } catch (java.lang.Exception ignore) {\r\n    }\r\n    this.generateToString(typeNode, errorNode, java.util.Collections.<java.lang.String>emptyList(), includeFieldNames, callSuper, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Lombok", "labels": ["Structure"], "properties": {"docComment": "Useful utility methods to manipulate lombok-generated code.\r\n", "simpleName": "Lombok", "qualifiedName": "lombok.Lombok", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map).0", "labels": ["Variable"], "properties": {"simpleName": "map", "qualifiedName": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public boolean handle(org.eclipse.jdt.internal.compiler.ast.Annotation annotation, final lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    lombok.core.AnnotationValues<T> annValues = lombok.eclipse.Eclipse.createAnnotation(this.annotationClass, annotationNode);\r\n    return this.handler.handle(annValues, annotation, annotationNode);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toName(java.lang.String)", "qualifiedName": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's toName method.\r\n *\r\n * @see JavacAST#toName(String)\r\n */\r\npublic com.sun.tools.javac.util.Name toName(java.lang.String name) {\r\n    return this.toName(name);\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's toName method.\r\n\r\n@see JavacAST#toName(String)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.load()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "load()", "qualifiedName": "lombok.eclipse.HandlerLibrary.load()", "kind": "static method", "sourceText": "/**\r\n * Creates a new HandlerLibrary.  Errors will be reported to the Eclipse Error log.\r\n * then uses SPI discovery to load all annotation and visitor based handlers so that future calls\r\n * to the handle methods will defer to these handlers.\r\n */\r\npublic static lombok.eclipse.HandlerLibrary load() {\r\n    lombok.eclipse.HandlerLibrary lib = new lombok.eclipse.HandlerLibrary();\r\n    lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lib);\r\n    lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lib);\r\n    return lib;\r\n}", "docComment": "Creates a new HandlerLibrary.  Errors will be reported to the Eclipse Error log.\r\nthen uses SPI discovery to load all annotation and visitor based handlers so that future calls\r\nto the handle methods will defer to these handlers.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.core.PrintAST</code> annotation for eclipse.\r\n", "simpleName": "HandlePrintAST", "qualifiedName": "lombok.eclipse.handlers.HandlePrintAST", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary).0", "labels": ["Variable"], "properties": {"simpleName": "lib", "qualifiedName": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "addToMap(java.lang.String,java.lang.String)", "qualifiedName": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "kind": "method", "sourceText": "private lombok.core.TypeLibrary addToMap(java.lang.String keyName, java.lang.String fullyQualifiedTypeName) {\r\n    java.util.Set<java.lang.String> existing = this.simpleToQualifiedMap.get(keyName);\r\n    java.util.Set<java.lang.String> set = (existing == null) ? new java.util.HashSet<java.lang.String>() : new java.util.HashSet<java.lang.String>(existing);\r\n    set.add(fullyQualifiedTypeName);\r\n    this.simpleToQualifiedMap.put(keyName, java.util.Collections.unmodifiableSet(set));\r\n    return this;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor).0", "labels": ["Variable"], "properties": {"simpleName": "visitor", "qualifiedName": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "static method", "sourceText": "/**\r\n * Adds the given new method declaration to the provided type AST Node.\r\n * Can also inject constructors.\r\n *\r\n * Also takes care of updating the JavacAST.\r\n */\r\nstatic void injectMethod(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n    com.sun.tools.javac.tree.JCTree.JCClassDecl type = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get()));\r\n    if (method.getName().contentEquals(\"<init>\")) {\r\n        // Scan for default constructor, and remove it.\r\n        int idx = 0;\r\n        for (com.sun.tools.javac.tree.JCTree def : type.defs) {\r\n            if (def instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n                if ((((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (def)).mods.flags & com.sun.tools.javac.code.Flags.GENERATEDCONSTR) != 0) {\r\n                    lombok.javac.JavacAST.Node tossMe = typeNode.getNodeFor(def);\r\n                    if (tossMe != null) {\r\n                        tossMe.up().removeChild(tossMe);\r\n                    }\r\n                    type.defs = lombok.javac.handlers.PKG.addAllButOne(type.defs, idx);\r\n                    break;\r\n                }\r\n            }\r\n            idx++;\r\n        }\r\n    }\r\n    type.defs = type.defs.append(method);\r\n    typeNode.add(method, lombok.core.AST.Kind.METHOD).recursiveSetHandled();\r\n}", "docComment": "Adds the given new method declaration to the provided type AST Node.\r\nCan also inject constructors.\r\n\r\nAlso takes care of updating the JavacAST.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "private void addIfNotNull(java.util.Collection<lombok.eclipse.EclipseAST.Node> collection, lombok.eclipse.EclipseAST.Node n) {\r\n    if (n != null) {\r\n        collection.add(n);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "qualifiedName": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "kind": "method", "sourceText": "@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate lombok.core.AST<N>.Node replaceNewWithExistingOld(java.util.Map<N, lombok.core.AST<N>.Node> oldNodes, lombok.core.AST<N>.Node newNode) {\r\n    lombok.core.AST<N>.Node oldNode = oldNodes.get(newNode.get());\r\n    lombok.core.AST<N>.Node targetNode = (oldNode == null) ? newNode : oldNode;\r\n    java.util.List children = new java.util.ArrayList();\r\n    for (lombok.core.AST<N>.Node child : newNode.children) {\r\n        lombok.core.AST<N>.Node oldChild = this.replaceNewWithExistingOld(oldNodes, child);\r\n        children.add(oldChild);\r\n        oldChild.parent = targetNode;\r\n    }\r\n    targetNode.children.clear();\r\n    ((java.util.List) (targetNode.children)).addAll(children);\r\n    return targetNode;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.Version.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "lombok.core.Version.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "/**\r\n * Called for both methods and constructors.\r\n */\r\nvoid visitMethod(lombok.javac.JavacAST.Node methodNode, com.sun.tools.javac.tree.JCTree.JCMethodDecl method);", "docComment": "Called for both methods and constructors.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "findTypeMatches(lombok.core.AST$Node,java.lang.String)", "qualifiedName": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Finds type matches for the stated type reference. The provided context is scanned for local type names\r\n * that shadow type names listed in import statements. If such a shadowing occurs, no matches are returned\r\n * for any shadowed types, as you would expect.\r\n */\r\npublic java.util.Collection<java.lang.String> findTypeMatches(lombok.core.AST<? extends java.lang.Object>.Node context, java.lang.String typeRef) {\r\n    java.util.Collection<java.lang.String> potentialMatches = this.library.findCompatible(typeRef);\r\n    if (potentialMatches.isEmpty()) {\r\n        return java.util.Collections.emptyList();\r\n    }\r\n    int idx = typeRef.indexOf('.');\r\n    if (idx > (-1)) {\r\n        return potentialMatches;\r\n    }\r\n    java.lang.String simpleName = typeRef.substring(idx + 1);\r\n    // If there's an import statement that explicitly imports a 'Getter' that isn't any of our potentials, return no matches.\r\n    if (this.nameConflictInImportList(simpleName, potentialMatches)) {\r\n        return java.util.Collections.emptyList();\r\n    }\r\n    // Check if any of our potentials is even imported in the first place. If not: no matches.\r\n    potentialMatches = this.eliminateImpossibleMatches(potentialMatches);\r\n    if (potentialMatches.isEmpty()) {\r\n        return java.util.Collections.emptyList();\r\n    }\r\n    // Find a lexically accessible type of the same simple name in the same Compilation Unit. If it exists: no matches.\r\n    lombok.core.AST<? extends java.lang.Object>.Node n = context;\r\n    while (n != null) {\r\n        if (n.getKind() == lombok.core.AST.Kind.TYPE) {\r\n            java.lang.String name = n.getName();\r\n            if ((name != null) && name.equals(simpleName)) {\r\n                return java.util.Collections.emptyList();\r\n            }\r\n        }\r\n        n = n.up();\r\n    } \r\n    // The potential matches we found by comparing the import statements is our matching set. Return it.\r\n    return potentialMatches;\r\n}", "docComment": "Finds type matches for the stated type reference. The provided context is scanned for local type names\r\nthat shadow type names listed in import statements. If such a shadowing occurs, no matches are returned\r\nfor any shadowed types, as you would expect.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "qualifiedName": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "kind": "method", "sourceText": "private void checkForBogusExcludes(lombok.javac.JavacAST.Node type, lombok.core.AnnotationValues<lombok.ToString> annotation) {\r\n    com.sun.tools.javac.util.List<java.lang.String> list = com.sun.tools.javac.util.List.from(annotation.getInstance().exclude());\r\n    boolean[] matched = new boolean[list.size()];\r\n    for (lombok.javac.JavacAST.Node child : type.down()) {\r\n        if (list.isEmpty()) {\r\n            break;\r\n        }\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        if ((((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (child.get())).mods.flags & com.sun.tools.javac.code.Flags.STATIC) != 0) {\r\n            continue;\r\n        }\r\n        int idx = list.indexOf(child.getName());\r\n        if (idx > (-1)) {\r\n            matched[idx] = true;\r\n        }\r\n    }\r\n    for (int i = 0; i < list.size(); i++) {\r\n        if (!matched[i]) {\r\n            annotation.setWarning(\"exclude\", \"This field does not exist, or would have been excluded anyway.\", i);\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.raws", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * A list of the raw expressions. List is size 1 unless an array is provided.\r\n */\r\npublic final java.util.List<java.lang.String> raws;", "visibility": "public", "simpleName": "raws", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.raws", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok.sneakyThrow0(java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "t", "qualifiedName": "lombok.Lombok.sneakyThrow0(java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "void endVisitStatement(lombok.javac.JavacAST.Node statementNode, com.sun.tools.javac.tree.JCTree statement);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "qualifiedName": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "kind": "constructor", "sourceText": "/**\r\n * Creates a new TypeResolver that can be used to resolve types in a given library, encountered in\r\n * a source file with the provided package and import statements.\r\n */\r\npublic TypeResolver(lombok.core.TypeLibrary library, java.lang.String packageString, java.util.Collection<java.lang.String> importStrings) {\r\n    super();\r\n    this.library = library;\r\n    this.imports = lombok.core.TypeResolver.makeImportList(packageString, importStrings);\r\n}", "docComment": "Creates a new TypeResolver that can be used to resolve types in a given library, encountered in\r\na source file with the provided package and import statements.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "newO", "qualifiedName": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class).0", "labels": ["Variable"], "properties": {"simpleName": "target", "qualifiedName": "lombok.core.SpiLoadUtil.findServices(java.lang.Class).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "labels": ["Variable"], "properties": {"sourceText": "private static final java.util.Set<java.lang.String> BUILT_IN_TYPES = java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"byte\", \"short\", \"int\", \"long\", \"char\", \"boolean\", \"double\", \"float\")));", "visibility": "private", "simpleName": "BUILT_IN_TYPES", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.toName(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toName(java.lang.String)", "qualifiedName": "lombok.javac.JavacAST.toName(java.lang.String)", "kind": "method", "sourceText": "/**\r\n *\r\n * @return A Name object generated for the proper name table belonging to this AST.\r\n */\r\npublic com.sun.tools.javac.util.Name toName(java.lang.String name) {\r\n    return this.nameTable.fromString(name);\r\n}", "docComment": "\r\n@return A Name object generated for the proper name table belonging to this AST.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[]).0", "labels": ["Variable"], "properties": {"simpleName": "c", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "labels": ["Variable"], "properties": {"simpleName": "includeFieldNames", "qualifiedName": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitField(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n    this.print(\"<FIELD %s %s>\", field.vartype, field.name);\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        if (field.init != null) {\r\n            this.print(\"%s\", field.init);\r\n        }\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "chain", "qualifiedName": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "includeFieldNames", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.visitorHandlers", "labels": ["Variable"], "properties": {"sourceText": "private java.util.Collection<lombok.eclipse.EclipseASTVisitor> visitorHandlers = new java.util.ArrayList<lombok.eclipse.EclipseASTVisitor>();", "visibility": "private", "simpleName": "visitorHandlers", "qualifiedName": "lombok.eclipse.HandlerLibrary.visitorHandlers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "callASTVisitors(lombok.javac.JavacAST)", "qualifiedName": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "kind": "method", "sourceText": "/**\r\n * Will call all registered {@link JavacASTVisitor} instances.\r\n */\r\npublic void callASTVisitors(lombok.javac.JavacAST ast) {\r\n    for (lombok.javac.JavacASTVisitor visitor : this.visitorHandlers) {\r\n        try {\r\n            ast.traverse(visitor);\r\n        } catch (java.lang.Throwable t) {\r\n            this.javacError(java.lang.String.format(\"Lombok visitor handler %s failed\", visitor.getClass()), t);\r\n        }\r\n    }\r\n}", "docComment": "Will call all registered {@link JavacASTVisitor} instances.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "otherDotField", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.MODULE", "labels": ["Variable"], "properties": {"sourceText": "MODULE()", "visibility": "public", "simpleName": "MODULE", "qualifiedName": "lombok.AccessLevel.MODULE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCStatement buildTryCatchBlock(lombok.javac.JavacAST.Node node, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> contents, java.lang.String exception) {\r\n    com.sun.tools.javac.tree.TreeMaker maker = node.getTreeMaker();\r\n    com.sun.tools.javac.tree.JCTree.JCBlock tryBlock = maker.Block(0, contents);\r\n    com.sun.tools.javac.tree.JCTree.JCExpression varType = lombok.javac.handlers.PKG.chainDots(maker, node, exception.split(\"\\\\.\"));\r\n    com.sun.tools.javac.tree.JCTree.JCVariableDecl catchParam = maker.VarDef(maker.Modifiers(0), node.toName(\"$ex\"), varType, null);\r\n    com.sun.tools.javac.tree.JCTree.JCExpression lombokLombokSneakyThrowNameRef = lombok.javac.handlers.PKG.chainDots(maker, node, \"lombok\", \"Lombok\", \"sneakyThrow\");\r\n    com.sun.tools.javac.tree.JCTree.JCBlock catchBody = maker.Block(0, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCStatement>of(maker.Throw(maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), lombokLombokSneakyThrowNameRef, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>of(maker.Ident(node.toName(\"$ex\")))))));\r\n    return maker.Try(tryBlock, com.sun.tools.javac.util.List.of(maker.Catch(catchParam, catchBody)), null);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).3", "labels": ["Variable"], "properties": {"simpleName": "error", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "javacError(java.lang.String)", "qualifiedName": "lombok.javac.HandlerLibrary.javacError(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generates an error in the Messager that was used to initialize this HandlerLibrary.\r\n */\r\npublic void javacError(java.lang.String message) {\r\n    this.javacWarning(message, null);\r\n}", "docComment": "Generates an error in the Messager that was used to initialize this HandlerLibrary.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n    if (this.setAndGetAsHandled(method)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    childNodes.addAll(this.buildArguments(method.arguments));\r\n    childNodes.addAll(this.buildStatements(method.statements));\r\n    childNodes.addAll(this.buildAnnotations(method.annotations));\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(method, childNodes, lombok.core.AST.Kind.METHOD));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeLibrary", "labels": ["Structure"], "properties": {"docComment": "Library of types, which can be used to look up potential matching types.\r\n\r\nFor example, if you put 'foo.Spork' and 'bar.Spork' into the library, and then ask for\r\nall compatible types given the type 'Spork', you'll get both of them, but you'll only\r\nget the one if you ask for compatible types given 'foo.Spork'.\r\n\r\nUseful to 'guess' if a given annotation AST node matches an annotation handler's target annotation.\r\n", "simpleName": "TypeLibrary", "qualifiedName": "lombok.core.TypeLibrary", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getImportStatements()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getImportStatements()", "qualifiedName": "lombok.core.AST.getImportStatements()", "kind": "method", "sourceText": "/**\r\n * Return the contents of each non-static import statement on this AST's top (Compilation Unit) node.\r\n *\r\n * Example: \"java.util.IOException\".\r\n */\r\npublic abstract java.util.Collection<java.lang.String> getImportStatements();", "docComment": "Return the contents of each non-static import statement on this AST's top (Compilation Unit) node.\r\n\r\nExample: \"java.util.IOException\".\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getProbableFQType(java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Convenience method to return the first result in a {@link #getProbableFQType(String)} call.\r\n *\r\n * You should use this method if the annotation method is not an array type.\r\n */\r\npublic java.lang.String getProbableFQType(java.lang.String annotationMethodName) {\r\n    java.util.List<java.lang.String> l = this.getProbableFQTypes(annotationMethodName);\r\n    return l.isEmpty() ? null : l.get(0);\r\n}", "docComment": "Convenience method to return the first result in a {@link #getProbableFQType(String)} call.\r\n\r\nYou should use this method if the annotation method is not an array type.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$FieldAccess.field", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The actual field.\r\n */\r\npublic final java.lang.reflect.Field field;", "visibility": "public", "simpleName": "field", "qualifiedName": "lombok.core.AST$FieldAccess.field", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public boolean handle(lombok.core.AnnotationValues<lombok.Setter> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    lombok.eclipse.EclipseAST.Node fieldNode = annotationNode.up();\r\n    if (fieldNode.getKind() != lombok.core.AST.Kind.FIELD) {\r\n        return false;\r\n    }\r\n    lombok.AccessLevel level = annotation.getInstance().value();\r\n    return this.createSetterForField(level, fieldNode, annotationNode, annotationNode.get(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.javacArea", "labels": ["Variable"], "properties": {"sourceText": "private java.awt.Component javacArea;", "visibility": "private", "simpleName": "javacArea", "qualifiedName": "lombok.installer.Installer.javacArea", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "current", "qualifiedName": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.astCacheField", "labels": ["Variable"], "properties": {"sourceText": "// The patcher hacks this field onto CUD. It's public.\r\nprivate static final java.lang.reflect.Field astCacheField;", "visibility": "private", "simpleName": "astCacheField", "qualifiedName": "lombok.eclipse.TransformEclipseAST.astCacheField", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).1", "labels": ["Variable"], "properties": {"simpleName": "t", "qualifiedName": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration top = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (annotationNode.top().get()));\r\n    boolean handled = lombok.eclipse.TransformEclipseAST.handlers.handle(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "LombokProblem", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Kind.ANNOTATION", "labels": ["Variable"], "properties": {"sourceText": "ANNOTATION()", "visibility": "public", "simpleName": "ANNOTATION", "qualifiedName": "lombok.core.AST$Kind.ANNOTATION", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "includeFieldNames", "qualifiedName": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "sourceStart", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).5", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).5", "kind": "parameter", "parameterPosition": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "labels": ["Variable"], "properties": {"simpleName": "list", "qualifiedName": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "visitor", "qualifiedName": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "qualifiedName": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "kind": "static method", "sourceText": "/**\r\n * Uses SPI Discovery to find implementations of {@link EclipseAnnotationHandler}.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate static void loadAnnotationHandlers(lombok.eclipse.HandlerLibrary lib) {\r\n    java.util.Iterator<lombok.eclipse.EclipseAnnotationHandler> it;\r\n    try {\r\n        it = lombok.core.SpiLoadUtil.findServices(lombok.eclipse.EclipseAnnotationHandler.class);\r\n    } catch (java.lang.Throwable t) {\r\n        throw lombok.Lombok.sneakyThrow(t);\r\n    }\r\n    while (it.hasNext()) {\r\n        try {\r\n            lombok.eclipse.EclipseAnnotationHandler<? extends java.lang.Object> handler = it.next();\r\n            java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass = lombok.core.SpiLoadUtil.findAnnotationClass(handler.getClass(), lombok.eclipse.EclipseAnnotationHandler.class);\r\n            lombok.eclipse.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object> container = new lombok.eclipse.HandlerLibrary.AnnotationHandlerContainer(handler, annotationClass);\r\n            if (lib.annotationHandlers.put(container.annotationClass.getName(), container) != null) {\r\n                lombok.eclipse.Eclipse.error(null, \"Duplicate handlers for annotation type: \" + container.annotationClass.getName());\r\n            }\r\n            lib.typeLibrary.addType(container.annotationClass.getName());\r\n        } catch (java.lang.Throwable t) {\r\n            lombok.eclipse.Eclipse.error(null, \"Can't load Lombok annotation handler for Eclipse: \", t);\r\n        }\r\n    } \r\n}", "docComment": "Uses SPI Discovery to find implementations of {@link EclipseAnnotationHandler}.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).4", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).1", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.toName(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.javac.JavacAST$Node.toName(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.ECLIPSE_EXPLANATION", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String ECLIPSE_EXPLANATION = \"<html>Lombok can update your Eclipse to fully support all Lombok features.<br>\" + \"Select Eclipse installations below and hit 'Install/Update'.</html>\";", "visibility": "private", "simpleName": "ECLIPSE_EXPLANATION", "qualifiedName": "lombok.installer.Installer.ECLIPSE_EXPLANATION", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitMethodArgument(lombok.javac.JavacAST.Node argumentNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl argument, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "byte", "labels": ["Primitive"], "properties": {"simpleName": "byte", "qualifiedName": "byte", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(lombok.core.AST$Node,java.util.List,java.util.List)", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "kind": "constructor", "sourceText": "/**\r\n * Like the other constructor, but used for when the annotation method is initialized with an array value.\r\n */\r\npublic AnnotationValue(lombok.core.AST<? extends java.lang.Object>.Node node, java.util.List<java.lang.String> raws, java.util.List<java.lang.Object> valueGuesses) {\r\n    super();\r\n    this.node = node;\r\n    this.raws = raws;\r\n    this.valueGuesses = valueGuesses;\r\n}", "docComment": "Like the other constructor, but used for when the annotation method is initialized with an array value.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "method", "sourceText": "/**\r\n * Called when visiting a field of a class.\r\n * Even though in Eclipse initializers (both instance and static) are represented as Initializer objects,\r\n * which are a subclass of FieldDeclaration, those do NOT result in a call to this method. They result\r\n * in a call to the visitInitializer method.\r\n */\r\nvoid visitField(lombok.eclipse.EclipseAST.Node fieldNode, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field);", "docComment": "Called when visiting a field of a class.\r\nEven though in Eclipse initializers (both instance and static) are represented as Initializer objects,\r\nwhich are a subclass of FieldDeclaration, those do NOT result in a call to this method. They result\r\nin a call to the visitInitializer method.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean).0", "labels": ["Variable"], "properties": {"simpleName": "printContent", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer(boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "/**\r\n * Handles the provided annotation node by first finding a qualifying instance of\r\n * {@link JavacAnnotationHandler} and if one exists, calling it with a freshly cooked up\r\n * instance of {@link lombok.core.AnnotationValues}.\r\n *\r\n * Note that depending on the printASTOnly flag, the {@link lombok.core.PrintAST} annotation\r\n * will either be silently skipped, or everything that isn't <code>PrintAST</code> will be skipped.\r\n *\r\n * The HandlerLibrary will attempt to guess if the given annotation node represents a lombok annotation.\r\n * For example, if <code>lombok.*</code> is in the import list, then this method will guess that\r\n * <code>Getter</code> refers to <code>lombok.Getter</code>, presuming that {@link lombok.javac.handlers.HandleGetter}\r\n * has been loaded.\r\n *\r\n * @param unit\r\n * \t\tThe Compilation Unit that contains the Annotation AST Node.\r\n * @param node\r\n * \t\tThe Lombok AST Node representing the Annotation AST Node.\r\n * @param annotation\r\n * \t\t'node.get()' - convenience parameter.\r\n */\r\npublic boolean handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit, lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    lombok.core.TypeResolver resolver = new lombok.core.TypeResolver(this.typeLibrary, node.getPackageDeclaration(), node.getImportStatements());\r\n    java.lang.String rawType = annotation.annotationType.toString();\r\n    boolean handled = false;\r\n    for (java.lang.String fqn : resolver.findTypeMatches(node, rawType)) {\r\n        boolean isPrintAST = fqn.equals(lombok.core.PrintAST.class.getName());\r\n        if (isPrintAST == this.skipPrintAST) {\r\n            continue;\r\n        }\r\n        lombok.javac.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object> container = this.annotationHandlers.get(fqn);\r\n        if (container == null) {\r\n            continue;\r\n        }\r\n        try {\r\n            handled |= container.handle(node);\r\n        } catch (lombok.core.AnnotationValues.AnnotationValueDecodeFail fail) {\r\n            fail.owner.setError(fail.getMessage(), fail.idx);\r\n        } catch (java.lang.Throwable t) {\r\n            this.javacError(java.lang.String.format(\"Lombok annotation handler %s failed\", container.handler.getClass()), t);\r\n        }\r\n    }\r\n    return handled;\r\n}", "docComment": "Handles the provided annotation node by first finding a qualifying instance of\r\n{@link JavacAnnotationHandler} and if one exists, calling it with a freshly cooked up\r\ninstance of {@link lombok.core.AnnotationValues}.\r\n\r\nNote that depending on the printASTOnly flag, the {@link lombok.core.PrintAST} annotation\r\nwill either be silently skipped, or everything that isn't <code>PrintAST</code> will be skipped.\r\n\r\nThe HandlerLibrary will attempt to guess if the given annotation node represents a lombok annotation.\r\nFor example, if <code>lombok.*</code> is in the import list, then this method will guess that\r\n<code>Getter</code> refers to <code>lombok.Getter</code>, presuming that {@link lombok.javac.handlers.HandleGetter}\r\nhas been loaded.\r\n\r\n@param unit\r\n\t\tThe Compilation Unit that contains the Annotation AST Node.\r\n@param node\r\n\t\tThe Lombok AST Node representing the Annotation AST Node.\r\n@param annotation\r\n\t\t'node.get()' - convenience parameter.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME", "labels": ["Variable"], "properties": {"sourceText": "private static final char[] STATIC_LOCK_NAME = \"$LOCK\".toCharArray();", "visibility": "private", "simpleName": "STATIC_LOCK_NAME", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).5", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).5", "kind": "parameter", "parameterPosition": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.installer.EclipseFinder()", "kind": "constructor", "sourceText": "private EclipseFinder() {\r\n    super();\r\n    // Prevent instantiation.\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setTop(lombok.core.AST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.core.AST.setTop(lombok.core.AST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "cud", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind", "labels": ["Structure"], "properties": {"docComment": "The kind of node represented by a given AST.Node object.\r\n", "simpleName": "Kind", "qualifiedName": "lombok.core.AST$Kind", "kind": "enum", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST", "labels": ["Structure", "Container"], "properties": {"docComment": "Wraps around javac's internal AST view to add useful features as well as the ability to visit parents from children,\r\nsomething javac's own AST system does not offer.\r\n", "simpleName": "JavacAST", "qualifiedName": "lombok.javac.JavacAST", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "public void visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local, lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    this.print(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "labels": ["Variable"], "properties": {"simpleName": "dim", "qualifiedName": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.javac.Javac()", "kind": "constructor", "sourceText": "private Javac() {\r\n    super();\r\n    // prevent instantiation\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer).0", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "public void visitMethodArgument(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n    this.print(\"<METHODARG %s %s = %s>\", this.str(arg.type), this.str(arg.name), arg.initialization);\r\n    this.indent++;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isFixedDisk(java.lang.String)", "qualifiedName": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Feed it a drive letter (such as 'A') to see if it is a fixed disk.\r\n */\r\npublic boolean isFixedDisk(java.lang.String letter) {\r\n    if (letter.length() != 1) {\r\n        throw new java.lang.IllegalArgumentException(\"Supply 1 letter, not: \" + letter);\r\n    }\r\n    char drive = java.lang.Character.toUpperCase(letter.charAt(0));\r\n    if ((drive < 'A') || (drive > 'Z')) {\r\n        throw new java.lang.IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive);\r\n    }\r\n    return this.getDriveType(drive + \":\\\\\") == 3L;\r\n}", "docComment": "Feed it a drive letter (such as 'A') to see if it is a fixed disk.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "labels": ["Structure"], "properties": {"docComment": "Thrown on the fly if an actual annotation instance procured via the {@link #getInstance()} method is queried\r\nfor a method for which this AnnotationValues instance either doesn't have a guess or can't manage to fit\r\nthe guess into the required data type.\r\n", "simpleName": "AnnotationValueDecodeFail", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitStatement(lombok.eclipse.EclipseAST.Node statementNode, org.eclipse.jdt.internal.compiler.ast.Statement statement) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "qualifiedName": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock initializer) {\r\n    if (this.setAndGetAsHandled(initializer)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.javac.JavacAST.Node> childNodes = new java.util.ArrayList<lombok.javac.JavacAST.Node>();\r\n    for (com.sun.tools.javac.tree.JCTree.JCStatement statement : initializer.stats) {\r\n        lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildStatement(statement));\r\n    }\r\n    return this.putInMap(new lombok.javac.JavacAST.Node(initializer, childNodes, lombok.core.AST.Kind.INITIALIZER));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.AppleNativeLook", "labels": ["Structure"], "properties": {"docComment": "Mac OS X specific code to gussy up the GUI a little bit, mostly with a nice dock icon. Well, nicer than\r\nthe standard icon, at any rate.\r\n", "simpleName": "AppleNativeLook", "qualifiedName": "lombok.installer.AppleNativeLook", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.getPackageDeclaration()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPackageDeclaration()", "qualifiedName": "lombok.core.AST$Node.getPackageDeclaration()", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's getPackageDeclaration method.\r\n *\r\n * @see AST#getPackageDeclaration()\r\n */\r\npublic java.lang.String getPackageDeclaration() {\r\n    return this.getPackageDeclaration();\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's getPackageDeclaration method.\r\n\r\n@see AST#getPackageDeclaration()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.JavacAST$Node.addError(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "kind": "static method", "sourceText": "/**\r\n * Generates an error in the Eclipse error log. Note that most people never look at it!\r\n */\r\npublic static void error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration cud, java.lang.String message, java.lang.String bundleName, java.lang.Throwable error) {\r\n    org.osgi.framework.Bundle bundle = org.eclipse.core.runtime.Platform.getBundle(bundleName);\r\n    if (bundle == null) {\r\n        java.lang.System.err.printf(\"Can\\'t find bundle %s while trying to report error:\\n%s\\n\", bundleName, message);\r\n        return;\r\n    }\r\n    org.eclipse.core.runtime.ILog log = org.eclipse.core.runtime.Platform.getLog(bundle);\r\n    log.log(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, bundleName, message, error));\r\n    if (cud != null) {\r\n        lombok.eclipse.EclipseAST.addProblemToCompilationResult(cud, false, message + \" - See error log.\", 0, 0);\r\n    }\r\n}", "docComment": "Generates an error in the Eclipse error log. Note that most people never look at it!\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Setter", "labels": ["Structure"], "properties": {"docComment": "Put on any field to make lombok build a standard setter.\r\n<p>\r\nExample:\r\n<pre>\r\n    private &#64;Setter int foo;\r\n</pre>\r\n\r\nwill generate:\r\n\r\n<pre>\r\n    public void setFoo(int foo) {\r\n        this.foo = foo;\r\n    }\r\n</pre>\r\n\r\nIf any method named <code>setFoo</code> exists, regardless of return type or parameters, no method is generated,\r\nand instead a compiler warning is emitted.\r\n", "simpleName": "Setter", "qualifiedName": "lombok.Setter", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "kind": "static method", "sourceText": "/**\r\n * Checks if the Annotation AST Node provided is likely to be an instance of the provided annotation type.\r\n *\r\n * @param type\r\n * \t\tAn actual annotation type, such as <code>lombok.Getter.class</code>.\r\n * @param node\r\n * \t\tA Lombok AST node representing an annotation in source code.\r\n */\r\npublic static boolean annotationTypeMatches(java.lang.Class<? extends java.lang.annotation.Annotation> type, lombok.javac.JavacAST.Node node) {\r\n    if (node.getKind() != lombok.core.AST.Kind.ANNOTATION) {\r\n        return false;\r\n    }\r\n    java.lang.String typeName = ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (node.get())).annotationType.toString();\r\n    lombok.core.TypeLibrary library = new lombok.core.TypeLibrary();\r\n    library.addType(type.getName());\r\n    lombok.core.TypeResolver resolver = new lombok.core.TypeResolver(library, node.getPackageDeclaration(), node.getImportStatements());\r\n    java.util.Collection<java.lang.String> typeMatches = resolver.findTypeMatches(node, typeName);\r\n    for (java.lang.String match : typeMatches) {\r\n        if (match.equals(type.getName())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Checks if the Annotation AST Node provided is likely to be an instance of the provided annotation type.\r\n\r\n@param type\r\n\t\tAn actual annotation type, such as <code>lombok.Getter.class</code>.\r\n@param node\r\n\t\tA Lombok AST node representing an annotation in source code.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstallButton", "labels": ["Variable"], "properties": {"sourceText": "private lombok.installer.Installer.JHyperLink uninstallButton;", "visibility": "private", "simpleName": "uninstallButton", "qualifiedName": "lombok.installer.Installer.uninstallButton", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "uninstall(java.util.List)", "qualifiedName": "lombok.installer.Installer.uninstall(java.util.List)", "kind": "method", "sourceText": "private void uninstall(java.util.List<lombok.installer.EclipseLocation> locations) {\r\n    this.javacArea.setVisible(false);\r\n    this.eclipseArea.setVisible(false);\r\n    this.uninstallBox.removeAll();\r\n    this.uninstallBox.add(javax.swing.Box.createRigidArea(new java.awt.Dimension(1, 16)));\r\n    for (lombok.installer.EclipseLocation location : locations) {\r\n        javax.swing.JLabel label = new javax.swing.JLabel(location.getPath());\r\n        label.setFont(label.getFont().deriveFont(java.awt.Font.BOLD));\r\n        this.uninstallBox.add(label);\r\n    }\r\n    this.uninstallBox.add(javax.swing.Box.createRigidArea(new java.awt.Dimension(1, 16)));\r\n    this.toUninstall = locations;\r\n    this.uninstallArea.setVisible(true);\r\n    this.appWindow.pack();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public void generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST.Node typeNode, lombok.eclipse.EclipseAST.Node errorNode) {\r\n    for (lombok.eclipse.EclipseAST.Node child : typeNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.eclipse.Eclipse.annotationTypeMatches(lombok.EqualsAndHashCode.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    boolean callSuper = false;\r\n    try {\r\n        callSuper = ((java.lang.Boolean) (lombok.EqualsAndHashCode.class.getMethod(\"callSuper\").getDefaultValue())).booleanValue();\r\n    } catch (java.lang.Exception ignore) {\r\n    }\r\n    this.generateMethods(typeNode, errorNode, java.util.Collections.<java.lang.String>emptyList(), callSuper, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.SpiLoadUtil", "labels": ["Structure"], "properties": {"docComment": "The java core libraries have a SPI discovery system, but it works only in Java 1.6 and up. For at least Eclipse,\r\nlombok actually works in java 1.5, so we've rolled our own SPI discovery system.\r\n\r\nIt is not API compatible with <code>ServiceLoader</code>.\r\n\r\n@see java.util.ServiceLoader\r\n", "simpleName": "SpiLoadUtil", "qualifiedName": "lombok.core.SpiLoadUtil", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitCompilationUnit(lombok.javac.JavacAST.Node top, com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "qualifiedName": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "kind": "constructor", "sourceText": "/**\r\n * Creates a new AnnotationValues.\r\n *\r\n * @param type\r\n * \t\tThe annotation type. For example, \"Getter.class\"\r\n * @param values\r\n * \t\ta Map of method names to AnnotationValue instances, for example 'value -> annotationValue instance'.\r\n * @param ast\r\n * \t\tThe Annotation node.\r\n */\r\npublic AnnotationValues(java.lang.Class<A> type, java.util.Map<java.lang.String, lombok.core.AnnotationValues.AnnotationValue> values, lombok.core.AST<? extends java.lang.Object>.Node ast) {\r\n    super();\r\n    this.type = type;\r\n    this.values = values;\r\n    this.ast = ast;\r\n}", "docComment": "Creates a new AnnotationValues.\r\n\r\n@param type\r\n\t\tThe annotation type. For example, \"Getter.class\"\r\n@param values\r\n\t\ta Map of method names to AnnotationValue instances, for example 'value -> annotationValue instance'.\r\n@param ast\r\n\t\tThe Annotation node.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.EqualsAndHashCode> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    lombok.EqualsAndHashCode ann = annotation.getInstance();\r\n    com.sun.tools.javac.util.List<java.lang.String> excludes = com.sun.tools.javac.util.List.from(ann.exclude());\r\n    lombok.javac.JavacAST.Node typeNode = annotationNode.up();\r\n    this.checkForBogusExcludes(typeNode, annotation);\r\n    return this.generateMethods(typeNode, annotationNode, excludes, ann.callSuper(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "forcePrint(java.lang.String,java.lang.Object[])", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "kind": "method", "sourceText": "private void forcePrint(java.lang.String text, java.lang.Object... params) {\r\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\r\n    for (int i = 0; i < this.indent; i++) {\r\n        sb.append(\"  \");\r\n    }\r\n    this.out.printf(sb.append(text).append('\\n').toString(), params);\r\n    this.out.flush();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "contents", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "newNode", "qualifiedName": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitType(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.tree.JCTree.JCClassDecl type) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.toString()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toString()", "qualifiedName": "lombok.core.AST$Node.toString()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.lang.String toString() {\r\n    return java.lang.String.format(\"NODE %s (%s) %s%s\", this.kind, this.node == null ? \"(NULL)\" : this.node.getClass(), this.handled ? \"[HANDLED]\" : \"\", this.node == null ? \"\" : this.node);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).1", "labels": ["Variable"], "properties": {"simpleName": "tryBlock", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "method", "sourceText": "void endVisitCompilationUnit(lombok.javac.JavacAST.Node top, com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "findAnnotationClass(java.lang.Class,java.lang.Class)", "qualifiedName": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "kind": "static method", "sourceText": "/**\r\n * This method will find the <code>T</code> in <code>public class Foo extends BaseType&lt;T&gt;.\r\n *\r\n * It returns an annotation type because it is used exclusively to figure out which annotations are\r\n * being handled by {@link lombok.eclipse.EclipseAnnotationHandler} and {@link lombok.javac.JavacAnnotationHandler}.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static java.lang.Class<? extends java.lang.annotation.Annotation> findAnnotationClass(java.lang.Class<? extends java.lang.Object> c, java.lang.Class<? extends java.lang.Object> base) {\r\n    if ((c == java.lang.Object.class) || (c == null)) {\r\n        return null;\r\n    }\r\n    for (java.lang.reflect.Type iface : c.getGenericInterfaces()) {\r\n        if (iface instanceof java.lang.reflect.ParameterizedType) {\r\n            java.lang.reflect.ParameterizedType p = ((java.lang.reflect.ParameterizedType) (iface));\r\n            if (!base.equals(p.getRawType())) {\r\n                continue;\r\n            }\r\n            java.lang.reflect.Type target = p.getActualTypeArguments()[0];\r\n            if (target instanceof java.lang.Class<?>) {\r\n                if (java.lang.annotation.Annotation.class.isAssignableFrom(((java.lang.Class<? extends java.lang.Object>) (target)))) {\r\n                    return ((java.lang.Class<? extends java.lang.annotation.Annotation>) (target));\r\n                }\r\n            }\r\n            throw new java.lang.ClassCastException(\"Not an annotation type: \" + target);\r\n        }\r\n    }\r\n    java.lang.Class<? extends java.lang.annotation.Annotation> potential = lombok.core.SpiLoadUtil.findAnnotationClass(c.getSuperclass(), base);\r\n    if (potential != null) {\r\n        return potential;\r\n    }\r\n    for (java.lang.Class<? extends java.lang.Object> iface : c.getInterfaces()) {\r\n        potential = lombok.core.SpiLoadUtil.findAnnotationClass(iface, base);\r\n        if (potential != null) {\r\n            return potential;\r\n        }\r\n    }\r\n    return null;\r\n}", "docComment": "This method will find the <code>T</code> in <code>public class Foo extends BaseType&lt;T&gt;.\r\n\r\nIt returns an annotation type because it is used exclusively to figure out which annotations are\r\nbeing handled by {@link lombok.eclipse.EclipseAnnotationHandler} and {@link lombok.javac.JavacAnnotationHandler}.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).2", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.INITIALIZER", "labels": ["Variable"], "properties": {"sourceText": "INITIALIZER()", "visibility": "public", "simpleName": "INITIALIZER", "qualifiedName": "lombok.core.AST$Kind.INITIALIZER", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "originatingFileName", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String STATIC_LOCK_NAME = \"$LOCK\";", "visibility": "private", "simpleName": "STATIC_LOCK_NAME", "qualifiedName": "lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addType(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "fullyQualifiedTypeName", "qualifiedName": "lombok.core.TypeLibrary.addType(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "public void visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type, lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    this.forcePrint(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.disableLombok", "labels": ["Variable"], "properties": {"sourceText": "private static boolean disableLombok = false;", "visibility": "private", "simpleName": "disableLombok", "qualifiedName": "lombok.eclipse.TransformEclipseAST.disableLombok", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\n@java.lang.Override\r\nprotected void setElementInASTCollection(java.lang.reflect.Field field, java.lang.Object refField, java.util.List<java.util.Collection<? extends java.lang.Object>> chain, java.util.Collection<? extends java.lang.Object> collection, int idx, com.sun.tools.javac.tree.JCTree newN) throws java.lang.IllegalAccessException {\r\n    java.util.List<? extends java.lang.Object> list = this.setElementInConsList(chain, collection, ((java.util.List) (collection)).get(idx), newN);\r\n    field.set(refField, list);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.nodeMap", "labels": ["Variable"], "properties": {"sourceText": "private java.util.Map<N, lombok.core.AST<N>.Node> nodeMap = new java.util.IdentityHashMap<N, lombok.core.AST<N>.Node>();", "visibility": "private", "simpleName": "nodeMap", "qualifiedName": "lombok.core.AST.nodeMap", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "qualifiedName": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "kind": "method", "sourceText": "private java.util.List<? extends java.lang.Object> setElementInConsList(java.util.List<java.util.Collection<? extends java.lang.Object>> chain, java.util.Collection<? extends java.lang.Object> current, java.lang.Object oldO, java.lang.Object newO) {\r\n    java.util.List<? extends java.lang.Object> oldL = ((java.util.List<? extends java.lang.Object>) (current));\r\n    java.util.List<? extends java.lang.Object> newL = this.replaceInConsList(oldL, oldO, newO);\r\n    if (chain.isEmpty()) {\r\n        return newL;\r\n    } else {\r\n        java.util.List<java.util.Collection<? extends java.lang.Object>> reducedChain = new java.util.ArrayList<java.util.Collection<? extends java.lang.Object>>(chain);\r\n        java.util.Collection<? extends java.lang.Object> newCurrent = reducedChain.remove(reducedChain.size() - 1);\r\n        return this.setElementInConsList(reducedChain, newCurrent, oldL, newL);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "labels": ["Variable"], "properties": {"sourceText": "private java.lang.Class<T> annotationClass;", "visibility": "private", "simpleName": "annotationClass", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "qualifiedName": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic boolean process(java.util.Set<? extends javax.lang.model.element.TypeElement> annotations, javax.annotation.processing.RoundEnvironment roundEnv) {\r\n    if (this.processingEnv == null) {\r\n        return false;\r\n    }\r\n    java.util.IdentityHashMap<com.sun.tools.javac.tree.JCTree.JCCompilationUnit, java.lang.Void> units = new java.util.IdentityHashMap<com.sun.tools.javac.tree.JCTree.JCCompilationUnit, java.lang.Void>();\r\n    for (javax.lang.model.element.Element element : roundEnv.getRootElements()) {\r\n        units.put(this.toUnit(element), null);\r\n    }\r\n    java.util.List<lombok.javac.JavacAST> asts = new java.util.ArrayList<lombok.javac.JavacAST>();\r\n    for (com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit : units.keySet()) {\r\n        asts.add(new lombok.javac.JavacAST(this.trees, this.processingEnv, unit));\r\n    }\r\n    this.handlers.skipPrintAST();\r\n    for (lombok.javac.JavacAST ast : asts) {\r\n        ast.traverse(new lombok.javac.apt.Processor.AnnotationVisitor());\r\n        this.handlers.callASTVisitors(ast);\r\n    }\r\n    this.handlers.skipAllButPrintAST();\r\n    for (lombok.javac.JavacAST ast : asts) {\r\n        ast.traverse(new lombok.javac.apt.Processor.AnnotationVisitor());\r\n    }\r\n    return false;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "nodes", "qualifiedName": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString.includeFieldNames()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "includeFieldNames()", "qualifiedName": "lombok.ToString.includeFieldNames()", "kind": "method", "sourceText": "/**\r\n * Include the name of each field when printing it.\r\n * <strong>default: false</strong>\r\n */\r\nboolean includeFieldNames() default false;", "docComment": "Include the name of each field when printing it.\r\n<strong>default: false</strong>\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    this.forcePrint(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public boolean handle(lombok.core.AnnotationValues<lombok.ToString> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    lombok.ToString ann = annotation.getInstance();\r\n    java.util.List<java.lang.String> excludes = java.util.Arrays.asList(ann.exclude());\r\n    lombok.eclipse.EclipseAST.Node typeNode = annotationNode.up();\r\n    this.checkForBogusExcludes(typeNode, annotation);\r\n    return this.generateToString(typeNode, annotationNode, excludes, ann.includeFieldNames(), ann.callSuper(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "kind": "method", "sourceText": "public void endVisitLocal(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local) {\r\n    this.indent--;\r\n    this.print(\"</LOCAL %s %s>\", this.str(local.type), this.str(local.name));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "qualifiedName": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\nprotected lombok.eclipse.EclipseAST.Node buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode node, lombok.core.AST.Kind kind) {\r\n    switch (kind) {\r\n        case COMPILATION_UNIT :\r\n            return this.buildCompilationUnit(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (node)));\r\n        case TYPE :\r\n            return this.buildType(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node)));\r\n        case FIELD :\r\n            return this.buildField(((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (node)));\r\n        case INITIALIZER :\r\n            return this.buildInitializer(((org.eclipse.jdt.internal.compiler.ast.Initializer) (node)));\r\n        case METHOD :\r\n            return this.buildMethod(((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (node)));\r\n        case ARGUMENT :\r\n            return this.buildLocal(((org.eclipse.jdt.internal.compiler.ast.Argument) (node)), kind);\r\n        case LOCAL :\r\n            return this.buildLocal(((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (node)), kind);\r\n        case STATEMENT :\r\n            return this.buildStatement(((org.eclipse.jdt.internal.compiler.ast.Statement) (node)));\r\n        case ANNOTATION :\r\n            return this.buildAnnotation(((org.eclipse.jdt.internal.compiler.ast.Annotation) (node)));\r\n        default :\r\n            throw new java.lang.AssertionError(\"Did not expect to arrive here: \" + kind);\r\n    }\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "oldN", "qualifiedName": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement).0", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager).0", "labels": ["Variable"], "properties": {"simpleName": "messager", "qualifiedName": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getLogicalDrives()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getLogicalDrives()", "qualifiedName": "lombok.installer.WindowsDriveInfo.getLogicalDrives()", "kind": "method", "sourceText": "/**\r\n * Return a list of all available drive letters, such as [\"A\", \"C\", \"D\"].\r\n */\r\npublic java.util.List<java.lang.String> getLogicalDrives() {\r\n    int flags = this.getLogicalDrives0();\r\n    java.util.List<java.lang.String> letters = new java.util.ArrayList<java.lang.String>();\r\n    for (int i = 0; i < 26; i++) {\r\n        if ((flags & (1 << i)) != 0) {\r\n            letters.add(java.lang.Character.toString(((char) ('A' + i))));\r\n        }\r\n    }\r\n    return letters;\r\n}", "docComment": "Return a list of all available drive letters, such as [\"A\", \"C\", \"D\"].\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "maker", "qualifiedName": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.JAVAC_EXPLANATION", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String JAVAC_EXPLANATION = \"<html>Lombok works 'out of the box' with javac.<br>Just make sure the lombok.jar is in your classpath when you compile.\";", "visibility": "private", "simpleName": "JAVAC_EXPLANATION", "qualifiedName": "lombok.installer.Installer.JAVAC_EXPLANATION", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.FIELD", "labels": ["Variable"], "properties": {"sourceText": "FIELD()", "visibility": "public", "simpleName": "FIELD", "qualifiedName": "lombok.core.AST$Kind.FIELD", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "kind": "method", "sourceText": "void endVisitType(lombok.eclipse.EclipseAST.Node typeNode, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "callASTVisitors(lombok.eclipse.EclipseAST)", "qualifiedName": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "kind": "method", "sourceText": "/**\r\n * Will call all registered {@link EclipseASTVisitor} instances.\r\n */\r\npublic void callASTVisitors(lombok.eclipse.EclipseAST ast) {\r\n    for (lombok.eclipse.EclipseASTVisitor visitor : this.visitorHandlers) {\r\n        try {\r\n            ast.traverse(visitor);\r\n        } catch (java.lang.Throwable t) {\r\n            lombok.eclipse.Eclipse.error(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (ast.top().get())), java.lang.String.format(\"Lombok visitor handler %s failed\", visitor.getClass()), t);\r\n        }\r\n    }\r\n}", "docComment": "Will call all registered {@link EclipseASTVisitor} instances.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getComponentType(java.lang.reflect.Type).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.core.AST.getComponentType(java.lang.reflect.Type).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "makeImportList(java.lang.String,java.util.Collection)", "qualifiedName": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "kind": "static method", "sourceText": "private static java.util.Collection<java.lang.String> makeImportList(java.lang.String packageString, java.util.Collection<java.lang.String> importStrings) {\r\n    java.util.Set<java.lang.String> imports = new java.util.HashSet<java.lang.String>();\r\n    if (packageString != null) {\r\n        imports.add(packageString + \".*\");\r\n    }\r\n    imports.addAll(importStrings == null ? java.util.Collections.<java.lang.String>emptySet() : importStrings);\r\n    return imports;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.top()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "top()", "qualifiedName": "lombok.core.AST$Node.top()", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's top method.\r\n *\r\n * @see AST#top()\r\n */\r\npublic lombok.core.AST<N>.Node top() {\r\n    return this.top;\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's top method.\r\n\r\n@see AST#top()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "void endVisitMethodArgument(lombok.eclipse.EclipseAST.Node argNode, org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl argument, com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getRawExpressions(java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Returns the raw expressions used for the provided annotationMethodName.\r\n *\r\n * You should use this method for annotation methods that return Class objects. Remember that\r\n * class literals end in \".class\" which you probably want to strip off.\r\n */\r\npublic java.util.List<java.lang.String> getRawExpressions(java.lang.String annotationMethodName) {\r\n    lombok.core.AnnotationValues.AnnotationValue v = this.values.get(annotationMethodName);\r\n    return v == null ? java.util.Collections.<java.lang.String>emptyList() : v.raws;\r\n}", "docComment": "Returns the raw expressions used for the provided annotationMethodName.\r\n\r\nYou should use this method for annotation methods that return Class objects. Remember that\r\nclass literals end in \".class\" which you probably want to strip off.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "labels": ["Variable"], "properties": {"sourceText": "private int disablePrinting = 0;", "visibility": "private", "simpleName": "disablePrinting", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.queuedProblems", "labels": ["Variable"], "properties": {"sourceText": "private final java.util.List<lombok.eclipse.EclipseAST.ParseProblem> queuedProblems = new java.util.ArrayList<lombok.eclipse.EclipseAST.ParseProblem>();", "visibility": "private", "simpleName": "queuedProblems", "qualifiedName": "lombok.eclipse.EclipseAST.queuedProblems", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "public void generateToStringForType(lombok.javac.JavacAST.Node typeNode, lombok.javac.JavacAST.Node errorNode) {\r\n    for (lombok.javac.JavacAST.Node child : typeNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.javac.Javac.annotationTypeMatches(lombok.ToString.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    boolean includeFieldNames = false;\r\n    boolean callSuper = false;\r\n    try {\r\n        includeFieldNames = ((java.lang.Boolean) (lombok.ToString.class.getMethod(\"includeFieldNames\").getDefaultValue())).booleanValue();\r\n    } catch (java.lang.Exception ignore) {\r\n    }\r\n    try {\r\n        callSuper = ((java.lang.Boolean) (lombok.ToString.class.getMethod(\"callSuper\").getDefaultValue())).booleanValue();\r\n    } catch (java.lang.Exception ignore) {\r\n    }\r\n    this.generateToString(typeNode, errorNode, com.sun.tools.javac.util.List.<java.lang.String>nil(), includeFieldNames, callSuper, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers", "labels": ["Container"], "properties": {"simpleName": "handlers", "qualifiedName": "lombok.eclipse.handlers", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.fileName", "labels": ["Variable"], "properties": {"sourceText": "private final java.lang.String fileName;", "visibility": "private", "simpleName": "fileName", "qualifiedName": "lombok.core.AST.fileName", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.skipPrintAST", "labels": ["Variable"], "properties": {"sourceText": "private boolean skipPrintAST = true;", "visibility": "private", "simpleName": "skipPrintAST", "qualifiedName": "lombok.javac.HandlerLibrary.skipPrintAST", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.Lombok()", "kind": "constructor", "sourceText": "Lombok() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.isCompleteParse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isCompleteParse()", "qualifiedName": "lombok.eclipse.EclipseAST.isCompleteParse()", "kind": "method", "sourceText": "/**\r\n * Eclipse starts off with a 'diet' parse which leaves method bodies blank, amongst other shortcuts.\r\n *\r\n * For such diet parses, this method returns false, otherwise it returns true. Any lombok processor\r\n * that needs the contents of methods should just do nothing (and return false so it gets another shot later!)\r\n * when this is false.\r\n */\r\npublic boolean isCompleteParse() {\r\n    return this.completeParse;\r\n}", "docComment": "Eclipse starts off with a 'diet' parse which leaves method bodies blank, amongst other shortcuts.\r\n\r\nFor such diet parses, this method returns false, otherwise it returns true. Any lombok processor\r\nthat needs the contents of methods should just do nothing (and return false so it gets another shot later!)\r\nwhen this is false.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getNodeMap()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getNodeMap()", "qualifiedName": "lombok.core.AST.getNodeMap()", "kind": "method", "sourceText": "/**\r\n * Returns the node map, that can map javac/Eclipse internal AST objects to AST.Node objects.\r\n */\r\nprotected java.util.Map<N, lombok.core.AST<N>.Node> getNodeMap() {\r\n    return this.nodeMap;\r\n}", "docComment": "Returns the node map, that can map javac/Eclipse internal AST objects to AST.Node objects.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "method", "sourceText": "public void visitCompilationUnit(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit) {\r\n    this.out.println(\"---------------------------------------------------------\");\r\n    this.out.println(node.isCompleteParse() ? \"COMPLETE\" : \"incomplete\");\r\n    this.print(\"<CUD %s>\", node.getFileName());\r\n    this.indent++;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.showWhatIDo()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "showWhatIDo()", "qualifiedName": "lombok.installer.Installer.showWhatIDo()", "kind": "method", "sourceText": "private void showWhatIDo() {\r\n    this.javacArea.setVisible(false);\r\n    this.eclipseArea.setVisible(false);\r\n    this.howIWorkArea.setVisible(true);\r\n    this.appWindow.pack();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation.<clinit>()", "labels": ["Script"], "properties": {"visibility": "default", "simpleName": "<clinit>()", "qualifiedName": "lombok.installer.EclipseLocation.<clinit>()", "kind": "class initializer", "sourceText": "static {\r\n    java.lang.String os = java.lang.System.getProperty(\"os.name\", \"\");\r\n    if (\"Mac OS\".equals(os)) {\r\n        lombok.installer.EclipseLocation.OS_NEWLINE = \"\\r\";\r\n    } else if (os.toLowerCase().contains(\"windows\")) {\r\n        lombok.installer.EclipseLocation.OS_NEWLINE = \"\\r\\n\";\r\n    } else {\r\n        lombok.installer.EclipseLocation.OS_NEWLINE = \"\\n\";\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.AccessLevel()", "kind": "constructor", "sourceText": "AccessLevel() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit top) {\r\n    java.util.List<lombok.javac.JavacAST.Node> childNodes = new java.util.ArrayList<lombok.javac.JavacAST.Node>();\r\n    for (com.sun.tools.javac.tree.JCTree s : top.defs) {\r\n        if (s instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n            lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildType(((com.sun.tools.javac.tree.JCTree.JCClassDecl) (s))));\r\n        }// else they are import statements, which we don't care about. Or Skip objects, whatever those are.\r\n\r\n    }\r\n    return new lombok.javac.JavacAST.Node(top, childNodes, lombok.core.AST.Kind.COMPILATION_UNIT);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment).0", "labels": ["Variable"], "properties": {"simpleName": "processingEnv", "qualifiedName": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "trees", "qualifiedName": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "void endVisitField(lombok.javac.JavacAST.Node fieldNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl field);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitField(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    this.indent--;\r\n    this.print(\"</FIELD %s %s>\", field.vartype, field.name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).2", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "void visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>ToString</code> annotation for javac.\r\n", "simpleName": "HandleToString", "qualifiedName": "lombok.javac.handlers.HandleToString", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Kind.ARGUMENT", "labels": ["Variable"], "properties": {"sourceText": "ARGUMENT()", "visibility": "public", "simpleName": "ARGUMENT", "qualifiedName": "lombok.core.AST$Kind.ARGUMENT", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "replaceChildNode(java.lang.Object,java.lang.Object)", "qualifiedName": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "kind": "method", "sourceText": "/**\r\n * Replaces the stated node with a new one. The old node must be a direct child of this node.\r\n *\r\n * Also affects the underlying (Eclipse/javac) AST.\r\n */\r\npublic void replaceChildNode(N oldN, N newN) {\r\n    this.replaceStatementInNode(this.get(), oldN, newN);\r\n}", "docComment": "Replaces the stated node with a new one. The old node must be a direct child of this node.\r\n\r\nAlso affects the underlying (Eclipse/javac) AST.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleCleanup()", "kind": "constructor", "sourceText": "HandleCleanup() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>EqualsAndHashCode</code> annotation for eclipse.\r\n", "simpleName": "HandleEqualsAndHashCode", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "thisDotField", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).1", "labels": ["Variable"], "properties": {"simpleName": "valueIdx", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "chain", "qualifiedName": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).3", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "fieldRef", "qualifiedName": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.visitorHandlers", "labels": ["Variable"], "properties": {"sourceText": "private final java.util.Collection<lombok.javac.JavacASTVisitor> visitorHandlers = new java.util.ArrayList<lombok.javac.JavacASTVisitor>();", "visibility": "private", "simpleName": "visitorHandlers", "qualifiedName": "lombok.javac.HandlerLibrary.visitorHandlers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "qualifiedName": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "kind": "method", "sourceText": "@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate <T extends lombok.core.AST<N>.Node> void buildWithCollection(java.lang.Class<T> nodeType, java.lang.Object collection, java.util.Collection<T> list, int dim) {\r\n    if (dim == 1) {\r\n        for (java.lang.Object v : ((java.util.Collection<? extends java.lang.Object>) (collection))) {\r\n            if (v == null) {\r\n                continue;\r\n            }\r\n            lombok.core.AST<N>.Node node = this.buildTree(((N) (v)), lombok.core.AST.Kind.STATEMENT);\r\n            if (node != null) {\r\n                list.add(nodeType.cast(node));\r\n            }\r\n        }\r\n    } else {\r\n        for (java.lang.Object v : ((java.util.Collection<? extends java.lang.Object>) (collection))) {\r\n            this.buildWithCollection(nodeType, v, list, dim - 1);\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setError(java.lang.String,int)", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "kind": "method", "sourceText": "/**\r\n * Override this if you want more specific behaviour (to get the source position just right).\r\n *\r\n * @param message\r\n * \t\tEnglish message with the problem.\r\n * @param valueIdx\r\n * \t\tThe index into the values for this annotation key that caused the problem.\r\n * \t\t-1 for a problem that applies to all values, otherwise the 0-based index into an array of values.\r\n * \t\tIf there is no array for this value (e.g. value=1 instead of value={1,2}), then always -1 or 0.\r\n */\r\npublic void setError(java.lang.String message, int valueIdx) {\r\n    this.node.addError(message);\r\n}", "docComment": "Override this if you want more specific behaviour (to get the source position just right).\r\n\r\n@param message\r\n\t\tEnglish message with the problem.\r\n@param valueIdx\r\n\t\tThe index into the values for this annotation key that caused the problem.\r\n\t\t-1 for a problem that applies to all values, otherwise the 0-based index into an array of values.\r\n\t\tIf there is no array for this value (e.g. value=1 instead of value={1,2}), then always -1 or 0.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addError(java.lang.String,int,int)", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "kind": "method", "sourceText": "/**\r\n * Generate a compiler error that shows the wavy underline from-to the stated character positions.\r\n */\r\npublic void addError(java.lang.String message, int sourceStart, int sourceEnd) {\r\n    this.addProblem(new lombok.eclipse.EclipseAST.ParseProblem(false, message, sourceStart, sourceEnd));\r\n}", "docComment": "Generate a compiler error that shows the wavy underline from-to the stated character positions.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPos()", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "kind": "method", "sourceText": "public long getPos() {\r\n    return (((long) (this.node.sourceStart)) << 32) | this.node.sourceEnd;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitInitializer(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCBlock initializer) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    this.indent--;\r\n    this.print(\"</%s INITIALIZER>\", initializer.isStatic() ? \"static\" : \"instance\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).0", "labels": ["Variable"], "properties": {"simpleName": "nodeType", "qualifiedName": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl field, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.install(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "toInstall", "qualifiedName": "lombok.installer.Installer.install(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "kind": "static method", "sourceText": "static lombok.eclipse.handlers.PKG.MemberExistsResult methodExists(java.lang.String methodName, lombok.eclipse.EclipseAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration))) {\r\n        node = node.up();\r\n    } \r\n    if ((node != null) && (node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)) {\r\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node.get()));\r\n        if (typeDecl.methods != null) {\r\n            for (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration def : typeDecl.methods) {\r\n                char[] mName = def.selector;\r\n                if (mName == null) {\r\n                    continue;\r\n                }\r\n                if (methodName.equals(new java.lang.String(mName))) {\r\n                    lombok.eclipse.EclipseAST.Node existing = node.getNodeFor(def);\r\n                    if ((existing == null) || (!existing.isHandled())) {\r\n                        return lombok.eclipse.handlers.PKG.MemberExistsResult.EXISTS_BY_USER;\r\n                    }\r\n                    return lombok.eclipse.handlers.PKG.MemberExistsResult.EXISTS_BY_LOMBOK;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return lombok.eclipse.handlers.PKG.MemberExistsResult.NOT_EXISTS;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeLibrary()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.core.TypeLibrary()", "kind": "constructor", "sourceText": "TypeLibrary() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.up()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "up()", "qualifiedName": "lombok.eclipse.EclipseAST$Node.up()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.eclipse.EclipseAST.Node up() {\r\n    return ((lombok.eclipse.EclipseAST.Node) (super.up()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.installButton", "labels": ["Variable"], "properties": {"sourceText": "private javax.swing.JButton installButton;", "visibility": "private", "simpleName": "installButton", "qualifiedName": "lombok.installer.Installer.installButton", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).1", "labels": ["Variable"], "properties": {"simpleName": "statements", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "findCompatible(java.lang.String)", "qualifiedName": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Returns all items in the type library that may be a match to the provided type.\r\n *\r\n * @param typeReference\r\n * \t\tsomething like 'String' or even 'java.lang.String'.\r\n */\r\npublic java.util.Collection<java.lang.String> findCompatible(java.lang.String typeReference) {\r\n    java.util.Set<java.lang.String> result = this.simpleToQualifiedMap.get(typeReference);\r\n    return result == null ? java.util.Collections.<java.lang.String>emptySet() : result;\r\n}", "docComment": "Returns all items in the type library that may be a match to the provided type.\r\n\r\n@param typeReference\r\n\t\tsomething like 'String' or even 'java.lang.String'.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).3", "labels": ["Variable"], "properties": {"simpleName": "collection", "qualifiedName": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildChrome(java.awt.Container)", "qualifiedName": "lombok.installer.Installer.buildChrome(java.awt.Container)", "kind": "method", "sourceText": "private void buildChrome(java.awt.Container appWindowContainer) {\r\n    javax.swing.JLabel leftGraphic = new javax.swing.JLabel(new javax.swing.ImageIcon(lombok.installer.Installer.class.getResource(\"/lombok/installer/lombok.png\")));\r\n    java.awt.GridBagConstraints constraints = new java.awt.GridBagConstraints();\r\n    appWindowContainer.setLayout(new java.awt.GridBagLayout());\r\n    constraints.gridheight = 3;\r\n    constraints.gridwidth = 1;\r\n    constraints.gridx = 0;\r\n    constraints.gridy = 0;\r\n    constraints.insets = new java.awt.Insets(8, 8, 8, 8);\r\n    appWindowContainer.add(leftGraphic, constraints);\r\n    constraints.insets = new java.awt.Insets(0, 0, 0, 0);\r\n    constraints.gridx++;\r\n    constraints.gridy++;\r\n    constraints.gridheight = 1;\r\n    constraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\r\n    constraints.ipadx = 16;\r\n    constraints.ipady = 14;\r\n    appWindowContainer.add(this.javacArea, constraints);\r\n    constraints.gridy++;\r\n    appWindowContainer.add(this.eclipseArea, constraints);\r\n    appWindowContainer.add(this.uninstallArea, constraints);\r\n    appWindowContainer.add(this.howIWorkArea, constraints);\r\n    constraints.gridy++;\r\n    constraints.gridwidth = 2;\r\n    constraints.gridx = 0;\r\n    constraints.weightx = 0;\r\n    constraints.weighty = 0;\r\n    constraints.ipadx = 0;\r\n    constraints.ipady = 0;\r\n    constraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\r\n    constraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;\r\n    constraints.insets = new java.awt.Insets(0, 16, 8, 8);\r\n    javax.swing.Box buttonBar = javax.swing.Box.createHorizontalBox();\r\n    javax.swing.JButton quitButton = new javax.swing.JButton(\"Quit Installer\");\r\n    quitButton.addActionListener(new java.awt.event.ActionListener() {\r\n        13() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            lombok.installer.Installer.this.appWindow.setVisible(false);\r\n            java.lang.System.exit(0);\r\n        }\r\n    });\r\n    final lombok.installer.Installer.JHyperLink hyperlink = new lombok.installer.Installer.JHyperLink(lombok.installer.Installer.ABOUT_LOMBOK_URL.toString());\r\n    hyperlink.addActionListener(new java.awt.event.ActionListener() {\r\n        14() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent event) {\r\n            hyperlink.setForeground(new java.awt.Color(85, 145, 90));\r\n            try {\r\n                // java.awt.Desktop doesn't exist in 1.5.\r\n                java.lang.Object desktop = java.lang.Class.forName(\"java.awt.Desktop\").getMethod(\"getDesktop\").invoke(null);\r\n                java.lang.Class.forName(\"java.awt.Desktop\").getMethod(\"browse\", java.net.URI.class).invoke(desktop, lombok.installer.Installer.ABOUT_LOMBOK_URL);\r\n            } catch (java.lang.Exception e) {\r\n                java.lang.Runtime rt = java.lang.Runtime.getRuntime();\r\n                try {\r\n                    switch (lombok.installer.EclipseFinder.getOS()) {\r\n                        case WINDOWS :\r\n                            java.lang.String[] cmd = new java.lang.String[4];\r\n                            cmd[0] = \"cmd.exe\";\r\n                            cmd[1] = \"/C\";\r\n                            cmd[2] = \"start\";\r\n                            cmd[3] = lombok.installer.Installer.ABOUT_LOMBOK_URL.toString();\r\n                            rt.exec(cmd);\r\n                            break;\r\n                        case MAC_OS_X :\r\n                            rt.exec(\"open \" + lombok.installer.Installer.ABOUT_LOMBOK_URL.toString());\r\n                            break;\r\n                        default :\r\n                        case UNIX :\r\n                            rt.exec(\"firefox \" + lombok.installer.Installer.ABOUT_LOMBOK_URL.toString());\r\n                            break;\r\n                    }\r\n                } catch (java.lang.Exception e2) {\r\n                    javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, \"Well, this is embarrassing. I don\\'t know how to open a webbrowser.\\n\" + (\"I guess you\\'ll have to open it. Browse to:\\n\" + \"http://projectlombok.org for more information about Lombok.\"), \"I'm embarrassed\", javax.swing.JOptionPane.INFORMATION_MESSAGE);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    buttonBar.add(hyperlink);\r\n    buttonBar.add(javax.swing.Box.createRigidArea(new java.awt.Dimension(16, 1)));\r\n    buttonBar.add(new javax.swing.JLabel((\"<html><font size=\\\"-1\\\">v\" + lombok.core.Version.getVersion()) + \"</font></html>\"));\r\n    buttonBar.add(javax.swing.Box.createHorizontalGlue());\r\n    buttonBar.add(quitButton);\r\n    this.appWindow.add(buttonBar, constraints);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "qualifiedName": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCMethodDecl createConstructor(boolean isPublic, lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> fields) {\r\n    com.sun.tools.javac.tree.TreeMaker maker = typeNode.getTreeMaker();\r\n    com.sun.tools.javac.tree.JCTree.JCClassDecl type = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get()));\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> assigns = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCVariableDecl> params = com.sun.tools.javac.util.List.nil();\r\n    for (lombok.javac.JavacAST.Node fieldNode : fields) {\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl field = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fieldNode.get()));\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl param = maker.VarDef(maker.Modifiers(0), field.name, field.vartype, null);\r\n        params = params.append(param);\r\n        com.sun.tools.javac.tree.JCTree.JCFieldAccess thisX = maker.Select(maker.Ident(fieldNode.toName(\"this\")), field.name);\r\n        com.sun.tools.javac.tree.JCTree.JCAssign assign = maker.Assign(thisX, maker.Ident(field.name));\r\n        assigns = assigns.append(maker.Exec(assign));\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCModifiers mods = maker.Modifiers(isPublic ? java.lang.reflect.Modifier.PUBLIC : java.lang.reflect.Modifier.PRIVATE);\r\n    return maker.MethodDef(mods, typeNode.toName(\"<init>\"), null, type.typarams, params, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), maker.Block(0L, assigns), null);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).1", "labels": ["Variable"], "properties": {"simpleName": "annotationClass", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "showDialog(javax.swing.JFrame)", "qualifiedName": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)", "kind": "method", "sourceText": "/**\r\n * Renders a message dialog with information about what went wrong.\r\n */\r\nvoid showDialog(javax.swing.JFrame appWindow) {\r\n    javax.swing.JOptionPane.showMessageDialog(appWindow, this.getMessage(), \"Cannot configure Eclipse installation\", javax.swing.JOptionPane.WARNING_MESSAGE);\r\n}", "docComment": "Renders a message dialog with information about what went wrong.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).2", "labels": ["Variable"], "properties": {"simpleName": "fa", "qualifiedName": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String,java.lang.Throwable)", "qualifiedName": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)", "kind": "constructor", "sourceText": "public InstallException(java.lang.String message, java.lang.Throwable cause) {\r\n    super(message, cause);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "labels": ["Variable"], "properties": {"simpleName": "access", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitLocal(lombok.eclipse.EclipseAST.Node localNode, org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers", "labels": ["Container"], "properties": {"simpleName": "handlers", "qualifiedName": "lombok.javac.handlers", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "labels": ["Variable"], "properties": {"simpleName": "nodeType", "qualifiedName": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.Data> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    lombok.javac.JavacAST.Node typeNode = annotationNode.up();\r\n    com.sun.tools.javac.tree.JCTree.JCClassDecl typeDecl = null;\r\n    if (typeNode.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n        typeDecl = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get()));\r\n    }\r\n    long flags = (typeDecl == null) ? 0 : typeDecl.mods.flags;\r\n    boolean notAClass = (flags & ((com.sun.tools.javac.code.Flags.INTERFACE | com.sun.tools.javac.code.Flags.ENUM) | com.sun.tools.javac.code.Flags.ANNOTATION)) != 0;\r\n    if ((typeDecl == null) || notAClass) {\r\n        annotationNode.addError(\"@Data is only supported on a class.\");\r\n        return false;\r\n    }\r\n    com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> nodesForEquality = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> nodesForConstructor = com.sun.tools.javac.util.List.nil();\r\n    for (lombok.javac.JavacAST.Node child : typeNode.down()) {\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldDecl = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (child.get()));\r\n        long fieldFlags = fieldDecl.mods.flags;\r\n        // Skip static fields.\r\n        if ((fieldFlags & com.sun.tools.javac.code.Flags.STATIC) != 0) {\r\n            continue;\r\n        }\r\n        if ((fieldFlags & com.sun.tools.javac.code.Flags.TRANSIENT) == 0) {\r\n            nodesForEquality = nodesForEquality.append(child);\r\n        }\r\n        boolean isFinal = (fieldFlags & com.sun.tools.javac.code.Flags.FINAL) != 0;\r\n        if (isFinal && (fieldDecl.init == null)) {\r\n            nodesForConstructor = nodesForConstructor.append(child);\r\n        }\r\n        new lombok.javac.handlers.HandleGetter().generateGetterForField(child, annotationNode.get());\r\n        if (!isFinal) {\r\n            new lombok.javac.handlers.HandleSetter().generateSetterForField(child, annotationNode.get());\r\n        }\r\n    }\r\n    new lombok.javac.handlers.HandleToString().generateToStringForType(typeNode, annotationNode);\r\n    new lombok.javac.handlers.HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode, annotationNode);\r\n    java.lang.String staticConstructorName = annotation.getInstance().staticConstructor();\r\n    if (lombok.javac.handlers.PKG.constructorExists(typeNode) == lombok.javac.handlers.PKG.MemberExistsResult.NOT_EXISTS) {\r\n        com.sun.tools.javac.tree.JCTree.JCMethodDecl constructor = this.createConstructor(staticConstructorName.equals(\"\"), typeNode, nodesForConstructor);\r\n        lombok.javac.handlers.PKG.injectMethod(typeNode, constructor);\r\n    }\r\n    if ((!staticConstructorName.isEmpty()) && (lombok.javac.handlers.PKG.methodExists(\"of\", typeNode) == lombok.javac.handlers.PKG.MemberExistsResult.NOT_EXISTS)) {\r\n        com.sun.tools.javac.tree.JCTree.JCMethodDecl staticConstructor = this.createStaticConstructor(staticConstructorName, typeNode, nodesForConstructor);\r\n        lombok.javac.handlers.PKG.injectMethod(typeNode, staticConstructor);\r\n    }\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitInitializer(lombok.javac.JavacAST.Node initializerNode, com.sun.tools.javac.tree.JCTree.JCBlock initializer) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.children", "labels": ["Variable"], "properties": {"sourceText": "protected final java.util.List<? extends lombok.core.AST<N>.Node> children;", "visibility": "protected", "simpleName": "children", "qualifiedName": "lombok.core.AST$Node.children", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getStatementTypes()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getStatementTypes()", "qualifiedName": "lombok.eclipse.EclipseAST.getStatementTypes()", "kind": "method", "sourceText": "/**\r\n * For Eclipse, only Statement counts, as Expression is a subclass of it, eventhough this isn't\r\n * entirely correct according to the JLS spec (only some expressions can be used as statements, not all of them).\r\n */\r\n@java.lang.Override\r\nprotected java.util.Collection<java.lang.Class<? extends org.eclipse.jdt.internal.compiler.ast.ASTNode>> getStatementTypes() {\r\n    return java.util.Collections.<java.lang.Class<? extends org.eclipse.jdt.internal.compiler.ast.ASTNode>>singleton(org.eclipse.jdt.internal.compiler.ast.Statement.class);\r\n}", "docComment": "For Eclipse, only Statement counts, as Expression is a subclass of it, eventhough this isn't\r\nentirely correct according to the JLS spec (only some expressions can be used as statements, not all of them).\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.core.Version()", "kind": "constructor", "sourceText": "private Version() {\r\n    super();\r\n    // Prevent instantiation\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "method", "sourceText": "/**\r\n * Called at the very beginning and end.\r\n */\r\nvoid visitCompilationUnit(lombok.eclipse.EclipseAST.Node top, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit);", "docComment": "Called at the very beginning and end.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "kind": "method", "sourceText": "/**\r\n * Called when visiting a type (a class, interface, annotation, enum, etcetera).\r\n */\r\nvoid visitType(lombok.eclipse.EclipseAST.Node typeNode, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type);", "docComment": "Called when visiting a type (a class, interface, annotation, enum, etcetera).\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "isBoolean", "qualifiedName": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "kind": "method", "sourceText": "void endVisitInitializer(lombok.javac.JavacAST.Node initializerNode, com.sun.tools.javac.tree.JCTree.JCBlock initializer);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "/**\r\n * Handles the provided annotation node by first finding a qualifying instance of\r\n * {@link EclipseAnnotationHandler} and if one exists, calling it with a freshly cooked up\r\n * instance of {@link AnnotationValues}.\r\n *\r\n * Note that depending on the printASTOnly flag, the {@link lombok.core.PrintAST} annotation\r\n * will either be silently skipped, or everything that isn't <code>PrintAST</code> will be skipped.\r\n *\r\n * The HandlerLibrary will attempt to guess if the given annotation node represents a lombok annotation.\r\n * For example, if <code>lombok.*</code> is in the import list, then this method will guess that\r\n * <code>Getter</code> refers to <code>lombok.Getter</code>, presuming that {@link lombok.eclipse.handlers.HandleGetter}\r\n * has been loaded.\r\n *\r\n * @param ast\r\n * \t\tThe Compilation Unit that contains the Annotation AST Node.\r\n * @param annotationNode\r\n * \t\tThe Lombok AST Node representing the Annotation AST Node.\r\n * @param annotation\r\n * \t\t'node.get()' - convenience parameter.\r\n */\r\npublic boolean handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration ast, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    java.lang.String pkgName = annotationNode.getPackageDeclaration();\r\n    java.util.Collection<java.lang.String> imports = annotationNode.getImportStatements();\r\n    lombok.core.TypeResolver resolver = new lombok.core.TypeResolver(this.typeLibrary, pkgName, imports);\r\n    org.eclipse.jdt.internal.compiler.ast.TypeReference rawType = annotation.type;\r\n    if (rawType == null) {\r\n        return false;\r\n    }\r\n    boolean handled = false;\r\n    for (java.lang.String fqn : resolver.findTypeMatches(annotationNode, lombok.eclipse.Eclipse.toQualifiedName(annotation.type.getTypeName()))) {\r\n        boolean isPrintAST = fqn.equals(lombok.core.PrintAST.class.getName());\r\n        if (isPrintAST == this.skipPrintAST) {\r\n            continue;\r\n        }\r\n        lombok.eclipse.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object> container = this.annotationHandlers.get(fqn);\r\n        if (container == null) {\r\n            continue;\r\n        }\r\n        try {\r\n            handled |= container.handle(annotation, annotationNode);\r\n        } catch (lombok.core.AnnotationValues.AnnotationValueDecodeFail fail) {\r\n            fail.owner.setError(fail.getMessage(), fail.idx);\r\n        } catch (java.lang.Throwable t) {\r\n            lombok.eclipse.Eclipse.error(ast, java.lang.String.format(\"Lombok annotation handler %s failed\", container.handler.getClass()), t);\r\n        }\r\n    }\r\n    return handled;\r\n}", "docComment": "Handles the provided annotation node by first finding a qualifying instance of\r\n{@link EclipseAnnotationHandler} and if one exists, calling it with a freshly cooked up\r\ninstance of {@link AnnotationValues}.\r\n\r\nNote that depending on the printASTOnly flag, the {@link lombok.core.PrintAST} annotation\r\nwill either be silently skipped, or everything that isn't <code>PrintAST</code> will be skipped.\r\n\r\nThe HandlerLibrary will attempt to guess if the given annotation node represents a lombok annotation.\r\nFor example, if <code>lombok.*</code> is in the import list, then this method will guess that\r\n<code>Getter</code> refers to <code>lombok.Getter</code>, presuming that {@link lombok.eclipse.handlers.HandleGetter}\r\nhas been loaded.\r\n\r\n@param ast\r\n\t\tThe Compilation Unit that contains the Annotation AST Node.\r\n@param annotationNode\r\n\t\tThe Lombok AST Node representing the Annotation AST Node.\r\n@param annotation\r\n\t\t'node.get()' - convenience parameter.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitMethodArgument(lombok.eclipse.EclipseAST.Node argNode, org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public boolean handle(lombok.core.AnnotationValues<lombok.Cleanup> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    java.lang.String cleanupName = annotation.getInstance().value();\r\n    if (cleanupName.length() == 0) {\r\n        annotationNode.addError(\"cleanupName cannot be the empty string.\");\r\n        return true;\r\n    }\r\n    if (annotationNode.up().getKind() != lombok.core.AST.Kind.LOCAL) {\r\n        annotationNode.addError(\"@Cleanup is legal only on local variable declarations.\");\r\n        return true;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.LocalDeclaration decl = ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (annotationNode.up().get()));\r\n    if (decl.initialization == null) {\r\n        annotationNode.addError(\"@Cleanup variable declarations need to be initialized.\");\r\n        return true;\r\n    }\r\n    lombok.eclipse.EclipseAST.Node ancestor = annotationNode.up().directUp();\r\n    org.eclipse.jdt.internal.compiler.ast.ASTNode blockNode = ancestor.get();\r\n    final boolean isSwitch;\r\n    final org.eclipse.jdt.internal.compiler.ast.Statement[] statements;\r\n    if (blockNode instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\r\n        isSwitch = false;\r\n        statements = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (blockNode)).statements;\r\n    } else if (blockNode instanceof org.eclipse.jdt.internal.compiler.ast.Block) {\r\n        isSwitch = false;\r\n        statements = ((org.eclipse.jdt.internal.compiler.ast.Block) (blockNode)).statements;\r\n    } else if (blockNode instanceof org.eclipse.jdt.internal.compiler.ast.SwitchStatement) {\r\n        isSwitch = true;\r\n        statements = ((org.eclipse.jdt.internal.compiler.ast.SwitchStatement) (blockNode)).statements;\r\n    } else {\r\n        annotationNode.addError(\"@Cleanup is legal only on a local variable declaration inside a block.\");\r\n        return true;\r\n    }\r\n    if (statements == null) {\r\n        annotationNode.addError(\"LOMBOK BUG: Parent block does not contain any statements.\");\r\n        return true;\r\n    }\r\n    int start = 0;\r\n    for (; start < statements.length; start++) {\r\n        if (statements[start] == decl) {\r\n            break;\r\n        }\r\n    }\r\n    if (start == statements.length) {\r\n        annotationNode.addError(\"LOMBOK BUG: Can't find this local variable declaration inside its parent.\");\r\n        return true;\r\n    }\r\n    start++;// We start with try{} *AFTER* the var declaration.\r\n\r\n    int end;\r\n    if (isSwitch) {\r\n        end = start + 1;\r\n        for (; end < statements.length; end++) {\r\n            if (statements[end] instanceof org.eclipse.jdt.internal.compiler.ast.CaseStatement) {\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        end = statements.length;\r\n    }\r\n    // At this point:\r\n    // start-1 = Local Declaration marked with @Cleanup\r\n    // start = first instruction that needs to be wrapped into a try block\r\n    // end = last intruction of the scope -OR- last instruction before the next case label in switch statements.\r\n    // hence:\r\n    // [start, end) = statements for the try block.\r\n    org.eclipse.jdt.internal.compiler.ast.Statement[] tryBlock = new org.eclipse.jdt.internal.compiler.ast.Statement[end - start];\r\n    java.lang.System.arraycopy(statements, start, tryBlock, 0, end - start);\r\n    // Remove the stuff we just dumped into the tryBlock, and then leave room for the try node.\r\n    int newStatementsLength = statements.length - (end - start);// Remove room for every statement moved into try block...\r\n\r\n    newStatementsLength += 1;// But add room for the TryStatement node itself.\r\n\r\n    org.eclipse.jdt.internal.compiler.ast.Statement[] newStatements = new org.eclipse.jdt.internal.compiler.ast.Statement[newStatementsLength];\r\n    java.lang.System.arraycopy(statements, 0, newStatements, 0, start);// copy all statements before the try block verbatim.\r\n\r\n    java.lang.System.arraycopy(statements, end, newStatements, start + 1, statements.length - end);// For switch statements.\r\n\r\n    this.doAssignmentCheck(annotationNode, tryBlock, decl.name);\r\n    org.eclipse.jdt.internal.compiler.ast.TryStatement tryStatement = new org.eclipse.jdt.internal.compiler.ast.TryStatement();\r\n    tryStatement.tryBlock = new org.eclipse.jdt.internal.compiler.ast.Block(0);\r\n    tryStatement.tryBlock.statements = tryBlock;\r\n    newStatements[start] = tryStatement;\r\n    org.eclipse.jdt.internal.compiler.ast.Statement[] finallyBlock = new org.eclipse.jdt.internal.compiler.ast.Statement[1];\r\n    org.eclipse.jdt.internal.compiler.ast.MessageSend unsafeClose = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n    unsafeClose.sourceStart = ast.sourceStart;\r\n    unsafeClose.sourceEnd = ast.sourceEnd;\r\n    org.eclipse.jdt.internal.compiler.ast.SingleNameReference receiver = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(decl.name, 0);\r\n    unsafeClose.receiver = receiver;\r\n    long nameSourcePosition = (((long) (ast.sourceStart)) << 32) | ast.sourceEnd;\r\n    if (ast.memberValuePairs() != null) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.MemberValuePair pair : ast.memberValuePairs()) {\r\n            if ((pair.name != null) && new java.lang.String(pair.name).equals(\"value\")) {\r\n                nameSourcePosition = (((long) (pair.value.sourceStart)) << 32) | pair.value.sourceEnd;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    unsafeClose.nameSourcePosition = nameSourcePosition;\r\n    unsafeClose.selector = cleanupName.toCharArray();\r\n    finallyBlock[0] = unsafeClose;\r\n    tryStatement.finallyBlock = new org.eclipse.jdt.internal.compiler.ast.Block(0);\r\n    tryStatement.finallyBlock.statements = finallyBlock;\r\n    tryStatement.catchArguments = null;\r\n    tryStatement.catchBlocks = null;\r\n    if (blockNode instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\r\n        ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (blockNode)).statements = newStatements;\r\n    } else if (blockNode instanceof org.eclipse.jdt.internal.compiler.ast.Block) {\r\n        ((org.eclipse.jdt.internal.compiler.ast.Block) (blockNode)).statements = newStatements;\r\n    } else if (blockNode instanceof org.eclipse.jdt.internal.compiler.ast.SwitchStatement) {\r\n        ((org.eclipse.jdt.internal.compiler.ast.SwitchStatement) (blockNode)).statements = newStatements;\r\n    }\r\n    ancestor.rebuild();\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).1", "labels": ["Variable"], "properties": {"simpleName": "floatOrDouble", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitMethodArgument(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCVariableDecl arg, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n    this.indent--;\r\n    this.print(\"</METHODARG %s %s>\", arg.vartype, arg.name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "fileName", "qualifiedName": "lombok.core.AST(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).1", "labels": ["Variable"], "properties": {"simpleName": "valueIdx", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.serialVersionUID", "labels": ["Variable"], "properties": {"sourceText": "private static final long serialVersionUID = 1L;", "visibility": "private", "simpleName": "serialVersionUID", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.serialVersionUID", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.locations", "labels": ["Variable"], "properties": {"sourceText": "java.util.List<lombok.installer.EclipseLocation> locations = new java.util.ArrayList<lombok.installer.EclipseLocation>();", "visibility": "default", "simpleName": "locations", "qualifiedName": "lombok.installer.Installer$EclipsesList.locations", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "level", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem.getCategoryID()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getCategoryID()", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem.getCategoryID()", "kind": "method", "sourceText": "@java.lang.Override\r\npublic int getCategoryID() {\r\n    return org.eclipse.jdt.core.compiler.CategorizedProblem.CAT_UNSPECIFIED;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel).0", "labels": ["Variable"], "properties": {"simpleName": "value", "qualifiedName": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public boolean handle(lombok.core.AnnotationValues<lombok.Data> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    lombok.Data ann = annotation.getInstance();\r\n    lombok.eclipse.EclipseAST.Node typeNode = annotationNode.up();\r\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = null;\r\n    if (typeNode.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (typeNode.get()));\r\n    }\r\n    int modifiers = (typeDecl == null) ? 0 : typeDecl.modifiers;\r\n    boolean notAClass = (modifiers & ((org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccInterface | org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccAnnotation) | org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccEnum)) != 0;\r\n    if ((typeDecl == null) || notAClass) {\r\n        annotationNode.addError(\"@Data is only supported on a class.\");\r\n        return false;\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> nodesForConstructor = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    for (lombok.eclipse.EclipseAST.Node child : typeNode.down()) {\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (child.get()));\r\n        // Skip static fields.\r\n        if ((fieldDecl.modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccStatic) != 0) {\r\n            continue;\r\n        }\r\n        boolean isFinal = (fieldDecl.modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccFinal) != 0;\r\n        if (isFinal && (fieldDecl.initialization == null)) {\r\n            nodesForConstructor.add(child);\r\n        }\r\n        new lombok.eclipse.handlers.HandleGetter().generateGetterForField(child, annotationNode.get());\r\n        if (!isFinal) {\r\n            new lombok.eclipse.handlers.HandleSetter().generateSetterForField(child, annotationNode.get());\r\n        }\r\n    }\r\n    new lombok.eclipse.handlers.HandleToString().generateToStringForType(typeNode, annotationNode);\r\n    new lombok.eclipse.handlers.HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode, annotationNode);\r\n    // Careful: Generate the public static constructor (if there is one) LAST, so that any attempt to\r\n    // 'find callers' on the annotation node will find callers of the constructor, which is by far the\r\n    // most useful of the many methods built by @Data. This trick won't work for the non-static constructor,\r\n    // for whatever reason, though you can find callers of that one by focussing on the class name itself\r\n    // and hitting 'find callers'.\r\n    if (lombok.eclipse.handlers.PKG.constructorExists(typeNode) == lombok.eclipse.handlers.PKG.MemberExistsResult.NOT_EXISTS) {\r\n        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration constructor = this.createConstructor(ann.staticConstructor().length() == 0, typeNode, nodesForConstructor, ast);\r\n        lombok.eclipse.handlers.PKG.injectMethod(typeNode, constructor);\r\n    }\r\n    if (ann.staticConstructor().length() > 0) {\r\n        if (lombok.eclipse.handlers.PKG.methodExists(\"of\", typeNode) == lombok.eclipse.handlers.PKG.MemberExistsResult.NOT_EXISTS) {\r\n            org.eclipse.jdt.internal.compiler.ast.MethodDeclaration staticConstructor = this.createStaticConstructor(ann.staticConstructor(), typeNode, nodesForConstructor, ast);\r\n            lombok.eclipse.handlers.PKG.injectMethod(typeNode, staticConstructor);\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.MethodDeclaration createStaticConstructor(java.lang.String name, lombok.eclipse.EclipseAST.Node type, java.util.Collection<lombok.eclipse.EclipseAST.Node> fields, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    long p = (((long) (pos.sourceStart)) << 32) | pos.sourceEnd;\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration constructor = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (type.top().get())).compilationResult);\r\n    constructor.modifiers = lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel.PUBLIC) | java.lang.reflect.Modifier.STATIC;\r\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get()));\r\n    if ((typeDecl.typeParameters != null) && (typeDecl.typeParameters.length > 0)) {\r\n        org.eclipse.jdt.internal.compiler.ast.TypeReference[] refs = new org.eclipse.jdt.internal.compiler.ast.TypeReference[typeDecl.typeParameters.length];\r\n        int idx = 0;\r\n        for (org.eclipse.jdt.internal.compiler.ast.TypeParameter param : typeDecl.typeParameters) {\r\n            refs[idx++] = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference(param.name, (((long) (param.sourceStart)) << 32) | param.sourceEnd);\r\n        }\r\n        constructor.returnType = new org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference(typeDecl.name, refs, 0, p);\r\n    } else {\r\n        constructor.returnType = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get())).name, p);\r\n    }\r\n    constructor.annotations = null;\r\n    constructor.selector = name.toCharArray();\r\n    constructor.thrownExceptions = null;\r\n    constructor.typeParameters = lombok.eclipse.Eclipse.copyTypeParams(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get())).typeParameters);\r\n    constructor.bits |= lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n    constructor.bodyStart = constructor.declarationSourceStart = constructor.sourceStart = pos.sourceStart;\r\n    constructor.bodyEnd = constructor.declarationSourceEnd = constructor.sourceEnd = pos.sourceEnd;\r\n    java.util.List<org.eclipse.jdt.internal.compiler.ast.Argument> args = new java.util.ArrayList<org.eclipse.jdt.internal.compiler.ast.Argument>();\r\n    java.util.List<org.eclipse.jdt.internal.compiler.ast.Expression> assigns = new java.util.ArrayList<org.eclipse.jdt.internal.compiler.ast.Expression>();\r\n    org.eclipse.jdt.internal.compiler.ast.AllocationExpression statement = new org.eclipse.jdt.internal.compiler.ast.AllocationExpression();\r\n    statement.type = lombok.eclipse.Eclipse.copyType(constructor.returnType);\r\n    for (lombok.eclipse.EclipseAST.Node fieldNode : fields) {\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (fieldNode.get()));\r\n        long fieldPos = (((long) (field.sourceStart)) << 32) | field.sourceEnd;\r\n        assigns.add(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(field.name, fieldPos));\r\n        args.add(new org.eclipse.jdt.internal.compiler.ast.Argument(field.name, fieldPos, lombok.eclipse.Eclipse.copyType(field.type), 0));\r\n    }\r\n    statement.arguments = (assigns.isEmpty()) ? null : assigns.toArray(new org.eclipse.jdt.internal.compiler.ast.Expression[assigns.size()]);\r\n    constructor.arguments = (args.isEmpty()) ? null : args.toArray(new org.eclipse.jdt.internal.compiler.ast.Argument[args.size()]);\r\n    constructor.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(statement, ((int) (p >> 32)), ((int) (p))) };\r\n    return constructor;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[]).0", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "toFQ(java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "kind": "method", "sourceText": "private java.lang.String toFQ(java.lang.String typeName) {\r\n    java.lang.Class<? extends java.lang.Object> c;\r\n    boolean fqn = typeName.indexOf('.') > (-1);\r\n    java.lang.String prefix = (fqn) ? typeName.substring(0, typeName.indexOf('.')) : typeName;\r\n    for (java.lang.String im : this.ast.getImportStatements()) {\r\n        int idx = im.lastIndexOf('.');\r\n        java.lang.String simple = im;\r\n        if (idx > (-1)) {\r\n            simple = im.substring(idx + 1);\r\n        }\r\n        if (simple.equals(prefix)) {\r\n            return im + typeName.substring(prefix.length());\r\n        }\r\n    }\r\n    c = this.tryClass(typeName);\r\n    if (c != null) {\r\n        return c.getName();\r\n    }\r\n    c = this.tryClass(\"java.lang.\" + typeName);\r\n    if (c != null) {\r\n        return c.getName();\r\n    }\r\n    // Try star imports\r\n    for (java.lang.String im : this.ast.getImportStatements()) {\r\n        if (im.endsWith(\".*\")) {\r\n            c = this.tryClass(im.substring(0, im.length() - 1) + typeName);\r\n            if (c != null) {\r\n                return c.getName();\r\n            }\r\n        }\r\n    }\r\n    if (!fqn) {\r\n        java.lang.String pkg = this.ast.getPackageDeclaration();\r\n        if (pkg != null) {\r\n            return (pkg + \".\") + typeName;\r\n        }\r\n    }\r\n    return null;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration createConstructor(boolean isPublic, lombok.eclipse.EclipseAST.Node type, java.util.Collection<lombok.eclipse.EclipseAST.Node> fields, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    long p = (((long) (pos.sourceStart)) << 32) | pos.sourceEnd;\r\n    org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration constructor = new org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (type.top().get())).compilationResult);\r\n    constructor.modifiers = lombok.eclipse.handlers.PKG.toModifier(isPublic ? lombok.AccessLevel.PUBLIC : lombok.AccessLevel.PRIVATE);\r\n    constructor.annotations = null;\r\n    constructor.selector = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get())).name;\r\n    constructor.constructorCall = new org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper);\r\n    constructor.thrownExceptions = null;\r\n    constructor.typeParameters = null;\r\n    constructor.bits |= lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n    constructor.bodyStart = constructor.declarationSourceStart = constructor.sourceStart = pos.sourceStart;\r\n    constructor.bodyEnd = constructor.declarationSourceEnd = constructor.sourceEnd = pos.sourceEnd;\r\n    constructor.arguments = null;\r\n    java.util.List<org.eclipse.jdt.internal.compiler.ast.Argument> args = new java.util.ArrayList<org.eclipse.jdt.internal.compiler.ast.Argument>();\r\n    java.util.List<org.eclipse.jdt.internal.compiler.ast.Statement> assigns = new java.util.ArrayList<org.eclipse.jdt.internal.compiler.ast.Statement>();\r\n    for (lombok.eclipse.EclipseAST.Node fieldNode : fields) {\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (fieldNode.get()));\r\n        org.eclipse.jdt.internal.compiler.ast.FieldReference thisX = new org.eclipse.jdt.internal.compiler.ast.FieldReference((\"this.\" + new java.lang.String(field.name)).toCharArray(), p);\r\n        thisX.receiver = new org.eclipse.jdt.internal.compiler.ast.ThisReference(((int) (p >> 32)), ((int) (p)));\r\n        thisX.token = field.name;\r\n        assigns.add(new org.eclipse.jdt.internal.compiler.ast.Assignment(thisX, new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(field.name, p), ((int) (p))));\r\n        long fieldPos = (((long) (field.sourceStart)) << 32) | field.sourceEnd;\r\n        args.add(new org.eclipse.jdt.internal.compiler.ast.Argument(field.name, fieldPos, lombok.eclipse.Eclipse.copyType(field.type), 0));\r\n    }\r\n    constructor.statements = (assigns.isEmpty()) ? null : assigns.toArray(new org.eclipse.jdt.internal.compiler.ast.Statement[assigns.size()]);\r\n    constructor.arguments = (args.isEmpty()) ? null : args.toArray(new org.eclipse.jdt.internal.compiler.ast.Argument[args.size()]);\r\n    return constructor;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitCompilationUnit(lombok.javac.JavacAST.Node Node, com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit) {\r\n    this.out.println(\"---------------------------------------------------------\");\r\n    this.print(\"<CU %s>\", Node.getFileName());\r\n    this.indent++;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "excludes", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findOurJar()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "findOurJar()", "qualifiedName": "lombok.installer.EclipseFinder.findOurJar()", "kind": "static method", "sourceText": "/**\r\n * Returns a File object pointing to our own jar file. Will obviously fail if the installer was started via\r\n * a jar that wasn't accessed via the file-system, or if its started via e.g. unpacking the jar.\r\n */\r\nstatic java.io.File findOurJar() {\r\n    try {\r\n        java.net.URI uri = lombok.installer.EclipseFinder.class.getResource((\"/\" + lombok.installer.EclipseFinder.class.getName().replace('.', '/')) + \".class\").toURI();\r\n        java.util.regex.Pattern p = java.util.regex.Pattern.compile(\"^jar:file:([^\\\\!]+)\\\\!.*\\\\.class$\");\r\n        java.util.regex.Matcher m = p.matcher(uri.toString());\r\n        if (!m.matches()) {\r\n            return new java.io.File(\"lombok.jar\");\r\n        }\r\n        java.lang.String rawUri = m.group(1);\r\n        return new java.io.File(java.net.URLDecoder.decode(rawUri, java.nio.charset.Charset.defaultCharset().name()));\r\n    } catch (java.lang.Exception e) {\r\n        throw lombok.Lombok.sneakyThrow(e);\r\n    }\r\n}", "docComment": "Returns a File object pointing to our own jar file. Will obviously fail if the installer was started via\r\na jar that wasn't accessed via the file-system, or if its started via e.g. unpacking the jar.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitField(lombok.javac.JavacAST.Node fieldNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isStructurallySignificant", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * structurally significant are those nodes that can be annotated in java 1.6 or are method-like toplevels,\r\n * so fields, local declarations, method arguments, methods, types, the Compilation Unit itself, and initializers.\r\n */\r\nprotected boolean isStructurallySignificant;", "visibility": "protected", "simpleName": "isStructurallySignificant", "qualifiedName": "lombok.core.AST$Node.isStructurallySignificant", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "qualifiedName": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "kind": "method", "sourceText": "private java.util.Collection<lombok.eclipse.EclipseAST.Node> buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] children) {\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    if (children != null) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method : children) {\r\n            this.addIfNotNull(childNodes, this.buildMethod(method));\r\n        }\r\n    }\r\n    return childNodes;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "qualifiedName": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "kind": "method", "sourceText": "/**\r\n * Generates a setter on the stated field.\r\n *\r\n * Used by {@link HandleData}.\r\n *\r\n * The difference between this call and the handle method is as follows:\r\n *\r\n * If there is a <code>lombok.Setter</code> annotation on the field, it is used and the\r\n * same rules apply (e.g. warning if the method already exists, stated access level applies).\r\n * If not, the setter is still generated if it isn't already there, though there will not\r\n * be a warning if its already there. The default access level is used.\r\n */\r\npublic void generateSetterForField(lombok.javac.JavacAST.Node fieldNode, com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition pos) {\r\n    for (lombok.javac.JavacAST.Node child : fieldNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.javac.Javac.annotationTypeMatches(lombok.Setter.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    this.createSetterForField(lombok.AccessLevel.PUBLIC, fieldNode, fieldNode, pos, false);\r\n}", "docComment": "Generates a setter on the stated field.\r\n\r\nUsed by {@link HandleData}.\r\n\r\nThe difference between this call and the handle method is as follows:\r\n\r\nIf there is a <code>lombok.Setter</code> annotation on the field, it is used and the\r\nsame rules apply (e.g. warning if the method already exists, stated access level applies).\r\nIf not, the setter is still generated if it isn't already there, though there will not\r\nbe a warning if its already there. The default access level is used.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.ast", "labels": ["Variable"], "properties": {"sourceText": "private final lombok.eclipse.EclipseAST ast;", "visibility": "private", "simpleName": "ast", "qualifiedName": "lombok.eclipse.TransformEclipseAST.ast", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getTreeMaker()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getTreeMaker()", "qualifiedName": "lombok.javac.JavacAST.getTreeMaker()", "kind": "method", "sourceText": "/**\r\n *\r\n * @return A TreeMaker instance that you can use to create new AST nodes.\r\n */\r\npublic com.sun.tools.javac.tree.TreeMaker getTreeMaker() {\r\n    return this.treeMaker;\r\n}", "docComment": "\r\n@return A TreeMaker instance that you can use to create new AST nodes.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.propagateProblems()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "propagateProblems()", "qualifiedName": "lombok.eclipse.EclipseAST.propagateProblems()", "kind": "method", "sourceText": "private void propagateProblems() {\r\n    if (this.queuedProblems.isEmpty()) {\r\n        return;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration cud = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (this.top().get()));\r\n    if (cud.compilationResult == null) {\r\n        return;\r\n    }\r\n    for (lombok.eclipse.EclipseAST.ParseProblem problem : this.queuedProblems) {\r\n        problem.addToCompilationResult();\r\n    }\r\n    this.queuedProblems.clear();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "/**\r\n * Called when an annotation is found that is likely to match the annotation you're interested in.\r\n *\r\n * Be aware that you'll be called for ANY annotation node in the source that looks like a match. There is,\r\n * for example, no guarantee that the annotation node belongs to a method, even if you set your\r\n * TargetType in the annotation to methods only.\r\n *\r\n * @param annotation\r\n * \t\tThe actual annotation - use this object to retrieve the annotation parameters.\r\n * @param ast\r\n * \t\tThe Eclipse AST node representing the annotation.\r\n * @param annotationNode\r\n * \t\tThe Lombok AST wrapper around the 'ast' parameter. You can use this object\r\n * \t\tto travel back up the chain (something javac AST can't do) to the parent of the annotation, as well\r\n * \t\tas access useful methods such as generating warnings or errors focused on the annotation.\r\n * @return <code>true</code> if you don't want to be called again about this annotation during this\r\ncompile session (you've handled it), or <code>false</code> to indicate you aren't done yet.\r\n */\r\nboolean handle(lombok.core.AnnotationValues<T> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode);", "docComment": "Called when an annotation is found that is likely to match the annotation you're interested in.\r\n\r\nBe aware that you'll be called for ANY annotation node in the source that looks like a match. There is,\r\nfor example, no guarantee that the annotation node belongs to a method, even if you set your\r\nTargetType in the annotation to methods only.\r\n\r\n@param annotation\r\n\t\tThe actual annotation - use this object to retrieve the annotation parameters.\r\n@param ast\r\n\t\tThe Eclipse AST node representing the annotation.\r\n@param annotationNode\r\n\t\tThe Lombok AST wrapper around the 'ast' parameter. You can use this object\r\n\t\tto travel back up the chain (something javac AST can't do) to the parent of the annotation, as well\r\n\t\tas access useful methods such as generating warnings or errors focused on the annotation.\r\n@return <code>true</code> if you don't want to be called again about this annotation during this\r\ncompile session (you've handled it), or <code>false</code> to indicate you aren't done yet.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "labels": ["Variable"], "properties": {"simpleName": "treeMaker", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration top = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (annotationNode.top().get()));\r\n    boolean handled = lombok.eclipse.TransformEclipseAST.handlers.handle(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "findEclipses()", "qualifiedName": "lombok.installer.EclipseFinder.findEclipses()", "kind": "static method", "sourceText": "/**\r\n * Calls the OS-dependent 'find Eclipse' routine. If the local OS doesn't have a routine written for it,\r\n * null is returned.\r\n *\r\n * @return List of directories that contain the Eclipse executable.\r\n */\r\nstatic java.util.List<java.lang.String> findEclipses() {\r\n    switch (lombok.installer.EclipseFinder.getOS()) {\r\n        case WINDOWS :\r\n            return lombok.installer.EclipseFinder.findEclipseOnWindows();\r\n        case MAC_OS_X :\r\n            return lombok.installer.EclipseFinder.findEclipseOnMac();\r\n        default :\r\n        case UNIX :\r\n            return null;\r\n    }\r\n}", "docComment": "Calls the OS-dependent 'find Eclipse' routine. If the local OS doesn't have a routine written for it,\r\nnull is returned.\r\n\r\n@return List of directories that contain the Eclipse executable.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl type, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.LOCAL", "labels": ["Variable"], "properties": {"sourceText": "LOCAL()", "visibility": "public", "simpleName": "LOCAL", "qualifiedName": "lombok.core.AST$Kind.LOCAL", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "addEclipse(lombok.installer.EclipseLocation)", "qualifiedName": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "kind": "method", "sourceText": "void addEclipse(final lombok.installer.EclipseLocation location) {\r\n    if (this.locations.contains(location)) {\r\n        return;\r\n    }\r\n    javax.swing.Box box = javax.swing.Box.createHorizontalBox();\r\n    box.setBackground(java.awt.Color.WHITE);\r\n    final javax.swing.JCheckBox checkbox = new javax.swing.JCheckBox(location.getPath());\r\n    checkbox.setBackground(java.awt.Color.WHITE);\r\n    box.add(checkbox);\r\n    checkbox.setSelected(true);\r\n    checkbox.addActionListener(new java.awt.event.ActionListener() {\r\n        1() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            location.selected = checkbox.isSelected();\r\n            this.fireSelectionChange();\r\n        }\r\n    });\r\n    if (location.hasLombok()) {\r\n        box.add(new javax.swing.JLabel(new javax.swing.ImageIcon(lombok.installer.Installer.class.getResource(\"/lombok/installer/lombokIcon.png\"))));\r\n    }\r\n    box.add(javax.swing.Box.createHorizontalGlue());\r\n    this.locations.add(location);\r\n    this.add(box);\r\n    this.getParent().doLayout();\r\n    this.fireSelectionChange();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "qualifiedName": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "kind": "method", "sourceText": "/**\r\n * Override if your AST collection does not support the set method. Javac's for example, does not.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\nprotected void setElementInASTCollection(java.lang.reflect.Field field, java.lang.Object fieldRef, java.util.List<java.util.Collection<? extends java.lang.Object>> chain, java.util.Collection<? extends java.lang.Object> collection, int idx, N newN) throws java.lang.IllegalAccessException {\r\n    if (collection instanceof java.util.List<?>) {\r\n        ((java.util.List) (collection)).set(idx, newN);\r\n    }\r\n}", "docComment": "Override if your AST collection does not support the set method. Javac's for example, does not.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "JHyperLink", "qualifiedName": "lombok.installer.Installer$JHyperLink", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem).0", "labels": ["Variable"], "properties": {"simpleName": "problem", "qualifiedName": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "labels": ["Variable"], "properties": {"sourceText": "MAC_OS_X()", "visibility": "public", "simpleName": "MAC_OS_X", "qualifiedName": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.PKG$MemberExistsResult()", "kind": "constructor", "sourceText": "MemberExistsResult() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "findServices(java.lang.Class,java.lang.ClassLoader)", "qualifiedName": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "kind": "static method", "sourceText": "/**\r\n * Returns an iterator of class objects that, at least according to the spi discovery file, are implementations\r\n * of the stated class.\r\n *\r\n * Like ServiceLoader, each listed class is turned into an instance by calling the public no-args constructor.\r\n *\r\n * @param target\r\n * \t\tclass to find implementations for.\r\n * @param loader\r\n * \t\tThe classloader object to use to both the spi discovery files, as well as the loader to use\r\n * \t\tto make the returned instances.\r\n */\r\npublic static <C> java.util.Iterator<C> findServices(final java.lang.Class<C> target, final java.lang.ClassLoader loader) throws java.io.IOException {\r\n    java.util.Enumeration<java.net.URL> resources = loader.getResources(\"META-INF/services/\" + target.getName());\r\n    final java.util.Set<java.lang.String> entries = new java.util.LinkedHashSet<java.lang.String>();\r\n    while (resources.hasMoreElements()) {\r\n        java.net.URL url = resources.nextElement();\r\n        lombok.core.SpiLoadUtil.readServicesFromUrl(entries, url);\r\n    } \r\n    final java.util.Iterator<java.lang.String> names = entries.iterator();\r\n    return new java.util.Iterator<C>() {\r\n        1() {\r\n            super();\r\n        }\r\n\r\n        public boolean hasNext() {\r\n            return names.hasNext();\r\n        }\r\n\r\n        public C next() {\r\n            try {\r\n                return target.cast(java.lang.Class.forName(names.next(), true, loader).newInstance());\r\n            } catch (java.lang.Throwable t) {\r\n                throw lombok.Lombok.sneakyThrow(t);\r\n            }\r\n        }\r\n\r\n        public void remove() {\r\n            throw new java.lang.UnsupportedOperationException();\r\n        }\r\n    };\r\n}", "docComment": "Returns an iterator of class objects that, at least according to the spi discovery file, are implementations\r\nof the stated class.\r\n\r\nLike ServiceLoader, each listed class is turned into an instance by calling the public no-args constructor.\r\n\r\n@param target\r\n\t\tclass to find implementations for.\r\n@param loader\r\n\t\tThe classloader object to use to both the spi discovery files, as well as the loader to use\r\n\t\tto make the returned instances.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildUninstallArea()", "qualifiedName": "lombok.installer.Installer.buildUninstallArea()", "kind": "method", "sourceText": "private java.awt.Component buildUninstallArea() {\r\n    javax.swing.JPanel container = new javax.swing.JPanel();\r\n    container.setLayout(new java.awt.GridBagLayout());\r\n    java.awt.GridBagConstraints constraints = new java.awt.GridBagConstraints();\r\n    constraints.anchor = java.awt.GridBagConstraints.WEST;\r\n    container.add(new javax.swing.JLabel(lombok.installer.Installer.UNINSTALL_TITLE), constraints);\r\n    constraints.gridy = 1;\r\n    constraints.insets = new java.awt.Insets(8, 0, 0, 16);\r\n    container.add(new javax.swing.JLabel(lombok.installer.Installer.UNINSTALL_EXPLANATION), constraints);\r\n    this.uninstallBox = javax.swing.Box.createVerticalBox();\r\n    constraints.gridy = 2;\r\n    constraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\r\n    container.add(this.uninstallBox, constraints);\r\n    constraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\r\n    constraints.gridy = 3;\r\n    container.add(new javax.swing.JLabel(\"Are you sure?\"), constraints);\r\n    javax.swing.Box buttonBar = javax.swing.Box.createHorizontalBox();\r\n    javax.swing.JButton noButton = new javax.swing.JButton(\"No - Don't uninstall\");\r\n    buttonBar.add(noButton);\r\n    buttonBar.add(javax.swing.Box.createHorizontalGlue());\r\n    javax.swing.JButton yesButton = new javax.swing.JButton(\"Yes - uninstall Lombok\");\r\n    buttonBar.add(yesButton);\r\n    noButton.addActionListener(new java.awt.event.ActionListener() {\r\n        4() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            lombok.installer.Installer.this.uninstallArea.setVisible(false);\r\n            lombok.installer.Installer.this.javacArea.setVisible(true);\r\n            lombok.installer.Installer.this.eclipseArea.setVisible(true);\r\n            lombok.installer.Installer.this.appWindow.pack();\r\n        }\r\n    });\r\n    yesButton.addActionListener(new java.awt.event.ActionListener() {\r\n        5() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            this.doUninstall();\r\n        }\r\n    });\r\n    constraints.gridy = 4;\r\n    container.add(buttonBar, constraints);\r\n    return container;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpression(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.getRawExpression(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.core.PrintAST> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    java.io.PrintStream stream = java.lang.System.out;\r\n    java.lang.String fileName = annotation.getInstance().outfile();\r\n    if (fileName.length() > 0) {\r\n        try {\r\n            stream = new java.io.PrintStream(new java.io.File(fileName));\r\n        } catch (java.io.FileNotFoundException e) {\r\n            lombok.Lombok.sneakyThrow(e);\r\n        }\r\n    }\r\n    annotationNode.up().traverse(new lombok.javac.JavacASTVisitor.Printer(annotation.getInstance().printContent(), stream));\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Setter</code> annotation for eclipse.\r\n", "simpleName": "HandleSetter", "qualifiedName": "lombok.eclipse.handlers.HandleSetter", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.ast", "labels": ["Variable"], "properties": {"sourceText": "private final lombok.core.AST<? extends java.lang.Object>.Node ast;", "visibility": "private", "simpleName": "ast", "qualifiedName": "lombok.core.AnnotationValues.ast", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setError(java.lang.String,java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generates an error message on the stated annotation value (you should only call this method if you know it's there!)\r\n */\r\npublic void setError(java.lang.String annotationMethodName, java.lang.String message) {\r\n    this.setError(annotationMethodName, message, -1);\r\n}", "docComment": "Generates an error message on the stated annotation value (you should only call this method if you know it's there!)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TransformationsUtil", "labels": ["Structure"], "properties": {"docComment": "Container for static utility methods useful for some of the standard lombok transformations, regardless of\r\ntarget platform (e.g. useful for both javac and Eclipse lombok implementations).\r\n", "simpleName": "TransformationsUtil", "qualifiedName": "lombok.core.TransformationsUtil", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][]).0", "labels": ["Variable"], "properties": {"simpleName": "varNames", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "includeFieldNames", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.imports", "labels": ["Variable"], "properties": {"sourceText": "private java.util.Collection<java.lang.String> imports;", "visibility": "private", "simpleName": "imports", "qualifiedName": "lombok.core.TypeResolver.imports", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "constructor", "sourceText": "DeclaredException(java.lang.String exceptionName, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {\r\n    super();\r\n    this.exceptionName = exceptionName;\r\n    this.node = node;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[]).0", "labels": ["Variable"], "properties": {"simpleName": "fieldName", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    if (annotation == null) {\r\n        return null;\r\n    }\r\n    if (this.setAndGetAsHandled(annotation)) {\r\n        return null;\r\n    }\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(annotation, null, lombok.core.AST.Kind.ANNOTATION));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitCompilationUnit(lombok.eclipse.EclipseAST.Node top, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateQualifiedNameRef(char[][])", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.NameReference generateQualifiedNameRef(char[]... varNames) {\r\n    if (varNames.length > 1) {\r\n        return new org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference(varNames, new long[varNames.length], 0, 0);\r\n    } else {\r\n        return new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(varNames[0], 0);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.AccessLevel.PRIVATE", "labels": ["Variable"], "properties": {"sourceText": "PRIVATE()", "visibility": "public", "simpleName": "PRIVATE", "qualifiedName": "lombok.AccessLevel.PRIVATE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.toSimpleName(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "toSimpleName(java.lang.String)", "qualifiedName": "lombok.core.TypeResolver.toSimpleName(java.lang.String)", "kind": "static method", "sourceText": "private static java.lang.String toSimpleName(java.lang.String typeName) {\r\n    int idx = typeName.lastIndexOf('.');\r\n    return idx == (-1) ? typeName : typeName.substring(idx + 1);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.getPackageDeclaration()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPackageDeclaration()", "qualifiedName": "lombok.core.AST.getPackageDeclaration()", "kind": "method", "sourceText": "/**\r\n * Return the content of the package declaration on this AST's top (Compilation Unit) node.\r\n *\r\n * Example: \"java.util\".\r\n */\r\npublic abstract java.lang.String getPackageDeclaration();", "docComment": "Return the content of the package declaration on this AST's top (Compilation Unit) node.\r\n\r\nExample: \"java.util\".\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.get(java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "get(java.lang.Object)", "qualifiedName": "lombok.core.AST.get(java.lang.Object)", "kind": "method", "sourceText": "/**\r\n * Maps a javac/Eclipse internal AST Node to the appropriate AST.Node object.\r\n */\r\npublic lombok.core.AST<N>.Node get(N node) {\r\n    return this.nodeMap.get(node);\r\n}", "docComment": "Maps a javac/Eclipse internal AST Node to the appropriate AST.Node object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "potentialMatches", "qualifiedName": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "calculateIsStructurallySignificant()", "qualifiedName": "lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\nprotected boolean calculateIsStructurallySignificant() {\r\n    if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        return true;\r\n    }\r\n    if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {\r\n        return true;\r\n    }\r\n    if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {\r\n        return true;\r\n    }\r\n    if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {\r\n        return true;\r\n    }\r\n    if (this.node instanceof org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.VERSION", "labels": ["Variable"], "properties": {"sourceText": "// ** CAREFUL ** - this class must always compile with 0 dependencies (it must not refer to any other sources or libraries).\r\nprivate static final java.lang.String VERSION = \"0.8.2\";", "visibility": "private", "simpleName": "VERSION", "qualifiedName": "lombok.core.Version.VERSION", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.treeMaker", "labels": ["Variable"], "properties": {"sourceText": "private final com.sun.tools.javac.tree.TreeMaker treeMaker;", "visibility": "private", "simpleName": "treeMaker", "qualifiedName": "lombok.javac.JavacAST.treeMaker", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "cud", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "/**\r\n * Visits a method argument\r\n */\r\nvoid visitMethodArgument(lombok.eclipse.EclipseAST.Node argNode, org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method);", "docComment": "Visits a method argument\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitCompilationUnit(lombok.eclipse.EclipseAST.Node top, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "qualifiedName": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "kind": "constructor", "sourceText": "/**\r\n * See the {@link AST.Node} constructor for information.\r\n */\r\nNode(org.eclipse.jdt.internal.compiler.ast.ASTNode node, java.util.List<lombok.eclipse.EclipseAST.Node> children, lombok.core.AST.Kind kind) {\r\n    super(node, children, kind);\r\n}", "docComment": "See the {@link AST.Node} constructor for information.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration top = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (annotationNode.top().get()));\r\n    boolean handled = lombok.eclipse.TransformEclipseAST.handlers.handle(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Lombok.sneakyThrow(java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "t", "qualifiedName": "lombok.Lombok.sneakyThrow(java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS.UNIX", "labels": ["Variable"], "properties": {"sourceText": "UNIX()", "visibility": "public", "simpleName": "UNIX", "qualifiedName": "lombok.installer.EclipseFinder$OS.UNIX", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitType(lombok.eclipse.EclipseAST.Node typeNode, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "qualifiedName": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "kind": "static method", "sourceText": "/**\r\n * You can't share TypeReference objects or subtle errors start happening.\r\n * Unfortunately the TypeReference type hierarchy is complicated and there's no clone\r\n * method on TypeReference itself. This method can clone them.\r\n */\r\npublic static org.eclipse.jdt.internal.compiler.ast.TypeReference copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference ref) {\r\n    if (ref instanceof org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference) {\r\n        org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference iRef = ((org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference) (ref));\r\n        org.eclipse.jdt.internal.compiler.ast.TypeReference[][] args = null;\r\n        if (iRef.typeArguments != null) {\r\n            args = new org.eclipse.jdt.internal.compiler.ast.TypeReference[iRef.typeArguments.length][];\r\n            int idx = 0;\r\n            for (org.eclipse.jdt.internal.compiler.ast.TypeReference[] inRefArray : iRef.typeArguments) {\r\n                if (inRefArray == null) {\r\n                    args[idx++] = null;\r\n                } else {\r\n                    org.eclipse.jdt.internal.compiler.ast.TypeReference[] outRefArray = new org.eclipse.jdt.internal.compiler.ast.TypeReference[inRefArray.length];\r\n                    int idx2 = 0;\r\n                    for (org.eclipse.jdt.internal.compiler.ast.TypeReference inRef : inRefArray) {\r\n                        outRefArray[idx2++] = lombok.eclipse.Eclipse.copyType(inRef);\r\n                    }\r\n                    args[idx++] = outRefArray;\r\n                }\r\n            }\r\n        }\r\n        return new org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference(iRef.tokens, args, iRef.dimensions(), iRef.sourcePositions);\r\n    }\r\n    if (ref instanceof org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference) {\r\n        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference iRef = ((org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference) (ref));\r\n        return new org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference(iRef.tokens, iRef.dimensions(), iRef.sourcePositions);\r\n    }\r\n    if (ref instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) {\r\n        org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference iRef = ((org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) (ref));\r\n        return new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(iRef.tokens, iRef.sourcePositions);\r\n    }\r\n    if (ref instanceof org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference) {\r\n        org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference iRef = ((org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference) (ref));\r\n        org.eclipse.jdt.internal.compiler.ast.TypeReference[] args = null;\r\n        if (iRef.typeArguments != null) {\r\n            args = new org.eclipse.jdt.internal.compiler.ast.TypeReference[iRef.typeArguments.length];\r\n            int idx = 0;\r\n            for (org.eclipse.jdt.internal.compiler.ast.TypeReference inRef : iRef.typeArguments) {\r\n                if (inRef == null) {\r\n                    args[idx++] = null;\r\n                } else {\r\n                    args[idx++] = lombok.eclipse.Eclipse.copyType(inRef);\r\n                }\r\n            }\r\n        }\r\n        return new org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference(iRef.token, args, iRef.dimensions(), (((long) (iRef.sourceStart)) << 32) | iRef.sourceEnd);\r\n    }\r\n    if (ref instanceof org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference) {\r\n        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference iRef = ((org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference) (ref));\r\n        return new org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference(iRef.token, iRef.dimensions(), (((long) (iRef.sourceStart)) << 32) | iRef.sourceEnd);\r\n    }\r\n    if (ref instanceof org.eclipse.jdt.internal.compiler.ast.Wildcard) {\r\n        return new org.eclipse.jdt.internal.compiler.ast.Wildcard(((org.eclipse.jdt.internal.compiler.ast.Wildcard) (ref)).kind);\r\n    }\r\n    if (ref instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) {\r\n        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference iRef = ((org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) (ref));\r\n        return new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference(iRef.token, (((long) (iRef.sourceStart)) << 32) | iRef.sourceEnd);\r\n    }\r\n    return ref;\r\n}", "docComment": "You can't share TypeReference objects or subtle errors start happening.\r\nUnfortunately the TypeReference type hierarchy is complicated and there's no clone\r\nmethod on TypeReference itself. This method can clone them.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.AccessLevel.PACKAGE", "labels": ["Variable"], "properties": {"sourceText": "PACKAGE()", "visibility": "public", "simpleName": "PACKAGE", "qualifiedName": "lombok.AccessLevel.PACKAGE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).2", "labels": ["Variable"], "properties": {"simpleName": "ref2", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "labels": ["Variable"], "properties": {"simpleName": "modifier", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.eclipsesList", "labels": ["Variable"], "properties": {"sourceText": "private lombok.installer.Installer.EclipsesList eclipsesList = new lombok.installer.Installer.EclipsesList();", "visibility": "private", "simpleName": "eclipsesList", "qualifiedName": "lombok.installer.Installer.eclipsesList", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).2", "labels": ["Variable"], "properties": {"simpleName": "index", "qualifiedName": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "qualifiedName": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "kind": "method", "sourceText": "/**\r\n * Generates an compiler error focused on the AST node represented by this node object.\r\n */\r\npublic void addError(java.lang.String message, com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition pos) {\r\n    this.printMessage(javax.tools.Diagnostic.Kind.ERROR, message, null, pos);\r\n}", "docComment": "Generates an compiler error focused on the AST node represented by this node object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Synchronized</code> annotation for javac.\r\n", "simpleName": "HandleSynchronized", "qualifiedName": "lombok.javac.handlers.HandleSynchronized", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.Eclipse()", "kind": "constructor", "sourceText": "private Eclipse() {\r\n    super();\r\n    // Prevent instantiation\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String)", "qualifiedName": "lombok.installer.Installer$JHyperLink(java.lang.String)", "kind": "constructor", "sourceText": "public JHyperLink(java.lang.String text) {\r\n    super();\r\n    this.setFont(this.getFont().deriveFont(java.util.Collections.singletonMap(java.awt.font.TextAttribute.UNDERLINE, 1)));\r\n    this.setText(text);\r\n    this.setBorder(null);\r\n    this.setContentAreaFilled(false);\r\n    this.setForeground(java.awt.Color.BLUE);\r\n    this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.HAND_CURSOR));\r\n    this.setMargin(new java.awt.Insets(0, 0, 0, 0));\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).2", "labels": ["Variable"], "properties": {"simpleName": "importStrings", "qualifiedName": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.singleton(java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "singleton(java.lang.Object)", "qualifiedName": "lombok.eclipse.EclipseAST.singleton(java.lang.Object)", "kind": "static method", "sourceText": "private static <T> java.util.List<T> singleton(T item) {\r\n    java.util.List<T> list = new java.util.ArrayList<T>();\r\n    if (item != null) {\r\n        list.add(item);\r\n    }\r\n    return list;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "argumentNode", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String,java.lang.Throwable)", "qualifiedName": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)", "kind": "constructor", "sourceText": "public NotAnEclipseException(java.lang.String message, java.lang.Throwable cause) {\r\n    super(message, cause);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).3", "labels": ["Variable"], "properties": {"simpleName": "sourceEnd", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildName(java.lang.String,java.lang.String)", "qualifiedName": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "kind": "static method", "sourceText": "private static java.lang.String buildName(java.lang.String prefix, java.lang.String suffix) {\r\n    if (suffix.length() == 0) {\r\n        return prefix;\r\n    }\r\n    char first = suffix.charAt(0);\r\n    if (java.lang.Character.isLowerCase(first)) {\r\n        boolean useUpperCase = (suffix.length() > 2) && (java.lang.Character.isTitleCase(suffix.charAt(1)) || java.lang.Character.isUpperCase(suffix.charAt(1)));\r\n        suffix = java.lang.String.format(\"%s%s\", useUpperCase ? java.lang.Character.toUpperCase(first) : java.lang.Character.toTitleCase(first), suffix.subSequence(1, suffix.length()));\r\n    }\r\n    return java.lang.String.format(\"%s%s\", prefix, suffix);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "child", "qualifiedName": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "constructor", "sourceText": "/**\r\n * Creates a new EclipseAST of the provided Compilation Unit.\r\n *\r\n * @param ast\r\n * \t\tThe compilation unit, which serves as the top level node in the tree to be built.\r\n */\r\npublic EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration ast) {\r\n    super(lombok.eclipse.EclipseAST.toFileName(ast));\r\n    this.compilationUnitDeclaration = ast;\r\n    this.setTop(this.buildCompilationUnit(ast));\r\n    this.completeParse = lombok.eclipse.EclipseAST.isComplete(ast);\r\n}", "docComment": "Creates a new EclipseAST of the provided Compilation Unit.\r\n\r\n@param ast\r\n\t\tThe compilation unit, which serves as the top level node in the tree to be built.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic int getScrollableUnitIncrement(java.awt.Rectangle visibleRect, int orientation, int direction) {\r\n    return 1;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "argument", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildTree(java.lang.Object,lombok.core.AST$Kind)", "qualifiedName": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "kind": "method", "sourceText": "/**\r\n * Build an AST.Node object for the stated internal (javac/Eclipse) AST Node object.\r\n */\r\nprotected abstract lombok.core.AST<N>.Node buildTree(N item, lombok.core.AST.Kind kind);", "docComment": "Build an AST.Node object for the stated internal (javac/Eclipse) AST Node object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.toQualifiedName(char[][]).0", "labels": ["Variable"], "properties": {"simpleName": "typeName", "qualifiedName": "lombok.eclipse.Eclipse.toQualifiedName(char[][]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Getter", "labels": ["Structure"], "properties": {"docComment": "Put on any field to make lombok build a standard getter.\r\n\r\nExample:\r\n<pre>\r\n    private &#64;Getter int foo;\r\n</pre>\r\n\r\nwill generate:\r\n\r\n<pre>\r\n    public int getFoo() {\r\n        return this.foo;\r\n    }\r\n</pre>\r\n\r\nNote that fields of type <code>boolean</code> (but not <code>java.lang.Boolean</code>) will result in an\r\n<code>isFoo</code> name instead of <code>getFoo</code>.\r\n<p>\r\nIf any method named <code>getFoo</code>/<code>isFoo</code> exists, regardless of return type or parameters, no method is generated,\r\nand instead a compiler warning is emitted.\r\n", "simpleName": "Getter", "qualifiedName": "lombok.Getter", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.typeLibrary", "labels": ["Variable"], "properties": {"sourceText": "private lombok.core.TypeLibrary typeLibrary = new lombok.core.TypeLibrary();", "visibility": "private", "simpleName": "typeLibrary", "qualifiedName": "lombok.eclipse.HandlerLibrary.typeLibrary", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setWarning(java.lang.String,java.lang.String,int)", "qualifiedName": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "kind": "method", "sourceText": "/**\r\n * Generates a warning message on the stated annotation value, which must have an array initializer.\r\n * The index-th item in the initializer will carry the error (you should only call this method if you know it's there!)\r\n */\r\npublic void setWarning(java.lang.String annotationMethodName, java.lang.String message, int index) {\r\n    lombok.core.AnnotationValues.AnnotationValue v = this.values.get(annotationMethodName);\r\n    if (v == null) {\r\n        return;\r\n    }\r\n    v.setWarning(message, index);\r\n}", "docComment": "Generates a warning message on the stated annotation value, which must have an array initializer.\r\nThe index-th item in the initializer will carry the error (you should only call this method if you know it's there!)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.skipPrintAST()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skipPrintAST()", "qualifiedName": "lombok.javac.HandlerLibrary.skipPrintAST()", "kind": "method", "sourceText": "/**\r\n * Lombok does not currently support triggering annotations in a specified order; the order is essentially\r\n * random right now. This lack of order is particularly annoying for the <code>PrintAST</code> annotation,\r\n * which is almost always intended to run last. Hence, this hack, which lets it in fact run last.\r\n *\r\n * @see #skipAllButPrintAST()\r\n */\r\npublic void skipPrintAST() {\r\n    this.skipPrintAST = true;\r\n}", "docComment": "Lombok does not currently support triggering annotations in a specified order; the order is essentially\r\nrandom right now. This lack of order is particularly annoying for the <code>PrintAST</code> annotation,\r\nwhich is almost always intended to run last. Hence, this hack, which lets it in fact run last.\r\n\r\n@see #skipAllButPrintAST()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "typeName", "qualifiedName": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "qualifiedName": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "kind": "method", "sourceText": "private boolean replaceStatementInArray(java.lang.Object array, N oldN, N newN) {\r\n    if (array == null) {\r\n        return false;\r\n    }\r\n    int len = java.lang.reflect.Array.getLength(array);\r\n    for (int i = 0; i < len; i++) {\r\n        java.lang.Object o = java.lang.reflect.Array.get(array, i);\r\n        if (o == null) {\r\n            continue;\r\n        }\r\n        if (o.getClass().isArray()) {\r\n            if (this.replaceStatementInArray(o, oldN, newN)) {\r\n                return true;\r\n            }\r\n        } else if (o == oldN) {\r\n            java.lang.reflect.Array.set(array, i, newN);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager).0", "labels": ["Variable"], "properties": {"simpleName": "messager", "qualifiedName": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "values", "qualifiedName": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Eclipse's Parser class is instrumented to not attempt to fill in the body of any method or initializer\r\n * or field initialization if this flag is set. Set it on the flag field of\r\n * any method, field, or initializer you create!\r\n */\r\npublic static final int ECLIPSE_DO_NOT_TOUCH_FLAG = org.eclipse.jdt.internal.compiler.ast.ASTNode.Bit24;", "visibility": "public", "simpleName": "ECLIPSE_DO_NOT_TOUCH_FLAG", "qualifiedName": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "qualifiedName": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "kind": "method", "sourceText": "private void addProblem(lombok.eclipse.EclipseAST.ParseProblem problem) {\r\n    this.queuedProblems.add(problem);\r\n    this.propagateProblems();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleSetter()", "kind": "constructor", "sourceText": "HandleSetter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getStatementTypes()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getStatementTypes()", "qualifiedName": "lombok.core.AST.getStatementTypes()", "kind": "method", "sourceText": "/**\r\n * The supertypes which are considered AST Node children. Usually, the Statement, and the Expression,\r\n * though some platforms (such as Eclipse) group these under one common supertype.\r\n */\r\nprotected abstract java.util.Collection<java.lang.Class<? extends N>> getStatementTypes();", "docComment": "The supertypes which are considered AST Node children. Usually, the Statement, and the Expression,\r\nthough some platforms (such as Eclipse) group these under one common supertype.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.message", "labels": ["Variable"], "properties": {"sourceText": "final java.lang.String message;", "visibility": "default", "simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem.message", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).2", "labels": ["Variable"], "properties": {"simpleName": "chain", "qualifiedName": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).0", "labels": ["Variable"], "properties": {"simpleName": "dllName", "qualifiedName": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "kind": "method", "sourceText": "private void checkForBogusExcludes(lombok.javac.JavacAST.Node type, lombok.core.AnnotationValues<lombok.EqualsAndHashCode> annotation) {\r\n    com.sun.tools.javac.util.List<java.lang.String> list = com.sun.tools.javac.util.List.from(annotation.getInstance().exclude());\r\n    boolean[] matched = new boolean[list.size()];\r\n    for (lombok.javac.JavacAST.Node child : type.down()) {\r\n        if (list.isEmpty()) {\r\n            break;\r\n        }\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        if ((((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (child.get())).mods.flags & com.sun.tools.javac.code.Flags.STATIC) != 0) {\r\n            continue;\r\n        }\r\n        if ((((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (child.get())).mods.flags & com.sun.tools.javac.code.Flags.TRANSIENT) != 0) {\r\n            continue;\r\n        }\r\n        int idx = list.indexOf(child.getName());\r\n        if (idx > (-1)) {\r\n            matched[idx] = true;\r\n        }\r\n    }\r\n    for (int i = 0; i < list.size(); i++) {\r\n        if (!matched[i]) {\r\n            annotation.setWarning(\"exclude\", \"This field does not exist, or would have been excluded anyway.\", i);\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getImportStatements()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getImportStatements()", "qualifiedName": "lombok.eclipse.EclipseAST.getImportStatements()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.util.Collection<java.lang.String> getImportStatements() {\r\n    java.util.List<java.lang.String> imports = new java.util.ArrayList<java.lang.String>();\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration cud = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (this.top().get()));\r\n    if (cud.imports == null) {\r\n        return imports;\r\n    }\r\n    for (org.eclipse.jdt.internal.compiler.ast.ImportReference imp : cud.imports) {\r\n        if (imp == null) {\r\n            continue;\r\n        }\r\n        imports.add(lombok.eclipse.Eclipse.toQualifiedName(imp.getImportName()));\r\n    }\r\n    return imports;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "labels": ["Variable"], "properties": {"sourceText": "final java.lang.String exceptionName;", "visibility": "default", "simpleName": "exceptionName", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "valueGuess", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "java.lang.String", "labels": ["Structure"], "properties": {"simpleName": "String", "qualifiedName": "java.lang.String", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "qualifiedName": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type) {\r\n    if (this.setAndGetAsHandled(type)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    childNodes.addAll(this.buildFields(type.fields));\r\n    childNodes.addAll(this.buildTypes(type.memberTypes));\r\n    childNodes.addAll(this.buildMethods(type.methods));\r\n    childNodes.addAll(this.buildAnnotations(type.annotations));\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(type, childNodes, lombok.core.AST.Kind.TYPE));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "method", "sourceText": "void endVisitCompilationUnit(lombok.eclipse.EclipseAST.Node top, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.EqualsAndHashCode</code> annotation for javac.\r\n", "simpleName": "HandleEqualsAndHashCode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[]).0", "labels": ["Variable"], "properties": {"simpleName": "refs", "qualifiedName": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Synchronized</code> annotation for eclipse.\r\n", "simpleName": "HandleSynchronized", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.log", "labels": ["Variable"], "properties": {"sourceText": "private final com.sun.tools.javac.util.Log log;", "visibility": "private", "simpleName": "log", "qualifiedName": "lombok.javac.JavacAST.log", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "protected", "simpleName": "<init>(java.lang.String)", "qualifiedName": "lombok.core.AST(java.lang.String)", "kind": "constructor", "sourceText": "protected AST(java.lang.String fileName) {\r\n    super();\r\n    this.fileName = (fileName == null) ? \"(unknown).java\" : fileName;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "qualifiedName": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "kind": "method", "sourceText": "private java.util.List<? extends java.lang.Object> replaceInConsList(java.util.List<? extends java.lang.Object> oldL, java.lang.Object oldO, java.lang.Object newO) {\r\n    boolean repl = false;\r\n    java.lang.Object[] a = oldL.toArray();\r\n    for (int i = 0; i < a.length; i++) {\r\n        if (a[i] == oldO) {\r\n            a[i] = newO;\r\n            repl = true;\r\n        }\r\n    }\r\n    if (repl) {\r\n        return java.util.List.<java.lang.Object>from(a);\r\n    } else {\r\n        return oldL;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitMethod(lombok.eclipse.EclipseAST.Node methodNode, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "qualifiedName": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl local, lombok.core.AST.Kind kind) {\r\n    if (this.setAndGetAsHandled(local)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.javac.JavacAST.Node> childNodes = new java.util.ArrayList<lombok.javac.JavacAST.Node>();\r\n    for (com.sun.tools.javac.tree.JCTree.JCAnnotation annotation : local.mods.annotations) {\r\n        lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildAnnotation(annotation));\r\n    }\r\n    lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildExpression(local.init));\r\n    return this.putInMap(new lombok.javac.JavacAST.Node(local, childNodes, kind));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "kind": "constructor", "sourceText": "public LombokProblem(char[] originatingFileName, java.lang.String message, int id, java.lang.String[] stringArguments, int severity, int startPosition, int endPosition, int line, int column) {\r\n    super(originatingFileName, message, id, stringArguments, severity, startPosition, endPosition, line, column);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "kind": "method", "sourceText": "private void doAssignmentCheck0(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Statement statement, char[] varName) {\r\n    if (statement instanceof org.eclipse.jdt.internal.compiler.ast.Assignment) {\r\n        this.doAssignmentCheck0(node, ((org.eclipse.jdt.internal.compiler.ast.Assignment) (statement)).expression, varName);\r\n    } else if (statement instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {\r\n        this.doAssignmentCheck0(node, ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (statement)).initialization, varName);\r\n    } else if (statement instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {\r\n        this.doAssignmentCheck0(node, ((org.eclipse.jdt.internal.compiler.ast.CastExpression) (statement)).expression, varName);\r\n    } else if (statement instanceof org.eclipse.jdt.internal.compiler.ast.SingleNameReference) {\r\n        if (java.util.Arrays.equals(((org.eclipse.jdt.internal.compiler.ast.SingleNameReference) (statement)).token, varName)) {\r\n            lombok.eclipse.EclipseAST.Node problemNode = node.getNodeFor(statement);\r\n            if (problemNode != null) {\r\n                problemNode.addWarning(\"You're assigning an auto-cleanup variable to something else. This is a bad idea.\");\r\n            }\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).2", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "typeName", "qualifiedName": "lombok.core.AnnotationValues.toFQ(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.directUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "directUp()", "qualifiedName": "lombok.javac.JavacAST$Node.directUp()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.javac.JavacAST.Node directUp() {\r\n    return ((lombok.javac.JavacAST.Node) (super.directUp()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl type, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit top = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (annotationNode.top().get()));\r\n    boolean handled = this.handlers.handleAnnotation(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Data.staticConstructor()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "staticConstructor()", "qualifiedName": "lombok.Data.staticConstructor()", "kind": "method", "sourceText": "/**\r\n * If you specify a static constructor name, then the generated constructor will be private, and\r\n * instead a static factory method is created that other classes can use to create instances.\r\n * We suggest the name: \"of\", like so:\r\n *\r\n * <pre>\r\n * public @Data(staticConstructor = \"of\") class Point { final int x, y; }\r\n * </pre>\r\n *\r\n * Default: No static constructor, instead the normal constructor is public.\r\n */\r\njava.lang.String staticConstructor() default \"\";", "docComment": "If you specify a static constructor name, then the generated constructor will be private, and\r\ninstead a static factory method is created that other classes can use to create instances.\r\nWe suggest the name: \"of\", like so:\r\n\r\n<pre>\r\n    public @Data(staticConstructor = \"of\") class Point { final int x, y; }\r\n</pre>\r\n\r\nDefault: No static constructor, instead the normal constructor is public.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleToString()", "kind": "constructor", "sourceText": "HandleToString() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "toQualifiedName(char[][])", "qualifiedName": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "kind": "static method", "sourceText": "/**\r\n * For 'speed' reasons, Eclipse works a lot with char arrays. I have my doubts this was a fruitful exercise,\r\n * but we need to deal with it. This turns [[java][lang][String]] into \"java.lang.String\".\r\n */\r\nstatic java.lang.String toQualifiedName(char[][] typeName) {\r\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\r\n    boolean first = true;\r\n    for (char[] c : typeName) {\r\n        sb.append(first ? \"\" : \".\").append(c);\r\n        first = false;\r\n    }\r\n    return sb.toString();\r\n}", "docComment": "For 'speed' reasons, Eclipse works a lot with char arrays. I have my doubts this was a fruitful exercise,\r\nbut we need to deal with it. This turns [[java][lang][String]] into \"java.lang.String\".\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "methodName", "qualifiedName": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).3", "labels": ["Variable"], "properties": {"simpleName": "collection", "qualifiedName": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "qualifiedName": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "kind": "method", "sourceText": "private java.util.Collection<lombok.eclipse.EclipseAST.Node> buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations) {\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> elements = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    if (annotations != null) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.Annotation an : annotations) {\r\n            this.addIfNotNull(elements, this.buildAnnotation(an));\r\n        }\r\n    }\r\n    return elements;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.Setter> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    lombok.javac.JavacAST.Node fieldNode = annotationNode.up();\r\n    lombok.AccessLevel level = annotation.getInstance().value();\r\n    return this.createSetterForField(level, fieldNode, annotationNode, annotationNode.get(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "labels": ["Variable"], "properties": {"simpleName": "list", "qualifiedName": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "oldN", "qualifiedName": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "private void traverseChildren(lombok.javac.JavacASTVisitor visitor, lombok.javac.JavacAST.Node node) {\r\n    for (lombok.javac.JavacAST.Node child : new java.util.ArrayList<lombok.javac.JavacAST.Node>(node.down())) {\r\n        child.traverse(visitor);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "potentialMatches", "qualifiedName": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCMethodDecl createHashCode(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> fields, boolean callSuper) {\r\n    com.sun.tools.javac.tree.TreeMaker maker = typeNode.getTreeMaker();\r\n    com.sun.tools.javac.tree.JCTree.JCAnnotation overrideAnnotation = maker.Annotation(lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"lang\", \"Override\"), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil());\r\n    com.sun.tools.javac.tree.JCTree.JCModifiers mods = maker.Modifiers(Flags.PUBLIC, com.sun.tools.javac.util.List.of(overrideAnnotation));\r\n    com.sun.tools.javac.tree.JCTree.JCExpression returnType = maker.TypeIdent(TypeTags.INT);\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> statements = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.Name primeName = typeNode.toName(\"PRIME\");\r\n    com.sun.tools.javac.util.Name resultName = typeNode.toName(\"result\");\r\n    {\r\n        if ((!fields.isEmpty()) || callSuper) {\r\n            statements = statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL), primeName, maker.TypeIdent(TypeTags.INT), maker.Literal(31)));\r\n        }\r\n    }\r\n    {\r\n        statements = statements.append(maker.VarDef(maker.Modifiers(0), resultName, maker.TypeIdent(TypeTags.INT), maker.Literal(1)));\r\n    }\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> intoResult = com.sun.tools.javac.util.List.nil();\r\n    if (callSuper) {\r\n        com.sun.tools.javac.tree.JCTree.JCMethodInvocation callToSuper = maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), maker.Select(maker.Ident(typeNode.toName(\"super\")), typeNode.toName(\"hashCode\")), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil());\r\n        intoResult = intoResult.append(callToSuper);\r\n    }\r\n    int tempCounter = 0;\r\n    for (lombok.javac.JavacAST.Node fieldNode : fields) {\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl field = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fieldNode.get()));\r\n        com.sun.tools.javac.tree.JCTree.JCExpression fType = field.vartype;\r\n        com.sun.tools.javac.tree.JCTree.JCExpression thisDotField = maker.Select(maker.Ident(typeNode.toName(\"this\")), field.name);\r\n        com.sun.tools.javac.tree.JCTree.JCExpression thisDotFieldClone = maker.Select(maker.Ident(typeNode.toName(\"this\")), field.name);\r\n        if (fType instanceof com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree) {\r\n            switch (((com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree) (fType)).getPrimitiveTypeKind()) {\r\n                case BOOLEAN :\r\n                    /* this.fieldName ? 1231 : 1237 */\r\n                    intoResult = intoResult.append(maker.Conditional(thisDotField, maker.Literal(1231), maker.Literal(1237)));\r\n                    break;\r\n                case LONG :\r\n                    intoResult = intoResult.append(this.longToIntForHashCode(maker, thisDotField, thisDotFieldClone));\r\n                    break;\r\n                case FLOAT :\r\n                    /* Float.floatToIntBits(this.fieldName) */\r\n                    intoResult = intoResult.append(maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"lang\", \"Float\", \"floatToIntBits\"), com.sun.tools.javac.util.List.of(thisDotField)));\r\n                    break;\r\n                case DOUBLE :\r\n                    /* longToIntForHashCode(Double.doubleToLongBits(this.fieldName)) */\r\n                    com.sun.tools.javac.util.Name tempVar = typeNode.toName(\"temp\" + (++tempCounter));\r\n                    com.sun.tools.javac.tree.JCTree.JCExpression init = maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"lang\", \"Double\", \"doubleToLongBits\"), com.sun.tools.javac.util.List.of(thisDotField));\r\n                    statements = statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL), tempVar, maker.TypeIdent(TypeTags.LONG), init));\r\n                    intoResult = intoResult.append(this.longToIntForHashCode(maker, maker.Ident(tempVar), maker.Ident(tempVar)));\r\n                    break;\r\n                default :\r\n                case BYTE :\r\n                case SHORT :\r\n                case INT :\r\n                case CHAR :\r\n                    /* just the field */\r\n                    intoResult = intoResult.append(thisDotField);\r\n                    break;\r\n            }\r\n        } else if (fType instanceof com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) {\r\n            /* java.util.Arrays.deepHashCode(this.fieldName) //use just hashCode() for primitive arrays. */\r\n            boolean multiDim = ((com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) (fType)).elemtype instanceof com.sun.tools.javac.tree.JCTree.JCArrayTypeTree;\r\n            boolean primitiveArray = ((com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) (fType)).elemtype instanceof com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree;\r\n            boolean useDeepHC = multiDim || (!primitiveArray);\r\n            com.sun.tools.javac.tree.JCTree.JCExpression hcMethod = lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"util\", \"Arrays\", useDeepHC ? \"deepHashCode\" : \"hashCode\");\r\n            intoResult = intoResult.append(maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), hcMethod, com.sun.tools.javac.util.List.of(thisDotField)));\r\n        } else {\r\n            /* this.fieldName == null ? 0 : this.fieldName.hashCode() */\r\n            com.sun.tools.javac.tree.JCTree.JCExpression hcCall = maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), maker.Select(thisDotField, typeNode.toName(\"hashCode\")), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil());\r\n            com.sun.tools.javac.tree.JCTree.JCExpression thisEqualsNull = maker.Binary(JCTree.EQ, thisDotField, maker.Literal(TypeTags.BOT, null));\r\n            intoResult = intoResult.append(maker.Conditional(thisEqualsNull, maker.Literal(0), hcCall));\r\n        }\r\n    }\r\n    /* fold each intoResult entry into:\n    result = result * PRIME + (item);\n     */\r\n    for (com.sun.tools.javac.tree.JCTree.JCExpression expr : intoResult) {\r\n        com.sun.tools.javac.tree.JCTree.JCExpression mult = maker.Binary(JCTree.MUL, maker.Ident(resultName), maker.Ident(primeName));\r\n        com.sun.tools.javac.tree.JCTree.JCExpression add = maker.Binary(JCTree.PLUS, mult, expr);\r\n        statements = statements.append(maker.Exec(maker.Assign(maker.Ident(resultName), add)));\r\n    }\r\n    {\r\n        statements = statements.append(maker.Return(maker.Ident(resultName)));\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCBlock body = maker.Block(0, statements);\r\n    return maker.MethodDef(mods, typeNode.toName(\"hashCode\"), returnType, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCTypeParameter>nil(), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCVariableDecl>nil(), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), body, null);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addError(java.lang.String)", "qualifiedName": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generates an compiler error focused on the AST node represented by this node object.\r\n */\r\npublic void addError(java.lang.String message) {\r\n    this.printMessage(javax.tools.Diagnostic.Kind.ERROR, message, this, null);\r\n}", "docComment": "Generates an compiler error focused on the AST node represented by this node object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "labels": ["Variable"], "properties": {"sourceText": "private static final char[] INSTANCE_LOCK_NAME = \"$lock\".toCharArray();", "visibility": "private", "simpleName": "INSTANCE_LOCK_NAME", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "selectedLomboksChanged(java.util.List)", "qualifiedName": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "kind": "method", "sourceText": "void selectedLomboksChanged(java.util.List<lombok.installer.EclipseLocation> selectedEclipses) {\r\n    boolean uninstallAvailable = false;\r\n    boolean installAvailable = false;\r\n    for (lombok.installer.EclipseLocation loc : selectedEclipses) {\r\n        if (loc.hasLombok()) {\r\n            uninstallAvailable = true;\r\n        }\r\n        installAvailable = true;\r\n    }\r\n    this.uninstallButton.setVisible(uninstallAvailable);\r\n    this.uninstallPlaceholder.setVisible(!uninstallAvailable);\r\n    this.installButton.setEnabled(installAvailable);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "/**\r\n * Visits a local declaration - that is, something like 'int x = 10;' on the method level. Also called\r\n * for method parameters.\r\n */\r\nvoid visitLocal(lombok.javac.JavacAST.Node localNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl local);", "docComment": "Visits a local declaration - that is, something like 'int x = 10;' on the method level. Also called\r\nfor method parameters.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstallPlaceholder", "labels": ["Variable"], "properties": {"sourceText": "private javax.swing.JLabel uninstallPlaceholder;", "visibility": "private", "simpleName": "uninstallPlaceholder", "qualifiedName": "lombok.installer.Installer.uninstallPlaceholder", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "putInMap(lombok.core.AST$Node)", "qualifiedName": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "kind": "method", "sourceText": "/**\r\n * Puts the given node in the map so that javac/Eclipse's own internal AST object can be translated to\r\n * an AST.Node object. Also registers the object as visited to avoid endless loops.\r\n */\r\nprotected <T extends lombok.core.AST<N>.Node> T putInMap(T node) {\r\n    this.nodeMap.put(node.get(), node);\r\n    this.identityDetector.put(node.get(), null);\r\n    return node;\r\n}", "docComment": "Puts the given node in the map so that javac/Eclipse's own internal AST object can be translated to\r\nan AST.Node object. Also registers the object as visited to avoid endless loops.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "labels": ["Variable"], "properties": {"simpleName": "dim", "qualifiedName": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "kind": "method", "sourceText": "public boolean generateMethods(lombok.eclipse.EclipseAST.Node typeNode, lombok.eclipse.EclipseAST.Node errorNode, java.util.List<java.lang.String> excludes, boolean callSuper, boolean whineIfExists) {\r\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = null;\r\n    if (typeNode.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (typeNode.get()));\r\n    }\r\n    int modifiers = (typeDecl == null) ? 0 : typeDecl.modifiers;\r\n    boolean notAClass = (modifiers & ((org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccInterface | org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccAnnotation) | org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccEnum)) != 0;\r\n    if ((typeDecl == null) || notAClass) {\r\n        errorNode.addError(\"@EqualsAndHashCode is only supported on a class.\");\r\n        return false;\r\n    }\r\n    boolean isDirectDescendentOfObject = true;\r\n    if (typeDecl.superclass != null) {\r\n        java.lang.String p = typeDecl.superclass.toString();\r\n        isDirectDescendentOfObject = p.equals(\"Object\") || p.equals(\"java.lang.Object\");\r\n    }\r\n    if (isDirectDescendentOfObject && callSuper) {\r\n        errorNode.addError(\"Generating equals/hashCode with a supercall to java.lang.Object is pointless.\");\r\n        return true;\r\n    }\r\n    if ((!isDirectDescendentOfObject) && (!callSuper)) {\r\n        errorNode.addWarning(\"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object.\");\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> nodesForEquality = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    for (lombok.eclipse.EclipseAST.Node child : typeNode.down()) {\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (child.get()));\r\n        // Skip static fields.\r\n        if ((fieldDecl.modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccStatic) != 0) {\r\n            continue;\r\n        }\r\n        // Skip transient fields.\r\n        if ((fieldDecl.modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccTransient) != 0) {\r\n            continue;\r\n        }\r\n        // Skip excluded fields.\r\n        if (excludes.contains(new java.lang.String(fieldDecl.name))) {\r\n            continue;\r\n        }\r\n        nodesForEquality.add(child);\r\n    }\r\n    switch (lombok.eclipse.handlers.PKG.methodExists(\"hashCode\", typeNode)) {\r\n        case NOT_EXISTS :\r\n            org.eclipse.jdt.internal.compiler.ast.MethodDeclaration hashCode = this.createHashCode(typeNode, nodesForEquality, callSuper, errorNode.get());\r\n            lombok.eclipse.handlers.PKG.injectMethod(typeNode, hashCode);\r\n            break;\r\n        case EXISTS_BY_LOMBOK :\r\n            break;\r\n        default :\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(\"Not generating hashCode(): A method with that name already exists\");\r\n            }\r\n            break;\r\n    }\r\n    switch (lombok.eclipse.handlers.PKG.methodExists(\"equals\", typeNode)) {\r\n        case NOT_EXISTS :\r\n            org.eclipse.jdt.internal.compiler.ast.MethodDeclaration equals = this.createEquals(typeNode, nodesForEquality, callSuper, errorNode.get());\r\n            lombok.eclipse.handlers.PKG.injectMethod(typeNode, equals);\r\n            break;\r\n        case EXISTS_BY_LOMBOK :\r\n            break;\r\n        default :\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(\"Not generating equals(Object other): A method with that name already exists\");\r\n            }\r\n            break;\r\n    }\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).3", "labels": ["Variable"], "properties": {"simpleName": "stringArguments", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "kind": "method", "sourceText": "private void doAssignmentCheck0(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree statement, com.sun.tools.javac.util.Name name) {\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCAssign) {\r\n        this.doAssignmentCheck0(node, ((com.sun.tools.javac.tree.JCTree.JCAssign) (statement)).rhs, name);\r\n    }\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCExpressionStatement) {\r\n        this.doAssignmentCheck0(node, ((com.sun.tools.javac.tree.JCTree.JCExpressionStatement) (statement)).expr, name);\r\n    }\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCVariableDecl) {\r\n        this.doAssignmentCheck0(node, ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (statement)).init, name);\r\n    }\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCTypeCast) {\r\n        this.doAssignmentCheck0(node, ((com.sun.tools.javac.tree.JCTree.JCTypeCast) (statement)).expr, name);\r\n    }\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCIdent) {\r\n        if (((com.sun.tools.javac.tree.JCTree.JCIdent) (statement)).name.contentEquals(name)) {\r\n            lombok.javac.JavacAST.Node problemNode = node.getNodeFor(statement);\r\n            if (problemNode != null) {\r\n                problemNode.addWarning(\"You're assigning an auto-cleanup variable to something else. This is a bad idea.\");\r\n            }\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.TYPE", "labels": ["Variable"], "properties": {"sourceText": "TYPE()", "visibility": "public", "simpleName": "TYPE", "qualifiedName": "lombok.core.AST$Kind.TYPE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "kind": "static method", "sourceText": "/**\r\n * Generates an error in the Eclipse error log. Note that most people never look at it!\r\n */\r\npublic static void error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration cud, java.lang.String message, java.lang.Throwable error) {\r\n    lombok.eclipse.Eclipse.error(cud, message, lombok.eclipse.Eclipse.DEFAULT_BUNDLE, error);\r\n}", "docComment": "Generates an error in the Eclipse error log. Note that most people never look at it!\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "qualifiedName": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "kind": "static method", "sourceText": "private static lombok.core.AnnotationValues.AnnotationValueDecodeFail makeNoDefaultFail(lombok.core.AnnotationValues.AnnotationValue owner, java.lang.reflect.Method method) {\r\n    return new lombok.core.AnnotationValues.AnnotationValueDecodeFail(owner, (\"No value supplied but \" + method.getName()) + \" has no default either.\", -1);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.core.AST$Kind()", "kind": "constructor", "sourceText": "Kind() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "kind": "method", "sourceText": "private boolean handleMethod(lombok.javac.JavacAST.Node annotation, com.sun.tools.javac.tree.JCTree.JCMethodDecl method, java.util.Collection<java.lang.String> exceptions) {\r\n    lombok.javac.JavacAST.Node methodNode = annotation.up();\r\n    if ((method.mods.flags & com.sun.tools.javac.code.Flags.ABSTRACT) != 0) {\r\n        annotation.addError(\"@SneakyThrows can only be used on concrete methods.\");\r\n        return true;\r\n    }\r\n    if (method.body == null) {\r\n        return false;\r\n    }\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> contents = method.body.stats;\r\n    for (java.lang.String exception : exceptions) {\r\n        contents = com.sun.tools.javac.util.List.of(this.buildTryCatchBlock(methodNode, contents, exception));\r\n    }\r\n    method.body.stats = contents;\r\n    methodNode.rebuild();\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).2", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "traverse(lombok.eclipse.EclipseASTVisitor)", "qualifiedName": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "kind": "method", "sourceText": "/**\r\n * Runs through the entire AST, starting at the compilation unit, calling the provided visitor's visit methods\r\n * for each node, depth first.\r\n */\r\npublic void traverse(lombok.eclipse.EclipseASTVisitor visitor) {\r\n    this.top().traverse(visitor);\r\n}", "docComment": "Runs through the entire AST, starting at the compilation unit, calling the provided visitor's visit methods\r\nfor each node, depth first.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues", "labels": ["Structure", "Container"], "properties": {"docComment": "Represents a single annotation in a source file and can be used to query the parameters present on it.\r\n", "simpleName": "AnnotationValues", "qualifiedName": "lombok.core.AnnotationValues", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "n", "qualifiedName": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.kind", "labels": ["Variable"], "properties": {"sourceText": "protected final lombok.core.AST.Kind kind;", "visibility": "protected", "simpleName": "kind", "qualifiedName": "lombok.core.AST$Node.kind", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.values", "labels": ["Variable"], "properties": {"sourceText": "private final java.util.Map<java.lang.String, lombok.core.AnnotationValues.AnnotationValue> values;", "visibility": "private", "simpleName": "values", "qualifiedName": "lombok.core.AnnotationValues.values", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).2", "labels": ["Variable"], "properties": {"simpleName": "valueGuesses", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "boolean", "labels": ["Primitive"], "properties": {"simpleName": "boolean", "qualifiedName": "boolean", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "packageString", "qualifiedName": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.EclipseASTAdapter()", "kind": "constructor", "sourceText": "EclipseASTAdapter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "kind": "method", "sourceText": "private boolean createGetterForField(lombok.AccessLevel level, lombok.javac.JavacAST.Node fieldNode, lombok.javac.JavacAST.Node errorNode, com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition pos, boolean whineIfExists) {\r\n    if (fieldNode.getKind() != lombok.core.AST.Kind.FIELD) {\r\n        errorNode.addError(\"@Getter is only supported on a field.\");\r\n        return true;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldDecl = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fieldNode.get()));\r\n    java.lang.String methodName = lombok.javac.handlers.PKG.toGetterName(fieldDecl);\r\n    for (java.lang.String altName : lombok.javac.handlers.PKG.toAllGetterNames(fieldDecl)) {\r\n        switch (lombok.javac.handlers.PKG.methodExists(altName, fieldNode)) {\r\n            case EXISTS_BY_LOMBOK :\r\n                return true;\r\n            case EXISTS_BY_USER :\r\n                if (whineIfExists) {\r\n                    java.lang.String altNameExpl = \"\";\r\n                    if (!altName.equals(methodName)) {\r\n                        altNameExpl = java.lang.String.format(\" (%s)\", altName);\r\n                    }\r\n                    errorNode.addWarning(java.lang.String.format(\"Not generating %s(): A method with that name already exists%s\", methodName, altNameExpl));\r\n                }\r\n                return true;\r\n            default :\r\n            case NOT_EXISTS :\r\n                // continue scanning the other alt names.\r\n        }\r\n    }\r\n    long access = lombok.javac.handlers.PKG.toJavacModifier(level) | (fieldDecl.mods.flags & com.sun.tools.javac.code.Flags.STATIC);\r\n    lombok.javac.handlers.PKG.injectMethod(fieldNode.up(), this.createGetter(access, fieldNode, fieldNode.getTreeMaker()));\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).0", "labels": ["Variable"], "properties": {"simpleName": "contents", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.ABOUT_LOMBOK_URL", "labels": ["Variable"], "properties": {"sourceText": "private static final java.net.URI ABOUT_LOMBOK_URL = java.net.URI.create(\"http://projectlombok.org\");", "visibility": "private", "simpleName": "ABOUT_LOMBOK_URL", "qualifiedName": "lombok.installer.Installer.ABOUT_LOMBOK_URL", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "addToCompilationResult()", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "kind": "method", "sourceText": "void addToCompilationResult() {\r\n    lombok.eclipse.EclipseAST.addProblemToCompilationResult(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (this.top().get())), this.isWarning, this.message, this.sourceStart, this.sourceEnd);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitStatement(lombok.eclipse.EclipseAST.Node statementNode, org.eclipse.jdt.internal.compiler.ast.Statement statement) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter", "labels": ["Structure"], "properties": {"docComment": "Standard adapter for the {@link JavacASTVisitor} interface. Every method on that interface\r\nhas been implemented with an empty body. Override whichever methods you need.\r\n", "simpleName": "JavacASTAdapter", "qualifiedName": "lombok.javac.JavacASTAdapter", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[]).0", "labels": ["Variable"], "properties": {"simpleName": "params", "qualifiedName": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES", "labels": ["Variable"], "properties": {"sourceText": "private static final java.util.Set<java.lang.String> BUILT_IN_TYPES = java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"byte\", \"short\", \"int\", \"long\", \"char\", \"boolean\", \"double\", \"float\")));", "visibility": "private", "simpleName": "BUILT_IN_TYPES", "qualifiedName": "lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.handleException(java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "t", "qualifiedName": "lombok.installer.Installer.handleException(java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "long", "labels": ["Primitive"], "properties": {"simpleName": "long", "qualifiedName": "long", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "public void visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    this.print(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST", "labels": ["Structure", "Container"], "properties": {"docComment": "Entry point for the Eclipse Parser patch that lets lombok modify the Abstract Syntax Tree as generated by\r\nEclipse's parser implementations. This class is injected into the appropriate OSGi ClassLoader and can thus\r\nuse any classes that belong to org.eclipse.jdt.(apt.)core.\r\n\r\nNote that, for any Method body, if Bit24 is set, the Eclipse parser has been patched to never attempt to\r\n(re)parse it. You should set Bit24 on any MethodDeclaration object you inject into the AST:\r\n\r\n<code>methodDeclaration.bits |= ASTNode.Bit24; //0x800000</code>\r\n\r\n@author rzwitserloot\r\n@author rspilker\r\n", "simpleName": "TransformEclipseAST", "qualifiedName": "lombok.eclipse.TransformEclipseAST", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "kind": "constructor", "sourceText": "AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler<T> handler, java.lang.Class<T> annotationClass) {\r\n    super();\r\n    this.handler = handler;\r\n    this.annotationClass = annotationClass;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getSymbolTable()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getSymbolTable()", "qualifiedName": "lombok.javac.JavacAST.getSymbolTable()", "kind": "method", "sourceText": "/**\r\n *\r\n * @return The symbol table used by this AST for symbols.\r\n */\r\npublic com.sun.tools.javac.code.Symtab getSymbolTable() {\r\n    return this.symtab;\r\n}", "docComment": "\r\n@return The symbol table used by this AST for symbols.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler", "labels": ["Structure"], "properties": {"docComment": "Implement this interface if you want to be triggered for a specific annotation.\r\n\r\nYou MUST replace 'T' with a specific annotation type, such as:\r\n\r\n<code>public class HandleGetter implements JavacAnnotationHandler&lt;<b>Getter</b>&gt;</code>\r\n\r\nBecause this generics parameter is inspected to figure out which class you're interested in.\r\n\r\nYou also need to register yourself via SPI discovery as being an implementation of <code>JavacAnnotationHandler</code>.\r\n", "simpleName": "JavacAnnotationHandler", "qualifiedName": "lombok.javac.JavacAnnotationHandler", "kind": "interface", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock).0", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "go()", "qualifiedName": "lombok.eclipse.TransformEclipseAST.go()", "kind": "method", "sourceText": "/**\r\n * First handles all lombok annotations except PrintAST, then calls all non-annotation based handlers.\r\n * then handles any PrintASTs.\r\n */\r\npublic void go() {\r\n    lombok.eclipse.TransformEclipseAST.handlers.skipPrintAST();\r\n    this.ast.traverse(new lombok.eclipse.TransformEclipseAST.AnnotationVisitor());\r\n    lombok.eclipse.TransformEclipseAST.handlers.callASTVisitors(this.ast);\r\n    lombok.eclipse.TransformEclipseAST.handlers.skipAllButPrintAST();\r\n    this.ast.traverse(new lombok.eclipse.TransformEclipseAST.AnnotationVisitor());\r\n}", "docComment": "First handles all lombok annotations except PrintAST, then calls all non-annotation based handlers.\r\nthen handles any PrintASTs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode()", "kind": "constructor", "sourceText": "HandleEqualsAndHashCode() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addWarning(java.lang.String)", "qualifiedName": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generates a compiler warning focused on the AST node represented by this node object.\r\n */\r\npublic void addWarning(java.lang.String message) {\r\n    this.printMessage(javax.tools.Diagnostic.Kind.WARNING, message, this, null);\r\n}", "docComment": "Generates a compiler warning focused on the AST node represented by this node object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "labels": ["Variable"], "properties": {"sourceText": "EXISTS_BY_USER()", "visibility": "public", "simpleName": "EXISTS_BY_USER", "qualifiedName": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "/**\r\n * Visits a statement that isn't any of the other visit methods (e.g. JCClassDecl).\r\n * The statement object is guaranteed to be either a JCStatement or a JCExpression.\r\n */\r\nvoid visitStatement(lombok.javac.JavacAST.Node statementNode, com.sun.tools.javac.tree.JCTree statement);", "docComment": "Visits a statement that isn't any of the other visit methods (e.g. JCClassDecl).\r\nThe statement object is guaranteed to be either a JCStatement or a JCExpression.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.directUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "directUp()", "qualifiedName": "lombok.core.AST$Node.directUp()", "kind": "method", "sourceText": "/**\r\n * Returns the direct parent node in the AST tree of this node. For example, a local variable declaration's\r\n * direct parent can be e.g. an If block, but its up() Node is the Method that contains it.\r\n */\r\npublic lombok.core.AST<N>.Node directUp() {\r\n    return this.parent;\r\n}", "docComment": "Returns the direct parent node in the AST tree of this node. For example, a local variable declaration's\r\ndirect parent can be e.g. an If block, but its up() Node is the Method that contains it.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(boolean)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)", "kind": "constructor", "sourceText": "/**\r\n *\r\n * @param printContent\r\n * \t\tif true, bodies are printed directly, as java code,\r\n * \t\tinstead of a tree listing of every AST node inside it.\r\n */\r\npublic Printer(boolean printContent) {\r\n    this(printContent, java.lang.System.out);\r\n}", "docComment": "\r\n@param printContent\r\n\t\tif true, bodies are printed directly, as java code,\r\n\t\tinstead of a tree listing of every AST node inside it.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "labels": ["Variable"], "properties": {"sourceText": "final int sourceEnd;", "visibility": "default", "simpleName": "sourceEnd", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.Getter> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    lombok.javac.JavacAST.Node fieldNode = annotationNode.up();\r\n    lombok.AccessLevel level = annotation.getInstance().value();\r\n    return this.createGetterForField(level, fieldNode, annotationNode, annotationNode.get(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "qualifiedName": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "kind": "method", "sourceText": "/**\r\n * Uses reflection to find the given direct child on the given statement, and replace it with a new child.\r\n */\r\nprotected boolean replaceStatementInNode(N statement, N oldN, N newN) {\r\n    for (lombok.core.AST.FieldAccess fa : this.fieldsOf(statement.getClass())) {\r\n        if (this.replaceStatementInField(fa, statement, oldN, newN)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "Uses reflection to find the given direct child on the given statement, and replace it with a new child.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "labels": ["Variable"], "properties": {"sourceText": "NOT_EXISTS()", "visibility": "public", "simpleName": "NOT_EXISTS", "qualifiedName": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "eliminateImpossibleMatches(java.util.Collection)", "qualifiedName": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "kind": "method", "sourceText": "private java.util.Collection<java.lang.String> eliminateImpossibleMatches(java.util.Collection<java.lang.String> potentialMatches) {\r\n    java.util.Set<java.lang.String> results = new java.util.HashSet<java.lang.String>();\r\n    for (java.lang.String importedType : this.imports) {\r\n        java.util.Collection<java.lang.String> reduced = new java.util.HashSet<java.lang.String>(this.library.findCompatible(importedType));\r\n        reduced.retainAll(potentialMatches);\r\n        results.addAll(reduced);\r\n    }\r\n    return results;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "kind": "method", "sourceText": "public void endVisitType(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    this.indent--;\r\n    this.print(\"</TYPE %s>\", this.str(type.name));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "labels": ["Variable"], "properties": {"sourceText": "EXISTS_BY_LOMBOK()", "visibility": "public", "simpleName": "EXISTS_BY_LOMBOK", "qualifiedName": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "labels": ["Constructor"], "properties": {"visibility": "protected", "simpleName": "<init>(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "qualifiedName": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "kind": "constructor", "sourceText": "/**\r\n * Creates a new Node object that represents the provided node.\r\n *\r\n * Make sure you manually set the parent correctly.\r\n *\r\n * @param node\r\n * \t\tThe AST object in the target parser's own internal AST tree that this node object will represent.\r\n * @param children\r\n * \t\tA list of child nodes. Passing in null results in the children list being empty, not null.\r\n * @param kind\r\n * \t\tThe kind of node represented by this object.\r\n */\r\nprotected Node(N node, java.util.List<? extends lombok.core.AST<N>.Node> children, lombok.core.AST.Kind kind) {\r\n    super();\r\n    this.kind = kind;\r\n    this.node = node;\r\n    this.children = (children == null) ? new java.util.ArrayList<lombok.core.AST<N>.Node>() : children;\r\n    for (lombok.core.AST<N>.Node child : this.children) {\r\n        child.parent = this;\r\n    }\r\n    this.isStructurallySignificant = this.calculateIsStructurallySignificant();\r\n}", "docComment": "Creates a new Node object that represents the provided node.\r\n\r\nMake sure you manually set the parent correctly.\r\n\r\n@param node\r\n\t\tThe AST object in the target parser's own internal AST tree that this node object will represent.\r\n@param children\r\n\t\tA list of child nodes. Passing in null results in the children list being empty, not null.\r\n@param kind\r\n\t\tThe kind of node represented by this object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "load(javax.annotation.processing.Messager)", "qualifiedName": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "kind": "static method", "sourceText": "/**\r\n * Creates a new HandlerLibrary that will report any problems or errors to the provided messager,\r\n * then uses SPI discovery to load all annotation and visitor based handlers so that future calls\r\n * to the handle methods will defer to these handlers.\r\n */\r\npublic static lombok.javac.HandlerLibrary load(javax.annotation.processing.Messager messager) {\r\n    lombok.javac.HandlerLibrary library = new lombok.javac.HandlerLibrary(messager);\r\n    lombok.javac.HandlerLibrary.loadAnnotationHandlers(library);\r\n    lombok.javac.HandlerLibrary.loadVisitorHandlers(library);\r\n    return library;\r\n}", "docComment": "Creates a new HandlerLibrary that will report any problems or errors to the provided messager,\r\nthen uses SPI discovery to load all annotation and visitor based handlers so that future calls\r\nto the handle methods will defer to these handlers.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).1", "labels": ["Variable"], "properties": {"simpleName": "t", "qualifiedName": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitMethod(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    this.indent--;\r\n    this.print(\"</%s %s>\", \"XMETHOD\", method.name);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "visitor", "qualifiedName": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).2", "labels": ["Variable"], "properties": {"simpleName": "varName", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.equals(java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "equals(java.lang.Object)", "qualifiedName": "lombok.installer.EclipseLocation.equals(java.lang.Object)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean equals(java.lang.Object o) {\r\n    if (!(o instanceof lombok.installer.EclipseLocation)) {\r\n        return false;\r\n    }\r\n    return ((lombok.installer.EclipseLocation) (o)).path.equals(this.path);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field) {\r\n    if (field instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {\r\n        return this.buildInitializer(((org.eclipse.jdt.internal.compiler.ast.Initializer) (field)));\r\n    }\r\n    if (this.setAndGetAsHandled(field)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    this.addIfNotNull(childNodes, this.buildStatement(field.initialization));\r\n    childNodes.addAll(this.buildAnnotations(field.annotations));\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(field, childNodes, lombok.core.AST.Kind.FIELD));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel", "labels": ["Structure"], "properties": {"docComment": "Represents an AccessLevel. Used e.g. to specify the access level for generated methods and fields.\r\n", "simpleName": "AccessLevel", "qualifiedName": "lombok.AccessLevel", "kind": "enum", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "methodName", "qualifiedName": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "excludes", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "labels": ["Variable"], "properties": {"sourceText": "final int sourceStart;", "visibility": "default", "simpleName": "sourceStart", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink.serialVersionUID", "labels": ["Variable"], "properties": {"sourceText": "private static final long serialVersionUID = 1L;", "visibility": "private", "simpleName": "serialVersionUID", "qualifiedName": "lombok.installer.Installer$JHyperLink.serialVersionUID", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.HandlerLibrary.javacError(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).7", "labels": ["Variable"], "properties": {"simpleName": "line", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).7", "kind": "parameter", "parameterPosition": 7, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized()", "kind": "constructor", "sourceText": "HandleSynchronized() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(java.lang.String)", "qualifiedName": "lombok.installer.EclipseLocation(java.lang.String)", "kind": "constructor", "sourceText": "/**\r\n * Create a new EclipseLocation by pointing at either the directory contain the Eclipse executable, or the executable itself.\r\n *\r\n * @throws NotAnEclipseException\r\n * \t\tIf this isn't an Eclipse executable or a directory with an Eclipse executable.\r\n */\r\nEclipseLocation(java.lang.String path) throws lombok.installer.EclipseLocation.NotAnEclipseException {\r\n    super();\r\n    if (path == null) {\r\n        throw new java.lang.NullPointerException(\"path\");\r\n    }\r\n    java.io.File p = new java.io.File(path);\r\n    if (!p.exists()) {\r\n        throw new lombok.installer.EclipseLocation.NotAnEclipseException(\"File does not exist: \" + path, null);\r\n    }\r\n    final java.lang.String execName = lombok.installer.EclipseFinder.getEclipseExecutableName();\r\n    if (p.isDirectory()) {\r\n        for (java.io.File f : p.listFiles()) {\r\n            if (f.getName().equalsIgnoreCase(execName)) {\r\n                p = f;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if ((!p.exists()) || (!p.getName().equalsIgnoreCase(execName))) {\r\n        throw new lombok.installer.EclipseLocation.NotAnEclipseException(\"This path does not appear to contain an Eclipse installation: \" + p, null);\r\n    }\r\n    this.path = p;\r\n    try {\r\n        this.hasLombok = this.checkForLombok();\r\n    } catch (java.io.IOException e) {\r\n        throw new lombok.installer.EclipseLocation.NotAnEclipseException(((\"I can't read the configuration file of the Eclipse installed at \" + this.path.getAbsolutePath()) + \"\\n\") + \"You may need to run this installer with root privileges if you want to modify that Eclipse.\", e);\r\n    }\r\n}", "docComment": "Create a new EclipseLocation by pointing at either the directory contain the Eclipse executable, or the executable itself.\r\n\r\n@throws NotAnEclipseException\r\n\t\tIf this isn't an Eclipse executable or a directory with an Eclipse executable.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException", "labels": ["Structure"], "properties": {"docComment": "Thrown when uninstalling lombok fails.\r\n", "simpleName": "UninstallException", "qualifiedName": "lombok.installer.EclipseLocation$UninstallException", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "AnnotationVisitor", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.skipAllButPrintAST()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skipAllButPrintAST()", "qualifiedName": "lombok.eclipse.HandlerLibrary.skipAllButPrintAST()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see #skipPrintAST()\r\n */\r\npublic void skipAllButPrintAST() {\r\n    this.skipPrintAST = false;\r\n}", "docComment": "\r\n@see #skipPrintAST()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String DEFAULT_BUNDLE = \"org.eclipse.jdt.core\";", "visibility": "private", "simpleName": "DEFAULT_BUNDLE", "qualifiedName": "lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "kind": "method", "sourceText": "void endVisitType(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.tree.JCTree.JCClassDecl type);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitType(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.tree.JCTree.JCClassDecl type) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "selectedEclipses", "qualifiedName": "lombok.installer.Installer.selectedLomboksChanged(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult", "labels": ["Structure"], "properties": {"docComment": "Serves as return value for the methods that check for the existence of fields and methods.\r\n", "simpleName": "MemberExistsResult", "qualifiedName": "lombok.javac.handlers.PKG$MemberExistsResult", "kind": "enum", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Cleanup.value()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "value()", "qualifiedName": "lombok.Cleanup.value()", "kind": "method", "sourceText": "/**\r\n * The name of the method that cleans up the resource. By default, 'close'. The method must not have any parameters.\r\n */\r\njava.lang.String value() default \"close\";", "docComment": "The name of the method that cleans up the resource. By default, 'close'. The method must not have any parameters.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "exceptionName", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "method", "sourceText": "void endVisitField(lombok.eclipse.EclipseAST.Node fieldNode, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.PrintAST.printContent()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "printContent()", "qualifiedName": "lombok.core.PrintAST.printContent()", "kind": "method", "sourceText": "/**\r\n * Sets whether to print node structure (false) or generated java code (true).\r\n *\r\n * By setting printContent to true, the annotated element's java code representation is printed. If false,\r\n * its node structure (e.g. node classname) is printed, and this process is repeated for all children.\r\n */\r\nboolean printContent() default false;", "docComment": "Sets whether to print node structure (false) or generated java code (true).\r\n\r\nBy setting printContent to true, the annotated element's java code representation is printed. If false,\r\nits node structure (e.g. node classname) is printed, and this process is repeated for all children.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.down()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "down()", "qualifiedName": "lombok.eclipse.EclipseAST$Node.down()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\n@java.lang.Override\r\npublic java.util.Collection<lombok.eclipse.EclipseAST.Node> down() {\r\n    return ((java.util.Collection<lombok.eclipse.EclipseAST.Node>) (super.down()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "maker", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "kind": "method", "sourceText": "private boolean createSetterForField(lombok.AccessLevel level, lombok.javac.JavacAST.Node fieldNode, lombok.javac.JavacAST.Node errorNode, com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition pos, boolean whineIfExists) {\r\n    if (fieldNode.getKind() != lombok.core.AST.Kind.FIELD) {\r\n        fieldNode.addError(\"@Setter is only supported on a field.\");\r\n        return true;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldDecl = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fieldNode.get()));\r\n    java.lang.String methodName = lombok.javac.handlers.PKG.toSetterName(fieldDecl);\r\n    switch (lombok.javac.handlers.PKG.methodExists(methodName, fieldNode)) {\r\n        case EXISTS_BY_LOMBOK :\r\n            return true;\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(java.lang.String.format(\"Not generating %s(%s %s): A method with that name already exists\", methodName, fieldDecl.vartype, fieldDecl.name));\r\n            }\r\n            return true;\r\n        default :\r\n        case NOT_EXISTS :\r\n            // continue with creating the setter\r\n    }\r\n    long access = lombok.javac.handlers.PKG.toJavacModifier(level) | (fieldDecl.mods.flags & com.sun.tools.javac.code.Flags.STATIC);\r\n    lombok.javac.handlers.PKG.injectMethod(fieldNode.up(), this.createSetter(access, fieldNode, fieldNode.getTreeMaker()));\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "float", "labels": ["Primitive"], "properties": {"simpleName": "float", "qualifiedName": "float", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "parser", "qualifiedName": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).0", "labels": ["Variable"], "properties": {"simpleName": "defs", "qualifiedName": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "visibleRect", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setError(java.lang.String,java.lang.String,int)", "qualifiedName": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "kind": "method", "sourceText": "/**\r\n * Generates an error message on the stated annotation value, which must have an array initializer.\r\n * The index-th item in the initializer will carry the error (you should only call this method if you know it's there!)\r\n */\r\npublic void setError(java.lang.String annotationMethodName, java.lang.String message, int index) {\r\n    lombok.core.AnnotationValues.AnnotationValue v = this.values.get(annotationMethodName);\r\n    if (v == null) {\r\n        return;\r\n    }\r\n    v.setError(message, index);\r\n}", "docComment": "Generates an error message on the stated annotation value, which must have an array initializer.\r\nThe index-th item in the initializer will carry the error (you should only call this method if you know it's there!)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitInitializer(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCBlock initializer) {\r\n    this.print(\"<%s INITIALIZER>\", initializer.isStatic() ? \"static\" : \"instance\");\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        this.print(\"%s\", initializer);\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.PKG$MemberExistsResult()", "kind": "constructor", "sourceText": "MemberExistsResult() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).1", "labels": ["Variable"], "properties": {"simpleName": "exception", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "labels": ["Variable"], "properties": {"sourceText": "EXISTS_BY_LOMBOK()", "visibility": "public", "simpleName": "EXISTS_BY_LOMBOK", "qualifiedName": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "drill(com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node drill(com.sun.tools.javac.tree.JCTree statement) {\r\n    java.util.List<lombok.javac.JavacAST.Node> childNodes = new java.util.ArrayList<lombok.javac.JavacAST.Node>();\r\n    for (lombok.core.AST.FieldAccess fa : this.fieldsOf(statement.getClass())) {\r\n        childNodes.addAll(this.buildWithField(lombok.javac.JavacAST.Node.class, statement, fa));\r\n    }\r\n    return this.putInMap(new lombok.javac.JavacAST.Node(statement, childNodes, lombok.core.AST.Kind.STATEMENT));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.SneakyThrows> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    java.util.Collection<java.lang.String> exceptionNames = annotation.getRawExpressions(\"value\");\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> memberValuePairs = ast.getArguments();\r\n    if ((memberValuePairs == null) || (memberValuePairs.size() == 0)) {\r\n        return false;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCExpression arrayOrSingle = ((com.sun.tools.javac.tree.JCTree.JCAssign) (memberValuePairs.get(0))).rhs;\r\n    final com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> exceptionNameNodes;\r\n    if (arrayOrSingle instanceof com.sun.tools.javac.tree.JCTree.JCNewArray) {\r\n        exceptionNameNodes = ((com.sun.tools.javac.tree.JCTree.JCNewArray) (arrayOrSingle)).elems;\r\n    } else {\r\n        exceptionNameNodes = com.sun.tools.javac.util.List.of(arrayOrSingle);\r\n    }\r\n    if (exceptionNames.size() != exceptionNameNodes.size()) {\r\n        annotationNode.addError(\"LOMBOK BUG: The number of exception classes in the annotation isn't the same pre- and post- guessing.\");\r\n    }\r\n    java.util.List<java.lang.String> exceptions = new java.util.ArrayList<java.lang.String>();\r\n    for (java.lang.String exception : exceptionNames) {\r\n        if (exception.endsWith(\".class\")) {\r\n            exception = exception.substring(0, exception.length() - 6);\r\n        }\r\n        exceptions.add(exception);\r\n    }\r\n    lombok.javac.JavacAST.Node owner = annotationNode.up();\r\n    switch (owner.getKind()) {\r\n        case METHOD :\r\n            return this.handleMethod(annotationNode, ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (owner.get())), exceptions);\r\n        default :\r\n            annotationNode.addError(\"@SneakyThrows is legal only on methods and constructors.\");\r\n            return true;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "kind": "static method", "sourceText": "static lombok.eclipse.EclipseAST.Node getExistingLombokMethod(java.lang.String methodName, lombok.eclipse.EclipseAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration))) {\r\n        node = node.up();\r\n    } \r\n    if (node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration def : ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node.get())).methods) {\r\n            char[] mName = def.selector;\r\n            if (mName == null) {\r\n                continue;\r\n            }\r\n            if (methodName.equals(new java.lang.String(mName))) {\r\n                lombok.eclipse.EclipseAST.Node existing = node.getNodeFor(def);\r\n                if (existing.isHandled()) {\r\n                    return existing;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "addAllButOne(com.sun.tools.javac.util.List,int)", "qualifiedName": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "kind": "static method", "sourceText": "private static com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> addAllButOne(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> defs, int idx) {\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> out = com.sun.tools.javac.util.List.nil();\r\n    int i = 0;\r\n    for (com.sun.tools.javac.tree.JCTree def : defs) {\r\n        if ((i++) != idx) {\r\n            out = out.append(def);\r\n        }\r\n    }\r\n    return out;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitMethod(lombok.javac.JavacAST.Node methodNode, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "labels": ["Variable"], "properties": {"sourceText": "final org.eclipse.jdt.internal.compiler.ast.ASTNode node;", "visibility": "default", "simpleName": "node", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "parent", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST", "labels": ["Structure", "Container"], "properties": {"docComment": "Wraps around Eclipse's internal AST view to add useful features as well as the ability to visit parents from children,\r\nsomething Eclipse own AST system does not offer.\r\n", "simpleName": "EclipseAST", "qualifiedName": "lombok.eclipse.EclipseAST", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.node", "labels": ["Variable"], "properties": {"sourceText": "protected final N node;", "visibility": "protected", "simpleName": "node", "qualifiedName": "lombok.core.AST$Node.node", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.tryClass(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.core.AnnotationValues.tryClass(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.installer.WindowsDriveInfo()", "kind": "constructor", "sourceText": "WindowsDriveInfo() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).5", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).5", "kind": "parameter", "parameterPosition": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "/**\r\n * Generates a getter on the stated field.\r\n *\r\n * Used by {@link HandleData}.\r\n *\r\n * The difference between this call and the handle method is as follows:\r\n *\r\n * If there is a <code>lombok.Getter</code> annotation on the field, it is used and the\r\n * same rules apply (e.g. warning if the method already exists, stated access level applies).\r\n * If not, the getter is still generated if it isn't already there, though there will not\r\n * be a warning if its already there. The default access level is used.\r\n */\r\npublic void generateGetterForField(lombok.eclipse.EclipseAST.Node fieldNode, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    for (lombok.eclipse.EclipseAST.Node child : fieldNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.eclipse.Eclipse.annotationTypeMatches(lombok.Getter.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    this.createGetterForField(lombok.AccessLevel.PUBLIC, fieldNode, fieldNode, pos, false);\r\n}", "docComment": "Generates a getter on the stated field.\r\n\r\nUsed by {@link HandleData}.\r\n\r\nThe difference between this call and the handle method is as follows:\r\n\r\nIf there is a <code>lombok.Getter</code> annotation on the field, it is used and the\r\nsame rules apply (e.g. warning if the method already exists, stated access level applies).\r\nIf not, the getter is still generated if it isn't already there, though there will not\r\nbe a warning if its already there. The default access level is used.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.Cleanup> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    java.lang.String cleanupName = annotation.getInstance().value();\r\n    if (cleanupName.length() == 0) {\r\n        annotationNode.addError(\"cleanupName cannot be the empty string.\");\r\n        return true;\r\n    }\r\n    if (annotationNode.up().getKind() != lombok.core.AST.Kind.LOCAL) {\r\n        annotationNode.addError(\"@Cleanup is legal only on local variable declarations.\");\r\n        return true;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCVariableDecl decl = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (annotationNode.up().get()));\r\n    if (decl.init == null) {\r\n        annotationNode.addError(\"@Cleanup variable declarations need to be initialized.\");\r\n        return true;\r\n    }\r\n    lombok.javac.JavacAST.Node ancestor = annotationNode.up().directUp();\r\n    com.sun.tools.javac.tree.JCTree blockNode = ancestor.get();\r\n    final com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> statements;\r\n    if (blockNode instanceof com.sun.tools.javac.tree.JCTree.JCBlock) {\r\n        statements = ((com.sun.tools.javac.tree.JCTree.JCBlock) (blockNode)).stats;\r\n    } else if (blockNode instanceof com.sun.tools.javac.tree.JCTree.JCCase) {\r\n        statements = ((com.sun.tools.javac.tree.JCTree.JCCase) (blockNode)).stats;\r\n    } else if (blockNode instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n        statements = ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (blockNode)).body.stats;\r\n    } else {\r\n        annotationNode.addError(\"@Cleanup is legal only on a local variable declaration inside a block.\");\r\n        return true;\r\n    }\r\n    boolean seenDeclaration = false;\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> tryBlock = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> newStatements = com.sun.tools.javac.util.List.nil();\r\n    for (com.sun.tools.javac.tree.JCTree.JCStatement statement : statements) {\r\n        if (!seenDeclaration) {\r\n            if (statement == decl) {\r\n                seenDeclaration = true;\r\n            }\r\n            newStatements = newStatements.append(statement);\r\n        } else {\r\n            tryBlock = tryBlock.append(statement);\r\n        }\r\n    }\r\n    if (!seenDeclaration) {\r\n        annotationNode.addError(\"LOMBOK BUG: Can't find this local variable declaration inside its parent.\");\r\n        return true;\r\n    }\r\n    this.doAssignmentCheck(annotationNode, tryBlock, decl.name);\r\n    com.sun.tools.javac.tree.TreeMaker maker = annotationNode.getTreeMaker();\r\n    com.sun.tools.javac.tree.JCTree.JCFieldAccess cleanupCall = maker.Select(maker.Ident(decl.name), annotationNode.toName(cleanupName));\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> finalizerBlock = com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCStatement>of(maker.Exec(maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), cleanupCall, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil())));\r\n    com.sun.tools.javac.tree.JCTree.JCBlock finalizer = maker.Block(0, finalizerBlock);\r\n    newStatements = newStatements.append(maker.Try(maker.Block(0, tryBlock), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCCatch>nil(), finalizer));\r\n    if (blockNode instanceof com.sun.tools.javac.tree.JCTree.JCBlock) {\r\n        ((com.sun.tools.javac.tree.JCTree.JCBlock) (blockNode)).stats = newStatements;\r\n    } else if (blockNode instanceof com.sun.tools.javac.tree.JCTree.JCCase) {\r\n        ((com.sun.tools.javac.tree.JCTree.JCCase) (blockNode)).stats = newStatements;\r\n    } else if (blockNode instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n        ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (blockNode)).body.stats = newStatements;\r\n    } else {\r\n        throw new java.lang.AssertionError(\"Should not get here\");\r\n    }\r\n    ancestor.rebuild();\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "id", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "labels": ["Variable"], "properties": {"simpleName": "collection", "qualifiedName": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).2", "labels": ["Variable"], "properties": {"simpleName": "error", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "calculateIsStructurallySignificant()", "qualifiedName": "lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\nprotected boolean calculateIsStructurallySignificant() {\r\n    if (this.node instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n        return true;\r\n    }\r\n    if (this.node instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n        return true;\r\n    }\r\n    if (this.node instanceof com.sun.tools.javac.tree.JCTree.JCVariableDecl) {\r\n        return true;\r\n    }\r\n    if (this.node instanceof com.sun.tools.javac.tree.JCTree.JCCompilationUnit) {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(java.lang.reflect.Field,int)", "qualifiedName": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "kind": "constructor", "sourceText": "FieldAccess(java.lang.reflect.Field field, int dim) {\r\n    super();\r\n    this.field = field;\r\n    this.dim = dim;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportWidth()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getScrollableTracksViewportWidth()", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportWidth()", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean getScrollableTracksViewportWidth() {\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildStatementOrExpression(com.sun.tools.javac.tree.JCTree statement) {\r\n    if (statement == null) {\r\n        return null;\r\n    }\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCAnnotation) {\r\n        return null;\r\n    }\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n        return this.buildType(((com.sun.tools.javac.tree.JCTree.JCClassDecl) (statement)));\r\n    }\r\n    if (statement instanceof com.sun.tools.javac.tree.JCTree.JCVariableDecl) {\r\n        return this.buildLocalVar(((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (statement)), lombok.core.AST.Kind.LOCAL);\r\n    }\r\n    if (this.setAndGetAsHandled(statement)) {\r\n        return null;\r\n    }\r\n    return this.drill(statement);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.addError(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addError(java.lang.String)", "qualifiedName": "lombok.core.AST$Node.addError(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generate a compiler error on this node.\r\n */\r\npublic abstract void addError(java.lang.String message);", "docComment": "Generate a compiler error on this node.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "labels": ["Variable"], "properties": {"sourceText": "private int indent = 0;", "visibility": "private", "simpleName": "indent", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitMethod(lombok.eclipse.EclipseAST.Node methodNode, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).2", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "EclipsesList", "qualifiedName": "lombok.installer.Installer$EclipsesList", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.identityDetector", "labels": ["Variable"], "properties": {"sourceText": "private java.util.Map<N, java.lang.Void> identityDetector = new java.util.IdentityHashMap<N, java.lang.Void>();", "visibility": "private", "simpleName": "identityDetector", "qualifiedName": "lombok.core.AST.identityDetector", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).4", "labels": ["Variable"], "properties": {"simpleName": "idx", "qualifiedName": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitLocal(lombok.javac.JavacAST.Node localNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl local) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "oldN", "qualifiedName": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).6", "labels": ["Variable"], "properties": {"simpleName": "endPosition", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).6", "kind": "parameter", "parameterPosition": 6, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "labels": ["Variable"], "properties": {"sourceText": "private lombok.javac.JavacAnnotationHandler<T> handler;", "visibility": "private", "simpleName": "handler", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(javax.annotation.processing.Messager)", "qualifiedName": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)", "kind": "constructor", "sourceText": "/**\r\n * Creates a new HandlerLibrary that will report any problems or errors to the provided messager.\r\n * You probably want to use {@link #load(Messager)} instead.\r\n */\r\npublic HandlerLibrary(javax.annotation.processing.Messager messager) {\r\n    super();\r\n    this.messager = messager;\r\n}", "docComment": "Creates a new HandlerLibrary that will report any problems or errors to the provided messager.\r\nYou probably want to use {@link #load(Messager)} instead.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).0", "labels": ["Variable"], "properties": {"simpleName": "handler", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "nameConflictInImportList(java.lang.String,java.util.Collection)", "qualifiedName": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "kind": "method", "sourceText": "private boolean nameConflictInImportList(java.lang.String simpleName, java.util.Collection<java.lang.String> potentialMatches) {\r\n    for (java.lang.String importedType : this.imports) {\r\n        if (!lombok.core.TypeResolver.toSimpleName(importedType).equals(simpleName)) {\r\n            continue;\r\n        }\r\n        if (potentialMatches.contains(importedType)) {\r\n            continue;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "labels": ["Variable"], "properties": {"sourceText": "NOT_EXISTS()", "visibility": "public", "simpleName": "NOT_EXISTS", "qualifiedName": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addType(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addType(java.lang.String)", "qualifiedName": "lombok.core.TypeLibrary.addType(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Add a type to the library.\r\n *\r\n * @param fullyQualifiedTypeName\r\n * \t\tthe FQN type name, such as 'java.lang.String'.\r\n */\r\npublic void addType(java.lang.String fullyQualifiedTypeName) {\r\n    int idx = fullyQualifiedTypeName.lastIndexOf('.');\r\n    if (idx == (-1)) {\r\n        throw new java.lang.IllegalArgumentException(\"Only fully qualified types are allowed (and stuff in the default package is not palatable to us either!)\");\r\n    }\r\n    final java.lang.String simpleName = fullyQualifiedTypeName.substring(idx + 1);\r\n    final java.lang.String packageName = fullyQualifiedTypeName.substring(0, idx);\r\n    if (this.simpleToQualifiedMap.put(fullyQualifiedTypeName, java.util.Collections.singleton(fullyQualifiedTypeName)) != null) {\r\n        return;\r\n    }\r\n    this.addToMap(simpleName, fullyQualifiedTypeName);\r\n    this.addToMap(packageName + \".*\", fullyQualifiedTypeName);\r\n}", "docComment": "Add a type to the library.\r\n\r\n@param fullyQualifiedTypeName\r\n\t\tthe FQN type name, such as 'java.lang.String'.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n    if (this.setAndGetAsHandled(method)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.javac.JavacAST.Node> childNodes = new java.util.ArrayList<lombok.javac.JavacAST.Node>();\r\n    for (com.sun.tools.javac.tree.JCTree.JCAnnotation annotation : method.mods.annotations) {\r\n        lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildAnnotation(annotation));\r\n    }\r\n    for (com.sun.tools.javac.tree.JCTree.JCVariableDecl param : method.params) {\r\n        lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildLocalVar(param, lombok.core.AST.Kind.ARGUMENT));\r\n    }\r\n    if ((method.body != null) && (method.body.stats != null)) {\r\n        for (com.sun.tools.javac.tree.JCTree.JCStatement statement : method.body.stats) {\r\n            lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildStatement(statement));\r\n        }\r\n    }\r\n    return this.putInMap(new lombok.javac.JavacAST.Node(method, childNodes, lombok.core.AST.Kind.METHOD));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).0", "labels": ["Variable"], "properties": {"simpleName": "owner", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).2", "labels": ["Variable"], "properties": {"simpleName": "v", "qualifiedName": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.MethodDeclaration generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration parent, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field, java.lang.String name, int modifier, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration(parent.compilationResult);\r\n    method.modifiers = modifier;\r\n    method.returnType = lombok.eclipse.Eclipse.copyType(field.type);\r\n    method.annotations = null;\r\n    method.arguments = null;\r\n    method.selector = name.toCharArray();\r\n    method.binding = null;\r\n    method.thrownExceptions = null;\r\n    method.typeParameters = null;\r\n    method.bits |= lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n    org.eclipse.jdt.internal.compiler.ast.Expression fieldExpression = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(field.name, (field.declarationSourceStart << 32) | field.declarationSourceEnd);\r\n    org.eclipse.jdt.internal.compiler.ast.Statement returnStatement = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(fieldExpression, field.sourceStart, field.sourceEnd);\r\n    method.bodyStart = method.declarationSourceStart = method.sourceStart = pos.sourceStart;\r\n    method.bodyEnd = method.declarationSourceEnd = method.sourceEnd = pos.sourceEnd;\r\n    method.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ returnStatement };\r\n    return method;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "obj", "qualifiedName": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "method", "sourceText": "public void endVisitField(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    this.indent--;\r\n    this.print(\"</FIELD %s %s>\", this.str(field.type), this.str(field.name));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "kind": "method", "sourceText": "/**\r\n * Called when visiting a type (a class, interface, annotation, enum, etcetera).\r\n */\r\nvoid visitType(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.tree.JCTree.JCClassDecl type);", "docComment": "Called when visiting a type (a class, interface, annotation, enum, etcetera).\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "kind": "method", "sourceText": "private boolean generateMethods(lombok.javac.JavacAST.Node typeNode, lombok.javac.JavacAST.Node errorNode, com.sun.tools.javac.util.List<java.lang.String> excludes, boolean callSuper, boolean whineIfExists) {\r\n    boolean notAClass = true;\r\n    if (typeNode.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n        long flags = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get())).mods.flags;\r\n        notAClass = (flags & ((com.sun.tools.javac.code.Flags.INTERFACE | com.sun.tools.javac.code.Flags.ANNOTATION) | com.sun.tools.javac.code.Flags.ENUM)) != 0;\r\n    }\r\n    if (notAClass) {\r\n        errorNode.addError(\"@EqualsAndHashCode is only supported on a class.\");\r\n        return false;\r\n    }\r\n    boolean isDirectDescendentOfObject = true;\r\n    com.sun.tools.javac.tree.JCTree extending = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get())).extending;\r\n    if (extending != null) {\r\n        java.lang.String p = extending.toString();\r\n        isDirectDescendentOfObject = p.equals(\"Object\") || p.equals(\"java.lang.Object\");\r\n    }\r\n    if (isDirectDescendentOfObject && callSuper) {\r\n        errorNode.addError(\"Generating equals/hashCode with a supercall to java.lang.Object is pointless.\");\r\n        return true;\r\n    }\r\n    if ((!isDirectDescendentOfObject) && (!callSuper)) {\r\n        errorNode.addWarning(\"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object.\");\r\n    }\r\n    com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> nodesForEquality = com.sun.tools.javac.util.List.nil();\r\n    for (lombok.javac.JavacAST.Node child : typeNode.down()) {\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldDecl = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (child.get()));\r\n        // Skip static fields.\r\n        if ((fieldDecl.mods.flags & com.sun.tools.javac.code.Flags.STATIC) != 0) {\r\n            continue;\r\n        }\r\n        // Skip transient fields.\r\n        if ((fieldDecl.mods.flags & com.sun.tools.javac.code.Flags.TRANSIENT) != 0) {\r\n            continue;\r\n        }\r\n        // Skip excluded fields.\r\n        if (excludes.contains(fieldDecl.name.toString())) {\r\n            continue;\r\n        }\r\n        nodesForEquality = nodesForEquality.append(child);\r\n    }\r\n    switch (lombok.javac.handlers.PKG.methodExists(\"hashCode\", typeNode)) {\r\n        case NOT_EXISTS :\r\n            com.sun.tools.javac.tree.JCTree.JCMethodDecl method = this.createHashCode(typeNode, nodesForEquality, callSuper);\r\n            lombok.javac.handlers.PKG.injectMethod(typeNode, method);\r\n            break;\r\n        case EXISTS_BY_LOMBOK :\r\n            break;\r\n        default :\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(\"Not generating hashCode(): A method with that name already exists\");\r\n            }\r\n            break;\r\n    }\r\n    switch (lombok.javac.handlers.PKG.methodExists(\"equals\", typeNode)) {\r\n        case NOT_EXISTS :\r\n            com.sun.tools.javac.tree.JCTree.JCMethodDecl method = this.createEquals(typeNode, nodesForEquality, callSuper);\r\n            lombok.javac.handlers.PKG.injectMethod(typeNode, method);\r\n            break;\r\n        case EXISTS_BY_LOMBOK :\r\n            break;\r\n        default :\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(\"Not generating equals(Object other): A method with that name already exists\");\r\n            }\r\n            break;\r\n    }\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseFinder", "labels": ["Structure", "Container"], "properties": {"docComment": "Utility class for doing various OS-specific operations related to finding Eclipse installations.\r\n", "simpleName": "EclipseFinder", "qualifiedName": "lombok.installer.EclipseFinder", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "void visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.out", "labels": ["Variable"], "properties": {"sourceText": "private final java.io.PrintStream out;", "visibility": "private", "simpleName": "out", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.out", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "labels": ["Variable"], "properties": {"simpleName": "nodeType", "qualifiedName": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).1", "labels": ["Variable"], "properties": {"simpleName": "msg", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "qualifiedName": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "kind": "static method", "sourceText": "/**\r\n * Convenience method that creates a new array and copies each TypeReference in the source array via\r\n * {@link #copyType(TypeReference)}.\r\n */\r\npublic static org.eclipse.jdt.internal.compiler.ast.TypeReference[] copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[] refs) {\r\n    if (refs == null) {\r\n        return null;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.TypeReference[] outs = new org.eclipse.jdt.internal.compiler.ast.TypeReference[refs.length];\r\n    int idx = 0;\r\n    for (org.eclipse.jdt.internal.compiler.ast.TypeReference ref : refs) {\r\n        outs[idx++] = lombok.eclipse.Eclipse.copyType(ref);\r\n    }\r\n    return outs;\r\n}", "docComment": "Convenience method that creates a new array and copies each TypeReference in the source array via\r\n{@link #copyType(TypeReference)}.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Cleanup", "labels": ["Structure"], "properties": {"docComment": "Ensures the variable declaration that you annotate will be cleaned up by calling its close method, regardless\r\nof what happens. Implemented by wrapping all statements following the local variable declaration to the\r\nend of your scope into a try block that, as a finally action, closes the resource.\r\n<p>\r\nExample:\r\n<pre>\r\npublic void copyFile(String in, String out) throws IOException {\r\n    &#64;Cleanup FileInputStream inStream = new FileInputStream(in);\r\n    &#64;Cleanup FileOutputStream outStream = new FileOutputStream(out);\r\n    byte[] b = new byte[65536];\r\n    while (true) {\r\n        int r = inStream.read(b);\r\n        if (r == -1) break;\r\n        outStream.write(b, 0, r);\r\n    }\r\n}\r\n</pre>\r\n\r\nWill generate:\r\n<pre>\r\npublic void copyFile(String in, String out) throws IOException {\r\n    &#64;Cleanup FileInputStream inStream = new FileInputStream(in);\r\n    try {\r\n        &#64;Cleanup FileOutputStream outStream = new FileOutputStream(out);\r\n        try {\r\n            byte[] b = new byte[65536];\r\n            while (true) {\r\n                int r = inStream.read(b);\r\n                if (r == -1) break;\r\n                outStream.write(b, 0, r);\r\n            }\r\n        } finally {\r\n            out.close();\r\n        }\r\n    } finally {\r\n        in.close();\r\n    }\r\n}\r\n</pre>\r\n\r\nNote that the final close method call, if it throws an exception, will overwrite any exception thrown\r\nin the main body of the generated try block. You should NOT rely on this behaviour - future versions of\r\nlombok intend to silently swallow any exception thrown by the cleanup method <i>_IF</i> the main body\r\nthrows an exception as well, as the earlier exception is usually far more useful.\r\n<p>\r\nHowever, in java 1.6, generating the code to do this is prohibitively complicated.\r\n", "simpleName": "Cleanup", "qualifiedName": "lombok.Cleanup", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl arg, com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node nodeAnnotation, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    this.forcePrint(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "Eclipse", "qualifiedName": "lombok.eclipse.Eclipse", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Data", "labels": ["Structure"], "properties": {"docComment": "Generates getters for all fields, a useful toString method, and hashCode and equals implementations that check\r\nall non-transient fields. Will also generate setters for all non-final fields, as well as a constructor.\r\n<p>\r\nIf any method to be generated already exists (in name - the return type or parameters are not relevant), then\r\nthat method will not be generated by the Data annotation.\r\n<p>\r\nThe generated constructor will have 1 parameter for each final field. The generated toString will print all fields,\r\nwhile the generated hashCode and equals take into account all non-transient fields.<br>\r\nStatic fields are skipped (no getter or setter, and they are not included in toString, equals, hashCode, or the constructor).\r\n<p>\r\n<code>toString</code>, <code>equals</code>, and <code>hashCode</code> use the deepX variants in the\r\n<code>java.util.Arrays</code> utility class. Therefore, if your class has arrays that contain themselves,\r\nthese methods will just loop endlessly until the inevitable <code>StackOverflowError</code>. This behaviour\r\nis no different from <code>java.util.ArrayList</code>, though.\r\n", "simpleName": "Data", "qualifiedName": "lombok.Data", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "kind": "method", "sourceText": "public void visitType(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type) {\r\n    this.print(\"<TYPE %s>\", this.str(type.name));\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        this.print(\"%s\", type);\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * The AnnotationValue object that goes with the annotation method for which the failure occurred.\r\n */\r\npublic final lombok.core.AnnotationValues.AnnotationValue owner;", "visibility": "public", "simpleName": "owner", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).5", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).5", "kind": "parameter", "parameterPosition": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "getDrivesOnWindows()", "qualifiedName": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "kind": "static method", "sourceText": "/**\r\n * Returns all drive letters on windows, regardless of what kind of drive is represented.\r\n *\r\n * @return A List of drive letters, such as [\"A\", \"C\", \"D\", \"X\"].\r\n */\r\nstatic java.util.List<java.lang.String> getDrivesOnWindows() throws java.lang.Throwable {\r\n    lombok.installer.EclipseFinder.loadWindowsDriveInfoLib();\r\n    java.util.List<java.lang.String> drives = new java.util.ArrayList<java.lang.String>();\r\n    lombok.installer.WindowsDriveInfo info = new lombok.installer.WindowsDriveInfo();\r\n    for (java.lang.String drive : info.getLogicalDrives()) {\r\n        if (info.isFixedDisk(drive)) {\r\n            drives.add(drive);\r\n        }\r\n    }\r\n    return drives;\r\n}", "docComment": "Returns all drive letters on windows, regardless of what kind of drive is represented.\r\n\r\n@return A List of drive letters, such as [\"A\", \"C\", \"D\", \"X\"].\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "orientation", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleData()", "kind": "constructor", "sourceText": "HandleData() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "isPublic", "qualifiedName": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "keyName", "qualifiedName": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.top()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "top()", "qualifiedName": "lombok.core.AST.top()", "kind": "method", "sourceText": "/**\r\n * The AST.Node object representing the Compilation Unit.\r\n */\r\npublic lombok.core.AST<N>.Node top() {\r\n    return this.top;\r\n}", "docComment": "The AST.Node object representing the Compilation Unit.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "labels": ["Variable"], "properties": {"sourceText": "private static final java.util.List<java.lang.String> KNOWN_BOOLEAN_PREFIXES = java.util.Collections.unmodifiableList(java.util.Arrays.asList(\"is\", \"has\", \"get\"));", "visibility": "private", "simpleName": "KNOWN_BOOLEAN_PREFIXES", "qualifiedName": "lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl field, lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    this.forcePrint(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.JavacASTAdapter()", "kind": "constructor", "sourceText": "JavacASTAdapter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "qualifiedName": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "kind": "method", "sourceText": "/**\r\n * Generates a compiler warning focused on the AST node represented by this node object.\r\n */\r\npublic void addWarning(java.lang.String message, com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition pos) {\r\n    this.printMessage(javax.tools.Diagnostic.Kind.WARNING, message, null, pos);\r\n}", "docComment": "Generates a compiler warning focused on the AST node represented by this node object.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.toName(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.javac.JavacAST.toName(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary).0", "labels": ["Variable"], "properties": {"simpleName": "lib", "qualifiedName": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "static method", "sourceText": "static java.util.List<java.lang.String> toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n    java.lang.CharSequence fieldName = field.name;\r\n    boolean isBoolean = field.vartype.toString().equals(\"boolean\");\r\n    return lombok.core.TransformationsUtil.toAllGetterNames(fieldName, isBoolean);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "unpackDLL(java.lang.String,java.io.File)", "qualifiedName": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "kind": "static method", "sourceText": "private static boolean unpackDLL(java.lang.String dllName, java.io.File target) throws java.io.IOException {\r\n    java.io.InputStream in = lombok.installer.EclipseFinder.class.getResourceAsStream(dllName);\r\n    try {\r\n        try {\r\n            java.io.FileOutputStream out = new java.io.FileOutputStream(target);\r\n            try {\r\n                byte[] b = new byte[32000];\r\n                while (true) {\r\n                    int r = in.read(b);\r\n                    if (r == (-1)) {\r\n                        break;\r\n                    }\r\n                    out.write(b, 0, r);\r\n                } \r\n            } finally {\r\n                out.close();\r\n            }\r\n        } catch (java.io.IOException e) {\r\n            // Fall through - if there is a file named lombok-WindowsDriveInfo-arch.dll, we'll try it.\r\n            return target.exists() && target.canRead();\r\n        }\r\n    } finally {\r\n        in.close();\r\n    }\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).1", "labels": ["Variable"], "properties": {"simpleName": "target", "qualifiedName": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "library", "qualifiedName": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "oldNodes", "qualifiedName": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor()", "kind": "constructor", "sourceText": "AnnotationVisitor() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).1", "labels": ["Variable"], "properties": {"simpleName": "url", "qualifiedName": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.handlers", "labels": ["Variable"], "properties": {"sourceText": "private static final lombok.eclipse.HandlerLibrary handlers;", "visibility": "private", "simpleName": "handlers", "qualifiedName": "lombok.eclipse.TransformEclipseAST.handlers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hasLombok()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "hasLombok()", "qualifiedName": "lombok.installer.EclipseLocation.hasLombok()", "kind": "method", "sourceText": "/**\r\n *\r\n * @return true if the Eclipse installation has been instrumented with lombok.\r\n */\r\nboolean hasLombok() {\r\n    return this.hasLombok;\r\n}", "docComment": "\r\n@return true if the Eclipse installation has been instrumented with lombok.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).2", "labels": ["Variable"], "properties": {"simpleName": "exceptions", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "kind": "method", "sourceText": "// private boolean handleField(Node annotation, FieldDeclaration field, List<DeclaredException> exceptions) {\r\n// if ( field.initialization == null ) {\r\n// annotation.addError(\"@SneakyThrows can only be used on fields with an initialization statement.\");\r\n// return true;\r\n// }\r\n// \r\n// Expression expression = field.initialization;\r\n// Statement[] content = new Statement[] {new Assignment(\r\n// new SingleNameReference(field.name, 0), expression, 0)};\r\n// field.initialization = null;\r\n// \r\n// for ( DeclaredException exception : exceptions ) {\r\n// content = new Statement[] { buildTryCatchBlock(content, exception) };\r\n// }\r\n// \r\n// Block block = new Block(0);\r\n// block.statements = content;\r\n// \r\n// Node typeNode = annotation.up().up();\r\n// \r\n// Initializer initializer = new Initializer(block, field.modifiers & Modifier.STATIC);\r\n// initializer.sourceStart = expression.sourceStart;\r\n// initializer.sourceEnd = expression.sourceEnd;\r\n// initializer.declarationSourceStart = expression.sourceStart;\r\n// initializer.declarationSourceEnd = expression.sourceEnd;\r\n// injectField(typeNode, initializer);\r\n// \r\n// typeNode.rebuild();\r\n// \r\n// return true;\r\n// }\r\nprivate boolean handleMethod(lombok.eclipse.EclipseAST.Node annotation, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, java.util.List<lombok.eclipse.handlers.HandleSneakyThrows.DeclaredException> exceptions) {\r\n    if (method.isAbstract()) {\r\n        annotation.addError(\"@SneakyThrows can only be used on concrete methods.\");\r\n        return true;\r\n    }\r\n    if (method.statements == null) {\r\n        return false;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.Statement[] contents = method.statements;\r\n    for (lombok.eclipse.handlers.HandleSneakyThrows.DeclaredException exception : exceptions) {\r\n        contents = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ this.buildTryCatchBlock(contents, exception) };\r\n    }\r\n    method.statements = contents;\r\n    annotation.up().rebuild();\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "DeclaredException", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node drill(org.eclipse.jdt.internal.compiler.ast.Statement statement) {\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    for (lombok.core.AST.FieldAccess fa : this.fieldsOf(statement.getClass())) {\r\n        childNodes.addAll(this.buildWithField(lombok.eclipse.EclipseAST.Node.class, statement, fa));\r\n    }\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(statement, childNodes, lombok.core.AST.Kind.STATEMENT));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "locations", "qualifiedName": "lombok.installer.Installer.uninstall(java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException.serialVersionUID", "labels": ["Variable"], "properties": {"sourceText": "private static final long serialVersionUID = 1L;", "visibility": "private", "simpleName": "serialVersionUID", "qualifiedName": "lombok.installer.EclipseLocation$UninstallException.serialVersionUID", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.top()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "top()", "qualifiedName": "lombok.eclipse.EclipseAST.top()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.eclipse.EclipseAST.Node top() {\r\n    return ((lombok.eclipse.EclipseAST.Node) (super.top()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList()", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>()", "qualifiedName": "lombok.installer.Installer$EclipsesList()", "kind": "constructor", "sourceText": "EclipsesList() {\r\n    super();\r\n    this.setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));\r\n    this.setBackground(java.awt.Color.WHITE);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).2", "labels": ["Variable"], "properties": {"simpleName": "bundleName", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).1", "labels": ["Variable"], "properties": {"simpleName": "cause", "qualifiedName": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.PROTECTED", "labels": ["Variable"], "properties": {"sourceText": "PROTECTED()", "visibility": "public", "simpleName": "PROTECTED", "qualifiedName": "lombok.AccessLevel.PROTECTED", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(boolean)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer(boolean)", "kind": "constructor", "sourceText": "/**\r\n *\r\n * @param printContent\r\n * \t\tif true, bodies are printed directly, as java code,\r\n * \t\tinstead of a tree listing of every AST node inside it.\r\n */\r\npublic Printer(boolean printContent) {\r\n    this(printContent, java.lang.System.out);\r\n}", "docComment": "\r\n@param printContent\r\n\t\tif true, bodies are printed directly, as java code,\r\n\t\tinstead of a tree listing of every AST node inside it.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "void visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "static method", "sourceText": "/**\r\n * Adds the given new field declaration to the provided type AST Node.\r\n *\r\n * Also takes care of updating the JavacAST.\r\n */\r\nstatic void injectField(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n    com.sun.tools.javac.tree.JCTree.JCClassDecl type = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get()));\r\n    type.defs = type.defs.append(field);\r\n    typeNode.add(field, lombok.core.AST.Kind.FIELD).recursiveSetHandled();\r\n}", "docComment": "Adds the given new field declaration to the provided type AST Node.\r\n\r\nAlso takes care of updating the JavacAST.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "fullyQualifiedTypeName", "qualifiedName": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toGetterName(java.lang.CharSequence,boolean)", "qualifiedName": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "kind": "static method", "sourceText": "/**\r\n * Generates a getter name from a given field name.\r\n *\r\n * Strategy:\r\n *\r\n * First, pick a prefix. 'get' normally, but 'is' if <code>isBoolean</code> is true.\r\n *\r\n * Then, check if the first character of the field is lowercase. If so, check if the second character\r\n * exists and is title or upper case. If so, uppercase the first character. If not, titlecase the first character.\r\n *\r\n * return the prefix plus the possibly title/uppercased first character, and the rest of the field name.\r\n *\r\n * Note that for boolean fields, if the field starts with 'has', 'get', or 'is', and the character after that is\r\n * <b>not</b> a lowercase character, the field name is returned without changing any character's case and without\r\n * any prefix.\r\n *\r\n * @param fieldName\r\n * \t\tthe name of the field.\r\n * @param isBoolean\r\n * \t\tif the field is of type 'boolean'. For fields of type 'java.lang.Boolean', you should provide <code>false</code>.\r\n */\r\npublic static java.lang.String toGetterName(java.lang.CharSequence fieldName, boolean isBoolean) {\r\n    final java.lang.String prefix = (isBoolean) ? \"is\" : \"get\";\r\n    if (fieldName.length() == 0) {\r\n        return prefix;\r\n    }\r\n    for (java.lang.String knownBooleanPrefix : lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES) {\r\n        if (!fieldName.toString().startsWith(knownBooleanPrefix)) {\r\n            continue;\r\n        }\r\n        if ((fieldName.length() > knownBooleanPrefix.length()) && (!java.lang.Character.isLowerCase(fieldName.charAt(knownBooleanPrefix.length())))) {\r\n            // The field is called something like 'isFoo' or 'hasFoo' or 'getFoo', so we shouldn't\r\n            // prefix with 'is' but instead just use the field name as is. The isLowerCase check is so we don't turn\r\n            // hashCodeGenerated, which so happens to start with 'has', into hasHCodeGenerated instead of isHashCodeGenerated.\r\n            return fieldName.toString();\r\n        }\r\n    }\r\n    return lombok.core.TransformationsUtil.buildName(prefix, fieldName.toString());\r\n}", "docComment": "Generates a getter name from a given field name.\r\n\r\nStrategy:\r\n\r\nFirst, pick a prefix. 'get' normally, but 'is' if <code>isBoolean</code> is true.\r\n\r\nThen, check if the first character of the field is lowercase. If so, check if the second character\r\nexists and is title or upper case. If so, uppercase the first character. If not, titlecase the first character.\r\n\r\nreturn the prefix plus the possibly title/uppercased first character, and the rest of the field name.\r\n\r\nNote that for boolean fields, if the field starts with 'has', 'get', or 'is', and the character after that is\r\n<b>not</b> a lowercase character, the field name is returned without changing any character's case and without\r\nany prefix.\r\n\r\n@param fieldName\r\n\t\tthe name of the field.\r\n@param isBoolean\r\n\t\tif the field is of type 'boolean'. For fields of type 'java.lang.Boolean', you should provide <code>false</code>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.type", "labels": ["Variable"], "properties": {"sourceText": "private final java.lang.Class<A> type;", "visibility": "private", "simpleName": "type", "qualifiedName": "lombok.core.AnnotationValues.type", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "double", "labels": ["Primitive"], "properties": {"simpleName": "double", "qualifiedName": "double", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "qualifiedName": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "kind": "method", "sourceText": "// Arguments are a kind of LocalDeclaration. They can definitely contain lombok annotations, so we care about them.\r\nprivate java.util.Collection<lombok.eclipse.EclipseAST.Node> buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[] children) {\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    if (children != null) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local : children) {\r\n            this.addIfNotNull(childNodes, this.buildLocal(local, lombok.core.AST.Kind.ARGUMENT));\r\n        }\r\n    }\r\n    return childNodes;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addWarning(java.lang.String)", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void addWarning(java.lang.String message) {\r\n    this.addWarning(message, this.get().sourceStart, this.get().sourceEnd);\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows()", "kind": "constructor", "sourceText": "HandleSneakyThrows() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "array", "qualifiedName": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Synchronized", "labels": ["Structure"], "properties": {"docComment": "Almost exactly like putting the 'synchronized' keyword on a method, except will synchronize on a private internal\r\nObject, so that other code not under your control doesn't meddle with your thread management by locking on\r\nyour own instance.\r\n<p>\r\nFor non-static methods, a field named <code>$lock</code> is used, and for static methods,\r\n<code>$LOCK</code> is used. These will be generated if needed and if they aren't already present. The contents\r\nof the fields will be serializable.\r\n", "simpleName": "Synchronized", "qualifiedName": "lombok.Synchronized", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "AnnotationHandlerContainer", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.installer.EclipseFinder$OS()", "kind": "constructor", "sourceText": "OS() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor()", "kind": "constructor", "sourceText": "AnnotationVisitor() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.directUp()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "directUp()", "qualifiedName": "lombok.eclipse.EclipseAST$Node.directUp()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic lombok.eclipse.EclipseAST.Node directUp() {\r\n    return ((lombok.eclipse.EclipseAST.Node) (super.directUp()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.MethodDeclaration createEquals(lombok.eclipse.EclipseAST.Node type, java.util.Collection<lombok.eclipse.EclipseAST.Node> fields, boolean callSuper, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (type.top().get())).compilationResult);\r\n    method.modifiers = lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel.PUBLIC);\r\n    method.returnType = org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_boolean, 0);\r\n    method.annotations = new org.eclipse.jdt.internal.compiler.ast.Annotation[]{ new org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation(new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_OVERRIDE, new long[]{ 0, 0, 0 }), 0) };\r\n    method.selector = \"equals\".toCharArray();\r\n    method.thrownExceptions = null;\r\n    method.typeParameters = null;\r\n    method.bits |= lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n    method.bodyStart = method.declarationSourceStart = method.sourceStart = pos.sourceStart;\r\n    method.bodyEnd = method.declarationSourceEnd = method.sourceEnd = pos.sourceEnd;\r\n    method.arguments = new org.eclipse.jdt.internal.compiler.ast.Argument[]{ new org.eclipse.jdt.internal.compiler.ast.Argument(new char[]{ 'o' }, 0, new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_OBJECT, new long[]{ 0, 0, 0 }), 0) };\r\n    java.util.List<org.eclipse.jdt.internal.compiler.ast.Statement> statements = new java.util.ArrayList<org.eclipse.jdt.internal.compiler.ast.Statement>();\r\n    {\r\n        org.eclipse.jdt.internal.compiler.ast.EqualExpression otherEqualsThis = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(new char[]{ 'o' }, 0), new org.eclipse.jdt.internal.compiler.ast.ThisReference(0, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL);\r\n        org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnTrue = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.TrueLiteral(0, 0), 0, 0);\r\n        org.eclipse.jdt.internal.compiler.ast.IfStatement ifOtherEqualsThis = new org.eclipse.jdt.internal.compiler.ast.IfStatement(otherEqualsThis, returnTrue, 0, 0);\r\n        statements.add(ifOtherEqualsThis);\r\n    }\r\n    {\r\n        org.eclipse.jdt.internal.compiler.ast.EqualExpression otherEqualsNull = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(new char[]{ 'o' }, 0), new org.eclipse.jdt.internal.compiler.ast.NullLiteral(0, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL);\r\n        org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnFalse = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.FalseLiteral(0, 0), 0, 0);\r\n        org.eclipse.jdt.internal.compiler.ast.IfStatement ifOtherEqualsNull = new org.eclipse.jdt.internal.compiler.ast.IfStatement(otherEqualsNull, returnFalse, 0, 0);\r\n        statements.add(ifOtherEqualsNull);\r\n    }\r\n    {\r\n        org.eclipse.jdt.internal.compiler.ast.MessageSend otherGetClass = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n        otherGetClass.receiver = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(new char[]{ 'o' }, 0);\r\n        otherGetClass.selector = \"getClass\".toCharArray();\r\n        org.eclipse.jdt.internal.compiler.ast.MessageSend thisGetClass = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n        thisGetClass.receiver = new org.eclipse.jdt.internal.compiler.ast.ThisReference(0, 0);\r\n        thisGetClass.selector = \"getClass\".toCharArray();\r\n        org.eclipse.jdt.internal.compiler.ast.EqualExpression classesNotEqual = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(otherGetClass, thisGetClass, org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL);\r\n        org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnFalse = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.FalseLiteral(0, 0), 0, 0);\r\n        org.eclipse.jdt.internal.compiler.ast.IfStatement ifClassesNotEqual = new org.eclipse.jdt.internal.compiler.ast.IfStatement(classesNotEqual, returnFalse, 0, 0);\r\n        statements.add(ifClassesNotEqual);\r\n    }\r\n    char[] otherN = \"other\".toCharArray();\r\n    /* if ( !super.equals(o) ) return false; */\r\n    if (callSuper) {\r\n        org.eclipse.jdt.internal.compiler.ast.MessageSend callToSuper = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n        callToSuper.receiver = new org.eclipse.jdt.internal.compiler.ast.SuperReference(0, 0);\r\n        callToSuper.selector = \"equals\".toCharArray();\r\n        callToSuper.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(new char[]{ 'o' }, 0) };\r\n        org.eclipse.jdt.internal.compiler.ast.Expression superNotEqual = new org.eclipse.jdt.internal.compiler.ast.UnaryExpression(callToSuper, org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT);\r\n        org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnFalse = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.FalseLiteral(0, 0), 0, 0);\r\n        org.eclipse.jdt.internal.compiler.ast.IfStatement ifSuperEquals = new org.eclipse.jdt.internal.compiler.ast.IfStatement(superNotEqual, returnFalse, 0, 0);\r\n        statements.add(ifSuperEquals);\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get()));\r\n    {\r\n        if (!fields.isEmpty()) {\r\n            org.eclipse.jdt.internal.compiler.ast.LocalDeclaration other = new org.eclipse.jdt.internal.compiler.ast.LocalDeclaration(otherN, 0, 0);\r\n            char[] typeName = typeDecl.name;\r\n            org.eclipse.jdt.internal.compiler.ast.Expression targetType;\r\n            if ((typeDecl.typeParameters == null) || (typeDecl.typeParameters.length == 0)) {\r\n                targetType = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get())).name, 0);\r\n                other.type = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference(typeName, 0);\r\n            } else {\r\n                org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArgs = new org.eclipse.jdt.internal.compiler.ast.TypeReference[typeDecl.typeParameters.length];\r\n                for (int i = 0; i < typeArgs.length; i++) {\r\n                    typeArgs[i] = new org.eclipse.jdt.internal.compiler.ast.Wildcard(org.eclipse.jdt.internal.compiler.ast.Wildcard.UNBOUND);\r\n                }\r\n                targetType = new org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference(typeName, typeArgs, 0, 0);\r\n                other.type = new org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference(typeName, lombok.eclipse.Eclipse.copyTypes(typeArgs), 0, 0);\r\n            }\r\n            other.initialization = new org.eclipse.jdt.internal.compiler.ast.CastExpression(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(new char[]{ 'o' }, 0), targetType);\r\n            statements.add(other);\r\n        }\r\n    }\r\n    for (lombok.eclipse.EclipseAST.Node field : fields) {\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration f = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (field.get()));\r\n        char[] token = f.type.getLastToken();\r\n        if ((f.type.dimensions() == 0) && (token != null)) {\r\n            if (java.util.Arrays.equals(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.FLOAT, token)) {\r\n                statements.add(this.generateCompareFloatOrDouble(otherN, \"Float\".toCharArray(), f.name));\r\n            } else if (java.util.Arrays.equals(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.DOUBLE, token)) {\r\n                statements.add(this.generateCompareFloatOrDouble(otherN, \"Double\".toCharArray(), f.name));\r\n            } else if (lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES.contains(new java.lang.String(token))) {\r\n                org.eclipse.jdt.internal.compiler.ast.EqualExpression fieldsNotEqual = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(f.name, 0), this.generateQualifiedNameRef(otherN, f.name), org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL);\r\n                org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnStatement = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.FalseLiteral(0, 0), 0, 0);\r\n                statements.add(new org.eclipse.jdt.internal.compiler.ast.IfStatement(fieldsNotEqual, returnStatement, 0, 0));\r\n            } else {\r\n                org.eclipse.jdt.internal.compiler.ast.EqualExpression fieldIsNull = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(f.name, 0), new org.eclipse.jdt.internal.compiler.ast.NullLiteral(0, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL);\r\n                org.eclipse.jdt.internal.compiler.ast.EqualExpression otherFieldIsntNull = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(this.generateQualifiedNameRef(otherN, f.name), new org.eclipse.jdt.internal.compiler.ast.NullLiteral(0, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL);\r\n                org.eclipse.jdt.internal.compiler.ast.MessageSend equalsCall = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n                equalsCall.receiver = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(f.name, 0);\r\n                equalsCall.selector = \"equals\".toCharArray();\r\n                equalsCall.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ this.generateQualifiedNameRef(otherN, f.name) };\r\n                org.eclipse.jdt.internal.compiler.ast.UnaryExpression fieldsNotEqual = new org.eclipse.jdt.internal.compiler.ast.UnaryExpression(equalsCall, org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT);\r\n                org.eclipse.jdt.internal.compiler.ast.ConditionalExpression fullEquals = new org.eclipse.jdt.internal.compiler.ast.ConditionalExpression(fieldIsNull, otherFieldIsntNull, fieldsNotEqual);\r\n                org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnStatement = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.FalseLiteral(0, 0), 0, 0);\r\n                statements.add(new org.eclipse.jdt.internal.compiler.ast.IfStatement(fullEquals, returnStatement, 0, 0));\r\n            }\r\n        } else if ((f.type.dimensions() > 0) && (token != null)) {\r\n            org.eclipse.jdt.internal.compiler.ast.MessageSend arraysEqualCall = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n            arraysEqualCall.receiver = this.generateQualifiedNameRef(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA, org.eclipse.jdt.internal.compiler.lookup.TypeConstants.UTIL, \"Arrays\".toCharArray());\r\n            if ((f.type.dimensions() > 1) || (!lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES.contains(new java.lang.String(token)))) {\r\n                arraysEqualCall.selector = \"deepEquals\".toCharArray();\r\n            } else {\r\n                arraysEqualCall.selector = \"equals\".toCharArray();\r\n            }\r\n            arraysEqualCall.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(f.name, 0), this.generateQualifiedNameRef(otherN, f.name) };\r\n            org.eclipse.jdt.internal.compiler.ast.UnaryExpression arraysNotEqual = new org.eclipse.jdt.internal.compiler.ast.UnaryExpression(arraysEqualCall, org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT);\r\n            org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnStatement = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.FalseLiteral(0, 0), 0, 0);\r\n            statements.add(new org.eclipse.jdt.internal.compiler.ast.IfStatement(arraysNotEqual, returnStatement, 0, 0));\r\n        }\r\n    }\r\n    {\r\n        statements.add(new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.TrueLiteral(0, 0), 0, 0));\r\n    }\r\n    method.statements = statements.toArray(new org.eclipse.jdt.internal.compiler.ast.Statement[statements.size()]);\r\n    return method;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "labels": ["Variable"], "properties": {"sourceText": "private final java.util.regex.Pattern JAVA_AGENT_LINE_MATCHER = java.util.regex.Pattern.compile(\"^\\\\-javaagent\\\\:.*lombok.*\\\\.jar$\", java.util.regex.Pattern.CASE_INSENSITIVE);", "visibility": "private", "simpleName": "JAVA_AGENT_LINE_MATCHER", "qualifiedName": "lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(java.lang.String,java.lang.Throwable)", "qualifiedName": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)", "kind": "constructor", "sourceText": "public UninstallException(java.lang.String message, java.lang.Throwable cause) {\r\n    super(message, cause);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.doUninstall()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doUninstall()", "qualifiedName": "lombok.installer.Installer.doUninstall()", "kind": "method", "sourceText": "private void doUninstall() {\r\n    javax.swing.JPanel spinner = new javax.swing.JPanel();\r\n    spinner.setOpaque(true);\r\n    spinner.setLayout(new java.awt.FlowLayout());\r\n    spinner.add(new javax.swing.JLabel(new javax.swing.ImageIcon(lombok.installer.Installer.class.getResource(\"/lombok/installer/loading.gif\"))));\r\n    this.appWindow.setContentPane(spinner);\r\n    final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> success = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean>(true);\r\n    new java.lang.Thread() {\r\n        12() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void run() {\r\n            for (lombok.installer.EclipseLocation loc : lombok.installer.Installer.this.toUninstall) {\r\n                try {\r\n                    loc.uninstall();\r\n                } catch (final lombok.installer.EclipseLocation.UninstallException e) {\r\n                    success.set(false);\r\n                    try {\r\n                        javax.swing.SwingUtilities.invokeAndWait(new java.lang.Runnable() {\r\n                            1() {\r\n                                super();\r\n                            }\r\n\r\n                            @java.lang.Override\r\n                            public void run() {\r\n                                javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, e.getMessage(), \"Uninstall Problem\", javax.swing.JOptionPane.ERROR_MESSAGE);\r\n                            }\r\n                        });\r\n                    } catch (java.lang.Exception e2) {\r\n                        // Shouldn't happen.\r\n                        throw new java.lang.RuntimeException(e2);\r\n                    }\r\n                }\r\n            }\r\n            if (success.get()) {\r\n                javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() {\r\n                    2() {\r\n                        super();\r\n                    }\r\n\r\n                    @java.lang.Override\r\n                    public void run() {\r\n                        javax.swing.JOptionPane.showMessageDialog(lombok.installer.Installer.this.appWindow, \"Lombok has been removed from the selected Eclipse installations.\", \"Uninstall successful\", javax.swing.JOptionPane.INFORMATION_MESSAGE);\r\n                        lombok.installer.Installer.this.appWindow.setVisible(false);\r\n                        java.lang.System.exit(0);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }.start();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.JAVAC_EXAMPLE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String JAVAC_EXAMPLE = \"<html>Example: <code>javac -cp lombok.jar MyCode.java</code></html>\";", "visibility": "private", "simpleName": "JAVAC_EXAMPLE", "qualifiedName": "lombok.installer.Installer.JAVAC_EXAMPLE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n    if (this.setAndGetAsHandled(field)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.javac.JavacAST.Node> childNodes = new java.util.ArrayList<lombok.javac.JavacAST.Node>();\r\n    for (com.sun.tools.javac.tree.JCTree.JCAnnotation annotation : field.mods.annotations) {\r\n        lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildAnnotation(annotation));\r\n    }\r\n    lombok.javac.JavacAST.addIfNotNull(childNodes, this.buildExpression(field.init));\r\n    return this.putInMap(new lombok.javac.JavacAST.Node(field, childNodes, lombok.core.AST.Kind.FIELD));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "cud", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).3", "labels": ["Variable"], "properties": {"simpleName": "sourceStart", "qualifiedName": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitStatement(lombok.javac.JavacAST.Node statementNode, com.sun.tools.javac.tree.JCTree statement) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "static method", "sourceText": "/**\r\n *\r\n * @return the likely getter name for the stated field. (e.g. private boolean foo; to isFoo).\r\n */\r\nstatic java.lang.String toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n    java.lang.CharSequence fieldName = field.name;\r\n    boolean isBoolean = field.vartype.toString().equals(\"boolean\");\r\n    return lombok.core.TransformationsUtil.toGetterName(fieldName, isBoolean);\r\n}", "docComment": "\r\n@return the likely getter name for the stated field. (e.g. private boolean foo; to isFoo).\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "visibleRect", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame).0", "labels": ["Variable"], "properties": {"simpleName": "appWindow", "qualifiedName": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter", "labels": ["Structure"], "properties": {"docComment": "Standard adapter for the {@link EclipseASTVisitor} interface. Every method on that interface\r\nhas been implemented with an empty body. Override whichever methods you need.\r\n", "simpleName": "EclipseASTAdapter", "qualifiedName": "lombok.eclipse.EclipseASTAdapter", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor.trees", "labels": ["Variable"], "properties": {"sourceText": "private com.sun.source.util.Trees trees;", "visibility": "private", "simpleName": "trees", "qualifiedName": "lombok.javac.apt.Processor.trees", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleToString()", "kind": "constructor", "sourceText": "HandleToString() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fieldsOfASTClasses", "labels": ["Variable"], "properties": {"sourceText": "private static java.util.Map<java.lang.Class<? extends java.lang.Object>, java.util.Collection<lombok.core.AST.FieldAccess>> fieldsOfASTClasses = new java.util.HashMap<java.lang.Class<? extends java.lang.Object>, java.util.Collection<lombok.core.AST.FieldAccess>>();", "visibility": "private", "simpleName": "fieldsOfASTClasses", "qualifiedName": "lombok.core.AST.fieldsOfASTClasses", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.core.TransformationsUtil()", "kind": "constructor", "sourceText": "private TransformationsUtil() {\r\n    super();\r\n    // Prevent instantiation\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version", "labels": ["Structure"], "properties": {"docComment": "This class just holds lombok's current version.\r\n", "simpleName": "Version", "qualifiedName": "lombok.core.Version", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getOS()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "getOS()", "qualifiedName": "lombok.installer.EclipseFinder.getOS()", "kind": "static method", "sourceText": "static lombok.installer.EclipseFinder.OS getOS() {\r\n    java.lang.String prop = java.lang.System.getProperty(\"os.name\", \"\").toLowerCase();\r\n    if (prop.matches(\"^.*\\\\bmac\\\\b.*$\")) {\r\n        return lombok.installer.EclipseFinder.OS.MAC_OS_X;\r\n    }\r\n    if (prop.matches(\"^.*\\\\bdarwin\\\\b.*$\")) {\r\n        return lombok.installer.EclipseFinder.OS.MAC_OS_X;\r\n    }\r\n    if (prop.matches(\"^.*\\\\bwin(dows)\\\\b.*$\")) {\r\n        return lombok.installer.EclipseFinder.OS.WINDOWS;\r\n    }\r\n    return lombok.installer.EclipseFinder.OS.UNIX;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.SneakyThrows.value()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "value()", "qualifiedName": "lombok.SneakyThrows.value()", "kind": "method", "sourceText": "/**\r\n * The exception type(s) you want to sneakily throw onward.\r\n */\r\njava.lang.Class<? extends java.lang.Throwable>[] value() default java.lang.Throwable.class;", "docComment": "The exception type(s) you want to sneakily throw onward.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor).0", "labels": ["Variable"], "properties": {"simpleName": "visitor", "qualifiedName": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.installer.Installer()", "kind": "constructor", "sourceText": "/**\r\n * Creates a new installer that starts out invisible.\r\n * Call the {@link #show()} method on a freshly created installer to render it.\r\n */\r\npublic Installer() {\r\n    super();\r\n    this.appWindow = new javax.swing.JFrame(java.lang.String.format(\"Project Lombok v%s - Installer\", lombok.core.Version.getVersion()));\r\n    this.appWindow.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);\r\n    this.appWindow.setResizable(false);\r\n    this.appWindow.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(lombok.installer.Installer.class.getResource(\"lombokIcon.png\")));\r\n    try {\r\n        this.javacArea = this.buildJavacArea();\r\n        this.eclipseArea = this.buildEclipseArea();\r\n        this.uninstallArea = this.buildUninstallArea();\r\n        this.uninstallArea.setVisible(false);\r\n        this.howIWorkArea = this.buildHowIWorkArea();\r\n        this.howIWorkArea.setVisible(false);\r\n        this.buildChrome(this.appWindow.getContentPane());\r\n        this.appWindow.pack();\r\n    } catch (java.lang.Throwable t) {\r\n        this.handleException(t);\r\n    }\r\n}", "docComment": "Creates a new installer that starts out invisible.\r\nCall the {@link #show()} method on a freshly created installer to render it.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "isWarning", "qualifiedName": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[]).0", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "toModifier(lombok.AccessLevel)", "qualifiedName": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "kind": "static method", "sourceText": "static int toModifier(lombok.AccessLevel value) {\r\n    switch (value) {\r\n        case MODULE :\r\n        case PACKAGE :\r\n            return 0;\r\n        default :\r\n        case PUBLIC :\r\n            return java.lang.reflect.Modifier.PUBLIC;\r\n        case PROTECTED :\r\n            return java.lang.reflect.Modifier.PROTECTED;\r\n        case PRIVATE :\r\n            return java.lang.reflect.Modifier.PRIVATE;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Getter.value()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "value()", "qualifiedName": "lombok.Getter.value()", "kind": "method", "sourceText": "/**\r\n * If you want your setter to be non-public, you can specify an alternate access level here.\r\n */\r\nlombok.AccessLevel value() default lombok.AccessLevel.PUBLIC;", "docComment": "If you want your setter to be non-public, you can specify an alternate access level here.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "void visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "traverse(lombok.javac.JavacASTVisitor)", "qualifiedName": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "kind": "method", "sourceText": "/**\r\n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\r\n */\r\npublic void traverse(lombok.javac.JavacASTVisitor visitor) {\r\n    switch (this.getKind()) {\r\n        case COMPILATION_UNIT :\r\n            visitor.visitCompilationUnit(this, ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitCompilationUnit(this, ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (this.get())));\r\n            break;\r\n        case TYPE :\r\n            visitor.visitType(this, ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitType(this, ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (this.get())));\r\n            break;\r\n        case FIELD :\r\n            visitor.visitField(this, ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitField(this, ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.get())));\r\n            break;\r\n        case METHOD :\r\n            visitor.visitMethod(this, ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitMethod(this, ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (this.get())));\r\n            break;\r\n        case INITIALIZER :\r\n            visitor.visitInitializer(this, ((com.sun.tools.javac.tree.JCTree.JCBlock) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitInitializer(this, ((com.sun.tools.javac.tree.JCTree.JCBlock) (this.get())));\r\n            break;\r\n        case ARGUMENT :\r\n            com.sun.tools.javac.tree.JCTree.JCMethodDecl parent = ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (this.up().get()));\r\n            visitor.visitMethodArgument(this, ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.get())), parent);\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitMethodArgument(this, ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.get())), parent);\r\n            break;\r\n        case LOCAL :\r\n            visitor.visitLocal(this, ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitLocal(this, ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.get())));\r\n            break;\r\n        case STATEMENT :\r\n            visitor.visitStatement(this, this.get());\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitStatement(this, this.get());\r\n            break;\r\n        case ANNOTATION :\r\n            switch (this.up().getKind()) {\r\n                case TYPE :\r\n                    visitor.visitAnnotationOnType(((com.sun.tools.javac.tree.JCTree.JCClassDecl) (this.up().get())), this, ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (this.get())));\r\n                    break;\r\n                case FIELD :\r\n                    visitor.visitAnnotationOnField(((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.up().get())), this, ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (this.get())));\r\n                    break;\r\n                case METHOD :\r\n                    visitor.visitAnnotationOnMethod(((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (this.up().get())), this, ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (this.get())));\r\n                    break;\r\n                case ARGUMENT :\r\n                    com.sun.tools.javac.tree.JCTree.JCVariableDecl argument = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.up().get()));\r\n                    com.sun.tools.javac.tree.JCTree.JCMethodDecl method = ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (this.up().up().get()));\r\n                    visitor.visitAnnotationOnMethodArgument(argument, method, this, ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (this.get())));\r\n                    break;\r\n                case LOCAL :\r\n                    visitor.visitAnnotationOnLocal(((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.up().get())), this, ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (this.get())));\r\n                    break;\r\n                default :\r\n                    throw new java.lang.AssertionError(\"Annotion not expected as child of a \" + this.up().getKind());\r\n            }\r\n            break;\r\n        default :\r\n            throw new java.lang.AssertionError(\"Unexpected kind during node traversal: \" + this.getKind());\r\n    }\r\n}", "docComment": "Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "findServices(java.lang.Class)", "qualifiedName": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "kind": "static method", "sourceText": "/**\r\n * Returns an iterator of instances that, at least according to the spi discovery file, are implementations\r\n * of the stated class.\r\n *\r\n * Like ServiceLoader, each listed class is turned into an instance by calling the public no-args constructor.\r\n *\r\n * Convenience method that calls the more elaborate {@link #findServices(Class, ClassLoader)} method with\r\n * this {@link java.lang.Thread}'s context class loader as <code>ClassLoader</code>.\r\n *\r\n * @param target\r\n * \t\tclass to find implementations for.\r\n */\r\npublic static <C> java.util.Iterator<C> findServices(java.lang.Class<C> target) throws java.io.IOException {\r\n    return lombok.core.SpiLoadUtil.findServices(target, java.lang.Thread.currentThread().getContextClassLoader());\r\n}", "docComment": "Returns an iterator of instances that, at least according to the spi discovery file, are implementations\r\nof the stated class.\r\n\r\nLike ServiceLoader, each listed class is turned into an instance by calling the public no-args constructor.\r\n\r\nConvenience method that calls the more elaborate {@link #findServices(Class, ClassLoader)} method with\r\nthis {@link java.lang.Thread}'s context class loader as <code>ClassLoader</code>.\r\n\r\n@param target\r\n\t\tclass to find implementations for.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo", "labels": ["Structure"], "properties": {"docComment": "This class uses native calls on windows to figure out all drives,\r\nand, for each drive, if its a harddisk or something else.\r\n\r\nThe output is essentially equivalent to running windows executable:\r\n<pre>fsutil fsinfo drives</pre>\r\nand\r\n<pre>fsutil fsinfo drivetype C:</pre>\r\n\r\nexcept that (A) fsutil requires privileges, (B) someone might have moved\r\nit out of the path or some such, and (C) its output is internationalized,\r\nso unless you want to include a table of how to say \"Fixed Disk\" in 300\r\nlanguages, this really is a superior solution.\r\n<p>\r\nTo compile it, you'll need windows, as well as MinGW:\r\nhttp://sourceforge.net/projects/mingw/files/\r\n<p>\r\nFetch gcc 4.0.4+, you don't need anything extra. Toss /c/mingw/bin in\r\nyour git bash prompt's path (/etc/profile) and then run:\r\n\r\n$ gcc -c \\\r\n-I \"/c/Program Files/Java/jdk1.6.0_14/include\" \\\r\n-I \"/c/Program Files/Java/jdk1.6.0_14/include/win32\" \\\r\n-D__int64=\"long long\" lombok_installer_WindowsDriveInfo.c\r\n\r\n$ dllwrap.exe --add-stdcall-alias \\\r\n-o WindowsDriveInfo-i386.dll \\\r\nlombok_installer_WindowsDriveInfo.o\r\n\r\nYou may get a warning along the lines of \"Creating an export definition\".\r\nThis is expected behaviour.\r\n\r\n<p>\r\nNow download MinGW-w64 to build the 64-bit version of the dll (you thought you were done, weren't you?)\r\nfrom: http://sourceforge.net/projects/mingw-w64/files/\r\n (under toolchains targetting Win64 / Release for GCC 4.4.0 (or later) / the version for your OS.)\r\n\r\nThen, do this all over again, but this time with the  x86_64-w64-mingw32-gcc and\r\n x86_64-w64-mingw32-dllwrap versions that are part of the MinGW-w64 distribution.\r\n Name the dll 'WindowsDriveInfo-x86_64.dll'.\r\n\r\nBoth the 32-bit and 64-bit DLLs that this produces have been checked into the git repository\r\nunder src/lombok/installer so you won't need to build them again unless you make some changes to\r\nthe code in the winsrc directory.\r\n", "simpleName": "WindowsDriveInfo", "qualifiedName": "lombok.installer.WindowsDriveInfo", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "void visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl argument, com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "kind": "method", "sourceText": "private void doAssignmentCheck(lombok.javac.JavacAST.Node node, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> statements, com.sun.tools.javac.util.Name name) {\r\n    for (com.sun.tools.javac.tree.JCTree.JCStatement statement : statements) {\r\n        this.doAssignmentCheck0(node, statement, name);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "argNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "qualifiedName": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "kind": "method", "sourceText": "private java.util.List<lombok.eclipse.EclipseAST.Node> buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] children) {\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    if (children != null) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type : children) {\r\n            this.addIfNotNull(childNodes, this.buildType(type));\r\n        }\r\n    }\r\n    return childNodes;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseFinder.windowsDriveInfoLibLoaded", "labels": ["Variable"], "properties": {"sourceText": "private static final java.util.concurrent.atomic.AtomicBoolean windowsDriveInfoLibLoaded = new java.util.concurrent.atomic.AtomicBoolean(false);", "visibility": "private", "simpleName": "windowsDriveInfoLibLoaded", "qualifiedName": "lombok.installer.EclipseFinder.windowsDriveInfoLibLoaded", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).0", "labels": ["Variable"], "properties": {"simpleName": "annotations", "qualifiedName": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Cleanup</code> annotation for javac.\r\n", "simpleName": "HandleCleanup", "qualifiedName": "lombok.javac.handlers.HandleCleanup", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "constructor", "sourceText": "/**\r\n * Creates a new JavacAST of the provided Compilation Unit.\r\n *\r\n * @param trees\r\n * \t\tThe trees instance to use to inspect the compilation unit. Generate via:\r\n * \t\t<code>Trees.getInstance(env)</code>\r\n * @param env\r\n * \t\tThe ProcessingEnvironment object passed e.g. to an annotation processor.\r\n * @param top\r\n * \t\tThe compilation unit, which serves as the top level node in the tree to be built.\r\n */\r\npublic JavacAST(com.sun.source.util.Trees trees, com.sun.tools.javac.processing.JavacProcessingEnvironment env, com.sun.tools.javac.tree.JCTree.JCCompilationUnit top) {\r\n    super(top.sourcefile == null ? null : top.sourcefile.toString());\r\n    this.setTop(this.buildCompilationUnit(top));\r\n    this.messager = env.getMessager();\r\n    this.log = com.sun.tools.javac.util.Log.instance(env.getContext());\r\n    this.nameTable = Name.Table.instance(env.getContext());\r\n    this.treeMaker = com.sun.tools.javac.tree.TreeMaker.instance(env.getContext());\r\n    this.symtab = com.sun.tools.javac.code.Symtab.instance(env.getContext());\r\n}", "docComment": "Creates a new JavacAST of the provided Compilation Unit.\r\n\r\n@param trees\r\n\t\tThe trees instance to use to inspect the compilation unit. Generate via:\r\n\t\t<code>Trees.getInstance(env)</code>\r\n@param env\r\n\t\tThe ProcessingEnvironment object passed e.g. to an annotation processor.\r\n@param top\r\n\t\tThe compilation unit, which serves as the top level node in the tree to be built.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "labels": ["Variable"], "properties": {"simpleName": "ref", "qualifiedName": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).1", "labels": ["Variable"], "properties": {"simpleName": "base", "qualifiedName": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "void endVisitLocal(lombok.javac.JavacAST.Node localNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl local);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String INSTANCE_LOCK_NAME = \"$lock\";", "visibility": "private", "simpleName": "INSTANCE_LOCK_NAME", "qualifiedName": "lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString.exclude()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "exclude()", "qualifiedName": "lombok.ToString.exclude()", "kind": "method", "sourceText": "/**\r\n * Any fields listed here will not be printed in the generated <code>toString</code> implementation.\r\n */\r\njava.lang.String[] exclude() default {  };", "docComment": "Any fields listed here will not be printed in the generated <code>toString</code> implementation.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).0", "labels": ["Variable"], "properties": {"simpleName": "ref1", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "argument", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.appWindow", "labels": ["Variable"], "properties": {"sourceText": "private javax.swing.JFrame appWindow;", "visibility": "private", "simpleName": "appWindow", "qualifiedName": "lombok.installer.Installer.appWindow", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).2", "labels": ["Variable"], "properties": {"simpleName": "elems", "qualifiedName": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.tryClass(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "tryClass(java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.tryClass(java.lang.String)", "kind": "method", "sourceText": "private java.lang.Class<? extends java.lang.Object> tryClass(java.lang.String name) {\r\n    try {\r\n        return java.lang.Class.forName(name);\r\n    } catch (java.lang.ClassNotFoundException e) {\r\n        return null;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.SpiLoadUtil()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.core.SpiLoadUtil()", "kind": "constructor", "sourceText": "private SpiLoadUtil() {\r\n    super();\r\n    // Prevent instantiation\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.messager", "labels": ["Variable"], "properties": {"sourceText": "private final javax.annotation.processing.Messager messager;", "visibility": "private", "simpleName": "messager", "qualifiedName": "lombok.javac.HandlerLibrary.messager", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "fieldName", "qualifiedName": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor", "labels": ["Structure", "Container"], "properties": {"docComment": "Implement so you can ask any JavacAST.Node to traverse depth-first through all children,\r\ncalling the appropriate visit and endVisit methods.\r\n", "simpleName": "JavacASTVisitor", "qualifiedName": "lombok.javac.JavacASTVisitor", "kind": "interface", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows", "labels": ["Structure", "Container"], "properties": {"docComment": "Handles the <code>lombok.HandleSneakyThrows</code> annotation for eclipse.\r\n", "simpleName": "HandleSneakyThrows", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.calculateIsStructurallySignificant()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "calculateIsStructurallySignificant()", "qualifiedName": "lombok.core.AST$Node.calculateIsStructurallySignificant()", "kind": "method", "sourceText": "/**\r\n * See {@link #isStructurallySignificant}.\r\n */\r\nprotected abstract boolean calculateIsStructurallySignificant();", "docComment": "See {@link #isStructurallySignificant}.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "javacWarning(java.lang.String)", "qualifiedName": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generates a warning in the Messager that was used to initialize this HandlerLibrary.\r\n */\r\npublic void javacWarning(java.lang.String message) {\r\n    this.javacWarning(message, null);\r\n}", "docComment": "Generates a warning in the Messager that was used to initialize this HandlerLibrary.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.JavacAST$Node.addWarning(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getImportStatements()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getImportStatements()", "qualifiedName": "lombok.javac.JavacAST.getImportStatements()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.util.Collection<java.lang.String> getImportStatements() {\r\n    java.util.List<java.lang.String> imports = new java.util.ArrayList<java.lang.String>();\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (this.top().get()));\r\n    for (com.sun.tools.javac.tree.JCTree def : unit.defs) {\r\n        if (def instanceof com.sun.tools.javac.tree.JCTree.JCImport) {\r\n            imports.add(((com.sun.tools.javac.tree.JCTree.JCImport) (def)).qualid.toString());\r\n        }\r\n    }\r\n    return imports;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getProbableFQTypes(java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Attempts to translate class literals to their fully qualified names, such as 'Throwable.class' to 'java.lang.Throwable'.\r\n *\r\n * This process is at best a guess, but it will take into account import statements.\r\n */\r\npublic java.util.List<java.lang.String> getProbableFQTypes(java.lang.String annotationMethodName) {\r\n    java.util.List<java.lang.String> result = new java.util.ArrayList<java.lang.String>();\r\n    lombok.core.AnnotationValues.AnnotationValue v = this.values.get(annotationMethodName);\r\n    if (v == null) {\r\n        return java.util.Collections.emptyList();\r\n    }\r\n    for (java.lang.Object o : v.valueGuesses) {\r\n        result.add(o == null ? null : this.toFQ(o.toString()));\r\n    }\r\n    return result;\r\n}", "docComment": "Attempts to translate class literals to their fully qualified names, such as 'Throwable.class' to 'java.lang.Throwable'.\r\n\r\nThis process is at best a guess, but it will take into account import statements.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.Version.getVersion()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getVersion()", "qualifiedName": "lombok.core.Version.getVersion()", "kind": "static method", "sourceText": "/**\r\n * Get the current Lombok version.\r\n */\r\npublic static java.lang.String getVersion() {\r\n    return lombok.core.Version.VERSION;\r\n}", "docComment": "Get the current Lombok version.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCMethodDecl createEquals(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> fields, boolean callSuper) {\r\n    com.sun.tools.javac.tree.TreeMaker maker = typeNode.getTreeMaker();\r\n    com.sun.tools.javac.tree.JCTree.JCClassDecl type = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get()));\r\n    com.sun.tools.javac.util.Name oName = typeNode.toName(\"o\");\r\n    com.sun.tools.javac.util.Name otherName = typeNode.toName(\"other\");\r\n    com.sun.tools.javac.util.Name thisName = typeNode.toName(\"this\");\r\n    com.sun.tools.javac.tree.JCTree.JCAnnotation overrideAnnotation = maker.Annotation(lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"lang\", \"Override\"), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil());\r\n    com.sun.tools.javac.tree.JCTree.JCModifiers mods = maker.Modifiers(Flags.PUBLIC, com.sun.tools.javac.util.List.of(overrideAnnotation));\r\n    com.sun.tools.javac.tree.JCTree.JCExpression objectType = maker.Type(typeNode.getSymbolTable().objectType);\r\n    com.sun.tools.javac.tree.JCTree.JCExpression returnType = maker.TypeIdent(TypeTags.BOOLEAN);\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCStatement> statements = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCVariableDecl> params = com.sun.tools.javac.util.List.of(maker.VarDef(maker.Modifiers(0), oName, objectType, null));\r\n    {\r\n        statements = statements.append(maker.If(maker.Binary(JCTree.EQ, maker.Ident(oName), maker.Ident(thisName)), this.returnBool(maker, true), null));\r\n    }\r\n    {\r\n        statements = statements.append(maker.If(maker.Binary(JCTree.EQ, maker.Ident(oName), maker.Literal(TypeTags.BOT, null)), this.returnBool(maker, false), null));\r\n    }\r\n    {\r\n        com.sun.tools.javac.util.Name getClass = typeNode.toName(\"getClass\");\r\n        com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> exprNil = com.sun.tools.javac.util.List.nil();\r\n        com.sun.tools.javac.tree.JCTree.JCExpression oGetClass = maker.Apply(exprNil, maker.Select(maker.Ident(oName), getClass), exprNil);\r\n        com.sun.tools.javac.tree.JCTree.JCExpression thisGetClass = maker.Apply(exprNil, maker.Select(maker.Ident(thisName), getClass), exprNil);\r\n        statements = statements.append(maker.If(maker.Binary(JCTree.NE, oGetClass, thisGetClass), this.returnBool(maker, false), null));\r\n    }\r\n    /* if ( !super.equals(o) ) return false; */\r\n    if (callSuper) {\r\n        com.sun.tools.javac.tree.JCTree.JCMethodInvocation callToSuper = maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), maker.Select(maker.Ident(typeNode.toName(\"super\")), typeNode.toName(\"equals\")), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>of(maker.Ident(oName)));\r\n        com.sun.tools.javac.tree.JCTree.JCUnary superNotEqual = maker.Unary(JCTree.NOT, callToSuper);\r\n        statements = statements.append(maker.If(superNotEqual, this.returnBool(maker, false), null));\r\n    }\r\n    {\r\n        final com.sun.tools.javac.tree.JCTree.JCExpression selfType1;\r\n        final com.sun.tools.javac.tree.JCTree.JCExpression selfType2;\r\n        com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> wildcards1 = com.sun.tools.javac.util.List.nil();\r\n        com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> wildcards2 = com.sun.tools.javac.util.List.nil();\r\n        for (int i = 0; i < type.typarams.length(); i++) {\r\n            wildcards1 = wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND), null));\r\n            wildcards2 = wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND), null));\r\n        }\r\n        if (type.typarams.isEmpty()) {\r\n            selfType1 = maker.Ident(type.name);\r\n            selfType2 = maker.Ident(type.name);\r\n        } else {\r\n            selfType1 = maker.TypeApply(maker.Ident(type.name), wildcards1);\r\n            selfType2 = maker.TypeApply(maker.Ident(type.name), wildcards2);\r\n        }\r\n        statements = statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL), otherName, selfType1, maker.TypeCast(selfType2, maker.Ident(oName))));\r\n    }\r\n    for (lombok.javac.JavacAST.Node fieldNode : fields) {\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl field = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fieldNode.get()));\r\n        com.sun.tools.javac.tree.JCTree.JCExpression fType = field.vartype;\r\n        com.sun.tools.javac.tree.JCTree.JCExpression thisDotField = maker.Select(maker.Ident(thisName), field.name);\r\n        com.sun.tools.javac.tree.JCTree.JCExpression otherDotField = maker.Select(maker.Ident(otherName), field.name);\r\n        if (fType instanceof com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree) {\r\n            switch (((com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree) (fType)).getPrimitiveTypeKind()) {\r\n                case FLOAT :\r\n                    /* if ( Float.compare(this.fieldName, other.fieldName) != 0 ) return false; */\r\n                    statements = statements.append(this.generateCompareFloatOrDouble(thisDotField, otherDotField, maker, typeNode, false));\r\n                    break;\r\n                case DOUBLE :\r\n                    /* if ( Double(this.fieldName, other.fieldName) != 0 ) return false; */\r\n                    statements = statements.append(this.generateCompareFloatOrDouble(thisDotField, otherDotField, maker, typeNode, true));\r\n                    break;\r\n                default :\r\n                    /* if ( this.fieldName != other.fieldName ) return false; */\r\n                    statements = statements.append(maker.If(maker.Binary(JCTree.NE, thisDotField, otherDotField), this.returnBool(maker, false), null));\r\n                    break;\r\n            }\r\n        } else if (fType instanceof com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) {\r\n            /* if ( !java.util.Arrays.deepEquals(this.fieldName, other.fieldName) ) return false; //use equals for primitive arrays. */\r\n            boolean multiDim = ((com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) (fType)).elemtype instanceof com.sun.tools.javac.tree.JCTree.JCArrayTypeTree;\r\n            boolean primitiveArray = ((com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) (fType)).elemtype instanceof com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree;\r\n            boolean useDeepEquals = multiDim || (!primitiveArray);\r\n            com.sun.tools.javac.tree.JCTree.JCExpression eqMethod = lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"util\", \"Arrays\", useDeepEquals ? \"deepEquals\" : \"equals\");\r\n            com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> args = com.sun.tools.javac.util.List.of(thisDotField, otherDotField);\r\n            statements = statements.append(maker.If(maker.Unary(JCTree.NOT, maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), eqMethod, args)), this.returnBool(maker, false), null));\r\n        } else {\r\n            /* if ( this.fieldName == null ? other.fieldName != null : !this.fieldName.equals(other.fieldName) ) return false; */\r\n            com.sun.tools.javac.tree.JCTree.JCExpression thisEqualsNull = maker.Binary(JCTree.EQ, thisDotField, maker.Literal(TypeTags.BOT, null));\r\n            com.sun.tools.javac.tree.JCTree.JCExpression otherNotEqualsNull = maker.Binary(JCTree.NE, otherDotField, maker.Literal(TypeTags.BOT, null));\r\n            com.sun.tools.javac.tree.JCTree.JCExpression thisEqualsThat = maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), maker.Select(thisDotField, typeNode.toName(\"equals\")), com.sun.tools.javac.util.List.of(otherDotField));\r\n            com.sun.tools.javac.tree.JCTree.JCExpression fieldsAreNotEqual = maker.Conditional(thisEqualsNull, otherNotEqualsNull, maker.Unary(JCTree.NOT, thisEqualsThat));\r\n            statements = statements.append(maker.If(fieldsAreNotEqual, this.returnBool(maker, false), null));\r\n        }\r\n    }\r\n    {\r\n        statements = statements.append(this.returnBool(maker, true));\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCBlock body = maker.Block(0, statements);\r\n    return maker.MethodDef(mods, typeNode.toName(\"equals\"), returnType, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCTypeParameter>nil(), params, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), body, null);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "kind": "method", "sourceText": "/**\r\n * Visits a local declaration - that is, something like 'int x = 10;' on the method level.\r\n */\r\nvoid visitLocal(lombok.eclipse.EclipseAST.Node localNode, org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local);", "docComment": "Visits a local declaration - that is, something like 'int x = 10;' on the method level.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Getter</code> annotation for eclipse.\r\n", "simpleName": "HandleGetter", "qualifiedName": "lombok.eclipse.handlers.HandleGetter", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).2", "labels": ["Variable"], "properties": {"simpleName": "index", "qualifiedName": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "public void endVisitStatement(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Statement statement) {\r\n    this.indent--;\r\n    this.print(\"</%s>\", statement.getClass());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor).0", "labels": ["Variable"], "properties": {"simpleName": "visitor", "qualifiedName": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.messager", "labels": ["Variable"], "properties": {"sourceText": "private final javax.annotation.processing.Messager messager;", "visibility": "private", "simpleName": "messager", "qualifiedName": "lombok.javac.JavacAST.messager", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.HandleGetter()", "kind": "constructor", "sourceText": "HandleGetter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "qualifiedName": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "kind": "method", "sourceText": "private boolean replaceStatementInCollection(java.lang.reflect.Field field, java.lang.Object fieldRef, java.util.List<java.util.Collection<? extends java.lang.Object>> chain, java.util.Collection<? extends java.lang.Object> collection, N oldN, N newN) throws java.lang.IllegalAccessException {\r\n    if (collection == null) {\r\n        return false;\r\n    }\r\n    int idx = -1;\r\n    for (java.lang.Object o : collection) {\r\n        idx++;\r\n        if (o == null) {\r\n            continue;\r\n        }\r\n        if (java.util.Collection.class.isInstance(o)) {\r\n            java.util.Collection<? extends java.lang.Object> newC = ((java.util.Collection<? extends java.lang.Object>) (o));\r\n            java.util.List<java.util.Collection<? extends java.lang.Object>> newChain = new java.util.ArrayList<java.util.Collection<? extends java.lang.Object>>(chain);\r\n            newChain.add(newC);\r\n            if (this.replaceStatementInCollection(field, fieldRef, newChain, newC, oldN, newN)) {\r\n                return true;\r\n            }\r\n        }\r\n        if (o == oldN) {\r\n            this.setElementInASTCollection(field, fieldRef, chain, collection, idx, newN);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.processingEnv", "labels": ["Variable"], "properties": {"sourceText": "private com.sun.tools.javac.processing.JavacProcessingEnvironment processingEnv;", "visibility": "private", "simpleName": "processingEnv", "qualifiedName": "lombok.javac.apt.Processor.processingEnv", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "private lombok.javac.JavacAST.Node buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    if (this.setAndGetAsHandled(annotation)) {\r\n        return null;\r\n    }\r\n    return this.putInMap(new lombok.javac.JavacAST.Node(annotation, null, lombok.core.AST.Kind.ANNOTATION));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitLocal(lombok.eclipse.EclipseAST.Node localNode, org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "labels": ["Variable"], "properties": {"simpleName": "params", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.top()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "top()", "qualifiedName": "lombok.eclipse.EclipseAST$Node.top()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.eclipse.EclipseAST.Node top() {\r\n    return ((lombok.eclipse.EclipseAST.Node) (super.top()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.node", "labels": ["Variable"], "properties": {"sourceText": "private final lombok.core.AST<? extends java.lang.Object>.Node node;", "visibility": "private", "simpleName": "node", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.node", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.rebuild()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "rebuild()", "qualifiedName": "lombok.core.AST$Node.rebuild()", "kind": "method", "sourceText": "/**\r\n * Reparses the AST node represented by this node. Any existing nodes that occupy a different space in the AST are rehomed, any\r\n * nodes that no longer exist are removed, and new nodes are created.\r\n *\r\n * Careful - the node you call this on must not itself have been removed or rehomed - it rebuilds <i>all children</i>.\r\n */\r\npublic void rebuild() {\r\n    java.util.Map<N, lombok.core.AST<N>.Node> oldNodes = new java.util.IdentityHashMap<N, lombok.core.AST<N>.Node>();\r\n    this.gatherAndRemoveChildren(oldNodes);\r\n    lombok.core.AST<N>.Node newNode = this.buildTree(this.get(), this.kind);\r\n    this.replaceNewWithExistingOld(oldNodes, newNode);\r\n}", "docComment": "Reparses the AST node represented by this node. Any existing nodes that occupy a different space in the AST are rehomed, any\r\nnodes that no longer exist are removed, and new nodes are created.\r\n\r\nCareful - the node you call this on must not itself have been removed or rehomed - it rebuilds <i>all children</i>.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "qualifiedName": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "kind": "method", "sourceText": "private boolean replaceStatementInField(lombok.core.AST.FieldAccess fa, N statement, N oldN, N newN) {\r\n    try {\r\n        java.lang.Object o = fa.field.get(statement);\r\n        if (o == null) {\r\n            return false;\r\n        }\r\n        if (o == oldN) {\r\n            fa.field.set(statement, newN);\r\n            return true;\r\n        }\r\n        if (fa.dim > 0) {\r\n            if (o.getClass().isArray()) {\r\n                return this.replaceStatementInArray(o, oldN, newN);\r\n            } else if (java.util.Collection.class.isInstance(o)) {\r\n                return this.replaceStatementInCollection(fa.field, statement, new java.util.ArrayList<java.util.Collection<? extends java.lang.Object>>(), ((java.util.Collection<? extends java.lang.Object>) (o)), oldN, newN);\r\n            }\r\n        }\r\n        return false;\r\n    } catch (java.lang.IllegalAccessException e) {\r\n        throw lombok.Lombok.sneakyThrow(e);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.simpleToQualifiedMap", "labels": ["Variable"], "properties": {"sourceText": "private final java.util.Map<java.lang.String, java.util.Set<java.lang.String>> simpleToQualifiedMap = new java.util.HashMap<java.lang.String, java.util.Set<java.lang.String>>();", "visibility": "private", "simpleName": "simpleToQualifiedMap", "qualifiedName": "lombok.core.TypeLibrary.simpleToQualifiedMap", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).0", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitLocal(lombok.javac.JavacAST.Node localNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl local) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getRawExpression(java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Convenience method to return the first result in a {@link #getRawExpressions(String)} call.\r\n *\r\n * You should use this method if the annotation method is not an array type.\r\n */\r\npublic java.lang.String getRawExpression(java.lang.String annotationMethodName) {\r\n    java.util.List<java.lang.String> l = this.getRawExpressions(annotationMethodName);\r\n    return l.isEmpty() ? null : l.get(0);\r\n}", "docComment": "Convenience method to return the first result in a {@link #getRawExpressions(String)} call.\r\n\r\nYou should use this method if the annotation method is not an array type.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setAndGetAsHandled(java.lang.Object)", "qualifiedName": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "kind": "method", "sourceText": "/**\r\n * Marks the stated node as handled (to avoid endless loops if 2 nodes refer to each other, or a node\r\n * refers to itself). Will then return true if it was already set as handled before this call - in which\r\n * case you should do nothing lest the AST build process loops endlessly.\r\n */\r\nprotected boolean setAndGetAsHandled(N node) {\r\n    if (this.identityDetector.containsKey(node)) {\r\n        return true;\r\n    }\r\n    this.identityDetector.put(node, null);\r\n    return false;\r\n}", "docComment": "Marks the stated node as handled (to avoid endless loops if 2 nodes refer to each other, or a node\r\nrefers to itself). Will then return true if it was already set as handled before this call - in which\r\ncase you should do nothing lest the AST build process loops endlessly.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "labels": ["Variable"], "properties": {"sourceText": "private final java.util.regex.Pattern BOOTCLASSPATH_LINE_MATCHER = java.util.regex.Pattern.compile(\"^\\\\-Xbootclasspath\\\\/a\\\\:(.*lombok.*\\\\.jar.*)$\", java.util.regex.Pattern.CASE_INSENSITIVE);", "visibility": "private", "simpleName": "BOOTCLASSPATH_LINE_MATCHER", "qualifiedName": "lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.handlers", "labels": ["Variable"], "properties": {"sourceText": "private lombok.javac.HandlerLibrary handlers;", "visibility": "private", "simpleName": "handlers", "qualifiedName": "lombok.javac.apt.Processor.handlers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException", "labels": ["Structure"], "properties": {"docComment": "Thrown when installing lombok fails.\r\n", "simpleName": "InstallException", "qualifiedName": "lombok.installer.EclipseLocation$InstallException", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "qualifiedName": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "kind": "static method", "sourceText": "private static void setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration ast, lombok.eclipse.EclipseAST cache) {\r\n    if (lombok.eclipse.TransformEclipseAST.astCacheField != null) {\r\n        try {\r\n            lombok.eclipse.TransformEclipseAST.astCacheField.set(ast, cache);\r\n        } catch (java.lang.Exception ignore) {\r\n            ignore.printStackTrace();\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "kind": "static method", "sourceText": "private static void addIfNotNull(java.util.Collection<lombok.javac.JavacAST.Node> nodes, lombok.javac.JavacAST.Node node) {\r\n    if (node != null) {\r\n        nodes.add(node);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "void endVisitMethod(lombok.javac.JavacAST.Node methodNode, com.sun.tools.javac.tree.JCTree.JCMethodDecl method);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.Synchronized> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    lombok.javac.JavacAST.Node methodNode = annotationNode.up();\r\n    if (((methodNode == null) || (methodNode.getKind() != lombok.core.AST.Kind.METHOD)) || (!(methodNode.get() instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl))) {\r\n        annotationNode.addError(\"@Synchronized is legal only on methods.\");\r\n        return true;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCMethodDecl method = ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (methodNode.get()));\r\n    if ((method.mods.flags & com.sun.tools.javac.code.Flags.ABSTRACT) != 0) {\r\n        annotationNode.addError(\"@Synchronized is legal only on concrete methods.\");\r\n        return true;\r\n    }\r\n    boolean isStatic = (method.mods.flags & com.sun.tools.javac.code.Flags.STATIC) != 0;\r\n    java.lang.String lockName = annotation.getInstance().value();\r\n    boolean autoMake = false;\r\n    if (lockName.length() == 0) {\r\n        autoMake = true;\r\n        lockName = (isStatic) ? lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME : lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME;\r\n    }\r\n    com.sun.tools.javac.tree.TreeMaker maker = methodNode.getTreeMaker();\r\n    if (lombok.javac.handlers.PKG.fieldExists(lockName, methodNode) == lombok.javac.handlers.PKG.MemberExistsResult.NOT_EXISTS) {\r\n        if (!autoMake) {\r\n            annotationNode.addError((\"The field \" + new java.lang.String(lockName)) + \" does not exist.\");\r\n            return true;\r\n        }\r\n        com.sun.tools.javac.tree.JCTree.JCExpression objectType = lombok.javac.handlers.PKG.chainDots(maker, methodNode, \"java\", \"lang\", \"Object\");\r\n        // We use 'new Object[0];' because quite unlike 'new Object();', empty arrays *ARE* serializable!\r\n        com.sun.tools.javac.tree.JCTree.JCNewArray newObjectArray = maker.NewArray(lombok.javac.handlers.PKG.chainDots(maker, methodNode, \"java\", \"lang\", \"Object\"), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>of(maker.Literal(TypeTags.INT, 0)), null);\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldDecl = maker.VarDef(maker.Modifiers(com.sun.tools.javac.code.Flags.FINAL | (isStatic ? com.sun.tools.javac.code.Flags.STATIC : 0)), methodNode.toName(lockName), objectType, newObjectArray);\r\n        lombok.javac.handlers.PKG.injectField(methodNode.up(), fieldDecl);\r\n    }\r\n    if (method.body == null) {\r\n        return false;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCExpression lockNode = maker.Ident(methodNode.toName(lockName));\r\n    method.body = maker.Block(0, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCStatement>of(maker.Synchronized(lockNode, method.body)));\r\n    methodNode.rebuild();\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.printHeadlessInfo()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "printHeadlessInfo()", "qualifiedName": "lombok.installer.Installer.printHeadlessInfo()", "kind": "static method", "sourceText": "/**\r\n * If run in headless mode, the installer can't show its fancy GUI. There's little point in running\r\n * the installer without a GUI environment, as Eclipse doesn't run in headless mode either, so\r\n * we'll make do with showing some basic info on Lombok as well as instructions for using lombok with javac.\r\n */\r\nprivate static void printHeadlessInfo() {\r\n    java.lang.System.out.printf(\"About lombok v%s\\n\" + ((((((\"Lombok makes java better by providing very spicy additions to the Java programming language,\" + \"such as using @Getter to automatically generate a getter method for any field.\\n\\n\") + \"Browse to %s for more information. To install lombok on Eclipse, re-run this jar file on a \") + \"graphical computer system - this message is being shown because your terminal is not graphics capable.\") + \"If you are just using 'javac' or a tool that calls on javac, no installation is neccessary; just \") + \"make sure lombok.jar is in the classpath when you compile. Example:\\n\\n\") + \"   java -cp lombok.jar MyCode.java\"), lombok.core.Version.getVersion(), lombok.installer.Installer.ABOUT_LOMBOK_URL);\r\n}", "docComment": "If run in headless mode, the installer can't show its fancy GUI. There's little point in running\r\nthe installer without a GUI environment, as Eclipse doesn't run in headless mode either, so\r\nwe'll make do with showing some basic info on Lombok as well as instructions for using lombok with javac.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeLibrary.findCompatible(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "typeReference", "qualifiedName": "lombok.core.TypeLibrary.findCompatible(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "private void traverseChildren(lombok.eclipse.EclipseASTVisitor visitor, lombok.eclipse.EclipseAST.Node node) {\r\n    for (lombok.eclipse.EclipseAST.Node child : node.down()) {\r\n        child.traverse(visitor);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "child", "qualifiedName": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "void endVisitMethod(lombok.eclipse.EclipseAST.Node methodNode, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "static method", "sourceText": "static void injectField(lombok.eclipse.EclipseAST.Node type, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field) {\r\n    org.eclipse.jdt.internal.compiler.ast.TypeDeclaration parent = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (type.get()));\r\n    if (parent.fields == null) {\r\n        parent.fields = new org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[1];\r\n        parent.fields[0] = field;\r\n    } else {\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] newArray = new org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[parent.fields.length + 1];\r\n        java.lang.System.arraycopy(parent.fields, 0, newArray, 0, parent.fields.length);\r\n        newArray[parent.fields.length] = field;\r\n        parent.fields = newArray;\r\n    }\r\n    type.add(field, lombok.core.AST.Kind.FIELD).recursiveSetHandled();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException.serialVersionUID", "labels": ["Variable"], "properties": {"sourceText": "private static final long serialVersionUID = 1L;", "visibility": "private", "simpleName": "serialVersionUID", "qualifiedName": "lombok.installer.EclipseLocation$NotAnEclipseException.serialVersionUID", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.skipAllButPrintAST()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skipAllButPrintAST()", "qualifiedName": "lombok.javac.HandlerLibrary.skipAllButPrintAST()", "kind": "method", "sourceText": "/**\r\n *\r\n * @see #skipPrintAST()\r\n */\r\npublic void skipAllButPrintAST() {\r\n    this.skipPrintAST = false;\r\n}", "docComment": "\r\n@see #skipPrintAST()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "readServicesFromUrl(java.util.Collection,java.net.URL)", "qualifiedName": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "kind": "static method", "sourceText": "private static void readServicesFromUrl(java.util.Collection<java.lang.String> list, java.net.URL url) throws java.io.IOException {\r\n    java.io.InputStream in = url.openStream();\r\n    try {\r\n        if (in == null) {\r\n            return;\r\n        }\r\n        java.io.BufferedReader r = new java.io.BufferedReader(new java.io.InputStreamReader(in, \"UTF-8\"));\r\n        while (true) {\r\n            java.lang.String line = r.readLine();\r\n            if (line == null) {\r\n                break;\r\n            }\r\n            int idx = line.indexOf('#');\r\n            if (idx != (-1)) {\r\n                line = line.substring(0, idx);\r\n            }\r\n            line = line.trim();\r\n            if (line.length() == 0) {\r\n                continue;\r\n            }\r\n            list.add(line);\r\n        } \r\n    } finally {\r\n        try {\r\n            in.close();\r\n        } catch (java.lang.Throwable ignore) {\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.HandlerLibrary()", "kind": "constructor", "sourceText": "/**\r\n * Creates a new HandlerLibrary. Errors will be reported to the Eclipse Error log.\r\n * You probably want to use {@link #load()} instead.\r\n */\r\npublic HandlerLibrary() {\r\n    super();\r\n}", "docComment": "Creates a new HandlerLibrary. Errors will be reported to the Eclipse Error log.\r\nYou probably want to use {@link #load()} instead.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "errorNode", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.Synchronized> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    int p1 = ast.sourceStart - 1;\r\n    int p2 = ast.sourceStart - 2;\r\n    long pos = (((long) (p1)) << 32) | p2;\r\n    lombok.eclipse.EclipseAST.Node methodNode = annotationNode.up();\r\n    if (((methodNode == null) || (methodNode.getKind() != lombok.core.AST.Kind.METHOD)) || (!(methodNode.get() instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration))) {\r\n        annotationNode.addError(\"@Synchronized is legal only on methods.\");\r\n        return true;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = ((org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) (methodNode.get()));\r\n    if (method.isAbstract()) {\r\n        annotationNode.addError(\"@Synchronized is legal only on concrete methods.\");\r\n        return true;\r\n    }\r\n    char[] lockName = annotation.getInstance().value().toCharArray();\r\n    boolean autoMake = false;\r\n    if (lockName.length == 0) {\r\n        autoMake = true;\r\n        lockName = (method.isStatic()) ? lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME : lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME;\r\n    }\r\n    if (lombok.eclipse.handlers.PKG.fieldExists(new java.lang.String(lockName), methodNode) == lombok.eclipse.handlers.PKG.MemberExistsResult.NOT_EXISTS) {\r\n        if (!autoMake) {\r\n            annotationNode.addError((\"The field \" + new java.lang.String(lockName)) + \" does not exist.\");\r\n            return true;\r\n        }\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl = new org.eclipse.jdt.internal.compiler.ast.FieldDeclaration(lockName, 0, -1);\r\n        fieldDecl.declarationSourceEnd = -1;\r\n        fieldDecl.modifiers = ((method.isStatic() ? java.lang.reflect.Modifier.STATIC : 0) | java.lang.reflect.Modifier.FINAL) | java.lang.reflect.Modifier.PRIVATE;\r\n        // We use 'new Object[0];' because quite unlike 'new Object();', empty arrays *ARE* serializable!\r\n        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression arrayAlloc = new org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression();\r\n        arrayAlloc.dimensions = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ new org.eclipse.jdt.internal.compiler.ast.IntLiteral(new char[]{ '0' }, 0, 0) };\r\n        arrayAlloc.type = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_OBJECT, new long[]{ 0, 0, 0 });\r\n        fieldDecl.type = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_OBJECT, new long[]{ 0, 0, 0 });\r\n        fieldDecl.initialization = arrayAlloc;\r\n        lombok.eclipse.handlers.PKG.injectField(annotationNode.up().up(), fieldDecl);\r\n    }\r\n    if (method.statements == null) {\r\n        return false;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.Block block = new org.eclipse.jdt.internal.compiler.ast.Block(0);\r\n    block.statements = method.statements;\r\n    org.eclipse.jdt.internal.compiler.ast.Expression lockVariable;\r\n    if (method.isStatic()) {\r\n        lockVariable = new org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference(new char[][]{ methodNode.up().getName().toCharArray(), lockName }, new long[]{ pos, pos }, p1, p2);\r\n    } else {\r\n        lockVariable = new org.eclipse.jdt.internal.compiler.ast.FieldReference(lockName, pos);\r\n        ((org.eclipse.jdt.internal.compiler.ast.FieldReference) (lockVariable)).receiver = new org.eclipse.jdt.internal.compiler.ast.ThisReference(p1, p2);\r\n    }\r\n    method.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ new org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement(lockVariable, block, 0, 0) };\r\n    methodNode.rebuild();\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkForLombok0(java.io.File)", "qualifiedName": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "kind": "method", "sourceText": "private boolean checkForLombok0(java.io.File dir) throws java.io.IOException {\r\n    java.io.File iniFile = new java.io.File(dir, \"eclipse.ini\");\r\n    if (!iniFile.exists()) {\r\n        return false;\r\n    }\r\n    java.io.FileInputStream fis = new java.io.FileInputStream(iniFile);\r\n    try {\r\n        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(fis));\r\n        java.lang.String line;\r\n        while ((line = br.readLine()) != null) {\r\n            if (this.JAVA_AGENT_LINE_MATCHER.matcher(line.trim()).matches()) {\r\n                return true;\r\n            }\r\n        } \r\n        return false;\r\n    } finally {\r\n        fis.close();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac", "labels": ["Container"], "properties": {"simpleName": "javac", "qualifiedName": "lombok.javac", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "labels": ["Variable"], "properties": {"simpleName": "params", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "fa", "qualifiedName": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.EqualsAndHashCode.exclude()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "exclude()", "qualifiedName": "lombok.EqualsAndHashCode.exclude()", "kind": "method", "sourceText": "/**\r\n * Any fields listed here will not be taken into account in the generated\r\n * <code>equals</code> and <code>hashCode</code> implementations.\r\n */\r\njava.lang.String[] exclude() default {  };", "docComment": "Any fields listed here will not be taken into account in the generated\r\n<code>equals</code> and <code>hashCode</code> implementations.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element).0", "labels": ["Variable"], "properties": {"simpleName": "element", "qualifiedName": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "qualifiedName": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "kind": "method", "sourceText": "@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate <T extends lombok.core.AST<N>.Node> void buildWithArray(java.lang.Class<T> nodeType, java.lang.Object array, java.util.Collection<T> list, int dim) {\r\n    if (dim == 1) {\r\n        for (java.lang.Object v : ((java.lang.Object[]) (array))) {\r\n            if (v == null) {\r\n                continue;\r\n            }\r\n            lombok.core.AST<N>.Node node = this.buildTree(((N) (v)), lombok.core.AST.Kind.STATEMENT);\r\n            if (node != null) {\r\n                list.add(nodeType.cast(node));\r\n            }\r\n        }\r\n    } else {\r\n        for (java.lang.Object v : ((java.lang.Object[]) (array))) {\r\n            if (v == null) {\r\n                return;\r\n            }\r\n            this.buildWithArray(nodeType, v, list, dim - 1);\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitField(lombok.eclipse.EclipseAST.Node fieldNode, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "public void visitMethod(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n    java.lang.String type = (method instanceof org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) ? \"CONSTRUCTOR\" : \"METHOD\";\r\n    this.print(\"<%s %s: %s>\", type, this.str(method.selector), method.statements != null ? \"filled\" : \"blank\");\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        if (method.statements != null) {\r\n            this.print(\"%s\", method);\r\n        }\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "public void generateEqualsAndHashCodeForType(lombok.javac.JavacAST.Node typeNode, lombok.javac.JavacAST.Node errorNode) {\r\n    for (lombok.javac.JavacAST.Node child : typeNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.javac.Javac.annotationTypeMatches(lombok.EqualsAndHashCode.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    boolean callSuper = false;\r\n    try {\r\n        callSuper = ((java.lang.Boolean) (lombok.EqualsAndHashCode.class.getMethod(\"callSuper\").getDefaultValue())).booleanValue();\r\n    } catch (java.lang.Exception ignore) {\r\n    }\r\n    this.generateMethods(typeNode, errorNode, com.sun.tools.javac.util.List.<java.lang.String>nil(), callSuper, false);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer", "labels": ["Structure"], "properties": {"docComment": "Prints the structure of an AST.\r\n", "simpleName": "Printer", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.Synchronized.value()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "value()", "qualifiedName": "lombok.Synchronized.value()", "kind": "method", "sourceText": "/**\r\n * Optional: specify the name of a different field to lock on. It is a compile time error if this field\r\n * doesn't already exist (the fields are automatically generated only if you don't specify a specific name.\r\n */\r\njava.lang.String value() default \"\";", "docComment": "Optional: specify the name of a different field to lock on. It is a compile time error if this field\r\ndoesn't already exist (the fields are automatically generated only if you don't specify a specific name.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl type, lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    this.forcePrint(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue", "labels": ["Structure"], "properties": {"docComment": "Represents a single method on the annotation class. For example, the value() method on the Getter annotation.\r\n", "simpleName": "AnnotationValue", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "forcePrint(java.lang.String,java.lang.Object[])", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "kind": "method", "sourceText": "private void forcePrint(java.lang.String text, java.lang.Object... params) {\r\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\r\n    for (int i = 0; i < this.indent; i++) {\r\n        sb.append(\"  \");\r\n    }\r\n    this.out.printf(sb.append(text).append('\\n').toString(), params);\r\n    this.out.flush();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "importStrings", "qualifiedName": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "qualifiedName": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "kind": "method", "sourceText": "/**\r\n * buildTree implementation that uses reflection to find all child nodes by way of inspecting\r\n * the fields.\r\n */\r\nprotected <T extends lombok.core.AST<N>.Node> java.util.Collection<T> buildWithField(java.lang.Class<T> nodeType, N statement, lombok.core.AST.FieldAccess fa) {\r\n    java.util.List<T> list = new java.util.ArrayList<T>();\r\n    this.buildWithField0(nodeType, statement, fa, list);\r\n    return list;\r\n}", "docComment": "buildTree implementation that uses reflection to find all child nodes by way of inspecting\r\nthe fields.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "maker", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setAndGetAsHandled(java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.core.AST.setAndGetAsHandled(java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.eclipse.EclipseAST.Node get(org.eclipse.jdt.internal.compiler.ast.ASTNode node) {\r\n    return ((lombok.eclipse.EclipseAST.Node) (super.get(node)));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "add(java.lang.Object,lombok.core.AST$Kind)", "qualifiedName": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "kind": "method", "sourceText": "/**\r\n * Adds the stated node as a direct child of this node.\r\n *\r\n * Does not change the underlying (javac/Eclipse) AST, only the wrapped view.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic lombok.core.AST<N>.Node add(N newChild, lombok.core.AST.Kind kind) {\r\n    lombok.core.AST<N>.Node n = this.buildTree(newChild, kind);\r\n    if (n == null) {\r\n        return null;\r\n    }\r\n    n.parent = this;\r\n    ((java.util.List) (this.children)).add(n);\r\n    return n;\r\n}", "docComment": "Adds the stated node as a direct child of this node.\r\n\r\nDoes not change the underlying (javac/Eclipse) AST, only the wrapped view.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "kind": "method", "sourceText": "public void endVisitInitializer(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Initializer initializer) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    this.indent--;\r\n    this.print(\"</%s INITIALIZER>\", (initializer.modifiers & java.lang.reflect.Modifier.STATIC) != 0 ? \"static\" : \"instance\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "labels": ["Variable"], "properties": {"simpleName": "modifier", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "char", "labels": ["Primitive"], "properties": {"simpleName": "char", "qualifiedName": "char", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "kind": "constructor", "sourceText": "public AnnotationValueDecodeFail(lombok.core.AnnotationValues.AnnotationValue owner, java.lang.String msg, int idx) {\r\n    super(msg);\r\n    this.idx = idx;\r\n    this.owner = owner;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok", "labels": ["Container"], "properties": {"simpleName": "lombok", "qualifiedName": "lombok", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "kind": "static method", "sourceText": "/**\r\n * Provides AnnotationValues with the data it needs to do its thing.\r\n */\r\npublic static <A extends java.lang.annotation.Annotation> lombok.core.AnnotationValues<A> createAnnotation(java.lang.Class<A> type, final lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    final org.eclipse.jdt.internal.compiler.ast.Annotation annotation = ((org.eclipse.jdt.internal.compiler.ast.Annotation) (annotationNode.get()));\r\n    java.util.Map<java.lang.String, lombok.core.AnnotationValues.AnnotationValue> values = new java.util.HashMap<java.lang.String, lombok.core.AnnotationValues.AnnotationValue>();\r\n    final org.eclipse.jdt.internal.compiler.ast.MemberValuePair[] pairs = annotation.memberValuePairs();\r\n    for (java.lang.reflect.Method m : type.getDeclaredMethods()) {\r\n        if (!java.lang.reflect.Modifier.isPublic(m.getModifiers())) {\r\n            continue;\r\n        }\r\n        java.lang.String name = m.getName();\r\n        java.util.List<java.lang.String> raws = new java.util.ArrayList<java.lang.String>();\r\n        java.util.List<java.lang.Object> guesses = new java.util.ArrayList<java.lang.Object>();\r\n        org.eclipse.jdt.internal.compiler.ast.Expression fullExpression = null;\r\n        org.eclipse.jdt.internal.compiler.ast.Expression[] expressions = null;\r\n        if (pairs != null) {\r\n            for (org.eclipse.jdt.internal.compiler.ast.MemberValuePair pair : pairs) {\r\n                char[] n = pair.name;\r\n                java.lang.String mName = (n == null) ? \"value\" : new java.lang.String(pair.name);\r\n                if (mName.equals(name)) {\r\n                    fullExpression = pair.value;\r\n                }\r\n            }\r\n        }\r\n        if (fullExpression != null) {\r\n            if (fullExpression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) {\r\n                expressions = ((org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) (fullExpression)).expressions;\r\n            } else {\r\n                expressions = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ fullExpression };\r\n            }\r\n            for (org.eclipse.jdt.internal.compiler.ast.Expression ex : expressions) {\r\n                java.lang.StringBuffer sb = new java.lang.StringBuffer();\r\n                ex.print(0, sb);\r\n                raws.add(sb.toString());\r\n                guesses.add(lombok.eclipse.Eclipse.calculateValue(ex));\r\n            }\r\n        }\r\n        final org.eclipse.jdt.internal.compiler.ast.Expression fullExpr = fullExpression;\r\n        final org.eclipse.jdt.internal.compiler.ast.Expression[] exprs = expressions;\r\n        values.put(name, new lombok.core.AnnotationValues.AnnotationValue(annotationNode, raws, guesses) {\r\n            1(lombok.core.AST<? extends java.lang.Object>.Node $anonymous0, java.util.List<java.lang.String> $anonymous1, java.util.List<java.lang.Object> $anonymous2) {\r\n                super($anonymous0, $anonymous1, $anonymous2);\r\n            }\r\n\r\n            @java.lang.Override\r\n            public void setError(java.lang.String message, int valueIdx) {\r\n                org.eclipse.jdt.internal.compiler.ast.Expression ex;\r\n                if (valueIdx == (-1)) {\r\n                    ex = fullExpr;\r\n                } else {\r\n                    ex = (exprs != null) ? exprs[valueIdx] : null;\r\n                }\r\n                if (ex == null) {\r\n                    ex = annotation;\r\n                }\r\n                int sourceStart = ex.sourceStart;\r\n                int sourceEnd = ex.sourceEnd;\r\n                annotationNode.addError(message, sourceStart, sourceEnd);\r\n            }\r\n\r\n            @java.lang.Override\r\n            public void setWarning(java.lang.String message, int valueIdx) {\r\n                org.eclipse.jdt.internal.compiler.ast.Expression ex;\r\n                if (valueIdx == (-1)) {\r\n                    ex = fullExpr;\r\n                } else {\r\n                    ex = (exprs != null) ? exprs[valueIdx] : null;\r\n                }\r\n                if (ex == null) {\r\n                    ex = annotation;\r\n                }\r\n                int sourceStart = ex.sourceStart;\r\n                int sourceEnd = ex.sourceEnd;\r\n                annotationNode.addWarning(message, sourceStart, sourceEnd);\r\n            }\r\n        });\r\n    }\r\n    return new lombok.core.AnnotationValues<A>(type, values, annotationNode);\r\n}", "docComment": "Provides AnnotationValues with the data it needs to do its thing.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.PrintAST", "labels": ["Structure"], "properties": {"docComment": "Will print the tree structure of annotated node and all its children.\r\n\r\nThis annotation is useful only for those working on Lombok, for example to test if a Lombok handlers is doing its\r\njob correctly, or to see what the imagined endresult of a transformation is supposed to look like.\r\n", "simpleName": "PrintAST", "qualifiedName": "lombok.core.PrintAST", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression).0", "labels": ["Variable"], "properties": {"simpleName": "e", "qualifiedName": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCMethodDecl createGetter(long access, lombok.javac.JavacAST.Node field, com.sun.tools.javac.tree.TreeMaker treeMaker) {\r\n    com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldNode = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (field.get()));\r\n    com.sun.tools.javac.tree.JCTree.JCStatement returnStatement = treeMaker.Return(treeMaker.Ident(fieldNode.getName()));\r\n    com.sun.tools.javac.tree.JCTree.JCBlock methodBody = treeMaker.Block(0, com.sun.tools.javac.util.List.of(returnStatement));\r\n    com.sun.tools.javac.util.Name methodName = field.toName(lombok.javac.handlers.PKG.toGetterName(fieldNode));\r\n    com.sun.tools.javac.tree.JCTree.JCExpression methodType = (fieldNode.type != null) ? treeMaker.Type(fieldNode.type) : fieldNode.vartype;\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCTypeParameter> methodGenericParams = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCVariableDecl> parameters = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> throwsClauses = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.tree.JCTree.JCExpression annotationMethodDefaultValue = null;\r\n    return treeMaker.MethodDef(treeMaker.Modifiers(access, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCAnnotation>nil()), methodName, methodType, methodGenericParams, parameters, throwsClauses, methodBody, annotationMethodDefaultValue);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).2", "labels": ["Variable"], "properties": {"simpleName": "fa", "qualifiedName": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.recursiveSetHandled()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "recursiveSetHandled()", "qualifiedName": "lombok.core.AST$Node.recursiveSetHandled()", "kind": "method", "sourceText": "/**\r\n * Sets the handled flag on this node, and all child nodes, then returns this.\r\n *\r\n * @see #handled\r\n */\r\npublic lombok.core.AST<N>.Node recursiveSetHandled() {\r\n    this.handled = true;\r\n    for (lombok.core.AST<N>.Node child : this.children) {\r\n        child.recursiveSetHandled();\r\n    }\r\n    return this;\r\n}", "docComment": "Sets the handled flag on this node, and all child nodes, then returns this.\r\n\r\n@see #handled\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "excludes", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "AnnotationVisitor", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportHeight()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getScrollableTracksViewportHeight()", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportHeight()", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean getScrollableTracksViewportHeight() {\r\n    return false;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).2", "labels": ["Variable"], "properties": {"simpleName": "fieldName", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "isDouble", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getStatementTypes()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "getStatementTypes()", "qualifiedName": "lombok.javac.JavacAST.getStatementTypes()", "kind": "method", "sourceText": "/**\r\n * For javac, both JCExpression and JCStatement are considered as valid children types.\r\n */\r\nprotected java.util.Collection<java.lang.Class<? extends com.sun.tools.javac.tree.JCTree>> getStatementTypes() {\r\n    java.util.Collection<java.lang.Class<? extends com.sun.tools.javac.tree.JCTree>> collection = new java.util.ArrayList<java.lang.Class<? extends com.sun.tools.javac.tree.JCTree>>(2);\r\n    collection.add(com.sun.tools.javac.tree.JCTree.JCStatement.class);\r\n    collection.add(com.sun.tools.javac.tree.JCTree.JCExpression.class);\r\n    return collection;\r\n}", "docComment": "For javac, both JCExpression and JCStatement are considered as valid children types.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "oldO", "qualifiedName": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getNodeFor(java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "obj", "qualifiedName": "lombok.core.AST$Node.getNodeFor(java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "toUnit(javax.lang.model.element.Element)", "qualifiedName": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCCompilationUnit toUnit(javax.lang.model.element.Element element) {\r\n    return ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (this.trees.getPath(element).getCompilationUnit()));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation).0", "labels": ["Variable"], "properties": {"simpleName": "location", "qualifiedName": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.AppleNativeLook()", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>()", "qualifiedName": "lombok.installer.AppleNativeLook()", "kind": "constructor", "sourceText": "AppleNativeLook() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration top) {\r\n    if (this.setAndGetAsHandled(top)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> children = this.buildTypes(top.types);\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(top, children, lombok.core.AST.Kind.COMPILATION_UNIT));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).0", "labels": ["Variable"], "properties": {"simpleName": "printContent", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException", "labels": ["Structure"], "properties": {"docComment": "Thrown when creating a new EclipseLocation with a path object that doesn't, in fact,\r\npoint at an Eclipse installation.\r\n", "simpleName": "NotAnEclipseException", "qualifiedName": "lombok.installer.EclipseLocation$NotAnEclipseException", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node", "labels": ["Structure"], "properties": {"docComment": "An instance of this class wraps an Eclipse/javac internal node object.\r\n", "simpleName": "Node", "qualifiedName": "lombok.core.AST$Node", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl local, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit top = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (annotationNode.top().get()));\r\n    boolean handled = this.handlers.handleAnnotation(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer", "labels": ["Structure", "Container"], "properties": {"docComment": "The lombok installer proper.\r\nUses swing to show a simple GUI that can add and remove the java agent to Eclipse installations.\r\nAlso offers info on what this installer does in case people want to instrument their Eclipse manually,\r\nand looks in some common places on Mac OS X and Windows.\r\n", "simpleName": "Installer", "qualifiedName": "lombok.installer.Installer", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "cud", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "level", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "qualifiedName": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCMethodDecl createToString(lombok.javac.JavacAST.Node typeNode, com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> fields, boolean includeFieldNames, boolean callSuper) {\r\n    com.sun.tools.javac.tree.TreeMaker maker = typeNode.getTreeMaker();\r\n    com.sun.tools.javac.tree.JCTree.JCAnnotation overrideAnnotation = maker.Annotation(lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"lang\", \"Override\"), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil());\r\n    com.sun.tools.javac.tree.JCTree.JCModifiers mods = maker.Modifiers(Flags.PUBLIC, com.sun.tools.javac.util.List.of(overrideAnnotation));\r\n    com.sun.tools.javac.tree.JCTree.JCExpression returnType = lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"lang\", \"String\");\r\n    boolean first = true;\r\n    java.lang.String typeName = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get())).name.toString();\r\n    java.lang.String infix = \", \";\r\n    java.lang.String suffix = \")\";\r\n    java.lang.String prefix;\r\n    if (callSuper) {\r\n        prefix = typeName + \"(super=\";\r\n    } else if (fields.isEmpty()) {\r\n        prefix = typeName + \"()\";\r\n    } else if (includeFieldNames) {\r\n        prefix = ((typeName + \"(\") + ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fields.iterator().next().get())).name.toString()) + \"=\";\r\n    } else {\r\n        prefix = typeName + \"(\";\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCExpression current = maker.Literal(prefix);\r\n    if (callSuper) {\r\n        com.sun.tools.javac.tree.JCTree.JCMethodInvocation callToSuper = maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), maker.Select(maker.Ident(typeNode.toName(\"super\")), typeNode.toName(\"toString\")), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil());\r\n        current = maker.Binary(JCTree.PLUS, current, callToSuper);\r\n        first = false;\r\n    }\r\n    for (lombok.javac.JavacAST.Node fieldNode : fields) {\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl field = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (fieldNode.get()));\r\n        com.sun.tools.javac.tree.JCTree.JCExpression expr;\r\n        if (field.vartype instanceof com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) {\r\n            boolean multiDim = ((com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) (field.vartype)).elemtype instanceof com.sun.tools.javac.tree.JCTree.JCArrayTypeTree;\r\n            boolean primitiveArray = ((com.sun.tools.javac.tree.JCTree.JCArrayTypeTree) (field.vartype)).elemtype instanceof com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree;\r\n            boolean useDeepTS = multiDim || (!primitiveArray);\r\n            com.sun.tools.javac.tree.JCTree.JCExpression hcMethod = lombok.javac.handlers.PKG.chainDots(maker, typeNode, \"java\", \"util\", \"Arrays\", useDeepTS ? \"deepToString\" : \"toString\");\r\n            expr = maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), hcMethod, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>of(maker.Ident(field.name)));\r\n        } else {\r\n            expr = maker.Ident(field.name);\r\n        }\r\n        if (first) {\r\n            current = maker.Binary(JCTree.PLUS, current, expr);\r\n            first = false;\r\n            continue;\r\n        }\r\n        if (includeFieldNames) {\r\n            current = maker.Binary(JCTree.PLUS, current, maker.Literal((infix + fieldNode.getName()) + \"=\"));\r\n        } else {\r\n            current = maker.Binary(JCTree.PLUS, current, maker.Literal(infix));\r\n        }\r\n        current = maker.Binary(JCTree.PLUS, current, expr);\r\n    }\r\n    if (!first) {\r\n        current = maker.Binary(JCTree.PLUS, current, maker.Literal(suffix));\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCStatement returnStatement = maker.Return(current);\r\n    com.sun.tools.javac.tree.JCTree.JCBlock body = maker.Block(0, com.sun.tools.javac.util.List.of(returnStatement));\r\n    return maker.MethodDef(mods, typeNode.toName(\"toString\"), returnType, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCTypeParameter>nil(), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCVariableDecl>nil(), com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), body, null);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitInitializer(lombok.eclipse.EclipseAST.Node initializerNode, org.eclipse.jdt.internal.compiler.ast.Initializer initializer) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "void visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "/**\r\n * Visits a statement that isn't any of the other visit methods (e.g. TypeDeclaration).\r\n */\r\nvoid visitStatement(lombok.eclipse.EclipseAST.Node statementNode, org.eclipse.jdt.internal.compiler.ast.Statement statement);", "docComment": "Visits a statement that isn't any of the other visit methods (e.g. TypeDeclaration).\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[]).0", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "method", "sourceText": "public void visitField(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field) {\r\n    this.print(\"<FIELD %s %s = %s>\", this.str(field.type), this.str(field.name), field.initialization);\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        if (field.initialization != null) {\r\n            this.print(\"%s\", field.initialization);\r\n        }\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "qualifiedName": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local, lombok.core.AST.Kind kind) {\r\n    if (this.setAndGetAsHandled(local)) {\r\n        return null;\r\n    }\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    this.addIfNotNull(childNodes, this.buildStatement(local.initialization));\r\n    childNodes.addAll(this.buildAnnotations(local.annotations));\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(local, childNodes, kind));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "javacWarning(java.lang.String,java.lang.Throwable)", "qualifiedName": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "kind": "method", "sourceText": "/**\r\n * Generates a warning in the Messager that was used to initialize this HandlerLibrary.\r\n */\r\npublic void javacWarning(java.lang.String message, java.lang.Throwable t) {\r\n    this.messager.printMessage(javax.tools.Diagnostic.Kind.WARNING, message + (t == null ? \"\" : \": \" + t));\r\n}", "docComment": "Generates a warning in the Messager that was used to initialize this HandlerLibrary.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer", "labels": ["Structure"], "properties": {"docComment": "Prints the structure of an AST.\r\n", "simpleName": "Printer", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "item", "qualifiedName": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).2", "labels": ["Variable"], "properties": {"simpleName": "excludes", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "qualifiedName": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "kind": "static method", "sourceText": "private static java.lang.Object calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression e) {\r\n    if (e instanceof org.eclipse.jdt.internal.compiler.ast.Literal) {\r\n        ((org.eclipse.jdt.internal.compiler.ast.Literal) (e)).computeConstant();\r\n        switch (e.constant.typeID()) {\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_int :\r\n                return e.constant.intValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_byte :\r\n                return e.constant.byteValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_short :\r\n                return e.constant.shortValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_char :\r\n                return e.constant.charValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_float :\r\n                return e.constant.floatValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_double :\r\n                return e.constant.doubleValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_boolean :\r\n                return e.constant.booleanValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_long :\r\n                return e.constant.longValue();\r\n            case org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_JavaLangString :\r\n                return e.constant.stringValue();\r\n            default :\r\n                return null;\r\n        }\r\n    } else if (e instanceof org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) {\r\n        return lombok.eclipse.Eclipse.toQualifiedName(((org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) (e)).type.getTypeName());\r\n    } else if (e instanceof org.eclipse.jdt.internal.compiler.ast.SingleNameReference) {\r\n        return new java.lang.String(((org.eclipse.jdt.internal.compiler.ast.SingleNameReference) (e)).token);\r\n    } else if (e instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference) {\r\n        java.lang.String qName = lombok.eclipse.Eclipse.toQualifiedName(((org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference) (e)).tokens);\r\n        int idx = qName.lastIndexOf('.');\r\n        return idx == (-1) ? qName : qName.substring(idx + 1);\r\n    }\r\n    return null;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).2", "labels": ["Variable"], "properties": {"simpleName": "exceptions", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "argument", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void endVisitMethodArgument(lombok.eclipse.EclipseAST.Node argNode, org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getLogicalDrives0()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getLogicalDrives0()", "qualifiedName": "lombok.installer.WindowsDriveInfo.getLogicalDrives0()", "kind": "method", "sourceText": "/**\r\n * Calls kernel32's GetLogicalDrives, which returns an int containing\r\n * flags; bit 0 corresponds to drive A, bit 25 to drive Z. on = disk exists.\r\n */\r\nprivate native int getLogicalDrives0();", "docComment": "Calls kernel32's GetLogicalDrives, which returns an int containing\r\nflags; bit 0 corresponds to drive A, bit 25 to drive Z. on = disk exists.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "qualifiedName": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "kind": "static method", "sourceText": "/**\r\n * You can't share TypeParameter objects or bad things happen; for example, one 'T' resolves differently\r\n * from another 'T', even for the same T in a single class file. Unfortunately the TypeParameter type hierarchy\r\n * is complicated and there's no clone method on TypeParameter itself. This method can clone them.\r\n */\r\npublic static org.eclipse.jdt.internal.compiler.ast.TypeParameter[] copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[] params) {\r\n    if (params == null) {\r\n        return null;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.TypeParameter[] out = new org.eclipse.jdt.internal.compiler.ast.TypeParameter[params.length];\r\n    int idx = 0;\r\n    for (org.eclipse.jdt.internal.compiler.ast.TypeParameter param : params) {\r\n        org.eclipse.jdt.internal.compiler.ast.TypeParameter o = new org.eclipse.jdt.internal.compiler.ast.TypeParameter();\r\n        o.annotations = param.annotations;\r\n        o.bits = param.bits;\r\n        o.modifiers = param.modifiers;\r\n        o.name = param.name;\r\n        o.type = lombok.eclipse.Eclipse.copyType(param.type);\r\n        o.sourceStart = param.sourceStart;\r\n        o.sourceEnd = param.sourceEnd;\r\n        o.declarationEnd = param.declarationEnd;\r\n        o.declarationSourceStart = param.declarationSourceStart;\r\n        o.declarationSourceEnd = param.declarationSourceEnd;\r\n        if (param.bounds != null) {\r\n            org.eclipse.jdt.internal.compiler.ast.TypeReference[] b = new org.eclipse.jdt.internal.compiler.ast.TypeReference[param.bounds.length];\r\n            int idx2 = 0;\r\n            for (org.eclipse.jdt.internal.compiler.ast.TypeReference ref : param.bounds) {\r\n                b[idx2++] = lombok.eclipse.Eclipse.copyType(ref);\r\n            }\r\n            o.bounds = b;\r\n        }\r\n        out[idx++] = o;\r\n    }\r\n    return out;\r\n}", "docComment": "You can't share TypeParameter objects or bad things happen; for example, one 'T' resolves differently\r\nfrom another 'T', even for the same T in a single class file. Unfortunately the TypeParameter type hierarchy\r\nis complicated and there's no clone method on TypeParameter itself. This method can clone them.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt", "labels": ["Container"], "properties": {"simpleName": "apt", "qualifiedName": "lombok.javac.apt", "kind": "package", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node", "labels": ["Structure"], "properties": {"docComment": "Eclipse specific version of the AST.Node class.\r\n", "simpleName": "Node", "qualifiedName": "lombok.eclipse.EclipseAST$Node", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "kind": "constructor", "sourceText": "/**\r\n * 'raw' should be the exact expression, for example '5+7', 'AccessLevel.PUBLIC', or 'int.class'.\r\n * 'valueGuess' should be a likely guess at the real value intended.\r\n *\r\n * For classes, supply the class name (qualified or not) as a string.<br />\r\n * For enums, supply the simple name part (everything after the last dot) as a string.<br />\r\n */\r\npublic AnnotationValue(lombok.core.AST<? extends java.lang.Object>.Node node, java.lang.String raw, java.lang.Object valueGuess) {\r\n    super();\r\n    this.node = node;\r\n    this.raws = java.util.Collections.singletonList(raw);\r\n    this.valueGuesses = java.util.Collections.singletonList(valueGuess);\r\n}", "docComment": "'raw' should be the exact expression, for example '5+7', 'AccessLevel.PUBLIC', or 'int.class'.\r\n'valueGuess' should be a likely guess at the real value intended.\r\n\r\nFor classes, supply the class name (qualified or not) as a string.<br />\r\nFor enums, supply the simple name part (everything after the last dot) as a string.<br />\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "constructorExists(lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "kind": "static method", "sourceText": "static lombok.eclipse.handlers.PKG.MemberExistsResult constructorExists(lombok.eclipse.EclipseAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration))) {\r\n        node = node.up();\r\n    } \r\n    if ((node != null) && (node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)) {\r\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node.get()));\r\n        if (typeDecl.methods != null) {\r\n            for (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration def : typeDecl.methods) {\r\n                if (def instanceof org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) {\r\n                    if ((def.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsDefaultConstructor) != 0) {\r\n                        continue;\r\n                    }\r\n                    lombok.eclipse.EclipseAST.Node existing = node.getNodeFor(def);\r\n                    if ((existing == null) || (!existing.isHandled())) {\r\n                        return lombok.eclipse.handlers.PKG.MemberExistsResult.EXISTS_BY_USER;\r\n                    }\r\n                    return lombok.eclipse.handlers.PKG.MemberExistsResult.EXISTS_BY_LOMBOK;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return lombok.eclipse.handlers.PKG.MemberExistsResult.NOT_EXISTS;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Data</code> annotation for eclipse.\r\n", "simpleName": "HandleData", "qualifiedName": "lombok.eclipse.handlers.HandleData", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).2", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.EqualsAndHashCode", "labels": ["Structure"], "properties": {"docComment": "Generates implementations for the <code>equals</code> and <code>hashCode</code> methods inherited by all objects.\r\n<p>\r\nIf either method already exists, then <code>&#64;EqualsAndHashCode</code> will not generate that particular method.\r\nIf they all exist, <code>&#64;EqualsAndHashCode</code> generates no methods, and emits a warning instead to highlight\r\nthat its doing nothing at all. The parameter list and return type are not relevant when deciding to skip generation of\r\na method; any method named <code>hashCode</code> will make <code>&#64;EqualsAndHashCode</code> not generate that method,\r\nfor example.\r\n<p>\r\nAll fields that are non-static and non-transient are used in the equality check and hashCode generation. You can exclude\r\nmore fields by specifying them in the <code>exclude</code> parameter.\r\n<p>\r\nNormally, auto-generating <code>hashCode</code> and <code>equals</code> implementations in a subclass is a bad idea, as\r\nthe superclass also defines fields, for which equality checks/hashcodes won't be auto-generated. Therefore, a warning\r\nis emitted when you try. Instead, you can set the <code>callSuper</code> parameter to <em>true</em> which will call\r\n<code>super.equals</code> and <code>super.hashCode</code>. Doing this with <code>java.lang.Object</code> as superclass is\r\npointless, so, conversely, setting this flag when <em>NOT</em> extending something (other than Object) will also generate\r\na warning. Be aware that not all implementations of <code>equals</code> correctly handle being called from a subclass!\r\nFortunately, lombok-generated <code>equals</code> implementations do correctly handle it.\r\n<p>\r\nArray fields are handled by way of {@link java.util.Arrays#deepEquals(Object[], Object[])} where necessary, as well\r\nas <code>deepHashCode</code>. The downside is that arrays with circular references (arrays that contain themselves,\r\npossibly indirectly) results in calls to <code>hashCode</code> and <code>equals</code> throwing a\r\n{@link java.lang.StackOverflowError}. However, the implementations for java's own {@link java.util.ArrayList} suffer\r\nfrom the same flaw.\r\n", "simpleName": "EqualsAndHashCode", "qualifiedName": "lombok.EqualsAndHashCode", "kind": "abstract class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "collection", "qualifiedName": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "direction", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.parent", "labels": ["Variable"], "properties": {"sourceText": "protected lombok.core.AST<N>.Node parent;", "visibility": "protected", "simpleName": "parent", "qualifiedName": "lombok.core.AST$Node.parent", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "qualifiedName": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "kind": "static method", "sourceText": "/**\r\n * Turns an expression into a guessed intended literal. Only works for literals, as you can imagine.\r\n *\r\n * Will for example turn a TrueLiteral into 'Boolean.valueOf(true)'.\r\n */\r\nprivate static java.lang.Object calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression expr) {\r\n    if (expr instanceof com.sun.tools.javac.tree.JCTree.JCLiteral) {\r\n        com.sun.tools.javac.tree.JCTree.JCLiteral lit = ((com.sun.tools.javac.tree.JCTree.JCLiteral) (expr));\r\n        if (lit.getKind() == com.sun.source.tree.Tree.Kind.BOOLEAN_LITERAL) {\r\n            return ((java.lang.Number) (lit.value)).intValue() == 0 ? false : true;\r\n        }\r\n        return lit.value;\r\n    } else if ((expr instanceof com.sun.tools.javac.tree.JCTree.JCIdent) || (expr instanceof com.sun.tools.javac.tree.JCTree.JCFieldAccess)) {\r\n        java.lang.String x = expr.toString();\r\n        if (x.endsWith(\".class\")) {\r\n            x = x.substring(0, x.length() - 6);\r\n        } else {\r\n            int idx = x.lastIndexOf('.');\r\n            if (idx > (-1)) {\r\n                x = x.substring(idx + 1);\r\n            }\r\n        }\r\n        return x;\r\n    } else {\r\n        return null;\r\n    }\r\n}", "docComment": "Turns an expression into a guessed intended literal. Only works for literals, as you can imagine.\r\n\r\nWill for example turn a TrueLiteral into 'Boolean.valueOf(true)'.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).8", "labels": ["Variable"], "properties": {"simpleName": "column", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).8", "kind": "parameter", "parameterPosition": 8, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node", "labels": ["Structure"], "properties": {"docComment": "Javac specific version of the AST.Node class.\r\n", "simpleName": "Node", "qualifiedName": "lombok.javac.JavacAST$Node", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.howIWorkArea", "labels": ["Variable"], "properties": {"sourceText": "private java.awt.Component howIWorkArea;", "visibility": "private", "simpleName": "howIWorkArea", "qualifiedName": "lombok.installer.Installer.howIWorkArea", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "/**\r\n * Visits a method argument.\r\n */\r\nvoid visitMethodArgument(lombok.javac.JavacAST.Node argumentNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl argument, com.sun.tools.javac.tree.JCTree.JCMethodDecl method);", "docComment": "Visits a method argument.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).3", "labels": ["Variable"], "properties": {"simpleName": "list", "qualifiedName": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "nameEquals(char[][],java.lang.String)", "qualifiedName": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "kind": "static method", "sourceText": "static boolean nameEquals(char[][] typeName, java.lang.String string) {\r\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\r\n    boolean first = true;\r\n    for (char[] elem : typeName) {\r\n        if (first) {\r\n            first = false;\r\n        } else {\r\n            sb.append('.');\r\n        }\r\n        sb.append(elem);\r\n    }\r\n    return string.contentEquals(sb);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "void visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl type, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "argument", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getPackageDeclaration()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPackageDeclaration()", "qualifiedName": "lombok.javac.JavacAST.getPackageDeclaration()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.lang.String getPackageDeclaration() {\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (this.top().get()));\r\n    return unit.pid instanceof com.sun.tools.javac.tree.JCTree.JCFieldAccess ? unit.pid.toString() : null;\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String MARKER_ID = \"org.eclipse.jdt.apt.pluggable.core.compileProblem\";// $NON-NLS-1$\r\n", "visibility": "private", "simpleName": "MARKER_ID", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "isBoolean", "qualifiedName": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "public void visitStatement(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Statement statement) {\r\n    this.print(\"<%s>\", statement.getClass());\r\n    this.indent++;\r\n    this.print(\"%s\", statement);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "arg", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.fireSelectionChange()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "fireSelectionChange()", "qualifiedName": "lombok.installer.Installer$EclipsesList.fireSelectionChange()", "kind": "method", "sourceText": "void fireSelectionChange() {\r\n    this.selectedLomboksChanged(this.getSelectedEclipses());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).0", "labels": ["Variable"], "properties": {"simpleName": "isWarning", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getInstance()", "qualifiedName": "lombok.core.AnnotationValues.getInstance()", "kind": "method", "sourceText": "/**\r\n * Creates an actual annotation instance. You can use this to query any annotation methods, except for\r\n * those annotation methods with class literals, as those can most likely not be turned into Class objects.\r\n *\r\n * If some of the methods cannot be implemented, this method still works; it's only when you call a method\r\n * that has a problematic value that an AnnotationValueDecodeFail exception occurs.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic A getInstance() {\r\n    if (this.cachedInstance != null) {\r\n        return this.cachedInstance;\r\n    }\r\n    java.lang.reflect.InvocationHandler invocations = new java.lang.reflect.InvocationHandler() {\r\n        1() {\r\n            super();\r\n        }\r\n\r\n        public java.lang.Object invoke(java.lang.Object proxy, java.lang.reflect.Method method, java.lang.Object[] args) throws java.lang.Throwable {\r\n            lombok.core.AnnotationValues.AnnotationValue v = lombok.core.AnnotationValues.this.values.get(method.getName());\r\n            if (v == null) {\r\n                java.lang.Object defaultValue = method.getDefaultValue();\r\n                if (defaultValue != null) {\r\n                    return defaultValue;\r\n                }\r\n                throw lombok.core.AnnotationValues.makeNoDefaultFail(v, method);\r\n            }\r\n            boolean isArray = false;\r\n            java.lang.Class<? extends java.lang.Object> expected = method.getReturnType();\r\n            java.lang.Object array = null;\r\n            if (expected.isArray()) {\r\n                isArray = true;\r\n                expected = expected.getComponentType();\r\n                array = java.lang.reflect.Array.newInstance(expected, v.valueGuesses.size());\r\n            }\r\n            if ((!isArray) && (v.valueGuesses.size() > 1)) {\r\n                throw new lombok.core.AnnotationValues.AnnotationValueDecodeFail(v, (\"Expected a single value, but \" + method.getName()) + \" has an array of values\", -1);\r\n            }\r\n            if ((v.valueGuesses.size() == 0) && (!isArray)) {\r\n                java.lang.Object defaultValue = method.getDefaultValue();\r\n                if (defaultValue == null) {\r\n                    throw lombok.core.AnnotationValues.makeNoDefaultFail(v, method);\r\n                }\r\n                return defaultValue;\r\n            }\r\n            int idx = 0;\r\n            for (java.lang.Object guess : v.valueGuesses) {\r\n                java.lang.Object result = (guess == null) ? null : this.guessToType(guess, expected, v, idx);\r\n                if (!isArray) {\r\n                    if (result == null) {\r\n                        java.lang.Object defaultValue = method.getDefaultValue();\r\n                        if (defaultValue == null) {\r\n                            throw lombok.core.AnnotationValues.makeNoDefaultFail(v, method);\r\n                        }\r\n                        return defaultValue;\r\n                    } else {\r\n                        return result;\r\n                    }\r\n                } else {\r\n                    if (result == null) {\r\n                        if (v.valueGuesses.size() == 1) {\r\n                            java.lang.Object defaultValue = method.getDefaultValue();\r\n                            if (defaultValue == null) {\r\n                                throw lombok.core.AnnotationValues.makeNoDefaultFail(v, method);\r\n                            }\r\n                            return defaultValue;\r\n                        } else {\r\n                            throw new lombok.core.AnnotationValues.AnnotationValueDecodeFail(v, \"I can't make sense of this annotation value. Try using a fully qualified literal.\", idx);\r\n                        }\r\n                    }\r\n                    java.lang.reflect.Array.set(array, idx++, result);\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n    };\r\n    return this.cachedInstance = ((A) (java.lang.reflect.Proxy.newProxyInstance(this.type.getClassLoader(), new java.lang.Class[]{ this.type }, invocations)));\r\n}", "docComment": "Creates an actual annotation instance. You can use this to query any annotation methods, except for\r\nthose annotation methods with class literals, as those can most likely not be turned into Class objects.\r\n\r\nIf some of the methods cannot be implemented, this method still works; it's only when you call a method\r\nthat has a problematic value that an AnnotationValueDecodeFail exception occurs.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "labels": ["Variable"], "properties": {"simpleName": "access", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "qualifiedName": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "kind": "method", "sourceText": "private java.util.Collection<lombok.eclipse.EclipseAST.Node> buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[] children) {\r\n    java.util.List<lombok.eclipse.EclipseAST.Node> childNodes = new java.util.ArrayList<lombok.eclipse.EclipseAST.Node>();\r\n    if (children != null) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.Statement child : children) {\r\n            this.addIfNotNull(childNodes, this.buildStatement(child));\r\n        }\r\n    }\r\n    return childNodes;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.up()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "up()", "qualifiedName": "lombok.core.AST$Node.up()", "kind": "method", "sourceText": "/**\r\n * Returns the structurally significant node that encloses this one.\r\n *\r\n * @see #isStructurallySignificant()\r\n */\r\npublic lombok.core.AST<N>.Node up() {\r\n    lombok.core.AST<N>.Node result = this.parent;\r\n    while ((result != null) && (!result.isStructurallySignificant)) {\r\n        result = result.parent;\r\n    } \r\n    return result;\r\n}", "docComment": "Returns the structurally significant node that encloses this one.\r\n\r\n@see #isStructurallySignificant()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "labels": ["Variable"], "properties": {"simpleName": "isPublic", "qualifiedName": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getDriveType(java.lang.String)", "qualifiedName": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Mirror of kernel32's GetDriveTypeA. You must pass in 'A:\\\\' -\r\n * so including both a colon and a backslash!\r\n *\r\n * 0 = error\r\n * 1 = doesn't exist\r\n * 2 = removable drive\r\n * 3 = fixed disk\r\n * 4 = remote (network) disk\r\n * 5 = cd-rom\r\n * 6 = ram disk\r\n */\r\nprivate native int getDriveType(java.lang.String name);", "docComment": "Mirror of kernel32's GetDriveTypeA. You must pass in 'A:\\\\' - \r\nso including both a colon and a backslash!\r\n\r\n0 = error\r\n1 = doesn't exist\r\n2 = removable drive\r\n3 = fixed disk\r\n4 = remote (network) disk\r\n5 = cd-rom\r\n6 = ram disk\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement child) {\r\n    if (child == null) {\r\n        return null;\r\n    }\r\n    if (child instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        return this.buildType(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (child)));\r\n    }\r\n    if (child instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {\r\n        return this.buildLocal(((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (child)), lombok.core.AST.Kind.LOCAL);\r\n    }\r\n    if (this.setAndGetAsHandled(child)) {\r\n        return null;\r\n    }\r\n    return this.drill(child);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).0", "labels": ["Variable"], "properties": {"simpleName": "list", "qualifiedName": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getName()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getName()", "qualifiedName": "lombok.javac.JavacAST$Node.getName()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic java.lang.String getName() {\r\n    final com.sun.tools.javac.util.Name n;\r\n    if (this.node instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n        n = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (this.node)).name;\r\n    } else if (this.node instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n        n = ((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (this.node)).name;\r\n    } else if (this.node instanceof com.sun.tools.javac.tree.JCTree.JCVariableDecl) {\r\n        n = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (this.node)).name;\r\n    } else {\r\n        n = null;\r\n    }\r\n    return n == null ? null : n.toString();\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup()", "kind": "constructor", "sourceText": "HandleCleanup() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager).0", "labels": ["Variable"], "properties": {"simpleName": "messager", "qualifiedName": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setTop(lombok.core.AST$Node)", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "setTop(lombok.core.AST$Node)", "qualifiedName": "lombok.core.AST.setTop(lombok.core.AST$Node)", "kind": "method", "sourceText": "/**\r\n * Set the node object that wraps the internal Compilation Unit node.\r\n */\r\nprotected void setTop(lombok.core.AST<N>.Node top) {\r\n    this.top = top;\r\n}", "docComment": "Set the node object that wraps the internal Compilation Unit node.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "loadVisitorHandlers(lombok.javac.HandlerLibrary)", "qualifiedName": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "kind": "static method", "sourceText": "/**\r\n * Uses SPI Discovery to find implementations of {@link JavacASTVisitor}.\r\n */\r\nprivate static void loadVisitorHandlers(lombok.javac.HandlerLibrary lib) {\r\n    // No, that seemingly superfluous reference to JavacASTVisitor's classloader is not in fact superfluous!\r\n    java.util.Iterator<lombok.javac.JavacASTVisitor> it = java.util.ServiceLoader.load(lombok.javac.JavacASTVisitor.class, lombok.javac.JavacASTVisitor.class.getClassLoader()).iterator();\r\n    while (it.hasNext()) {\r\n        try {\r\n            lombok.javac.JavacASTVisitor handler = it.next();\r\n            lib.visitorHandlers.add(handler);\r\n        } catch (java.util.ServiceConfigurationError e) {\r\n            lib.javacWarning(\"Can't load Lombok visitor handler for javac\", e);\r\n        }\r\n    } \r\n}", "docComment": "Uses SPI Discovery to find implementations of {@link JavacASTVisitor}.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnMac()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "findEclipseOnMac()", "qualifiedName": "lombok.installer.EclipseFinder.findEclipseOnMac()", "kind": "static method", "sourceText": "/**\r\n * Scans /Applications for any folder named 'Eclipse'\r\n */\r\nstatic java.util.List<java.lang.String> findEclipseOnMac() {\r\n    java.util.List<java.lang.String> eclipses = new java.util.ArrayList<java.lang.String>();\r\n    for (java.io.File dir : new java.io.File(\"/Applications\").listFiles()) {\r\n        if (!dir.isDirectory()) {\r\n            continue;\r\n        }\r\n        if (dir.getName().toLowerCase().equals(\"eclipse.app\")) {\r\n            // This would be kind of an unorthodox Eclipse installation, but if Eclipse ever\r\n            // moves to this more maclike installation concept, our installer can still handle it.\r\n            eclipses.add(\"/Applications\");\r\n        }\r\n        if (dir.getName().toLowerCase().contains(\"eclipse\")) {\r\n            if (new java.io.File(dir, \"Eclipse.app\").exists()) {\r\n                eclipses.add(dir.toString());\r\n            }\r\n        }\r\n    }\r\n    return eclipses;\r\n}", "docComment": "Scans /Applications for any folder named 'Eclipse'\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "kind": "static method", "sourceText": "/**\r\n * Generates an error in the Eclipse error log. Note that most people never look at it!\r\n */\r\npublic static void error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration cud, java.lang.String message) {\r\n    lombok.eclipse.Eclipse.error(cud, message, lombok.eclipse.Eclipse.DEFAULT_BUNDLE, null);\r\n}", "docComment": "Generates an error in the Eclipse error log. Note that most people never look at it!\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "qualifiedName": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "kind": "method", "sourceText": "private lombok.eclipse.EclipseAST.Node buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer initializer) {\r\n    if (this.setAndGetAsHandled(initializer)) {\r\n        return null;\r\n    }\r\n    return this.putInMap(new lombok.eclipse.EclipseAST.Node(initializer, lombok.eclipse.EclipseAST.singleton(this.buildStatement(initializer.block)), lombok.core.AST.Kind.INITIALIZER));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration top = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (annotationNode.top().get()));\r\n    boolean handled = lombok.eclipse.TransformEclipseAST.handlers.handle(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Guesses for each raw expression. If the raw expression is a literal expression, the guess will\r\n * likely be right. If not, it'll be wrong.\r\n */\r\npublic final java.util.List<java.lang.Object> valueGuesses;", "visibility": "public", "simpleName": "valueGuesses", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "argumentNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "setWarning(java.lang.String,java.lang.String)", "qualifiedName": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)", "kind": "method", "sourceText": "/**\r\n * Generates a warning message on the stated annotation value (you should only call this method if you know it's there!)\r\n */\r\npublic void setWarning(java.lang.String annotationMethodName, java.lang.String message) {\r\n    this.setWarning(annotationMethodName, message, -1);\r\n}", "docComment": "Generates a warning message on the stated annotation value (you should only call this method if you know it's there!)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "prefix", "qualifiedName": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "kind": "method", "sourceText": "private java.lang.String str(org.eclipse.jdt.internal.compiler.ast.TypeReference type) {\r\n    if (type == null) {\r\n        return \"(NULL)\";\r\n    }\r\n    char[][] c = type.getTypeName();\r\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\r\n    boolean first = true;\r\n    for (char[] d : c) {\r\n        sb.append(first ? \"\" : \".\").append(new java.lang.String(d));\r\n        first = false;\r\n    }\r\n    return sb.toString();\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "kind": "static method", "sourceText": "static lombok.eclipse.handlers.PKG.MemberExistsResult fieldExists(java.lang.String fieldName, lombok.eclipse.EclipseAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration))) {\r\n        node = node.up();\r\n    } \r\n    if ((node != null) && (node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)) {\r\n        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node.get()));\r\n        if (typeDecl.fields != null) {\r\n            for (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration def : typeDecl.fields) {\r\n                char[] fName = def.name;\r\n                if (fName == null) {\r\n                    continue;\r\n                }\r\n                if (fieldName.equals(new java.lang.String(fName))) {\r\n                    lombok.eclipse.EclipseAST.Node existing = node.getNodeFor(def);\r\n                    if ((existing == null) || (!existing.isHandled())) {\r\n                        return lombok.eclipse.handlers.PKG.MemberExistsResult.EXISTS_BY_USER;\r\n                    }\r\n                    return lombok.eclipse.handlers.PKG.MemberExistsResult.EXISTS_BY_LOMBOK;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return lombok.eclipse.handlers.PKG.MemberExistsResult.NOT_EXISTS;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).0", "labels": ["Variable"], "properties": {"simpleName": "maker", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitMethod(lombok.javac.JavacAST.Node methodNode, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).4", "labels": ["Variable"], "properties": {"simpleName": "sourceEnd", "qualifiedName": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "static method", "sourceText": "private static boolean isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit) {\r\n    return (unit.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.HasAllMethodBodies) != 0;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.getComponentType(java.lang.reflect.Type)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getComponentType(java.lang.reflect.Type)", "qualifiedName": "lombok.core.AST.getComponentType(java.lang.reflect.Type)", "kind": "method", "sourceText": "private java.lang.Class<? extends java.lang.Object> getComponentType(java.lang.reflect.Type type) {\r\n    if (type instanceof java.lang.reflect.ParameterizedType) {\r\n        java.lang.reflect.Type component = ((java.lang.reflect.ParameterizedType) (type)).getActualTypeArguments()[0];\r\n        return component instanceof java.lang.Class<?> ? ((java.lang.Class<? extends java.lang.Object>) (component)) : java.lang.Object.class;\r\n    } else {\r\n        return java.lang.Object.class;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation.selected", "labels": ["Variable"], "properties": {"sourceText": "/**\r\n * Toggling the 'selected' checkbox in the GUI is tracked via this boolean\r\n */\r\nboolean selected = true;", "visibility": "default", "simpleName": "selected", "qualifiedName": "lombok.installer.EclipseLocation.selected", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleGetter()", "kind": "constructor", "sourceText": "HandleGetter() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).0", "labels": ["Variable"], "properties": {"simpleName": "c", "qualifiedName": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "kind": "static method", "sourceText": "/**\r\n * Creates an instance of <code>AnnotationValues</code> for the provided AST Node.\r\n *\r\n * @param type\r\n * \t\tAn annotation class type, such as <code>lombok.Getter.class</code>.\r\n * @param node\r\n * \t\tA Lombok AST node representing an annotation in source code.\r\n */\r\npublic static <A extends java.lang.annotation.Annotation> lombok.core.AnnotationValues<A> createAnnotation(java.lang.Class<A> type, final lombok.javac.JavacAST.Node node) {\r\n    java.util.Map<java.lang.String, lombok.core.AnnotationValues.AnnotationValue> values = new java.util.HashMap<java.lang.String, lombok.core.AnnotationValues.AnnotationValue>();\r\n    com.sun.tools.javac.tree.JCTree.JCAnnotation anno = ((com.sun.tools.javac.tree.JCTree.JCAnnotation) (node.get()));\r\n    java.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> arguments = anno.getArguments();\r\n    for (java.lang.reflect.Method m : type.getDeclaredMethods()) {\r\n        if (!java.lang.reflect.Modifier.isPublic(m.getModifiers())) {\r\n            continue;\r\n        }\r\n        java.lang.String name = m.getName();\r\n        java.util.List<java.lang.String> raws = new java.util.ArrayList<java.lang.String>();\r\n        java.util.List<java.lang.Object> guesses = new java.util.ArrayList<java.lang.Object>();\r\n        final java.util.List<com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition> positions = new java.util.ArrayList<com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition>();\r\n        for (com.sun.tools.javac.tree.JCTree.JCExpression arg : arguments) {\r\n            com.sun.tools.javac.tree.JCTree.JCAssign assign = ((com.sun.tools.javac.tree.JCTree.JCAssign) (arg));\r\n            java.lang.String mName = assign.lhs.toString();\r\n            if (!mName.equals(name)) {\r\n                continue;\r\n            }\r\n            com.sun.tools.javac.tree.JCTree.JCExpression rhs = assign.rhs;\r\n            if (rhs instanceof com.sun.tools.javac.tree.JCTree.JCNewArray) {\r\n                java.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> elems = ((com.sun.tools.javac.tree.JCTree.JCNewArray) (rhs)).elems;\r\n                for (com.sun.tools.javac.tree.JCTree.JCExpression inner : elems) {\r\n                    raws.add(inner.toString());\r\n                    guesses.add(lombok.javac.Javac.calculateGuess(inner));\r\n                    positions.add(inner.pos());\r\n                }\r\n            } else {\r\n                raws.add(rhs.toString());\r\n                guesses.add(lombok.javac.Javac.calculateGuess(rhs));\r\n                positions.add(rhs.pos());\r\n            }\r\n        }\r\n        values.put(name, new lombok.core.AnnotationValues.AnnotationValue(node, raws, guesses) {\r\n            1(lombok.core.AST<? extends java.lang.Object>.Node $anonymous0, java.util.List<java.lang.String> $anonymous1, java.util.List<java.lang.Object> $anonymous2) {\r\n                super($anonymous0, $anonymous1, $anonymous2);\r\n            }\r\n\r\n            @java.lang.Override\r\n            public void setError(java.lang.String message, int valueIdx) {\r\n                node.addError(message, positions.get(valueIdx));\r\n            }\r\n\r\n            @java.lang.Override\r\n            public void setWarning(java.lang.String message, int valueIdx) {\r\n                node.addWarning(message, positions.get(valueIdx));\r\n            }\r\n        });\r\n    }\r\n    return new lombok.core.AnnotationValues<A>(type, values, node);\r\n}", "docComment": "Creates an instance of <code>AnnotationValues</code> for the provided AST Node.\r\n\r\n@param type\r\n\t\tAn annotation class type, such as <code>lombok.Getter.class</code>.\r\n@param node\r\n\t\tA Lombok AST node representing an annotation in source code.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "simpleName", "qualifiedName": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "traverse(lombok.eclipse.EclipseASTVisitor)", "qualifiedName": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "kind": "method", "sourceText": "/**\r\n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\r\n */\r\npublic void traverse(lombok.eclipse.EclipseASTVisitor visitor) {\r\n    switch (this.getKind()) {\r\n        case COMPILATION_UNIT :\r\n            visitor.visitCompilationUnit(this, ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitCompilationUnit(this, ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (this.get())));\r\n            break;\r\n        case TYPE :\r\n            visitor.visitType(this, ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitType(this, ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (this.get())));\r\n            break;\r\n        case FIELD :\r\n            visitor.visitField(this, ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitField(this, ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (this.get())));\r\n            break;\r\n        case INITIALIZER :\r\n            visitor.visitInitializer(this, ((org.eclipse.jdt.internal.compiler.ast.Initializer) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitInitializer(this, ((org.eclipse.jdt.internal.compiler.ast.Initializer) (this.get())));\r\n            break;\r\n        case METHOD :\r\n            if (this.get() instanceof org.eclipse.jdt.internal.compiler.ast.Clinit) {\r\n                return;\r\n            }\r\n            visitor.visitMethod(this, ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitMethod(this, ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (this.get())));\r\n            break;\r\n        case ARGUMENT :\r\n            org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method = ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (this.up().get()));\r\n            visitor.visitMethodArgument(this, ((org.eclipse.jdt.internal.compiler.ast.Argument) (this.get())), method);\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitMethodArgument(this, ((org.eclipse.jdt.internal.compiler.ast.Argument) (this.get())), method);\r\n            break;\r\n        case LOCAL :\r\n            visitor.visitLocal(this, ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitLocal(this, ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (this.get())));\r\n            break;\r\n        case ANNOTATION :\r\n            switch (this.up().getKind()) {\r\n                case TYPE :\r\n                    visitor.visitAnnotationOnType(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (this.up().get())), this, ((org.eclipse.jdt.internal.compiler.ast.Annotation) (this.get())));\r\n                    break;\r\n                case FIELD :\r\n                    visitor.visitAnnotationOnField(((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (this.up().get())), this, ((org.eclipse.jdt.internal.compiler.ast.Annotation) (this.get())));\r\n                    break;\r\n                case METHOD :\r\n                    visitor.visitAnnotationOnMethod(((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (this.up().get())), this, ((org.eclipse.jdt.internal.compiler.ast.Annotation) (this.get())));\r\n                    break;\r\n                case ARGUMENT :\r\n                    visitor.visitAnnotationOnMethodArgument(((org.eclipse.jdt.internal.compiler.ast.Argument) (this.parent.get())), ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (this.parent.directUp().get())), this, ((org.eclipse.jdt.internal.compiler.ast.Annotation) (this.get())));\r\n                    break;\r\n                case LOCAL :\r\n                    visitor.visitAnnotationOnLocal(((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) (this.parent.get())), this, ((org.eclipse.jdt.internal.compiler.ast.Annotation) (this.get())));\r\n                    break;\r\n                default :\r\n                    throw new java.lang.AssertionError(\"Annotion not expected as child of a \" + this.up().getKind());\r\n            }\r\n            break;\r\n        case STATEMENT :\r\n            visitor.visitStatement(this, ((org.eclipse.jdt.internal.compiler.ast.Statement) (this.get())));\r\n            this.traverseChildren(visitor, this);\r\n            visitor.endVisitStatement(this, ((org.eclipse.jdt.internal.compiler.ast.Statement) (this.get())));\r\n            break;\r\n        default :\r\n            throw new java.lang.AssertionError(\"Unexpected kind during node traversal: \" + this.getKind());\r\n    }\r\n}", "docComment": "Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "kind": "method", "sourceText": "private boolean createGetterForField(lombok.AccessLevel level, lombok.eclipse.EclipseAST.Node fieldNode, lombok.eclipse.EclipseAST.Node errorNode, org.eclipse.jdt.internal.compiler.ast.ASTNode pos, boolean whineIfExists) {\r\n    if (fieldNode.getKind() != lombok.core.AST.Kind.FIELD) {\r\n        errorNode.addError(\"@Getter is only supported on a field.\");\r\n        return true;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (fieldNode.get()));\r\n    org.eclipse.jdt.internal.compiler.ast.TypeReference fieldType = lombok.eclipse.Eclipse.copyType(field.type);\r\n    java.lang.String fieldName = new java.lang.String(field.name);\r\n    boolean isBoolean = lombok.eclipse.handlers.PKG.nameEquals(fieldType.getTypeName(), \"boolean\") && (fieldType.dimensions() == 0);\r\n    java.lang.String getterName = lombok.core.TransformationsUtil.toGetterName(fieldName, isBoolean);\r\n    int modifier = lombok.eclipse.handlers.PKG.toModifier(level) | (field.modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccStatic);\r\n    for (java.lang.String altName : lombok.core.TransformationsUtil.toAllGetterNames(fieldName, isBoolean)) {\r\n        switch (lombok.eclipse.handlers.PKG.methodExists(altName, fieldNode)) {\r\n            case EXISTS_BY_LOMBOK :\r\n                return true;\r\n            case EXISTS_BY_USER :\r\n                if (whineIfExists) {\r\n                    java.lang.String altNameExpl = \"\";\r\n                    if (!altName.equals(getterName)) {\r\n                        altNameExpl = java.lang.String.format(\" (%s)\", altName);\r\n                    }\r\n                    errorNode.addWarning(java.lang.String.format(\"Not generating %s(): A method with that name already exists%s\", getterName, altNameExpl));\r\n                }\r\n                return true;\r\n            default :\r\n            case NOT_EXISTS :\r\n                // continue scanning the other alt names.\r\n        }\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = this.generateGetter(((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (fieldNode.up().get())), field, getterName, modifier, pos);\r\n    lombok.eclipse.handlers.PKG.injectMethod(fieldNode.up(), method);\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "fieldName", "qualifiedName": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "raw", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "kind": "method", "sourceText": "void endVisitInitializer(lombok.eclipse.EclipseAST.Node initializerNode, org.eclipse.jdt.internal.compiler.ast.Initializer initializer);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "bundleName", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "statementNode", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows()", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>()", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows()", "kind": "constructor", "sourceText": "HandleSneakyThrows() {\r\n    super();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "qualifiedName": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "kind": "static method", "sourceText": "/**\r\n * Adds a problem to the provided CompilationResult object so that it will show up\r\n * in the Problems/Warnings view.\r\n */\r\nstatic void addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration ast, boolean isWarning, java.lang.String message, int sourceStart, int sourceEnd) {\r\n    if (ast.compilationResult == null) {\r\n        return;\r\n    }\r\n    char[] fileNameArray = ast.getFileName();\r\n    if (fileNameArray == null) {\r\n        fileNameArray = \"(unknown).java\".toCharArray();\r\n    }\r\n    int lineNumber = 0;\r\n    int columnNumber = 1;\r\n    org.eclipse.jdt.internal.compiler.CompilationResult result = ast.compilationResult;\r\n    int[] lineEnds = null;\r\n    lineNumber = (sourceStart >= 0) ? org.eclipse.jdt.internal.compiler.util.Util.getLineNumber(sourceStart, lineEnds = result.getLineSeparatorPositions(), 0, lineEnds.length - 1) : 0;\r\n    columnNumber = (sourceStart >= 0) ? org.eclipse.jdt.internal.compiler.util.Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber, sourceStart) : 0;\r\n    org.eclipse.jdt.core.compiler.CategorizedProblem ecProblem = new lombok.eclipse.EclipseAST.LombokProblem(fileNameArray, message, 0, new java.lang.String[0], isWarning ? org.eclipse.jdt.internal.compiler.problem.ProblemSeverities.Warning : org.eclipse.jdt.internal.compiler.problem.ProblemSeverities.Error, sourceStart, sourceEnd, lineNumber, columnNumber);\r\n    ast.compilationResult.record(ecProblem, null);\r\n}", "docComment": "Adds a problem to the provided CompilationResult object so that it will show up\r\nin the Problems/Warnings view.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "void endVisitMethodArgument(lombok.javac.JavacAST.Node argumentNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl argument, com.sun.tools.javac.tree.JCTree.JCMethodDecl method);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitInitializer(lombok.javac.JavacAST.Node initializerNode, com.sun.tools.javac.tree.JCTree.JCBlock initializer) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hasLombok", "labels": ["Variable"], "properties": {"sourceText": "private volatile boolean hasLombok;", "visibility": "private", "simpleName": "hasLombok", "qualifiedName": "lombok.installer.EclipseLocation.hasLombok", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException.serialVersionUID", "labels": ["Variable"], "properties": {"sourceText": "private static final long serialVersionUID = 1L;", "visibility": "private", "simpleName": "serialVersionUID", "qualifiedName": "lombok.installer.EclipseLocation$InstallException.serialVersionUID", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).0", "labels": ["Variable"], "properties": {"simpleName": "printContent", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "labels": ["Variable"], "properties": {"simpleName": "Node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "newN", "qualifiedName": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "addWarning(java.lang.String,int,int)", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "kind": "method", "sourceText": "/**\r\n * Generate a compiler warning that shows the wavy underline from-to the stated character positions.\r\n */\r\npublic void addWarning(java.lang.String message, int sourceStart, int sourceEnd) {\r\n    this.addProblem(new lombok.eclipse.EclipseAST.ParseProblem(true, message, sourceStart, sourceEnd));\r\n}", "docComment": "Generate a compiler warning that shows the wavy underline from-to the stated character positions.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitField(lombok.eclipse.EclipseAST.Node fieldNode, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.AppleNativeLook.go()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "go()", "qualifiedName": "lombok.installer.AppleNativeLook.go()", "kind": "static method", "sourceText": "public static void go() throws java.lang.Exception {\r\n    java.lang.Class<? extends java.lang.Object> appClass = java.lang.Class.forName(\"com.apple.eawt.Application\");\r\n    java.lang.Object app = appClass.getMethod(\"getApplication\").invoke(null);\r\n    appClass.getMethod(\"removeAboutMenuItem\").invoke(app);\r\n    appClass.getMethod(\"removePreferencesMenuItem\").invoke(app);\r\n    java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(lombok.installer.AppleNativeLook.class.getResource(\"lombokIcon.png\"));\r\n    appClass.getMethod(\"setDockIconImage\", java.awt.Image.class).invoke(app, image);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.Setter</code> annotation for javac.\r\n", "simpleName": "HandleSetter", "qualifiedName": "lombok.javac.handlers.HandleSetter", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "kind": "method", "sourceText": "public void visitInitializer(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Initializer initializer) {\r\n    org.eclipse.jdt.internal.compiler.ast.Block block = initializer.block;\r\n    boolean s = (block != null) && (block.statements != null);\r\n    this.print(\"<%s INITIALIZER: %s>\", (initializer.modifiers & java.lang.reflect.Modifier.STATIC) != 0 ? \"static\" : \"instance\", s ? \"filled\" : \"blank\");\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        if (initializer.block != null) {\r\n            this.print(\"%s\", initializer.block);\r\n        }\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation.path", "labels": ["Variable"], "properties": {"sourceText": "private final java.io.File path;", "visibility": "private", "simpleName": "path", "qualifiedName": "lombok.installer.EclipseLocation.path", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fieldsOf(java.lang.Class).0", "labels": ["Variable"], "properties": {"simpleName": "c", "qualifiedName": "lombok.core.AST.fieldsOf(java.lang.Class).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "public void endVisitMethodArgument(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Argument arg, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n    this.indent--;\r\n    this.print(\"</METHODARG %s %s>\", this.str(arg.type), this.str(arg.name));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateCompareFloatOrDouble(char[],char[],char[])", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.IfStatement generateCompareFloatOrDouble(char[] otherN, char[] floatOrDouble, char[] fieldName) {\r\n    /* if ( Float.compare(fieldName, other.fieldName) != 0 ) return false */\r\n    org.eclipse.jdt.internal.compiler.ast.MessageSend floatCompare = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n    floatCompare.receiver = this.generateQualifiedNameRef(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA, org.eclipse.jdt.internal.compiler.lookup.TypeConstants.LANG, floatOrDouble);\r\n    floatCompare.selector = \"compare\".toCharArray();\r\n    floatCompare.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(fieldName, 0), this.generateQualifiedNameRef(otherN, fieldName) };\r\n    org.eclipse.jdt.internal.compiler.ast.EqualExpression ifFloatCompareIsNot0 = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(floatCompare, new org.eclipse.jdt.internal.compiler.ast.IntLiteral(new char[]{ '0' }, 0, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL);\r\n    org.eclipse.jdt.internal.compiler.ast.ReturnStatement returnFalse = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.FalseLiteral(0, 0), 0, 0);\r\n    return new org.eclipse.jdt.internal.compiler.ast.IfStatement(ifFloatCompareIsNot0, returnFalse, 0, 0);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "context", "qualifiedName": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "level", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "methodNode", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.getTargetDirs()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getTargetDirs()", "qualifiedName": "lombok.installer.EclipseLocation.getTargetDirs()", "kind": "method", "sourceText": "/**\r\n * Returns the various directories that can contain the 'eclipse.ini' file.\r\n * Returns multiple directories because there are a few different ways Eclipse is packaged.\r\n */\r\nprivate java.util.List<java.io.File> getTargetDirs() {\r\n    return java.util.Arrays.asList(this.path.getParentFile(), new java.io.File(new java.io.File(this.path, \"Contents\"), \"MacOS\"));\r\n}", "docComment": "Returns the various directories that can contain the 'eclipse.ini' file.\r\nReturns multiple directories because there are a few different ways Eclipse is packaged.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "fieldName", "qualifiedName": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.JAVAC_TITLE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String JAVAC_TITLE = \"<html><font size=\\\"+1\\\"><b><i>Javac</i></b></font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (and tools that invoke javac such as <i>ant</i> and <i>maven</i>)</html>\";", "visibility": "private", "simpleName": "JAVAC_TITLE", "qualifiedName": "lombok.installer.Installer.JAVAC_TITLE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "children", "qualifiedName": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildHowIWorkArea()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildHowIWorkArea()", "qualifiedName": "lombok.installer.Installer.buildHowIWorkArea()", "kind": "method", "sourceText": "private java.awt.Component buildHowIWorkArea() {\r\n    javax.swing.JPanel container = new javax.swing.JPanel();\r\n    container.setLayout(new java.awt.GridBagLayout());\r\n    java.awt.GridBagConstraints constraints = new java.awt.GridBagConstraints();\r\n    constraints.anchor = java.awt.GridBagConstraints.WEST;\r\n    container.add(new javax.swing.JLabel(lombok.installer.Installer.HOW_I_WORK_TITLE), constraints);\r\n    constraints.gridy = 1;\r\n    constraints.insets = new java.awt.Insets(8, 0, 0, 16);\r\n    container.add(new javax.swing.JLabel(java.lang.String.format(lombok.installer.Installer.HOW_I_WORK_EXPLANATION, java.io.File.pathSeparator)), constraints);\r\n    javax.swing.Box buttonBar = javax.swing.Box.createHorizontalBox();\r\n    javax.swing.JButton backButton = new javax.swing.JButton(\"Okay - Good to know!\");\r\n    buttonBar.add(javax.swing.Box.createHorizontalGlue());\r\n    buttonBar.add(backButton);\r\n    backButton.addActionListener(new java.awt.event.ActionListener() {\r\n        3() {\r\n            super();\r\n        }\r\n\r\n        @java.lang.Override\r\n        public void actionPerformed(java.awt.event.ActionEvent e) {\r\n            lombok.installer.Installer.this.howIWorkArea.setVisible(false);\r\n            lombok.installer.Installer.this.javacArea.setVisible(true);\r\n            lombok.installer.Installer.this.eclipseArea.setVisible(true);\r\n            lombok.installer.Installer.this.appWindow.pack();\r\n        }\r\n    });\r\n    constraints.gridy = 2;\r\n    container.add(buttonBar, constraints);\r\n    return container;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression).0", "labels": ["Variable"], "properties": {"simpleName": "expr", "qualifiedName": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "qualifiedName": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "kind": "method", "sourceText": "private boolean generateToString(lombok.javac.JavacAST.Node typeNode, lombok.javac.JavacAST.Node errorNode, com.sun.tools.javac.util.List<java.lang.String> excludes, boolean includeFieldNames, boolean callSuper, boolean whineIfExists) {\r\n    boolean notAClass = true;\r\n    if (typeNode.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {\r\n        long flags = ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (typeNode.get())).mods.flags;\r\n        notAClass = (flags & ((com.sun.tools.javac.code.Flags.INTERFACE | com.sun.tools.javac.code.Flags.ANNOTATION) | com.sun.tools.javac.code.Flags.ENUM)) != 0;\r\n    }\r\n    if (notAClass) {\r\n        errorNode.addError(\"@ToString is only supported on a class.\");\r\n        return false;\r\n    }\r\n    com.sun.tools.javac.util.List<lombok.javac.JavacAST.Node> nodesForToString = com.sun.tools.javac.util.List.nil();\r\n    for (lombok.javac.JavacAST.Node child : typeNode.down()) {\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldDecl = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (child.get()));\r\n        // Skip static fields.\r\n        if ((fieldDecl.mods.flags & com.sun.tools.javac.code.Flags.STATIC) != 0) {\r\n            continue;\r\n        }\r\n        // Skip excluded fields.\r\n        if (excludes.contains(fieldDecl.name.toString())) {\r\n            continue;\r\n        }\r\n        nodesForToString = nodesForToString.append(child);\r\n    }\r\n    switch (lombok.javac.handlers.PKG.methodExists(\"toString\", typeNode)) {\r\n        case NOT_EXISTS :\r\n            com.sun.tools.javac.tree.JCTree.JCMethodDecl method = this.createToString(typeNode, nodesForToString, includeFieldNames, callSuper);\r\n            lombok.javac.handlers.PKG.injectMethod(typeNode, method);\r\n            return true;\r\n        case EXISTS_BY_LOMBOK :\r\n            return true;\r\n        default :\r\n        case EXISTS_BY_USER :\r\n            if (whineIfExists) {\r\n                errorNode.addWarning(\"Not generating toString(): A method with that name already exists\");\r\n            }\r\n            return true;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "localNode", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getNodeFor(java.lang.Object)", "qualifiedName": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's get method.\r\n *\r\n * @see AST#get(Object)\r\n */\r\npublic lombok.core.AST<N>.Node getNodeFor(N obj) {\r\n    return this.get(obj);\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's get method.\r\n\r\n@see AST#get(Object)\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "labels": ["Variable"], "properties": {"simpleName": "params", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "labels": ["Variable"], "properties": {"simpleName": "initializerNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.UNINSTALL_EXPLANATION", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String UNINSTALL_EXPLANATION = \"<html>Uninstall Lombok from the following Eclipse Installations?</html>\";", "visibility": "private", "simpleName": "UNINSTALL_EXPLANATION", "qualifiedName": "lombok.installer.Installer.UNINSTALL_EXPLANATION", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "methodName", "qualifiedName": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCMethodDecl createSetter(long access, lombok.javac.JavacAST.Node field, com.sun.tools.javac.tree.TreeMaker treeMaker) {\r\n    com.sun.tools.javac.tree.JCTree.JCVariableDecl fieldDecl = ((com.sun.tools.javac.tree.JCTree.JCVariableDecl) (field.get()));\r\n    com.sun.tools.javac.tree.JCTree.JCFieldAccess thisX = treeMaker.Select(treeMaker.Ident(field.toName(\"this\")), fieldDecl.name);\r\n    com.sun.tools.javac.tree.JCTree.JCAssign assign = treeMaker.Assign(thisX, treeMaker.Ident(fieldDecl.name));\r\n    com.sun.tools.javac.tree.JCTree.JCBlock methodBody = treeMaker.Block(0, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCStatement>of(treeMaker.Exec(assign)));\r\n    com.sun.tools.javac.util.Name methodName = field.toName(lombok.javac.handlers.PKG.toSetterName(fieldDecl));\r\n    com.sun.tools.javac.tree.JCTree.JCVariableDecl param = treeMaker.VarDef(treeMaker.Modifiers(0), fieldDecl.name, fieldDecl.vartype, null);\r\n    com.sun.tools.javac.tree.JCTree.JCExpression methodType = treeMaker.Type(field.getSymbolTable().voidType);\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCTypeParameter> methodGenericParams = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCVariableDecl> parameters = com.sun.tools.javac.util.List.of(param);\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> throwsClauses = com.sun.tools.javac.util.List.nil();\r\n    com.sun.tools.javac.tree.JCTree.JCExpression annotationMethodDefaultValue = null;\r\n    return treeMaker.MethodDef(treeMaker.Modifiers(access, com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCAnnotation>nil()), methodName, methodType, methodGenericParams, parameters, throwsClauses, methodBody, annotationMethodDefaultValue);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "qualifiedName": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "kind": "static method", "sourceText": "/**\r\n * Uses SPI Discovery to find implementations of {@link EclipseASTVisitor}.\r\n */\r\nprivate static void loadVisitorHandlers(lombok.eclipse.HandlerLibrary lib) {\r\n    java.util.Iterator<lombok.eclipse.EclipseASTVisitor> it;\r\n    try {\r\n        it = lombok.core.SpiLoadUtil.findServices(lombok.eclipse.EclipseASTVisitor.class);\r\n    } catch (java.lang.Throwable t) {\r\n        throw lombok.Lombok.sneakyThrow(t);\r\n    }\r\n    while (it.hasNext()) {\r\n        try {\r\n            lib.visitorHandlers.add(it.next());\r\n        } catch (java.lang.Throwable t) {\r\n            lombok.eclipse.Eclipse.error(null, \"Can't load Lombok visitor handler for Eclipse: \", t);\r\n        }\r\n    } \r\n}", "docComment": "Uses SPI Discovery to find implementations of {@link EclipseASTVisitor}.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "qualifiedName": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "kind": "method", "sourceText": "@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate <T extends lombok.core.AST<N>.Node> void buildWithField0(java.lang.Class<T> nodeType, N child, lombok.core.AST.FieldAccess fa, java.util.Collection<T> list) {\r\n    try {\r\n        java.lang.Object o = fa.field.get(child);\r\n        if (o == null) {\r\n            return;\r\n        }\r\n        if (fa.dim == 0) {\r\n            lombok.core.AST<N>.Node node = this.buildTree(((N) (o)), lombok.core.AST.Kind.STATEMENT);\r\n            if (node != null) {\r\n                list.add(nodeType.cast(node));\r\n            }\r\n        } else if (o.getClass().isArray()) {\r\n            this.buildWithArray(nodeType, o, list, fa.dim);\r\n        } else if (java.util.Collection.class.isInstance(o)) {\r\n            this.buildWithCollection(nodeType, o, list, fa.dim);\r\n        }\r\n    } catch (java.lang.IllegalAccessException e) {\r\n        lombok.Lombok.sneakyThrow(e);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "print(java.lang.String,java.lang.Object[])", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "kind": "method", "sourceText": "private void print(java.lang.String text, java.lang.Object... params) {\r\n    if (this.disablePrinting == 0) {\r\n        this.forcePrint(text, params);\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).2", "labels": ["Variable"], "properties": {"simpleName": "exception", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "kind": "method", "sourceText": "public void visitLocal(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.LocalDeclaration local) {\r\n    this.print(\"<LOCAL %s %s = %s>\", this.str(local.type), this.str(local.name), local.initialization);\r\n    this.indent++;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "method", "sourceText": "/**\r\n * Called at the very beginning and end.\r\n */\r\nvoid visitCompilationUnit(lombok.javac.JavacAST.Node top, com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit);", "docComment": "Called at the very beginning and end.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.isCompleteParse()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "isCompleteParse()", "qualifiedName": "lombok.eclipse.EclipseAST$Node.isCompleteParse()", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning EclipseAST object's isCompleteParse method.\r\n *\r\n * @see EclipseAST#isCompleteParse()\r\n */\r\npublic boolean isCompleteParse() {\r\n    return this.completeParse;\r\n}", "docComment": "Convenient shortcut to the owning EclipseAST object's isCompleteParse method.\r\n\r\n@see EclipseAST#isCompleteParse()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String ECLIPSE_LOADING_EXPLANATION = \"Scanning your drives for Eclipse installations...\";", "visibility": "private", "simpleName": "ECLIPSE_LOADING_EXPLANATION", "qualifiedName": "lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getImportStatements()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getImportStatements()", "qualifiedName": "lombok.core.AST$Node.getImportStatements()", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's getImportStatements method.\r\n *\r\n * @see AST#getImportStatements()\r\n */\r\npublic java.util.Collection<java.lang.String> getImportStatements() {\r\n    return this.getImportStatements();\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's getImportStatements method.\r\n\r\n@see AST#getImportStatements()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "findEclipseOnWindows()", "qualifiedName": "lombok.installer.EclipseFinder.findEclipseOnWindows()", "kind": "static method", "sourceText": "/**\r\n * Returns a list of paths of Eclipse installations.\r\n * Eclipse installations are found by checking for the existence of 'eclipse.exe' in the following locations:\r\n *\r\n * X:\\*Program Files*\\*Eclipse*\r\n * X:\\*Eclipse*\r\n *\r\n * Where 'X' is tried for all local disk drives, unless there's a problem calling fsutil, in which case only\r\n * C: is tried.\r\n *\r\n * @return A List of directories that contain 'eclipse.exe'.\r\n */\r\nstatic java.util.List<java.lang.String> findEclipseOnWindows() {\r\n    java.util.List<java.lang.String> eclipses = new java.util.ArrayList<java.lang.String>();\r\n    java.util.List<java.lang.String> driveLetters = java.util.Arrays.asList(\"C\");\r\n    try {\r\n        driveLetters = lombok.installer.EclipseFinder.getDrivesOnWindows();\r\n    } catch (java.lang.Throwable ignore) {\r\n        ignore.printStackTrace();\r\n    }\r\n    for (java.lang.String letter : driveLetters) {\r\n        java.io.File f = new java.io.File(letter + \":\\\\\");\r\n        for (java.io.File dir : f.listFiles()) {\r\n            if (!dir.isDirectory()) {\r\n                continue;\r\n            }\r\n            if (dir.getName().toLowerCase().contains(\"eclipse\")) {\r\n                java.lang.String eclipseLocation = lombok.installer.EclipseFinder.findEclipseOnWindows1(dir);\r\n                if (eclipseLocation != null) {\r\n                    eclipses.add(eclipseLocation);\r\n                }\r\n            }\r\n            if (dir.getName().toLowerCase().contains(\"program files\")) {\r\n                for (java.io.File dir2 : dir.listFiles()) {\r\n                    if (!dir2.isDirectory()) {\r\n                        continue;\r\n                    }\r\n                    if (dir.getName().toLowerCase().contains(\"eclipse\")) {\r\n                        java.lang.String eclipseLocation = lombok.installer.EclipseFinder.findEclipseOnWindows1(dir);\r\n                        if (eclipseLocation != null) {\r\n                            eclipses.add(eclipseLocation);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return eclipses;\r\n}", "docComment": "Returns a list of paths of Eclipse installations.\r\nEclipse installations are found by checking for the existence of 'eclipse.exe' in the following locations:\r\n\r\nX:\\*Program Files*\\*Eclipse*\r\nX:\\*Eclipse*\r\n\r\nWhere 'X' is tried for all local disk drives, unless there's a problem calling fsutil, in which case only\r\nC: is tried.\r\n\r\n@return A List of directories that contain 'eclipse.exe'.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "sourceStart", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "parent", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.getPath()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "getPath()", "qualifiedName": "lombok.installer.EclipseLocation.getPath()", "kind": "method", "sourceText": "/**\r\n * Returns the absolute path to the Eclipse executable.\r\n *\r\n * Executables: \"eclipse.exe\" (Windows), \"Eclipse.app\" (Mac OS X), \"eclipse\" (Linux and other unixes).\r\n */\r\njava.lang.String getPath() {\r\n    return this.path.getAbsolutePath();\r\n}", "docComment": "Returns the absolute path to the Eclipse executable.\r\n\r\nExecutables: \"eclipse.exe\" (Windows), \"Eclipse.app\" (Mac OS X), \"eclipse\" (Linux and other unixes).\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "nodeType", "qualifiedName": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess", "labels": ["Structure"], "properties": {"docComment": "Represents a field that contains AST children.\r\n", "simpleName": "FieldAccess", "qualifiedName": "lombok.core.AST$FieldAccess", "kind": "class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "void visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl local, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver.toSimpleName(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "typeName", "qualifiedName": "lombok.core.TypeResolver.toSimpleName(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "gatherAndRemoveChildren(java.util.Map)", "qualifiedName": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "kind": "method", "sourceText": "private void gatherAndRemoveChildren(java.util.Map<N, lombok.core.AST<N>.Node> map) {\r\n    for (lombok.core.AST<N>.Node child : this.children) {\r\n        child.gatherAndRemoveChildren(map);\r\n    }\r\n    this.identityDetector.remove(this.get());\r\n    map.put(this.get(), this);\r\n    this.children.clear();\r\n    this.nodeMap.remove(this.get());\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.typeLibrary", "labels": ["Variable"], "properties": {"sourceText": "private final lombok.core.TypeLibrary typeLibrary = new lombok.core.TypeLibrary();", "visibility": "private", "simpleName": "typeLibrary", "qualifiedName": "lombok.javac.HandlerLibrary.typeLibrary", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.completeParse", "labels": ["Variable"], "properties": {"sourceText": "private boolean completeParse;", "visibility": "private", "simpleName": "completeParse", "qualifiedName": "lombok.eclipse.EclipseAST.completeParse", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.loadingExpl", "labels": ["Variable"], "properties": {"sourceText": "private javax.swing.JComponent loadingExpl;", "visibility": "private", "simpleName": "loadingExpl", "qualifiedName": "lombok.installer.Installer.loadingExpl", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitStatement(lombok.javac.JavacAST.Node statementNode, com.sun.tools.javac.tree.JCTree statement) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "labels": ["Constructor"], "properties": {"visibility": "default", "simpleName": "<init>(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "kind": "constructor", "sourceText": "AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler<T> handler, java.lang.Class<T> annotationClass) {\r\n    super();\r\n    this.handler = handler;\r\n    this.annotationClass = annotationClass;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(boolean,java.io.PrintStream)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "kind": "constructor", "sourceText": "/**\r\n *\r\n * @param printContent\r\n * \t\tif true, bodies are printed directly, as java code,\r\n * \t\tinstead of a tree listing of every AST node inside it.\r\n * @param out\r\n * \t\twrite output to this stream. You must close it yourself. flush() is called after every line.\r\n * @see java.io.PrintStream#flush()\r\n */\r\npublic Printer(boolean printContent, java.io.PrintStream out) {\r\n    super();\r\n    this.printContent = printContent;\r\n    this.out = out;\r\n}", "docComment": "\r\n@param printContent\r\n\t\tif true, bodies are printed directly, as java code,\r\n\t\tinstead of a tree listing of every AST node inside it.\r\n@param out\r\n\t\twrite output to this stream. You must close it yourself. flush() is called after every line.\r\n@see java.io.PrintStream#flush()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression).0", "labels": ["Variable"], "properties": {"simpleName": "expression", "qualifiedName": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.ToString> annotation, com.sun.tools.javac.tree.JCTree.JCAnnotation ast, lombok.javac.JavacAST.Node annotationNode) {\r\n    lombok.ToString ann = annotation.getInstance();\r\n    com.sun.tools.javac.util.List<java.lang.String> excludes = com.sun.tools.javac.util.List.from(ann.exclude());\r\n    lombok.javac.JavacAST.Node typeNode = annotationNode.up();\r\n    this.checkForBogusExcludes(typeNode, annotation);\r\n    return this.generateToString(typeNode, annotationNode, excludes, ann.includeFieldNames(), ann.callSuper(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.SneakyThrows> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    java.util.List<java.lang.String> exceptionNames = annotation.getRawExpressions(\"value\");\r\n    org.eclipse.jdt.internal.compiler.ast.MemberValuePair[] memberValuePairs = ast.memberValuePairs();\r\n    if ((memberValuePairs == null) || (memberValuePairs.length == 0)) {\r\n        return false;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.Expression arrayOrSingle = memberValuePairs[0].value;\r\n    final org.eclipse.jdt.internal.compiler.ast.Expression[] exceptionNameNodes;\r\n    if (arrayOrSingle instanceof org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) {\r\n        exceptionNameNodes = ((org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) (arrayOrSingle)).expressions;\r\n    } else {\r\n        exceptionNameNodes = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ arrayOrSingle };\r\n    }\r\n    if (exceptionNames.size() != exceptionNameNodes.length) {\r\n        annotationNode.addError(\"LOMBOK BUG: The number of exception classes in the annotation isn't the same pre- and post- guessing.\");\r\n    }\r\n    java.util.List<lombok.eclipse.handlers.HandleSneakyThrows.DeclaredException> exceptions = new java.util.ArrayList<lombok.eclipse.handlers.HandleSneakyThrows.DeclaredException>();\r\n    int idx = 0;\r\n    for (java.lang.String exceptionName : exceptionNames) {\r\n        if (exceptionName.endsWith(\".class\")) {\r\n            exceptionName = exceptionName.substring(0, exceptionName.length() - 6);\r\n        }\r\n        exceptions.add(new lombok.eclipse.handlers.HandleSneakyThrows.DeclaredException(exceptionName, exceptionNameNodes[idx++]));\r\n    }\r\n    lombok.eclipse.EclipseAST.Node owner = annotationNode.up();\r\n    switch (owner.getKind()) {\r\n        // case FIELD:\r\n        // return handleField(annotationNode, (FieldDeclaration)owner.get(), exceptions);\r\n        case METHOD :\r\n            return this.handleMethod(annotationNode, ((org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) (owner.get())), exceptions);\r\n        default :\r\n            annotationNode.addError(\"@SneakyThrows is legal only on methods and constructors.\");\r\n            return true;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "oldL", "qualifiedName": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>ToString</code> annotation for eclipse.\r\n", "simpleName": "HandleToString", "qualifiedName": "lombok.eclipse.handlers.HandleToString", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary).0", "labels": ["Variable"], "properties": {"simpleName": "lib", "qualifiedName": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][]).0", "labels": ["Variable"], "properties": {"simpleName": "varNames", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.down()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "down()", "qualifiedName": "lombok.javac.JavacAST$Node.down()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\n@java.lang.Override\r\npublic java.util.Collection<lombok.javac.JavacAST.Node> down() {\r\n    return ((java.util.Collection<lombok.javac.JavacAST.Node>) (super.down()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).1", "labels": ["Variable"], "properties": {"simpleName": "raws", "qualifiedName": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).0", "labels": ["Variable"], "properties": {"simpleName": "annotationMethodName", "qualifiedName": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitType(lombok.eclipse.EclipseAST.Node typeNode, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getMarkerType()", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()", "kind": "method", "sourceText": "@java.lang.Override\r\npublic java.lang.String getMarkerType() {\r\n    return lombok.eclipse.EclipseAST.LombokProblem.MARKER_ID;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitType(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCClassDecl type) {\r\n    this.print(\"<TYPE %s>\", type.name);\r\n    this.indent++;\r\n    if (this.printContent) {\r\n        this.print(\"%s\", type);\r\n        this.disablePrinting++;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "main(java.lang.String[])", "qualifiedName": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "kind": "static method", "sourceText": "public static void main(java.lang.String[] args) {\r\n    java.lang.System.loadLibrary(\"WindowsDriveInfo\");\r\n    lombok.installer.WindowsDriveInfo info = new lombok.installer.WindowsDriveInfo();\r\n    for (java.lang.String letter : info.getLogicalDrives()) {\r\n        java.lang.System.out.printf(\"Drive %s: - %s\\n\", letter, info.isFixedDisk(letter) ? \"Fixed Disk\" : \"Not Fixed Disk\");\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "sneakyThrow(java.lang.Throwable)", "qualifiedName": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "kind": "static method", "sourceText": "/**\r\n * Throws any throwable 'sneakily' - you don't need to catch it, nor declare that you throw it onwards.\r\n * The exception is still thrown - javac will just stop whining about it.\r\n * <p>\r\n * Example usage:\r\n * <p>\r\n * <pre>public void run() {\r\n * throw sneakyThrow(new IOException(\"You don't need to catch me!\"));\r\n * }</pre>\r\n * <p>\r\n * NB: The exception is not wrapped, ignored, swallowed, or redefined. The JVM actually does not know or care\r\n * about the concept of a 'checked exception'. All this method does is hide the act of throwing a checked exception\r\n * from the java compiler.\r\n * <p>\r\n * Note that this method has a return type of <code>RuntimeException</code> it is advised you always call this\r\n * method as argument to the <code>throw</code> statement to avoid compiler errors regarding no return\r\n * statement and similar problems. This method won't of course return an actual <code>RuntimeException</code> -\r\n * it never returns, it always throws the provided exception.\r\n *\r\n * @param t\r\n * \t\tThe throwable to throw without requiring you to catch its type.\r\n * @return A dummy RuntimeException; this method never returns normally, it <em>always</em> throws an exception!\r\n */\r\npublic static java.lang.RuntimeException sneakyThrow(java.lang.Throwable t) {\r\n    if (t == null) {\r\n        throw new java.lang.NullPointerException(\"t\");\r\n    }\r\n    lombok.Lombok.<java.lang.RuntimeException>sneakyThrow0(t);\r\n    return null;\r\n}", "docComment": "Throws any throwable 'sneakily' - you don't need to catch it, nor declare that you throw it onwards.\r\nThe exception is still thrown - javac will just stop whining about it.\r\n<p>\r\nExample usage:\r\n<p>\r\n<pre>public void run() {\r\n    throw sneakyThrow(new IOException(\"You don't need to catch me!\"));\r\n}</pre>\r\n<p>\r\nNB: The exception is not wrapped, ignored, swallowed, or redefined. The JVM actually does not know or care\r\nabout the concept of a 'checked exception'. All this method does is hide the act of throwing a checked exception\r\nfrom the java compiler.\r\n<p>\r\nNote that this method has a return type of <code>RuntimeException</code> it is advised you always call this\r\nmethod as argument to the <code>throw</code> statement to avoid compiler errors regarding no return\r\nstatement and similar problems. This method won't of course return an actual <code>RuntimeException</code> -\r\nit never returns, it always throws the provided exception.\r\n\r\n@param t\r\n\t\tThe throwable to throw without requiring you to catch its type.\r\n@return A dummy RuntimeException; this method never returns normally, it <em>always</em> throws an exception!\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "argument", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.MethodDeclaration createHashCode(lombok.eclipse.EclipseAST.Node type, java.util.Collection<lombok.eclipse.EclipseAST.Node> fields, boolean callSuper, org.eclipse.jdt.internal.compiler.ast.ASTNode pos) {\r\n    org.eclipse.jdt.internal.compiler.ast.MethodDeclaration method = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration(((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (type.top().get())).compilationResult);\r\n    method.modifiers = lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel.PUBLIC);\r\n    method.returnType = org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_int, 0);\r\n    method.annotations = new org.eclipse.jdt.internal.compiler.ast.Annotation[]{ new org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation(new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_OVERRIDE, new long[]{ 0, 0, 0 }), 0) };\r\n    method.selector = \"hashCode\".toCharArray();\r\n    method.thrownExceptions = null;\r\n    method.typeParameters = null;\r\n    method.bits |= lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n    method.bodyStart = method.declarationSourceStart = method.sourceStart = pos.sourceStart;\r\n    method.bodyEnd = method.declarationSourceEnd = method.sourceEnd = pos.sourceEnd;\r\n    method.arguments = null;\r\n    java.util.List<org.eclipse.jdt.internal.compiler.ast.Statement> statements = new java.util.ArrayList<org.eclipse.jdt.internal.compiler.ast.Statement>();\r\n    java.util.List<org.eclipse.jdt.internal.compiler.ast.Expression> intoResult = new java.util.ArrayList<org.eclipse.jdt.internal.compiler.ast.Expression>();\r\n    final char[] PRIME = \"PRIME\".toCharArray();\r\n    final char[] RESULT = \"result\".toCharArray();\r\n    final boolean isEmpty = fields.isEmpty();\r\n    {\r\n        /* Without fields, PRIME isn't used, and that would trigger a 'local variable not used' warning. */\r\n        if ((!isEmpty) || callSuper) {\r\n            org.eclipse.jdt.internal.compiler.ast.LocalDeclaration primeDecl = new org.eclipse.jdt.internal.compiler.ast.LocalDeclaration(PRIME, 0, 0);\r\n            primeDecl.modifiers = java.lang.reflect.Modifier.FINAL;\r\n            primeDecl.type = org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_int, 0);\r\n            primeDecl.initialization = new org.eclipse.jdt.internal.compiler.ast.IntLiteral(\"31\".toCharArray(), 0, 0);\r\n            statements.add(primeDecl);\r\n        }\r\n    }\r\n    {\r\n        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration resultDecl = new org.eclipse.jdt.internal.compiler.ast.LocalDeclaration(RESULT, 0, 0);\r\n        resultDecl.initialization = new org.eclipse.jdt.internal.compiler.ast.IntLiteral(\"1\".toCharArray(), 0, 0);\r\n        resultDecl.type = org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_int, 0);\r\n        statements.add(resultDecl);\r\n    }\r\n    if (callSuper) {\r\n        org.eclipse.jdt.internal.compiler.ast.MessageSend callToSuper = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n        callToSuper.receiver = new org.eclipse.jdt.internal.compiler.ast.SuperReference(0, 0);\r\n        callToSuper.selector = \"hashCode\".toCharArray();\r\n        intoResult.add(callToSuper);\r\n    }\r\n    int tempCounter = 0;\r\n    for (lombok.eclipse.EclipseAST.Node field : fields) {\r\n        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration f = ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (field.get()));\r\n        char[] token = f.type.getLastToken();\r\n        if ((f.type.dimensions() == 0) && (token != null)) {\r\n            if (java.util.Arrays.equals(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.FLOAT, token)) {\r\n                /* Float.floatToIntBits(fieldName) */\r\n                org.eclipse.jdt.internal.compiler.ast.MessageSend floatToIntBits = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n                floatToIntBits.receiver = this.generateQualifiedNameRef(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_FLOAT);\r\n                floatToIntBits.selector = \"floatToIntBits\".toCharArray();\r\n                floatToIntBits.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ this.generateFieldReference(f.name) };\r\n                intoResult.add(floatToIntBits);\r\n            } else if (java.util.Arrays.equals(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.DOUBLE, token)) {\r\n                /* longToIntForHashCode(Double.doubleToLongBits(fieldName)) */\r\n                org.eclipse.jdt.internal.compiler.ast.MessageSend doubleToLongBits = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n                doubleToLongBits.receiver = this.generateQualifiedNameRef(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA_LANG_DOUBLE);\r\n                doubleToLongBits.selector = \"doubleToLongBits\".toCharArray();\r\n                doubleToLongBits.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ this.generateFieldReference(f.name) };\r\n                final char[] tempName = (\"temp\" + (++tempCounter)).toCharArray();\r\n                org.eclipse.jdt.internal.compiler.ast.LocalDeclaration tempVar = new org.eclipse.jdt.internal.compiler.ast.LocalDeclaration(tempName, 0, 0);\r\n                tempVar.initialization = doubleToLongBits;\r\n                tempVar.type = org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_long, 0);\r\n                tempVar.modifiers = java.lang.reflect.Modifier.FINAL;\r\n                statements.add(tempVar);\r\n                intoResult.add(this.longToIntForHashCode(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(tempName, 0), new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(tempName, 0)));\r\n            } else if (java.util.Arrays.equals(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.BOOLEAN, token)) {\r\n                /* booleanField ? 1231 : 1237 */\r\n                intoResult.add(new org.eclipse.jdt.internal.compiler.ast.ConditionalExpression(this.generateFieldReference(f.name), new org.eclipse.jdt.internal.compiler.ast.IntLiteral(\"1231\".toCharArray(), 0, 0), new org.eclipse.jdt.internal.compiler.ast.IntLiteral(\"1237\".toCharArray(), 0, 0)));\r\n            } else if (java.util.Arrays.equals(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.LONG, token)) {\r\n                intoResult.add(this.longToIntForHashCode(this.generateFieldReference(f.name), this.generateFieldReference(f.name)));\r\n            } else if (lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES.contains(new java.lang.String(token))) {\r\n                intoResult.add(this.generateFieldReference(f.name));\r\n            } else {\r\n                /* this.fieldName == null ? 0 : this.fieldName.hashCode() */\r\n                org.eclipse.jdt.internal.compiler.ast.MessageSend hashCodeCall = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n                hashCodeCall.receiver = this.generateFieldReference(f.name);\r\n                hashCodeCall.selector = \"hashCode\".toCharArray();\r\n                org.eclipse.jdt.internal.compiler.ast.EqualExpression objIsNull = new org.eclipse.jdt.internal.compiler.ast.EqualExpression(this.generateFieldReference(f.name), new org.eclipse.jdt.internal.compiler.ast.NullLiteral(0, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL);\r\n                org.eclipse.jdt.internal.compiler.ast.ConditionalExpression nullOrHashCode = new org.eclipse.jdt.internal.compiler.ast.ConditionalExpression(objIsNull, new org.eclipse.jdt.internal.compiler.ast.IntLiteral(\"0\".toCharArray(), 0, 0), hashCodeCall);\r\n                intoResult.add(nullOrHashCode);\r\n            }\r\n        } else if ((f.type.dimensions() > 0) && (token != null)) {\r\n            /* Arrays.deepHashCode(array)  //just hashCode for simple arrays */\r\n            org.eclipse.jdt.internal.compiler.ast.MessageSend arraysHashCodeCall = new org.eclipse.jdt.internal.compiler.ast.MessageSend();\r\n            arraysHashCodeCall.receiver = this.generateQualifiedNameRef(org.eclipse.jdt.internal.compiler.lookup.TypeConstants.JAVA, org.eclipse.jdt.internal.compiler.lookup.TypeConstants.UTIL, \"Arrays\".toCharArray());\r\n            if ((f.type.dimensions() > 1) || (!lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES.contains(new java.lang.String(token)))) {\r\n                arraysHashCodeCall.selector = \"deepHashCode\".toCharArray();\r\n            } else {\r\n                arraysHashCodeCall.selector = \"hashCode\".toCharArray();\r\n            }\r\n            arraysHashCodeCall.arguments = new org.eclipse.jdt.internal.compiler.ast.Expression[]{ this.generateFieldReference(f.name) };\r\n            intoResult.add(arraysHashCodeCall);\r\n        }\r\n    }\r\n    /* fold each intoResult entry into:\n    result = result * PRIME + (item);\n     */\r\n    {\r\n        for (org.eclipse.jdt.internal.compiler.ast.Expression ex : intoResult) {\r\n            org.eclipse.jdt.internal.compiler.ast.BinaryExpression multiplyByPrime = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(RESULT, 0), new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(PRIME, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY);\r\n            org.eclipse.jdt.internal.compiler.ast.BinaryExpression addItem = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(multiplyByPrime, ex, org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS);\r\n            statements.add(new org.eclipse.jdt.internal.compiler.ast.Assignment(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(RESULT, 0), addItem, 0));\r\n        }\r\n    }\r\n    {\r\n        statements.add(new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(new org.eclipse.jdt.internal.compiler.ast.SingleNameReference(RESULT, 0), 0, 0));\r\n    }\r\n    method.statements = statements.toArray(new org.eclipse.jdt.internal.compiler.ast.Statement[statements.size()]);\r\n    return method;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Setter.value()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "value()", "qualifiedName": "lombok.Setter.value()", "kind": "method", "sourceText": "/**\r\n * If you want your setter to be non-public, you can specify an alternate access level here.\r\n */\r\nlombok.AccessLevel value() default lombok.AccessLevel.PUBLIC;", "docComment": "If you want your setter to be non-public, you can specify an alternate access level here.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "public void visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method, lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    this.forcePrint(\"<ANNOTATION: %s />\", annotation);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getPreferredScrollableViewportSize()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getPreferredScrollableViewportSize()", "qualifiedName": "lombok.installer.Installer$EclipsesList.getPreferredScrollableViewportSize()", "kind": "method", "sourceText": "@java.lang.Override\r\npublic java.awt.Dimension getPreferredScrollableViewportSize() {\r\n    return new java.awt.Dimension(1, 100);\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "qualifiedName": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "kind": "static method", "sourceText": "/**\r\n * In javac, dotted access of any kind, from <code>java.lang.String</code> to <code>var.methodName</code>\r\n * is represented by a fold-left of <code>Select</code> nodes with the leftmost string represented by\r\n * a <code>Ident</code> node. This method generates such an expression.\r\n *\r\n * For example, maker.Select(maker.Select(maker.Ident(NAME[java]), NAME[lang]), NAME[String]).\r\n *\r\n * @see com.sun.tools.javac.tree.JCTree.JCIdent\r\n * @see com.sun.tools.javac.tree.JCTree.JCFieldAccess\r\n */\r\nstatic com.sun.tools.javac.tree.JCTree.JCExpression chainDots(com.sun.tools.javac.tree.TreeMaker maker, lombok.javac.JavacAST.Node node, java.lang.String... elems) {\r\n    assert elems != null;\r\n    assert elems.length > 0;\r\n    com.sun.tools.javac.tree.JCTree.JCExpression e = maker.Ident(node.toName(elems[0]));\r\n    for (int i = 1; i < elems.length; i++) {\r\n        e = maker.Select(e, node.toName(elems[i]));\r\n    }\r\n    return e;\r\n}", "docComment": "In javac, dotted access of any kind, from <code>java.lang.String</code> to <code>var.methodName</code>\r\nis represented by a fold-left of <code>Select</code> nodes with the leftmost string represented by\r\na <code>Ident</code> node. This method generates such an expression.\r\n\r\nFor example, maker.Select(maker.Select(maker.Ident(NAME[java]), NAME[lang]), NAME[String]).\r\n\r\n@see com.sun.tools.javac.tree.JCTree.JCIdent\r\n@see com.sun.tools.javac.tree.JCTree.JCFieldAccess\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getSymbolTable()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getSymbolTable()", "qualifiedName": "lombok.javac.JavacAST$Node.getSymbolTable()", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's getSymbolTable method.\r\n *\r\n * @see JavacAST#getSymbolTable()\r\n */\r\npublic com.sun.tools.javac.code.Symtab getSymbolTable() {\r\n    return this.symtab;\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's getSymbolTable method.\r\n\r\n@see JavacAST#getSymbolTable()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateFieldReference(char[])", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "kind": "method", "sourceText": "private org.eclipse.jdt.internal.compiler.ast.Reference generateFieldReference(char[] fieldName) {\r\n    org.eclipse.jdt.internal.compiler.ast.FieldReference thisX = new org.eclipse.jdt.internal.compiler.ast.FieldReference((\"this.\" + new java.lang.String(fieldName)).toCharArray(), 0);\r\n    thisX.receiver = new org.eclipse.jdt.internal.compiler.ast.ThisReference(0, 0);\r\n    thisX.token = fieldName;\r\n    return thisX;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "path", "qualifiedName": "lombok.installer.EclipseLocation(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "labels": ["Variable"], "properties": {"simpleName": "argument", "qualifiedName": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS.WINDOWS", "labels": ["Variable"], "properties": {"sourceText": "WINDOWS()", "visibility": "public", "simpleName": "WINDOWS", "qualifiedName": "lombok.installer.EclipseFinder$OS.WINDOWS", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "labels": ["Variable"], "properties": {"simpleName": "treeMaker", "qualifiedName": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "void visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration type, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.EclipseLocation", "labels": ["Structure", "Container"], "properties": {"docComment": "Represents an Eclipse installation.\r\nAn instance can figure out if an Eclipse installation has been lombok-ified, and can\r\ninstall and uninstall lombok from the Eclipse installation.\r\n", "simpleName": "EclipseLocation", "qualifiedName": "lombok.installer.EclipseLocation", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.toUninstall", "labels": ["Variable"], "properties": {"sourceText": "private java.util.List<lombok.installer.EclipseLocation> toUninstall;", "visibility": "private", "simpleName": "toUninstall", "qualifiedName": "lombok.installer.Installer.toUninstall", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.skipPrintAST()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "skipPrintAST()", "qualifiedName": "lombok.eclipse.HandlerLibrary.skipPrintAST()", "kind": "method", "sourceText": "/**\r\n * Lombok does not currently support triggering annotations in a specified order; the order is essentially\r\n * random right now. This lack of order is particularly annoying for the <code>PrintAST</code> annotation,\r\n * which is almost always intended to run last. Hence, this hack, which lets it in fact run last.\r\n *\r\n * @see #skipAllButPrintAST()\r\n */\r\npublic void skipPrintAST() {\r\n    this.skipPrintAST = true;\r\n}", "docComment": "Lombok does not currently support triggering annotations in a specified order; the order is essentially\r\nrandom right now. This lack of order is particularly annoying for the <code>PrintAST</code> annotation,\r\nwhich is almost always intended to run last. Hence, this hack, which lets it in fact run last.\r\n\r\n@see #skipAllButPrintAST()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[]).0", "labels": ["Variable"], "properties": {"simpleName": "args", "qualifiedName": "lombok.installer.Installer.main(java.lang.String[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).0", "labels": ["Variable"], "properties": {"simpleName": "guess", "qualifiedName": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree).0", "labels": ["Variable"], "properties": {"simpleName": "obj", "qualifiedName": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "replaceWith(java.lang.Object,lombok.core.AST$Kind)", "qualifiedName": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "kind": "method", "sourceText": "/**\r\n * Replaces the AST node represented by this node object with the provided node. This node must\r\n * have a parent, obviously, for this to work.\r\n *\r\n * Also affects the underlying (Eclipse/javac) AST.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic lombok.core.AST<N>.Node replaceWith(N newN, lombok.core.AST.Kind kind) {\r\n    lombok.core.AST<N>.Node newNode = this.buildTree(newN, kind);\r\n    newNode.parent = this.parent;\r\n    for (int i = 0; i < this.parent.children.size(); i++) {\r\n        if (this.parent.children.get(i) == this) {\r\n            ((java.util.List) (this.parent.children)).set(i, newNode);\r\n        }\r\n    }\r\n    this.parent.replaceChildNode(this.get(), newN);\r\n    return newNode;\r\n}", "docComment": "Replaces the AST node represented by this node object with the provided node. This node must\r\nhave a parent, obviously, for this to work.\r\n\r\nAlso affects the underlying (Eclipse/javac) AST.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary).0", "labels": ["Variable"], "properties": {"simpleName": "lib", "qualifiedName": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.top()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "top()", "qualifiedName": "lombok.javac.JavacAST.top()", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.javac.JavacAST.Node top() {\r\n    return ((lombok.javac.JavacAST.Node) (super.top()));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "MemberExistsResult", "qualifiedName": "lombok.eclipse.handlers.PKG$MemberExistsResult", "kind": "enum", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getTreeMaker()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getTreeMaker()", "qualifiedName": "lombok.javac.JavacAST$Node.getTreeMaker()", "kind": "method", "sourceText": "/**\r\n * Convenient shortcut to the owning JavacAST object's getTreeMaker method.\r\n *\r\n * @see JavacAST#getTreeMaker()\r\n */\r\npublic com.sun.tools.javac.tree.TreeMaker getTreeMaker() {\r\n    return this.treeMaker;\r\n}", "docComment": "Convenient shortcut to the owning JavacAST object's getTreeMaker method.\r\n\r\n@see JavacAST#getTreeMaker()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor", "labels": ["Structure", "Container"], "properties": {"docComment": "Implement so you can ask any JavacAST.Node to traverse depth-first through all children,\r\ncalling the appropriate visit and endVisit methods.\r\n", "simpleName": "EclipseASTVisitor", "qualifiedName": "lombok.eclipse.EclipseASTVisitor", "kind": "interface", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "traverse(lombok.javac.JavacASTVisitor)", "qualifiedName": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "kind": "method", "sourceText": "/**\r\n * Runs through the entire AST, starting at the compilation unit, calling the provided visitor's visit methods\r\n * for each node, depth first.\r\n */\r\npublic void traverse(lombok.javac.JavacASTVisitor visitor) {\r\n    this.top().traverse(visitor);\r\n}", "docComment": "Runs through the entire AST, starting at the compilation unit, calling the provided visitor's visit methods\r\nfor each node, depth first.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void endVisitMethodArgument(lombok.javac.JavacAST.Node argumentNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl argument, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "local", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.cachedInstance", "labels": ["Variable"], "properties": {"sourceText": "private A cachedInstance = null;", "visibility": "private", "simpleName": "cachedInstance", "qualifiedName": "lombok.core.AnnotationValues.cachedInstance", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).1", "labels": ["Variable"], "properties": {"simpleName": "expected", "qualifiedName": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getName()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getName()", "qualifiedName": "lombok.core.AST$Node.getName()", "kind": "method", "sourceText": "/**\r\n * Return the name of your type (simple name), method, field, or local variable. Return null if this\r\n * node doesn't really have a name, such as initializers, while statements, etc.\r\n */\r\npublic abstract java.lang.String getName();", "docComment": "Return the name of your type (simple name), method, field, or local variable. Return null if this\r\nnode doesn't really have a name, such as initializers, while statements, etc.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.top", "labels": ["Variable"], "properties": {"sourceText": "private lombok.core.AST<N>.Node top;", "visibility": "private", "simpleName": "top", "qualifiedName": "lombok.core.AST.top", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).0", "labels": ["Variable"], "properties": {"simpleName": "target", "qualifiedName": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "top", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "labels": ["Variable"], "properties": {"simpleName": "env", "qualifiedName": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getNodeFor(com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.javac.JavacAST.Node getNodeFor(com.sun.tools.javac.tree.JCTree obj) {\r\n    return ((lombok.javac.JavacAST.Node) (super.getNodeFor(obj)));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TypeResolver", "labels": ["Structure"], "properties": {"docComment": "Capable of resolving a simple type name such as 'String' into 'java.lang.String'.\r\n", "simpleName": "TypeResolver", "qualifiedName": "lombok.core.TypeResolver", "kind": "class", "metaSrc": "source code", "dependencyProfile": "inbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.serialVersionUID", "labels": ["Variable"], "properties": {"sourceText": "private static final long serialVersionUID = 1L;", "visibility": "private", "simpleName": "serialVersionUID", "qualifiedName": "lombok.installer.Installer$EclipsesList.serialVersionUID", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.clearState()", "labels": ["Operation"], "properties": {"visibility": "protected", "simpleName": "clearState()", "qualifiedName": "lombok.core.AST.clearState()", "kind": "method", "sourceText": "/**\r\n * Clears the registry that avoids endless loops, and empties the node map. The existing node map\r\n * object is left untouched, and instead a new map is created.\r\n */\r\nprotected void clearState() {\r\n    this.identityDetector = new java.util.IdentityHashMap<N, java.lang.Void>();\r\n    this.nodeMap = new java.util.IdentityHashMap<N, lombok.core.AST<N>.Node>();\r\n}", "docComment": "Clears the registry that avoids endless loops, and empties the node map. The existing node map\r\nobject is left untouched, and instead a new map is created.\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "labels": ["Variable"], "properties": {"sourceText": "private java.lang.Class<T> annotationClass;", "visibility": "private", "simpleName": "annotationClass", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "get(com.sun.tools.javac.tree.JCTree)", "qualifiedName": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic lombok.javac.JavacAST.Node get(com.sun.tools.javac.tree.JCTree astNode) {\r\n    return ((lombok.javac.JavacAST.Node) (super.get(astNode)));\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).1", "labels": ["Variable"], "properties": {"simpleName": "suffix", "qualifiedName": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).0", "labels": ["Variable"], "properties": {"simpleName": "packageString", "qualifiedName": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "findEclipseOnWindows1(java.io.File)", "qualifiedName": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "kind": "static method", "sourceText": "/**\r\n * Checks if the provided directory contains 'eclipse.exe', and if so, returns the directory, otherwise null.\r\n */\r\nprivate static java.lang.String findEclipseOnWindows1(java.io.File dir) {\r\n    if (new java.io.File(dir, \"eclipse.exe\").isFile()) {\r\n        return dir.getAbsolutePath();\r\n    }\r\n    return null;\r\n}", "docComment": "Checks if the provided directory contains 'eclipse.exe', and if so, returns the directory, otherwise null.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "kind": "method", "sourceText": "/**\r\n * Give 2 clones!\r\n */\r\nprivate org.eclipse.jdt.internal.compiler.ast.Expression longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference ref1, org.eclipse.jdt.internal.compiler.ast.Reference ref2) {\r\n    /* (int)(ref >>> 32 ^ ref) */\r\n    org.eclipse.jdt.internal.compiler.ast.BinaryExpression higherBits = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(ref1, new org.eclipse.jdt.internal.compiler.ast.IntLiteral(\"32\".toCharArray(), 0, 0), org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT);\r\n    org.eclipse.jdt.internal.compiler.ast.BinaryExpression xorParts = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression(ref2, higherBits, org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR);\r\n    return new org.eclipse.jdt.internal.compiler.ast.CastExpression(xorParts, org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(org.eclipse.jdt.internal.compiler.lookup.TypeIds.T_int, 0));\r\n}", "docComment": "Give 2 clones!\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean).0", "labels": ["Variable"], "properties": {"simpleName": "printContent", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer(boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "qualifiedName": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "kind": "method", "sourceText": "private void checkForBogusExcludes(lombok.eclipse.EclipseAST.Node type, lombok.core.AnnotationValues<lombok.ToString> annotation) {\r\n    java.util.List<java.lang.String> list = java.util.Arrays.asList(annotation.getInstance().exclude());\r\n    boolean[] matched = new boolean[list.size()];\r\n    for (lombok.eclipse.EclipseAST.Node child : type.down()) {\r\n        if (list.isEmpty()) {\r\n            break;\r\n        }\r\n        if (child.getKind() != lombok.core.AST.Kind.FIELD) {\r\n            continue;\r\n        }\r\n        if ((((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) (child.get())).modifiers & org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.AccStatic) != 0) {\r\n            continue;\r\n        }\r\n        int idx = list.indexOf(child.getName());\r\n        if (idx > (-1)) {\r\n            matched[idx] = true;\r\n        }\r\n    }\r\n    for (int i = 0; i < list.size(); i++) {\r\n        if (!matched[i]) {\r\n            annotation.setWarning(\"exclude\", \"This field does not exist, or would have been excluded anyway.\", i);\r\n        }\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hashCode()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "hashCode()", "qualifiedName": "lombok.installer.EclipseLocation.hashCode()", "kind": "method", "sourceText": "@java.lang.Override\r\npublic int hashCode() {\r\n    return this.path.hashCode();\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).4", "labels": ["Variable"], "properties": {"simpleName": "whineIfExists", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).4", "kind": "parameter", "parameterPosition": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "name", "qualifiedName": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container).0", "labels": ["Variable"], "properties": {"simpleName": "appWindowContainer", "qualifiedName": "lombok.installer.Installer.buildChrome(java.awt.Container).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "labels": ["Variable"], "properties": {"simpleName": "typeNode", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getKind()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "getKind()", "qualifiedName": "lombok.core.AST$Node.getKind()", "kind": "method", "sourceText": "public lombok.core.AST.Kind getKind() {\r\n    return this.kind;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void endVisitCompilationUnit(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCCompilationUnit unit) {\r\n    this.indent--;\r\n    this.print(\"</CUD>\");\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "labels": ["Variable"], "properties": {"simpleName": "annotation", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "kind": "method", "sourceText": "/**\r\n * The 2 references must be clones of each other.\r\n */\r\nprivate com.sun.tools.javac.tree.JCTree.JCExpression longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker maker, com.sun.tools.javac.tree.JCTree.JCExpression ref1, com.sun.tools.javac.tree.JCTree.JCExpression ref2) {\r\n    /* (int)(ref >>> 32 ^ ref) */\r\n    com.sun.tools.javac.tree.JCTree.JCExpression shift = maker.Binary(JCTree.USR, ref1, maker.Literal(32));\r\n    com.sun.tools.javac.tree.JCTree.JCExpression xorBits = maker.Binary(JCTree.BITXOR, shift, ref2);\r\n    return maker.TypeCast(maker.TypeIdent(TypeTags.INT), xorBits);\r\n}", "docComment": "The 2 references must be clones of each other.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[]).0", "labels": ["Variable"], "properties": {"simpleName": "annotations", "qualifiedName": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "install()", "qualifiedName": "lombok.installer.EclipseLocation.install()", "kind": "method", "sourceText": "/**\r\n * Install lombok into the Eclipse at this location.\r\n * If lombok is already there, it is overwritten neatly (upgrade mode).\r\n *\r\n * @throws InstallException\r\n * \t\tIf there's an obvious I/O problem that is preventing installation.\r\n * \t\tbugs in the install code will probably throw other exceptions; this is intentional.\r\n */\r\nvoid install() throws lombok.installer.EclipseLocation.InstallException {\r\n    java.util.List<java.io.File> failedDirs = new java.util.ArrayList<java.io.File>();\r\n    // For whatever reason, relative paths in your eclipse.ini file don't work on linux, but only for -javaagent.\r\n    // If someone knows how to fix this, please do so, as this current hack solution (putting the absolute path\r\n    // to the jar files in your eclipse.ini) means you can't move your eclipse around on linux without lombok\r\n    // breaking it. NB: rerunning lombok.jar installer and hitting 'update' will fix it if you do that.\r\n    boolean fullPathRequired = lombok.installer.EclipseFinder.getOS() == lombok.installer.EclipseFinder.OS.UNIX;\r\n    boolean installSucceeded = false;\r\n    for (java.io.File dir : this.getTargetDirs()) {\r\n        java.io.File iniFile = new java.io.File(dir, \"eclipse.ini\");\r\n        java.lang.StringBuilder newContents = new java.lang.StringBuilder();\r\n        if (!iniFile.exists()) {\r\n            failedDirs.add(dir);\r\n        } else {\r\n            // If 'installSucceeded' is true here, something very weird is going on, but instrumenting all of them\r\n            // is no less bad than aborting, and this situation should be rare to the point of non-existence.\r\n            java.io.File lombokJar = new java.io.File(iniFile.getParentFile(), \"lombok.jar\");\r\n            java.io.File agentJar = new java.io.File(iniFile.getParentFile(), \"lombok.eclipse.agent.jar\");\r\n            java.io.File ourJar = lombok.installer.EclipseFinder.findOurJar();\r\n            byte[] b = new byte[524288];\r\n            boolean readSucceeded = false;\r\n            try {\r\n                java.util.jar.JarFile jar = new java.util.jar.JarFile(ourJar);\r\n                try {\r\n                    java.util.zip.ZipEntry entry = jar.getEntry(\"lombok.eclipse.agent.jar\");\r\n                    java.io.InputStream in = jar.getInputStream(entry);\r\n                    java.io.FileOutputStream out = new java.io.FileOutputStream(agentJar);\r\n                    try {\r\n                        while (true) {\r\n                            int r = in.read(b);\r\n                            if (r == (-1)) {\r\n                                break;\r\n                            }\r\n                            readSucceeded = true;\r\n                            out.write(b, 0, r);\r\n                        } \r\n                    } finally {\r\n                        out.close();\r\n                    }\r\n                } finally {\r\n                    jar.close();\r\n                }\r\n                java.io.FileOutputStream out = new java.io.FileOutputStream(lombokJar);\r\n                java.io.InputStream in = new java.io.FileInputStream(ourJar);\r\n                try {\r\n                    while (true) {\r\n                        int r = in.read(b);\r\n                        if (r == (-1)) {\r\n                            break;\r\n                        }\r\n                        out.write(b, 0, r);\r\n                    } \r\n                } finally {\r\n                    out.close();\r\n                }\r\n            } catch (java.io.IOException e) {\r\n                try {\r\n                    lombokJar.delete();\r\n                    agentJar.delete();\r\n                } catch (java.lang.Throwable ignore) {\r\n                }\r\n                if (!readSucceeded) {\r\n                    throw new lombok.installer.EclipseLocation.InstallException(\"I can't read my own jar file. I think you've found a bug in this installer! I suggest you restart it \" + \"and use the 'what do I do' link, to manually install lombok. And tell us about this. Thanks!\", e);\r\n                }\r\n                throw new lombok.installer.EclipseLocation.InstallException(\"I can't write to your Eclipse directory, probably because this installer does not have the access rights.\", e);\r\n            }\r\n            try {\r\n                java.io.FileInputStream fis = new java.io.FileInputStream(iniFile);\r\n                try {\r\n                    java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(fis));\r\n                    java.lang.String line;\r\n                    while ((line = br.readLine()) != null) {\r\n                        if (this.JAVA_AGENT_LINE_MATCHER.matcher(line).matches()) {\r\n                            continue;\r\n                        }\r\n                        java.util.regex.Matcher m = this.BOOTCLASSPATH_LINE_MATCHER.matcher(line);\r\n                        if (m.matches()) {\r\n                            java.lang.StringBuilder elemBuilder = new java.lang.StringBuilder();\r\n                            elemBuilder.append(\"-Xbootclasspath/a:\");\r\n                            boolean first = true;\r\n                            for (java.lang.String elem : m.group(1).split(java.util.regex.Pattern.quote(java.io.File.pathSeparator))) {\r\n                                if (elem.toLowerCase().endsWith(\"lombok.jar\")) {\r\n                                    continue;\r\n                                }\r\n                                if (elem.toLowerCase().endsWith(\"lombok.eclipse.agent.jar\")) {\r\n                                    continue;\r\n                                }\r\n                                if (first) {\r\n                                    first = false;\r\n                                } else {\r\n                                    elemBuilder.append(java.io.File.pathSeparator);\r\n                                }\r\n                                elemBuilder.append(elem);\r\n                            }\r\n                            if (!first) {\r\n                                newContents.append(elemBuilder.toString()).append(lombok.installer.EclipseLocation.OS_NEWLINE);\r\n                            }\r\n                            continue;\r\n                        }\r\n                        newContents.append(line).append(lombok.installer.EclipseLocation.OS_NEWLINE);\r\n                    } \r\n                } finally {\r\n                    fis.close();\r\n                }\r\n                java.lang.String fullPathToLombok = (fullPathRequired) ? lombokJar.getParentFile().getCanonicalPath() + java.io.File.separator : \"\";\r\n                java.lang.String fullPathToAgent = (fullPathRequired) ? agentJar.getParentFile().getCanonicalPath() + java.io.File.separator : \"\";\r\n                newContents.append(java.lang.String.format(\"-javaagent:%slombok.eclipse.agent.jar\", fullPathToLombok)).append(lombok.installer.EclipseLocation.OS_NEWLINE);\r\n                newContents.append(java.lang.String.format((\"-Xbootclasspath/a:%slombok.jar\" + java.io.File.pathSeparator) + \"%slombok.eclipse.agent.jar\", fullPathToLombok, fullPathToAgent)).append(lombok.installer.EclipseLocation.OS_NEWLINE);\r\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(iniFile);\r\n                try {\r\n                    fos.write(newContents.toString().getBytes());\r\n                } finally {\r\n                    fos.close();\r\n                }\r\n                installSucceeded = true;\r\n            } catch (java.io.IOException e) {\r\n                throw new lombok.installer.EclipseLocation.InstallException((\"Cannot install lombok at \" + this.path.getAbsolutePath()) + \" probably because this installer does not have the access rights to do so.\", e);\r\n            } finally {\r\n                if (!installSucceeded) {\r\n                    try {\r\n                        lombokJar.delete();\r\n                        agentJar.delete();\r\n                    } catch (java.lang.Throwable ignore) {\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (!installSucceeded) {\r\n        throw new lombok.installer.EclipseLocation.InstallException(\"I can't find the eclipse.ini file. Is this a real Eclipse installation?\", null);\r\n    }\r\n    for (java.io.File dir : failedDirs) {\r\n        // If we're updating the old installation might have worked by putting the lombok jars in a different place.\r\n        // We'll delete these old files.\r\n        try {\r\n            new java.io.File(dir, \"lombok.jar\").delete();\r\n            new java.io.File(dir, \"lombok.eclipse.agent.jar\").delete();\r\n        } catch (java.lang.Throwable ignore) {\r\n        }\r\n    }\r\n}", "docComment": "Install lombok into the Eclipse at this location.\r\nIf lombok is already there, it is overwritten neatly (upgrade mode).\r\n\r\n@throws InstallException\r\n\t\tIf there's an obvious I/O problem that is preventing installation.\r\n\t\tbugs in the install code will probably throw other exceptions; this is intentional.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "labels": ["Variable"], "properties": {"simpleName": "newO", "qualifiedName": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).1", "labels": ["Variable"], "properties": {"simpleName": "cause", "qualifiedName": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).1", "labels": ["Variable"], "properties": {"simpleName": "roundEnv", "qualifiedName": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "qualifiedName": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "kind": "method", "sourceText": "/**\r\n * Generates a getter on the stated field.\r\n *\r\n * Used by {@link HandleData}.\r\n *\r\n * The difference between this call and the handle method is as follows:\r\n *\r\n * If there is a <code>lombok.Getter</code> annotation on the field, it is used and the\r\n * same rules apply (e.g. warning if the method already exists, stated access level applies).\r\n * If not, the getter is still generated if it isn't already there, though there will not\r\n * be a warning if its already there. The default access level is used.\r\n */\r\npublic void generateGetterForField(lombok.javac.JavacAST.Node fieldNode, com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition pos) {\r\n    for (lombok.javac.JavacAST.Node child : fieldNode.down()) {\r\n        if (child.getKind() == lombok.core.AST.Kind.ANNOTATION) {\r\n            if (lombok.javac.Javac.annotationTypeMatches(lombok.Getter.class, child)) {\r\n                // The annotation will make it happen, so we can skip it.\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    this.createGetterForField(lombok.AccessLevel.PUBLIC, fieldNode, fieldNode, pos, false);\r\n}", "docComment": "Generates a getter on the stated field.\r\n\r\nUsed by {@link HandleData}.\r\n\r\nThe difference between this call and the handle method is as follows:\r\n\r\nIf there is a <code>lombok.Getter</code> annotation on the field, it is used and the\r\nsame rules apply (e.g. warning if the method already exists, stated access level applies).\r\nIf not, the getter is still generated if it isn't already there, though there will not\r\nbe a warning if its already there. The default access level is used.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).1", "labels": ["Variable"], "properties": {"simpleName": "annotationClass", "qualifiedName": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "toJavacModifier(lombok.AccessLevel)", "qualifiedName": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "kind": "static method", "sourceText": "/**\r\n * Turns an <code>AccessLevel<code> instance into the flag bit used by javac.\r\n *\r\n * @see java.lang.Modifier\r\n */\r\nstatic int toJavacModifier(lombok.AccessLevel accessLevel) {\r\n    switch (accessLevel) {\r\n        case MODULE :\r\n        case PACKAGE :\r\n            return 0;\r\n        default :\r\n        case PUBLIC :\r\n            return java.lang.reflect.Modifier.PUBLIC;\r\n        case PRIVATE :\r\n            return java.lang.reflect.Modifier.PRIVATE;\r\n        case PROTECTED :\r\n            return java.lang.reflect.Modifier.PROTECTED;\r\n    }\r\n}", "docComment": "Turns an <code>AccessLevel<code> instance into the flag bit used by javac.\r\n\r\n@see java.lang.Modifier\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG", "labels": ["Structure", "Container"], "properties": {"docComment": "", "simpleName": "PKG", "qualifiedName": "lombok.eclipse.handlers.PKG", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitMethodArgument(lombok.javac.JavacAST.Node node, com.sun.tools.javac.tree.JCTree.JCVariableDecl arg, com.sun.tools.javac.tree.JCTree.JCMethodDecl method) {\r\n    this.print(\"<METHODARG %s %s>\", arg.vartype, arg.name);\r\n    this.indent++;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.compilationUnitDeclaration", "labels": ["Variable"], "properties": {"sourceText": "private final org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration;", "visibility": "private", "simpleName": "compilationUnitDeclaration", "qualifiedName": "lombok.eclipse.EclipseAST.compilationUnitDeclaration", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "callSuper", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG()", "labels": ["Constructor"], "properties": {"visibility": "private", "simpleName": "<init>()", "qualifiedName": "lombok.javac.handlers.PKG()", "kind": "constructor", "sourceText": "private PKG() {\r\n    super();\r\n    // Prevent instantiation\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "statement", "qualifiedName": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.SneakyThrows", "labels": ["Structure"], "properties": {"docComment": "&#64;SneakyThrow will avoid javac's insistence that you either catch or throw onward any checked exceptions that\r\nstatements in your method body declare they generate.\r\n<p>\r\n&#64;SneakyThrow does not silently swallow, wrap into RuntimeException, or otherwise modify any exceptions of the listed\r\nchecked exception types. The JVM does not check for the consistency of the checked exception system; javac does,\r\nand this annotation lets you opt out of its mechanism.\r\n<p>\r\nYou should use this annotation ONLY in the following two cases:<ol>\r\n<li>You are certain the listed exception can't actually ever happen, or only in vanishingly rare situations.\r\nYou don't try to catch OutOfMemoryError on every statement either. Examples:<br>\r\n<code>IOException</code> in <code>ByteArrayOutputStream</code><br>\r\n<code>UnsupportedEncodingException</code> in new String(byteArray, \"UTF-8\").</li>\r\n<li>You know for certain the caller can handle the exception (for example, because the caller is\r\nan app manager that will handle all throwables that fall out of your method the same way), but due\r\nto interface restrictions you can't just add these exceptions to your 'throws' clause.\r\n<p>\r\nNote that, as SneakyThrow is an implementation detail and <i>NOT</i> part of your method signature, it is\r\na compile time error if none of the statements in your method body can throw a listed exception.\r\n<p>\r\n<b><i>WARNING: </b></i>You must have lombok.jar available at the runtime of your app if you use SneakyThrows,\r\nbecause your code is rewritten to use {@link Lombok#sneakyThrow(Throwable)}. \r\n<p>\r\n<p>\r\nExample:\r\n<pre>\r\n&#64;SneakyThrows(UnsupportedEncodingException.class)\r\npublic void utf8ToString(byte[] bytes) {\r\n    return new String(bytes, \"UTF-8\");\r\n}\r\n</pre>\r\n\r\n<code>&#64;SneakyThrows</code> without a parameter defaults to allowing <i>every</i> checked exception.\r\n(The default is <code>Throwable.class</code>).\r\n\r\n@see Lombok#sneakyThrow(Throwable)\r\n", "simpleName": "SneakyThrows", "qualifiedName": "lombok.SneakyThrows", "kind": "abstract class", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt.Processor", "labels": ["Structure", "Container"], "properties": {"docComment": "This Annotation Processor is the standard injection mechanism for lombok-enabling the javac compiler.\r\n\r\nDue to lots of changes in the core javac code, as well as lombok's heavy usage of non-public API, this\r\ncode only works for the javac v1.6 compiler; it definitely won't work for javac v1.5, and it probably\r\nwon't work for javac v1.7 without modifications.\r\n\r\nTo actually enable lombok in a javac compilation run, this class should be in the classpath when\r\nrunning javac; that's the only requirement.\r\n", "simpleName": "Processor", "qualifiedName": "lombok.javac.apt.Processor", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "labels": ["Variable"], "properties": {"simpleName": "pos", "qualifiedName": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "init(javax.annotation.processing.ProcessingEnvironment)", "qualifiedName": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic void init(javax.annotation.processing.ProcessingEnvironment processingEnv) {\r\n    super.init(processingEnv);\r\n    if (!(processingEnv instanceof com.sun.tools.javac.processing.JavacProcessingEnvironment)) {\r\n        this.processingEnv = null;\r\n    } else {\r\n        this.processingEnv = ((com.sun.tools.javac.processing.JavacProcessingEnvironment) (processingEnv));\r\n        this.handlers = lombok.javac.HandlerLibrary.load(processingEnv.getMessager());\r\n        this.trees = com.sun.source.util.Trees.instance(processingEnv);\r\n    }\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration top = ((org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration) (annotationNode.top().get()));\r\n    boolean handled = lombok.eclipse.TransformEclipseAST.handlers.handle(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.HOW_I_WORK_EXPLANATION", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String HOW_I_WORK_EXPLANATION = \"<html><ol>\" + ((((((((\"<li>First, I copy myself (lombok.jar) to your Eclipse install directory.</li>\" + \"<li>Then, I unpack lombok.eclipse.agent.jar like so:<br>\") + \"<pre>jar xvf lombok.jar lombok.eclipse.agent.jar</pre></li>\") + \"<li>Then, I edit the eclipse.ini file to add the following two entries:<br>\") + \"<pre>-Xbootclasspath/a:lombok.jar%1$slombok.eclipse.agent.jar<br>\") + \"-javaagent:lombok.jar</pre></li></ol>\") + \"<br>\") + \"That's all there is to it. Note that on Mac OS X, eclipse.ini is hidden in<br>\") + \"<code>Eclipse.app/Contents/MacOS</code> so that's where I place the jar files.</html>\");", "visibility": "private", "simpleName": "HOW_I_WORK_EXPLANATION", "qualifiedName": "lombok.installer.Installer.HOW_I_WORK_EXPLANATION", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.library", "labels": ["Variable"], "properties": {"sourceText": "private final lombok.core.TypeLibrary library;", "visibility": "private", "simpleName": "library", "qualifiedName": "lombok.core.TypeResolver.library", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).1", "labels": ["Variable"], "properties": {"simpleName": "cache", "qualifiedName": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(lombok.eclipse.EclipseAST)", "qualifiedName": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)", "kind": "constructor", "sourceText": "public TransformEclipseAST(lombok.eclipse.EclipseAST ast) {\r\n    super();\r\n    this.ast = ast;\r\n}", "docComment": "", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "labels": ["Variable"], "properties": {"simpleName": "field", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "labels": ["Variable"], "properties": {"simpleName": "chain", "qualifiedName": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "labels": ["Constructor"], "properties": {"visibility": "public", "simpleName": "<init>(boolean,java.io.PrintStream)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "kind": "constructor", "sourceText": "/**\r\n *\r\n * @param printContent\r\n * \t\tif true, bodies are printed directly, as java code,\r\n * \t\tinstead of a tree listing of every AST node inside it.\r\n * @param out\r\n * \t\twrite output to this stream. You must close it yourself. flush() is called after every line.\r\n * @see java.io.PrintStream#flush()\r\n */\r\npublic Printer(boolean printContent, java.io.PrintStream out) {\r\n    super();\r\n    this.printContent = printContent;\r\n    this.out = out;\r\n}", "docComment": "\r\n@param printContent\r\n\t\tif true, bodies are printed directly, as java code,\r\n\t\tinstead of a tree listing of every AST node inside it.\r\n@param out\r\n\t\twrite output to this stream. You must close it yourself. flush() is called after every line.\r\n@see java.io.PrintStream#flush()\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "public boolean handle(lombok.core.AnnotationValues<lombok.core.PrintAST> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    if (!annotationNode.isCompleteParse()) {\r\n        return false;\r\n    }\r\n    java.io.PrintStream stream = java.lang.System.out;\r\n    java.lang.String fileName = annotation.getInstance().outfile();\r\n    if (fileName.length() > 0) {\r\n        try {\r\n            stream = new java.io.PrintStream(new java.io.File(fileName));\r\n        } catch (java.io.FileNotFoundException e) {\r\n            lombok.Lombok.sneakyThrow(e);\r\n        }\r\n    }\r\n    annotationNode.up().traverse(new lombok.eclipse.EclipseASTVisitor.Printer(annotation.getInstance().printContent(), stream));\r\n    return true;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).5", "labels": ["Variable"], "properties": {"simpleName": "startPosition", "qualifiedName": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).5", "kind": "parameter", "parameterPosition": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.nameTable", "labels": ["Variable"], "properties": {"sourceText": "private final Name.Table nameTable;", "visibility": "private", "simpleName": "nameTable", "qualifiedName": "lombok.javac.JavacAST.nameTable", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node).0", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows", "labels": ["Structure"], "properties": {"docComment": "Handles the <code>lombok.SneakyThrows</code> annotation for javac.\r\n", "simpleName": "HandleSneakyThrows", "qualifiedName": "lombok.javac.handlers.HandleSneakyThrows", "kind": "class", "metaSrc": "source code", "dependencyProfile": "outbound", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "labels": ["Variable"], "properties": {"simpleName": "initializer", "qualifiedName": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "fieldRef", "qualifiedName": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence).0", "labels": ["Variable"], "properties": {"simpleName": "fieldName", "qualifiedName": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.EqualsAndHashCode.callSuper()", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "callSuper()", "qualifiedName": "lombok.EqualsAndHashCode.callSuper()", "kind": "method", "sourceText": "/**\r\n * Call on the superclass's implementations of <code>equals</code> and <code>hashCode</code> before calculating\r\n * for the fields in this class.\r\n * <strong>default: false</strong>\r\n */\r\nboolean callSuper() default false;", "docComment": "Call on the superclass's implementations of <code>equals</code> and <code>hashCode</code> before calculating\r\nfor the fields in this class.\r\n<strong>default: false</strong>\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "kind": "method", "sourceText": "public void endVisitMethod(lombok.eclipse.EclipseAST.Node node, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration method) {\r\n    if (this.printContent) {\r\n        this.disablePrinting--;\r\n    }\r\n    java.lang.String type = (method instanceof org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) ? \"CONSTRUCTOR\" : \"METHOD\";\r\n    this.indent--;\r\n    this.print(\"</%s %s>\", type, this.str(method.selector));\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).0", "labels": ["Variable"], "properties": {"simpleName": "newChild", "qualifiedName": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "labels": ["Variable"], "properties": {"simpleName": "ast", "qualifiedName": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.PUBLIC", "labels": ["Variable"], "properties": {"sourceText": "PUBLIC()", "visibility": "public", "simpleName": "PUBLIC", "qualifiedName": "lombok.AccessLevel.PUBLIC", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).1", "labels": ["Variable"], "properties": {"simpleName": "method", "qualifiedName": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "kind": "method", "sourceText": "private com.sun.tools.javac.tree.JCTree.JCStatement generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression thisDotField, com.sun.tools.javac.tree.JCTree.JCExpression otherDotField, com.sun.tools.javac.tree.TreeMaker maker, lombok.javac.JavacAST.Node node, boolean isDouble) {\r\n    /* if ( Float.compare(fieldName, other.fieldName) != 0 ) return false; */\r\n    com.sun.tools.javac.tree.JCTree.JCExpression clazz = lombok.javac.handlers.PKG.chainDots(maker, node, \"java\", \"lang\", isDouble ? \"Double\" : \"Float\");\r\n    com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree.JCExpression> args = com.sun.tools.javac.util.List.of(thisDotField, otherDotField);\r\n    com.sun.tools.javac.tree.JCTree.JCBinary compareCallEquals0 = maker.Binary(JCTree.NE, maker.Apply(com.sun.tools.javac.util.List.<com.sun.tools.javac.tree.JCTree.JCExpression>nil(), maker.Select(clazz, node.toName(\"compare\")), args), maker.Literal(0));\r\n    return maker.If(compareCallEquals0, this.returnBool(maker, false), null);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "node", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem", "labels": ["Structure"], "properties": {"docComment": "", "simpleName": "ParseProblem", "qualifiedName": "lombok.eclipse.EclipseAST$ParseProblem", "kind": "class", "metaSrc": "source code", "dependencyProfile": "transit", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "qualifiedName": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "kind": "static method", "sourceText": "private static lombok.eclipse.EclipseAST getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration ast) {\r\n    if (lombok.eclipse.TransformEclipseAST.astCacheField == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return ((lombok.eclipse.EclipseAST) (lombok.eclipse.TransformEclipseAST.astCacheField.get(ast)));\r\n    } catch (java.lang.Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).1", "labels": ["Variable"], "properties": {"simpleName": "fields", "qualifiedName": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).1", "labels": ["Variable"], "properties": {"simpleName": "kind", "qualifiedName": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.HOW_I_WORK_TITLE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String HOW_I_WORK_TITLE = \"<html><font size=\\\"+1\\\"><b><i>What this installer does</i></b></font></html>\";", "visibility": "private", "simpleName": "HOW_I_WORK_TITLE", "qualifiedName": "lombok.installer.Installer.HOW_I_WORK_TITLE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "qualifiedName": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic void visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl argument, com.sun.tools.javac.tree.JCTree.JCMethodDecl method, lombok.javac.JavacAST.Node annotationNode, com.sun.tools.javac.tree.JCTree.JCAnnotation annotation) {\r\n    if (annotationNode.isHandled()) {\r\n        return;\r\n    }\r\n    com.sun.tools.javac.tree.JCTree.JCCompilationUnit top = ((com.sun.tools.javac.tree.JCTree.JCCompilationUnit) (annotationNode.top().get()));\r\n    boolean handled = this.handlers.handleAnnotation(top, annotationNode, annotation);\r\n    if (handled) {\r\n        annotationNode.setHandled();\r\n    }\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "labels": ["Variable"], "properties": {"simpleName": "text", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "labels": ["Variable"], "properties": {"simpleName": "fieldNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "qualifiedName": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "kind": "method", "sourceText": "/**\r\n * {@inheritDoc }\r\n */\r\npublic void visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration field, lombok.eclipse.EclipseAST.Node annotationNode, org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {\r\n}", "docComment": "{@inheritDoc }\r\n", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok()", "labels": ["Operation"], "properties": {"visibility": "private", "simpleName": "checkForLombok()", "qualifiedName": "lombok.installer.EclipseLocation.checkForLombok()", "kind": "method", "sourceText": "private boolean checkForLombok() throws java.io.IOException {\r\n    for (java.io.File targetDir : this.getTargetDirs()) {\r\n        if (this.checkForLombok0(targetDir)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement).0", "labels": ["Variable"], "properties": {"simpleName": "child", "qualifiedName": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "labels": ["Variable"], "properties": {"simpleName": "params", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "qualifiedName": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "kind": "method", "sourceText": "void endVisitStatement(lombok.eclipse.EclipseAST.Node statementNode, org.eclipse.jdt.internal.compiler.ast.Statement statement);", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).0", "labels": ["Variable"], "properties": {"simpleName": "otherN", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).1", "labels": ["Variable"], "properties": {"simpleName": "bool", "qualifiedName": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "kind": "static method", "sourceText": "static lombok.eclipse.EclipseAST.Node getExistingLombokConstructor(lombok.eclipse.EclipseAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration))) {\r\n        node = node.up();\r\n    } \r\n    if (node.get() instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {\r\n        for (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration def : ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) (node.get())).methods) {\r\n            if (def instanceof org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) {\r\n                if ((def.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsDefaultConstructor) != 0) {\r\n                    continue;\r\n                }\r\n                lombok.eclipse.EclipseAST.Node existing = node.getNodeFor(def);\r\n                if (existing.isHandled()) {\r\n                    return existing;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "qualifiedName": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "kind": "static method", "sourceText": "/**\r\n * Checks if there is a method with the provided name. In case of multiple methods (overloading), only\r\n * the first method decides if EXISTS_BY_USER or EXISTS_BY_LOMBOK is returned.\r\n *\r\n * @param methodName\r\n * \t\tthe method name to check for.\r\n * @param node\r\n * \t\tAny node that represents the Type (JCClassDecl) to check for, or any child node thereof.\r\n */\r\nstatic lombok.javac.handlers.PKG.MemberExistsResult methodExists(java.lang.String methodName, lombok.javac.JavacAST.Node node) {\r\n    while ((node != null) && (!(node.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl))) {\r\n        node = node.up();\r\n    } \r\n    if ((node != null) && (node.get() instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl)) {\r\n        for (com.sun.tools.javac.tree.JCTree def : ((com.sun.tools.javac.tree.JCTree.JCClassDecl) (node.get())).defs) {\r\n            if (def instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {\r\n                if (((com.sun.tools.javac.tree.JCTree.JCMethodDecl) (def)).name.contentEquals(methodName)) {\r\n                    lombok.javac.JavacAST.Node existing = node.getNodeFor(def);\r\n                    if ((existing == null) || (!existing.isHandled())) {\r\n                        return lombok.javac.handlers.PKG.MemberExistsResult.EXISTS_BY_USER;\r\n                    }\r\n                    return lombok.javac.handlers.PKG.MemberExistsResult.EXISTS_BY_LOMBOK;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return lombok.javac.handlers.PKG.MemberExistsResult.NOT_EXISTS;\r\n}", "docComment": "Checks if there is a method with the provided name. In case of multiple methods (overloading), only\r\nthe first method decides if EXISTS_BY_USER or EXISTS_BY_LOMBOK is returned.\r\n\r\n@param methodName\r\n\t\tthe method name to check for.\r\n@param node\r\n\t\tAny node that represents the Type (JCClassDecl) to check for, or any child node thereof.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.installer.Installer.ECLIPSE_TITLE", "labels": ["Variable"], "properties": {"sourceText": "private static final java.lang.String ECLIPSE_TITLE = \"<html><font size=\\\"+1\\\"><b><i>Eclipse</i></b></font></html>\";", "visibility": "private", "simpleName": "ECLIPSE_TITLE", "qualifiedName": "lombok.installer.Installer.ECLIPSE_TITLE", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).1", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "labels": ["Variable"], "properties": {"simpleName": "collection", "qualifiedName": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "kind": "parameter", "parameterPosition": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "method", "sourceText": "/**\r\n * Called when visiting a field of a class.\r\n */\r\nvoid visitField(lombok.javac.JavacAST.Node fieldNode, com.sun.tools.javac.tree.JCTree.JCVariableDecl field);", "docComment": "Called when visiting a field of a class.\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String).0", "labels": ["Variable"], "properties": {"simpleName": "message", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "labels": ["Variable"], "properties": {"simpleName": "annotationNode", "qualifiedName": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "kind": "method", "sourceText": "@java.lang.Override\r\npublic boolean handle(lombok.core.AnnotationValues<lombok.EqualsAndHashCode> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, lombok.eclipse.EclipseAST.Node annotationNode) {\r\n    lombok.EqualsAndHashCode ann = annotation.getInstance();\r\n    java.util.List<java.lang.String> excludes = java.util.Arrays.asList(ann.exclude());\r\n    lombok.eclipse.EclipseAST.Node typeNode = annotationNode.up();\r\n    this.checkForBogusExcludes(typeNode, annotation);\r\n    return this.generateMethods(typeNode, annotationNode, excludes, ann.callSuper(), true);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "labels": ["Operation"], "properties": {"visibility": "public", "simpleName": "toAllGetterNames(java.lang.CharSequence,boolean)", "qualifiedName": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "kind": "static method", "sourceText": "public static java.util.List<java.lang.String> toAllGetterNames(java.lang.CharSequence fieldName, boolean isBoolean) {\r\n    if (!isBoolean) {\r\n        return java.util.Collections.singletonList(lombok.core.TransformationsUtil.toGetterName(fieldName, false));\r\n    }\r\n    java.util.List<java.lang.String> baseNames = new java.util.ArrayList<java.lang.String>();\r\n    baseNames.add(fieldName.toString());\r\n    for (java.lang.String knownBooleanPrefix : lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES) {\r\n        if (!fieldName.toString().startsWith(knownBooleanPrefix)) {\r\n            continue;\r\n        }\r\n        if ((fieldName.length() > knownBooleanPrefix.length()) && (!java.lang.Character.isLowerCase(fieldName.charAt(knownBooleanPrefix.length())))) {\r\n            // The field is called something like 'isFoo' or 'hasFoo' or 'getFoo', so the practical fieldname\r\n            // could also be 'foo'.\r\n            baseNames.add(fieldName.toString().substring(knownBooleanPrefix.length()));\r\n            // prefix with 'is' but instead just use the field name as is. The isLowerCase check is so we don't turn\r\n            // hashCodeGenerated, which so happens to start with 'has', into hasHCodeGenerated instead of isHashCodeGenerated.\r\n        }\r\n    }\r\n    java.util.Set<java.lang.String> names = new java.util.HashSet<java.lang.String>();\r\n    for (java.lang.String baseName : baseNames) {\r\n        if ((baseName.length() > 0) && java.lang.Character.isLowerCase(baseName.charAt(0))) {\r\n            baseName = java.lang.Character.toTitleCase(baseName.charAt(0)) + baseName.substring(1);\r\n        }\r\n        for (java.lang.String prefix : lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES) {\r\n            names.add(prefix + baseName);\r\n        }\r\n    }\r\n    return new java.util.ArrayList<java.lang.String>(names);\r\n}", "docComment": "", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).1", "labels": ["Variable"], "properties": {"simpleName": "ref2", "qualifiedName": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "labels": ["Variable"], "properties": {"simpleName": "unit", "qualifiedName": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).1", "labels": ["Variable"], "properties": {"simpleName": "orientation", "qualifiedName": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).1", "labels": ["Variable"], "properties": {"simpleName": "out", "qualifiedName": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "short", "labels": ["Primitive"], "properties": {"simpleName": "short", "qualifiedName": "short", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstallBox", "labels": ["Variable"], "properties": {"sourceText": "private javax.swing.Box uninstallBox;", "visibility": "private", "simpleName": "uninstallBox", "qualifiedName": "lombok.installer.Installer.uninstallBox", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.annotationHandlers", "labels": ["Variable"], "properties": {"sourceText": "private java.util.Map<java.lang.String, lombok.eclipse.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object>> annotationHandlers = new java.util.HashMap<java.lang.String, lombok.eclipse.HandlerLibrary.AnnotationHandlerContainer<? extends java.lang.Object>>();", "visibility": "private", "simpleName": "annotationHandlers", "qualifiedName": "lombok.eclipse.HandlerLibrary.annotationHandlers", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).2", "labels": ["Variable"], "properties": {"simpleName": "sourceEnd", "qualifiedName": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).2", "kind": "parameter", "parameterPosition": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "labels": ["Operation"], "properties": {"visibility": "default", "simpleName": "toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "qualifiedName": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "kind": "static method", "sourceText": "/**\r\n *\r\n * @return the likely setter name for the stated field. (e.g. private boolean foo; to setFoo).\r\n */\r\nstatic java.lang.String toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl field) {\r\n    java.lang.CharSequence fieldName = field.name;\r\n    return lombok.core.TransformationsUtil.toSetterName(fieldName);\r\n}", "docComment": "\r\n@return the likely setter name for the stated field. (e.g. private boolean foo; to setFoo).\r\n", "metaSrc": "source code", "description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "labels": ["Variable"], "properties": {"simpleName": "type", "qualifiedName": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "kind": "parameter", "parameterPosition": 0, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.out", "labels": ["Variable"], "properties": {"sourceText": "private final java.io.PrintStream out;", "visibility": "private", "simpleName": "out", "qualifiedName": "lombok.eclipse.EclipseASTVisitor$Printer.out", "kind": "field", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).1", "labels": ["Variable"], "properties": {"simpleName": "oldN", "qualifiedName": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).1", "kind": "parameter", "parameterPosition": 1, "metaSrc": "source code"}}}, {"data": {"id": "layer:Presentation Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Presentation Layer", "qualifiedName": "Presentation Layer", "description": "Manages the user interface, defines UI elements and behavior, displays information, responds to user input, and updates views.", "layerOrder": 0}}}, {"data": {"id": "layer:Service Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Service Layer", "qualifiedName": "Service Layer", "description": "Controls the application flow, orchestrates domain operations, connects UI events with domain logic, and synchronizes domain changes with the UI.", "layerOrder": 1}}}, {"data": {"id": "layer:Domain Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Domain Layer", "qualifiedName": "Domain Layer", "description": "Handles business logic, represents domain data and behavior, and performs necessary computations for domain operations.", "layerOrder": 2}}}, {"data": {"id": "layer:Data Source Layer", "labels": ["Grouping"], "properties": {"kind": "architectural layer", "simpleName": "Data Source Layer", "qualifiedName": "Data Source Layer", "description": "Interacts with databases, filesystems, hardware, messaging systems, or other data sources, performs CRUD operations, handles data conversion, and ensures data integrity.", "layerOrder": 3}}}], "edges": [{"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)-uses-lombok.core.AnnotationValues$AnnotationValue.raws", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "target": "lombok.core.AnnotationValues$AnnotationValue.raws", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.skipPrintAST()-uses-lombok.javac.HandlerLibrary.skipPrintAST", "source": "lombok.javac.HandlerLibrary.skipPrintAST()", "target": "lombok.javac.HandlerLibrary.skipPrintAST", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)-uses-lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "source": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.uninstallPlaceholder", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.uninstallPlaceholder", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)-uses-lombok.core.AST.identityDetector", "source": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "target": "lombok.core.AST.identityDetector", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.installButton", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.installButton", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.skipPrintAST()-uses-lombok.eclipse.HandlerLibrary.skipPrintAST", "source": "lombok.eclipse.HandlerLibrary.skipPrintAST()", "target": "lombok.eclipse.HandlerLibrary.skipPrintAST", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildHowIWorkArea()-uses-lombok.installer.Installer.howIWorkArea", "source": "lombok.installer.Installer.buildHowIWorkArea()", "target": "lombok.installer.Installer.howIWorkArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildHowIWorkArea()-uses-lombok.installer.Installer.HOW_I_WORK_EXPLANATION", "source": "lombok.installer.Installer.buildHowIWorkArea()", "target": "lombok.installer.Installer.HOW_I_WORK_EXPLANATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-uses-lombok.core.AST$FieldAccess.field", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST$FieldAccess.field", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)-uses-lombok.core.AST$Node.parent", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacAST.nameTable", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.nameTable", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.INITIALIZER", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.INITIALIZER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getFileName()-uses-lombok.core.AST.fileName", "source": "lombok.core.AST$Node.getFileName()", "target": "lombok.core.AST.fileName", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.showWhatIDo()-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.showWhatIDo()", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()-uses-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.EclipseFinder.findEclipses()", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.parent", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.toString()-uses-lombok.core.AST$Node.node", "source": "lombok.core.AST$Node.toString()", "target": "lombok.core.AST$Node.node", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.eclipse.EclipseAST.compilationUnitDeclaration", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.compilationUnitDeclaration", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.<clinit>()-uses-lombok.eclipse.TransformEclipseAST.disableLombok", "source": "lombok.eclipse.TransformEclipseAST.<clinit>()", "target": "lombok.eclipse.TransformEclipseAST.disableLombok", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)-uses-lombok.core.AnnotationValues$AnnotationValue.node", "source": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.node", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)-uses-lombok.javac.JavacASTVisitor$Printer.out", "source": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.javac.JavacASTVisitor$Printer.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.propagateProblems()-uses-lombok.eclipse.EclipseAST.queuedProblems", "source": "lombok.eclipse.EclipseAST.propagateProblems()", "target": "lombok.eclipse.EclipseAST.queuedProblems", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getOS()-uses-lombok.installer.EclipseFinder$OS.WINDOWS", "source": "lombok.installer.EclipseFinder.getOS()", "target": "lombok.installer.EclipseFinder$OS.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-uses-lombok.installer.Installer.uninstallBox", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.Installer.uninstallBox", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)-uses-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.HandlerLibrary.annotationHandlers", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.annotationHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getSymbolTable()-uses-lombok.javac.JavacAST.symtab", "source": "lombok.javac.JavacAST$Node.getSymbolTable()", "target": "lombok.javac.JavacAST.symtab", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-uses-lombok.eclipse.EclipseAST$ParseProblem.message", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem.message", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hashCode()-uses-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation.hashCode()", "target": "lombok.installer.EclipseLocation.path", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-uses-lombok.core.AST$Kind.TYPE", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.core.AST$Kind.TYPE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)-uses-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.eclipse.TransformEclipseAST.astCacheField", "source": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.astCacheField", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)-uses-lombok.core.AST$FieldAccess.field", "source": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "target": "lombok.core.AST$FieldAccess.field", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-uses-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.apt.Processor.handlers", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.doUninstall()-uses-lombok.installer.Installer.toUninstall", "source": "lombok.installer.Installer.doUninstall()", "target": "lombok.installer.Installer.toUninstall", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.TYPE", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.TYPE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-uses-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])-uses-lombok.core.AST$Kind.ARGUMENT", "source": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "target": "lombok.core.AST$Kind.ARGUMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Setter.value()-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.Setter.value()", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.uninstall()-uses-lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "source": "lombok.installer.EclipseLocation.uninstall()", "target": "lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.MODULE", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.MODULE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-uses-lombok.installer.Installer.eclipseArea", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.Installer.eclipseArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.main(java.lang.String[])-uses-lombok.core.Version.VERSION", "source": "lombok.core.Version.main(java.lang.String[])", "target": "lombok.core.Version.VERSION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)-uses-lombok.eclipse.EclipseAST.queuedProblems", "source": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "target": "lombok.eclipse.EclipseAST.queuedProblems", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-uses-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseLocation.path", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.INITIALIZER", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.INITIALIZER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.toName(java.lang.String)-uses-lombok.javac.JavacAST.nameTable", "source": "lombok.javac.JavacAST.toName(java.lang.String)", "target": "lombok.javac.JavacAST.nameTable", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.MODULE", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.MODULE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.INITIALIZER", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.INITIALIZER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-uses-lombok.core.AST$Kind.TYPE", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.AST$Kind.TYPE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)-uses-lombok.javac.apt.Processor.trees", "source": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "target": "lombok.javac.apt.Processor.trees", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)-uses-lombok.eclipse.HandlerLibrary.visitorHandlers", "source": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.HandlerLibrary.visitorHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-uses-lombok.installer.Installer.uninstallArea", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.uninstallArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-uses-lombok.javac.HandlerLibrary.annotationHandlers", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.annotationHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()-uses-lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "source": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "target": "lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Getter.value()-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.Getter.value()", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.clearState()-uses-lombok.core.AST.nodeMap", "source": "lombok.core.AST.clearState()", "target": "lombok.core.AST.nodeMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getTreeMaker()-uses-lombok.javac.JavacAST.treeMaker", "source": "lombok.javac.JavacAST$Node.getTreeMaker()", "target": "lombok.javac.JavacAST.treeMaker", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-uses-lombok.installer.Installer.UNINSTALL_TITLE", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.UNINSTALL_TITLE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)-uses-lombok.eclipse.TransformEclipseAST.ast", "source": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.TransformEclipseAST.ast", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-uses-lombok.installer.Installer.javacArea", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.Installer.javacArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.recursiveSetHandled()-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node.recursiveSetHandled()", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)-uses-lombok.javac.HandlerLibrary.messager", "source": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "target": "lombok.javac.HandlerLibrary.messager", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.Installer.eclipseArea", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer.eclipseArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacASTVisitor$Printer.out", "source": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-uses-lombok.javac.apt.Processor.processingEnv", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.apt.Processor.processingEnv", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.reparse()-uses-lombok.eclipse.EclipseAST.compilationUnitDeclaration", "source": "lombok.eclipse.EclipseAST.reparse()", "target": "lombok.eclipse.EclipseAST.compilationUnitDeclaration", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.ARGUMENT", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.ARGUMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)-uses-lombok.eclipse.EclipseASTVisitor$Printer.out", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.out", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)-uses-lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PROTECTED", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PROTECTED", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()-uses-lombok.core.AnnotationValues.cachedInstance", "source": "lombok.core.AnnotationValues.getInstance()", "target": "lombok.core.AnnotationValues.cachedInstance", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-uses-lombok.installer.EclipseFinder$OS.UNIX", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseFinder$OS.UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-uses-lombok.core.AST$FieldAccess.dim", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST$FieldAccess.dim", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)-uses-lombok.javac.HandlerLibrary.visitorHandlers", "source": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.visitorHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.putInMap(lombok.core.AST$Node)-uses-lombok.core.AST.identityDetector", "source": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "target": "lombok.core.AST.identityDetector", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-uses-lombok.javac.HandlerLibrary.typeLibrary", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.typeLibrary", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.COMPILATION_UNIT", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.COMPILATION_UNIT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.up()-uses-lombok.core.AST$Node.isStructurallySignificant", "source": "lombok.core.AST$Node.up()", "target": "lombok.core.AST$Node.isStructurallySignificant", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-uses-lombok.eclipse.HandlerLibrary.typeLibrary", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.HandlerLibrary.typeLibrary", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)-uses-lombok.core.AnnotationValues.values", "source": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "target": "lombok.core.AnnotationValues.values", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-uses-lombok.core.AST$Kind.INITIALIZER", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.core.AST$Kind.INITIALIZER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)-uses-lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "source": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isHandled()-uses-lombok.core.AST$Node.handled", "source": "lombok.core.AST$Node.isHandled()", "target": "lombok.core.AST$Node.handled", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.top()-uses-lombok.core.AST.top", "source": "lombok.core.AST$Node.top()", "target": "lombok.core.AST.top", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getOS()-uses-lombok.installer.EclipseFinder$OS.UNIX", "source": "lombok.installer.EclipseFinder.getOS()", "target": "lombok.installer.EclipseFinder$OS.UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)-uses-lombok.core.AST.nodeMap", "source": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "target": "lombok.core.AST.nodeMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)-uses-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-uses-lombok.installer.Installer.toUninstall", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.Installer.toUninstall", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-uses-lombok.core.AST$FieldAccess.field", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST$FieldAccess.field", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-uses-lombok.core.AST$Kind.TYPE", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.core.AST$Kind.TYPE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.getVersion()-uses-lombok.core.Version.VERSION", "source": "lombok.core.Version.getVersion()", "target": "lombok.core.Version.VERSION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getKind()-uses-lombok.core.AST$Node.kind", "source": "lombok.core.AST$Node.getKind()", "target": "lombok.core.AST$Node.kind", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hasLombok()-uses-lombok.installer.EclipseLocation.hasLombok", "source": "lombok.installer.EclipseLocation.hasLombok()", "target": "lombok.installer.EclipseLocation.hasLombok", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-uses-lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.ECLIPSE_EXPLANATION", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.ECLIPSE_EXPLANATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)-uses-lombok.eclipse.TransformEclipseAST.astCacheField", "source": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.TransformEclipseAST.astCacheField", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()-uses-lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID", "source": "lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()", "target": "lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()-uses-lombok.eclipse.TransformEclipseAST.ast", "source": "lombok.eclipse.TransformEclipseAST.go()", "target": "lombok.eclipse.TransformEclipseAST.ast", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getOS()-uses-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.EclipseFinder.getOS()", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.setHandled()-uses-lombok.core.AST$Node.handled", "source": "lombok.core.AST$Node.setHandled()", "target": "lombok.core.AST$Node.handled", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-uses-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)-uses-lombok.eclipse.HandlerLibrary.visitorHandlers", "source": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.HandlerLibrary.visitorHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()-uses-lombok.eclipse.EclipseAST$ParseProblem.message", "source": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "target": "lombok.eclipse.EclipseAST$ParseProblem.message", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getName()-uses-lombok.core.AST$Node.node", "source": "lombok.javac.JavacAST$Node.getName()", "target": "lombok.core.AST$Node.node", "label": "uses", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.ARGUMENT", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.ARGUMENT", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.Installer.ABOUT_LOMBOK_URL", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer.ABOUT_LOMBOK_URL", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-uses-lombok.installer.EclipseLocation.OS_NEWLINE", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseLocation.OS_NEWLINE", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)-uses-lombok.core.AnnotationValues$AnnotationValue.raws", "source": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "target": "lombok.core.AnnotationValues$AnnotationValue.raws", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.COMPILATION_UNIT", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.COMPILATION_UNIT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)-uses-lombok.core.AnnotationValues.values", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AnnotationValues.values", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.showWhatIDo()-uses-lombok.installer.Installer.javacArea", "source": "lombok.installer.Installer.showWhatIDo()", "target": "lombok.installer.Installer.javacArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.HandlerLibrary.skipPrintAST", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.skipPrintAST", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)-uses-lombok.installer.EclipseLocation.selected", "source": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "target": "lombok.installer.EclipseLocation.selected", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-uses-lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-uses-lombok.javac.JavacAST.log", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.log", "label": "uses", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.uninstall()-uses-lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "source": "lombok.installer.EclipseLocation.uninstall()", "target": "lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.reparse()-uses-lombok.eclipse.EclipseAST.completeParse", "source": "lombok.eclipse.EclipseAST.reparse()", "target": "lombok.eclipse.EclipseAST.completeParse", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.doUninstall()-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.doUninstall()", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.ECLIPSE_TITLE", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.ECLIPSE_TITLE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.node", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.node", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.HandlerLibrary.typeLibrary", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.typeLibrary", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.uninstall()-uses-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation.uninstall()", "target": "lombok.installer.EclipseLocation.path", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.loadingExpl", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.loadingExpl", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)-uses-lombok.installer.Installer$EclipsesList.locations", "source": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "target": "lombok.installer.Installer$EclipsesList.locations", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.eclipsesList", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.eclipsesList", "label": "uses", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)-uses-lombok.core.TypeResolver.library", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.library", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.recursiveSetHandled()-uses-lombok.core.AST$Node.handled", "source": "lombok.core.AST$Node.recursiveSetHandled()", "target": "lombok.core.AST$Node.handled", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.skipAllButPrintAST()-uses-lombok.javac.HandlerLibrary.skipPrintAST", "source": "lombok.javac.HandlerLibrary.skipAllButPrintAST()", "target": "lombok.javac.HandlerLibrary.skipPrintAST", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.top()-uses-lombok.core.AST.top", "source": "lombok.core.AST.top()", "target": "lombok.core.AST.top", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.<clinit>()-uses-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST.<clinit>()", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-uses-lombok.installer.Installer.javacArea", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.javacArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.Installer.javacArea", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer.javacArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)-uses-lombok.core.AnnotationValues.ast", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AnnotationValues.ast", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)-uses-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.EclipseFinder$OS.WINDOWS", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.EclipseFinder$OS.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.isStructurallySignificant", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.isStructurallySignificant", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)-uses-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation(java.lang.String)", "target": "lombok.installer.EclipseLocation.path", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildHowIWorkArea()-uses-lombok.installer.Installer.eclipseArea", "source": "lombok.installer.Installer.buildHowIWorkArea()", "target": "lombok.installer.Installer.eclipseArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()-uses-lombok.core.AST$Node.node", "source": "lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()", "target": "lombok.core.AST$Node.node", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)-uses-lombok.core.TypeResolver.imports", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.imports", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()-uses-lombok.installer.EclipseFinder$OS.WINDOWS", "source": "lombok.installer.EclipseFinder.findEclipses()", "target": "lombok.installer.EclipseFinder$OS.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)-uses-lombok.core.AnnotationValues.values", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.values", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.uninstall()-uses-lombok.installer.EclipseLocation.OS_NEWLINE", "source": "lombok.installer.EclipseLocation.uninstall()", "target": "lombok.installer.EclipseLocation.OS_NEWLINE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)-uses-lombok.core.TypeResolver.library", "source": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "target": "lombok.core.TypeResolver.library", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildJavacArea()-uses-lombok.installer.Installer.JAVAC_EXAMPLE", "source": "lombok.installer.Installer.buildJavacArea()", "target": "lombok.installer.Installer.JAVAC_EXAMPLE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)-uses-lombok.core.AnnotationValues$AnnotationValue.node", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "target": "lombok.core.AnnotationValues$AnnotationValue.node", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()-uses-lombok.installer.Installer$EclipsesList.locations", "source": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "target": "lombok.installer.Installer$EclipsesList.locations", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.show()-uses-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.Installer.show()", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.isCompleteParse()-uses-lombok.eclipse.EclipseAST.completeParse", "source": "lombok.eclipse.EclipseAST$Node.isCompleteParse()", "target": "lombok.eclipse.EclipseAST.completeParse", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.HandlerLibrary.skipPrintAST", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.skipPrintAST", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-uses-lombok.installer.Installer.UNINSTALL_EXPLANATION", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.UNINSTALL_EXPLANATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.INITIALIZER", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.INITIALIZER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.findCompatible(java.lang.String)-uses-lombok.core.TypeLibrary.simpleToQualifiedMap", "source": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "target": "lombok.core.TypeLibrary.simpleToQualifiedMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)-uses-lombok.core.TypeResolver.imports", "source": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "target": "lombok.core.TypeResolver.imports", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PRIVATE", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PRIVATE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()-uses-lombok.installer.EclipseLocation.selected", "source": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "target": "lombok.installer.EclipseLocation.selected", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)-uses-lombok.javac.HandlerLibrary.messager", "source": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "target": "lombok.javac.HandlerLibrary.messager", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacAST.log", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.log", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PACKAGE", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PACKAGE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.toString()-uses-lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "source": "lombok.core.AnnotationValues$AnnotationValue.toString()", "target": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.directUp()-uses-lombok.core.AST$Node.parent", "source": "lombok.core.AST$Node.directUp()", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildJavacArea()-uses-lombok.installer.Installer.JAVAC_TITLE", "source": "lombok.installer.Installer.buildJavacArea()", "target": "lombok.installer.Installer.JAVAC_TITLE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacAST.treeMaker", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.treeMaker", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PRIVATE", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PRIVATE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PACKAGE", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PACKAGE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getName()-uses-lombok.core.AST$Node.node", "source": "lombok.eclipse.EclipseAST$Node.getName()", "target": "lombok.core.AST$Node.node", "label": "uses", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)-uses-lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.get(java.lang.Object)-uses-lombok.core.AST.nodeMap", "source": "lombok.core.AST.get(java.lang.Object)", "target": "lombok.core.AST.nodeMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.HandlerLibrary.typeLibrary", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.typeLibrary", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.TYPE", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.TYPE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)-uses-lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "source": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "target": "lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.core.AST$Kind.COMPILATION_UNIT", "source": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.core.AST$Kind.COMPILATION_UNIT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.putInMap(lombok.core.AST$Node)-uses-lombok.core.AST.nodeMap", "source": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "target": "lombok.core.AST.nodeMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Node.parent", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-uses-lombok.installer.Installer.uninstallBox", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.uninstallBox", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)-uses-lombok.javac.apt.Processor.processingEnv", "source": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "target": "lombok.javac.apt.Processor.processingEnv", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)-uses-lombok.javac.HandlerLibrary.visitorHandlers", "source": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "target": "lombok.javac.HandlerLibrary.visitorHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.EclipseFinder$OS.UNIX", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.EclipseFinder$OS.UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.ARGUMENT", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.ARGUMENT", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.COMPILATION_UNIT", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.COMPILATION_UNIT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)-uses-lombok.core.AnnotationValues.values", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.values", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.clearState()-uses-lombok.core.AST.identityDetector", "source": "lombok.core.AST.clearState()", "target": "lombok.core.AST.identityDetector", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)-uses-lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "target": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)-uses-lombok.javac.apt.Processor.trees", "source": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "target": "lombok.javac.apt.Processor.trees", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getEclipseExecutableName()-uses-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.parent", "source": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)-uses-lombok.core.AnnotationValues.values", "source": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "target": "lombok.core.AnnotationValues.values", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFileName()-uses-lombok.core.AST.fileName", "source": "lombok.core.AST.getFileName()", "target": "lombok.core.AST.fileName", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.toString()-uses-lombok.core.AnnotationValues$AnnotationValue.raws", "source": "lombok.core.AnnotationValues$AnnotationValue.toString()", "target": "lombok.core.AnnotationValues$AnnotationValue.raws", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.TYPE", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.TYPE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.toString()-uses-lombok.core.AST$Node.handled", "source": "lombok.core.AST$Node.toString()", "target": "lombok.core.AST$Node.handled", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.rebuild()-uses-lombok.core.AST$Node.kind", "source": "lombok.core.AST$Node.rebuild()", "target": "lombok.core.AST$Node.kind", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()-uses-lombok.installer.EclipseFinder$OS.UNIX", "source": "lombok.installer.EclipseFinder.findEclipses()", "target": "lombok.installer.EclipseFinder$OS.UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-uses-lombok.core.TypeResolver.library", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.TypeResolver.library", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[])-uses-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.Installer.main(java.lang.String[])", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()-uses-lombok.core.AnnotationValues.values", "source": "lombok.core.AnnotationValues.getInstance()", "target": "lombok.core.AnnotationValues.values", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.equals(java.lang.Object)-uses-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation.equals(java.lang.Object)", "target": "lombok.installer.EclipseLocation.path", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)-uses-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "source": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)-uses-lombok.core.AST.identityDetector", "source": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "target": "lombok.core.AST.identityDetector", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()-uses-lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "source": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "target": "lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getTreeMaker()-uses-lombok.javac.JavacAST.treeMaker", "source": "lombok.javac.JavacAST.getTreeMaker()", "target": "lombok.javac.JavacAST.treeMaker", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.eclipse.EclipseAST.completeParse", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.completeParse", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)-uses-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "target": "lombok.javac.apt.Processor.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.HandlerLibrary.annotationHandlers", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.annotationHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-uses-lombok.installer.Installer.javacArea", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.javacArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)-uses-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()-uses-lombok.core.AnnotationValues.type", "source": "lombok.core.AnnotationValues.getInstance()", "target": "lombok.core.AnnotationValues.type", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)-uses-lombok.core.AST$FieldAccess.dim", "source": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "target": "lombok.core.AST$FieldAccess.dim", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()-uses-lombok.eclipse.EclipseAST$ParseProblem.isWarning", "source": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "target": "lombok.eclipse.EclipseAST$ParseProblem.isWarning", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()-uses-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST.go()", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setTop(lombok.core.AST$Node)-uses-lombok.core.AST.top", "source": "lombok.core.AST.setTop(lombok.core.AST$Node)", "target": "lombok.core.AST.top", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-uses-lombok.javac.JavacAST.messager", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.messager", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-uses-lombok.javac.JavacASTVisitor$Printer.out", "source": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.out", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST(java.lang.String)-uses-lombok.core.AST.fileName", "source": "lombok.core.AST(java.lang.String)", "target": "lombok.core.AST.fileName", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.eclipse.TransformEclipseAST.disableLombok", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.disableLombok", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.core.AST$Kind.ARGUMENT", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST$Kind.ARGUMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)-uses-lombok.core.TypeResolver.imports", "source": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.imports", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)-uses-lombok.installer.EclipseLocation.hasLombok", "source": "lombok.installer.EclipseLocation(java.lang.String)", "target": "lombok.installer.EclipseLocation.hasLombok", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-uses-lombok.installer.Installer.eclipseArea", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.eclipseArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-uses-lombok.installer.Installer.uninstallArea", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.Installer.uninstallArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-uses-lombok.core.AST$Kind.INITIALIZER", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.core.AST$Kind.INITIALIZER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PRIVATE", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PRIVATE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)-uses-lombok.core.AnnotationValues$AnnotationValue.raws", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "target": "lombok.core.AnnotationValues$AnnotationValue.raws", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.get()-uses-lombok.core.AST$Node.node", "source": "lombok.core.AST$Node.get()", "target": "lombok.core.AST$Node.node", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.down()-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node.down()", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.showWhatIDo()-uses-lombok.installer.Installer.eclipseArea", "source": "lombok.installer.Installer.showWhatIDo()", "target": "lombok.installer.Installer.eclipseArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)-uses-lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)-uses-lombok.installer.Installer.uninstallButton", "source": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "target": "lombok.installer.Installer.uninstallButton", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addType(java.lang.String)-uses-lombok.core.TypeLibrary.simpleToQualifiedMap", "source": "lombok.core.TypeLibrary.addType(java.lang.String)", "target": "lombok.core.TypeLibrary.simpleToQualifiedMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacAST.messager", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.messager", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.toString()-uses-lombok.core.AST$Node.kind", "source": "lombok.core.AST$Node.toString()", "target": "lombok.core.AST$Node.kind", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-uses-lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getNodeMap()-uses-lombok.core.AST.nodeMap", "source": "lombok.core.AST.getNodeMap()", "target": "lombok.core.AST.nodeMap", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.skipAllButPrintAST()-uses-lombok.eclipse.HandlerLibrary.skipPrintAST", "source": "lombok.eclipse.HandlerLibrary.skipAllButPrintAST()", "target": "lombok.eclipse.HandlerLibrary.skipPrintAST", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.parent", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.parent", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.getTargetDirs()-uses-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation.getTargetDirs()", "target": "lombok.installer.EclipseLocation.path", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.out", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.out", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()-uses-lombok.core.AST$Node.node", "source": "lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()", "target": "lombok.core.AST$Node.node", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)-uses-lombok.core.AnnotationValues.type", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AnnotationValues.type", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.uninstallButton", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.uninstallButton", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.isCompleteParse()-uses-lombok.eclipse.EclipseAST.completeParse", "source": "lombok.eclipse.EclipseAST.isCompleteParse()", "target": "lombok.eclipse.EclipseAST.completeParse", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.install(java.util.List)-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.install(java.util.List)", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-uses-lombok.installer.Installer.eclipseArea", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.eclipseArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)-uses-lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "source": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "target": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isStructurallySignificant()-uses-lombok.core.AST$Node.isStructurallySignificant", "source": "lombok.core.AST$Node.isStructurallySignificant()", "target": "lombok.core.AST$Node.isStructurallySignificant", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()-uses-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getSymbolTable()-uses-lombok.javac.JavacAST.symtab", "source": "lombok.javac.JavacAST.getSymbolTable()", "target": "lombok.javac.JavacAST.symtab", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.show()-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.show()", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fieldsOf(java.lang.Class)-uses-lombok.core.AST.fieldsOfASTClasses", "source": "lombok.core.AST.fieldsOf(java.lang.Class)", "target": "lombok.core.AST.fieldsOfASTClasses", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)-uses-lombok.core.AnnotationValues$AnnotationValue.node", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "target": "lombok.core.AnnotationValues$AnnotationValue.node", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String)-uses-lombok.core.AnnotationValues.ast", "source": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "target": "lombok.core.AnnotationValues.ast", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.Installer.uninstallArea", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer.uninstallArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)-uses-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.<clinit>()-uses-lombok.installer.EclipseLocation.OS_NEWLINE", "source": "lombok.installer.EclipseLocation.<clinit>()", "target": "lombok.installer.EclipseLocation.OS_NEWLINE", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getEclipseExecutableName()-uses-lombok.installer.EclipseFinder$OS.WINDOWS", "source": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "target": "lombok.installer.EclipseFinder$OS.WINDOWS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-uses-lombok.javac.apt.Processor.trees", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.apt.Processor.trees", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()-uses-lombok.installer.EclipseFinder.windowsDriveInfoLibLoaded", "source": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "target": "lombok.installer.EclipseFinder.windowsDriveInfoLibLoaded", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 7, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)-uses-lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "target": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.printHeadlessInfo()-uses-lombok.installer.Installer.ABOUT_LOMBOK_URL", "source": "lombok.installer.Installer.printHeadlessInfo()", "target": "lombok.installer.Installer.ABOUT_LOMBOK_URL", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)-uses-lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "target": "lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-uses-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()-uses-lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "source": "lombok.core.AnnotationValues.getInstance()", "target": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "label": "uses", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildHowIWorkArea()-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.buildHowIWorkArea()", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)-uses-lombok.core.TypeLibrary.simpleToQualifiedMap", "source": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "target": "lombok.core.TypeLibrary.simpleToQualifiedMap", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.LOCAL", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.LOCAL", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-uses-lombok.installer.Installer.howIWorkArea", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer.howIWorkArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildHowIWorkArea()-uses-lombok.installer.Installer.HOW_I_WORK_TITLE", "source": "lombok.installer.Installer.buildHowIWorkArea()", "target": "lombok.installer.Installer.HOW_I_WORK_TITLE", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-uses-lombok.javac.JavacAST.symtab", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.symtab", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-uses-lombok.core.AST$Kind.COMPILATION_UNIT", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Kind.COMPILATION_UNIT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-uses-lombok.core.AST$Kind.TYPE", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Kind.TYPE", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-uses-lombok.core.AST$FieldAccess.dim", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST$FieldAccess.dim", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-uses-lombok.core.AST$Kind.METHOD", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Kind.METHOD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-uses-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-uses-lombok.installer.Installer.howIWorkArea", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.howIWorkArea", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-uses-lombok.core.AST$Kind.ARGUMENT", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.core.AST$Kind.ARGUMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.<clinit>()-uses-lombok.eclipse.TransformEclipseAST.astCacheField", "source": "lombok.eclipse.TransformEclipseAST.<clinit>()", "target": "lombok.eclipse.TransformEclipseAST.astCacheField", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)-uses-lombok.installer.Installer.uninstallPlaceholder", "source": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "target": "lombok.installer.Installer.uninstallPlaceholder", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)-uses-lombok.core.AST$Kind.STATEMENT", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST$Kind.STATEMENT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-uses-lombok.core.AST$Kind.COMPILATION_UNIT", "source": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.core.AST$Kind.COMPILATION_UNIT", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-uses-lombok.eclipse.EclipseASTVisitor$Printer.out", "source": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.out", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-uses-lombok.eclipse.HandlerLibrary.annotationHandlers", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.HandlerLibrary.annotationHandlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)-uses-lombok.AccessLevel.PROTECTED", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "target": "lombok.AccessLevel.PROTECTED", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)-uses-lombok.installer.Installer.installButton", "source": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "target": "lombok.installer.Installer.installButton", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.handleException(java.lang.Throwable)-uses-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer.handleException(java.lang.Throwable)", "target": "lombok.installer.Installer.appWindow", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-uses-lombok.core.AST$Kind.FIELD", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Kind.FIELD", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-uses-lombok.AccessLevel.PUBLIC", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.AccessLevel.PUBLIC", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)-uses-lombok.javac.HandlerLibrary.messager", "source": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary.messager", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.getPath()-uses-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation.getPath()", "target": "lombok.installer.EclipseLocation.path", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getEclipseExecutableName()-uses-lombok.installer.EclipseFinder$OS.UNIX", "source": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "target": "lombok.installer.EclipseFinder$OS.UNIX", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-uses-lombok.eclipse.EclipseAST$ParseProblem.isWarning", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem.isWarning", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-uses-lombok.core.AST$Node.kind", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.kind", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.showWhatIDo()-uses-lombok.installer.Installer.howIWorkArea", "source": "lombok.installer.Installer.showWhatIDo()", "target": "lombok.installer.Installer.howIWorkArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.up()-uses-lombok.core.AST$Node.parent", "source": "lombok.core.AST$Node.up()", "target": "lombok.core.AST$Node.parent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-uses-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-uses-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildHowIWorkArea()-uses-lombok.installer.Installer.javacArea", "source": "lombok.installer.Installer.buildHowIWorkArea()", "target": "lombok.installer.Installer.javacArea", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-uses-lombok.installer.Installer.uninstallArea", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.uninstallArea", "label": "uses", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-uses-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-uses-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-uses-lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildJavacArea()-uses-lombok.installer.Installer.JAVAC_EXPLANATION", "source": "lombok.installer.Installer.buildJavacArea()", "target": "lombok.installer.Installer.JAVAC_EXPLANATION", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)-uses-lombok.core.AST$Node.children", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AST$Node.children", "label": "uses", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)-uses-lombok.core.AnnotationValues$AnnotationValue.node", "source": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.node", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-uses-lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-uses-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "uses", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG()", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok-hasScript-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.Lombok", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.isHandled()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.isHandled()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.getTargetDirs()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.getTargetDirs()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter-hasScript-lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.handlers.HandleSetter", "target": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST-hasScript-lombok.javac.handlers.HandlePrintAST()", "source": "lombok.javac.handlers.HandlePrintAST", "target": "lombok.javac.handlers.HandlePrintAST()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter-hasScript-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "source": "lombok.eclipse.handlers.HandleGetter", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.uninstall()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.uninstall()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter-hasScript-lombok.javac.handlers.HandleGetter()", "source": "lombok.javac.handlers.HandleGetter", "target": "lombok.javac.handlers.HandleGetter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter-hasScript-lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleGetter", "target": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup-hasScript-lombok.eclipse.handlers.HandleCleanup()", "source": "lombok.eclipse.handlers.HandleCleanup", "target": "lombok.eclipse.handlers.HandleCleanup()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.PrintAST-hasScript-lombok.core.PrintAST.outfile()", "source": "lombok.core.PrintAST", "target": "lombok.core.PrintAST.outfile()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil-hasScript-lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "source": "lombok.core.SpiLoadUtil", "target": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.getSymbolTable()", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.getSymbolTable()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.AppleNativeLook-hasScript-lombok.installer.AppleNativeLook.go()", "source": "lombok.installer.AppleNativeLook", "target": "lombok.installer.AppleNativeLook.go()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.hasLombok()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.hasLombok()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.clearState()", "source": "lombok.core.AST", "target": "lombok.core.AST.clearState()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.skipAllButPrintAST()", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.skipAllButPrintAST()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "source": "lombok.core.AST", "target": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows-hasScript-lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "source": "lombok.eclipse.handlers.HandleSneakyThrows", "target": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData-hasScript-lombok.javac.handlers.HandleData()", "source": "lombok.javac.handlers.HandleData", "target": "lombok.javac.handlers.HandleData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData-hasScript-lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "source": "lombok.javac.handlers.HandleData", "target": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok-hasScript-lombok.Lombok.sneakyThrow0(java.lang.Throwable)", "source": "lombok.Lombok", "target": "lombok.Lombok.sneakyThrow0(java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.getPackageDeclaration()", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.getPackageDeclaration()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version-hasScript-lombok.core.Version.main(java.lang.String[])", "source": "lombok.core.Version", "target": "lombok.core.Version.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.AppleNativeLook-hasScript-lombok.installer.AppleNativeLook()", "source": "lombok.installer.AppleNativeLook", "target": "lombok.installer.AppleNativeLook()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Data-hasScript-lombok.Data.staticConstructor()", "source": "lombok.Data", "target": "lombok.Data.staticConstructor()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasScript-lombok.core.AnnotationValues$AnnotationValue.toString()", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue.toString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "source": "lombok.core.AST", "target": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.show()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.show()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST", "target": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "source": "lombok.core.AST", "target": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil-hasScript-lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "source": "lombok.core.TransformationsUtil", "target": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasScript-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter-hasScript-lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleSetter", "target": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.directUp()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.directUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor-hasScript-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup-hasScript-lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleCleanup", "target": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.printHeadlessInfo()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.printHeadlessInfo()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasScript-lombok.eclipse.TransformEclipseAST.go()", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.go()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter-hasScript-lombok.javac.handlers.HandleSetter()", "source": "lombok.javac.handlers.HandleSetter", "target": "lombok.javac.handlers.HandleSetter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasScript-lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.javacError(java.lang.String)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.javacError(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem-hasScript-lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "source": "lombok.eclipse.EclipseAST$ParseProblem", "target": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.calculateIsStructurallySignificant()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.calculateIsStructurallySignificant()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem-hasScript-lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()", "source": "lombok.eclipse.EclipseAST$LombokProblem", "target": "lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor-hasScript-lombok.eclipse.TransformEclipseAST$AnnotationVisitor()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil-hasScript-lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "source": "lombok.core.SpiLoadUtil", "target": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.findOurJar()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.findOurJar()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.getRawExpression(java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.top()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.top()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor-hasScript-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.findEclipseOnMac()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.findEclipseOnMac()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Setter-hasScript-lombok.Setter.value()", "source": "lombok.Setter", "target": "lombok.Setter.value()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasScript-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail-hasScript-lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo-hasScript-lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "source": "lombok.installer.WindowsDriveInfo", "target": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter-hasScript-lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleSetter", "target": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac-hasScript-lombok.javac.Javac()", "source": "lombok.javac.Javac", "target": "lombok.javac.Javac()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter()", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary-hasScript-lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "source": "lombok.core.TypeLibrary", "target": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.doUninstall()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.doUninstall()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasScript-lombok.core.TypeResolver.toSimpleName(java.lang.String)", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver.toSimpleName(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary.skipAllButPrintAST()", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.skipAllButPrintAST()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasScript-lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString-hasScript-lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleToString", "target": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-hasScript-lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.getPackageDeclaration()", "source": "lombok.core.AST", "target": "lombok.core.AST.getPackageDeclaration()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Synchronized-hasScript-lombok.Synchronized.value()", "source": "lombok.Synchronized", "target": "lombok.Synchronized.value()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString-hasScript-lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "source": "lombok.javac.handlers.HandleToString", "target": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.isCompleteParse()", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.isCompleteParse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.getPackageDeclaration()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.getPackageDeclaration()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasScript-lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary()", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter-hasScript-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "source": "lombok.javac.handlers.HandleGetter", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor-hasScript-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer-hasScript-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil-hasScript-lombok.core.TransformationsUtil()", "source": "lombok.core.TransformationsUtil", "target": "lombok.core.TransformationsUtil()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.fireSelectionChange()", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.fireSelectionChange()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData-hasScript-lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleData", "target": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasScript-lombok.core.AST$Kind()", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.top()", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.top()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG()", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException-hasScript-lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)", "source": "lombok.installer.EclipseLocation$NotAnEclipseException", "target": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.findEclipses()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.findEclipses()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem-hasScript-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "source": "lombok.eclipse.EclipseAST$LombokProblem", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Getter-hasScript-lombok.Getter.value()", "source": "lombok.Getter", "target": "lombok.Getter.value()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasScript-lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter-hasScript-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "source": "lombok.eclipse.handlers.HandleSetter", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor-hasScript-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST", "target": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup-hasScript-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "source": "lombok.eclipse.handlers.HandleCleanup", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.tryClass(java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.tryClass(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter-hasScript-lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "source": "lombok.javac.handlers.HandleSetter", "target": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.isStructurallySignificant()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.isStructurallySignificant()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString-hasScript-lombok.javac.handlers.HandleToString()", "source": "lombok.javac.handlers.HandleToString", "target": "lombok.javac.handlers.HandleToString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter-hasScript-lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleSetter", "target": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil-hasScript-lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "source": "lombok.core.TransformationsUtil", "target": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData-hasScript-lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "source": "lombok.javac.handlers.HandleData", "target": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.top()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.top()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo-hasScript-lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "source": "lombok.installer.WindowsDriveInfo", "target": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter-hasScript-lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleSetter", "target": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Cleanup-hasScript-lombok.Cleanup.value()", "source": "lombok.Cleanup", "target": "lombok.Cleanup.value()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows-hasScript-lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "source": "lombok.eclipse.handlers.HandleSneakyThrows", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary.skipPrintAST()", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.skipPrintAST()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.getTreeMaker()", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.getTreeMaker()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows-hasScript-lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "source": "lombok.javac.handlers.HandleSneakyThrows", "target": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasScript-lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.buildHowIWorkArea()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.buildHowIWorkArea()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.main(java.lang.String[])", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.main(java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil-hasScript-lombok.core.SpiLoadUtil()", "source": "lombok.core.SpiLoadUtil", "target": "lombok.core.SpiLoadUtil()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter-hasScript-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "source": "lombok.javac.handlers.HandleSetter", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup-hasScript-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "source": "lombok.eclipse.handlers.HandleCleanup", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString-hasScript-lombok.ToString.includeFieldNames()", "source": "lombok.ToString", "target": "lombok.ToString.includeFieldNames()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter-hasScript-lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleGetter", "target": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.getName()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.getName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.showWhatIDo()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.showWhatIDo()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString-hasScript-lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleToString", "target": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.handleException(java.lang.Throwable)", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.handleException(java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.isCompleteParse()", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.isCompleteParse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData-hasScript-lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleData", "target": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.uninstall(java.util.List)", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.uninstall(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary.load()", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.load()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.recursiveSetHandled()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.recursiveSetHandled()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter()", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.hashCode()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.hashCode()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse()", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.getSymbolTable()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.getSymbolTable()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized-hasScript-lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleSynchronized", "target": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "source": "lombok.core.AST", "target": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.getStatementTypes()", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.getStatementTypes()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException-hasScript-lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)", "source": "lombok.installer.EclipseLocation$UninstallException", "target": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult-hasScript-lombok.eclipse.handlers.PKG$MemberExistsResult()", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok-hasScript-lombok.Lombok()", "source": "lombok.Lombok", "target": "lombok.Lombok()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasScript-lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString-hasScript-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "source": "lombok.javac.handlers.HandleToString", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.core.AST", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo-hasScript-lombok.installer.WindowsDriveInfo.getLogicalDrives0()", "source": "lombok.installer.WindowsDriveInfo", "target": "lombok.installer.WindowsDriveInfo.getLogicalDrives0()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString-hasScript-lombok.ToString.callSuper()", "source": "lombok.ToString", "target": "lombok.ToString.callSuper()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasScript-lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.toName(java.lang.String)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.toName(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor-hasScript-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup-hasScript-lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "source": "lombok.javac.handlers.HandleCleanup", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler-hasScript-lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAnnotationHandler", "target": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.getImportStatements()", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.getImportStatements()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor-hasScript-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.get(java.lang.Object)", "source": "lombok.core.AST", "target": "lombok.core.AST.get(java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor-hasScript-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.toQualifiedName(char[][])", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.install()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.install()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil-hasScript-lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "source": "lombok.core.SpiLoadUtil", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.getKind()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.getKind()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "source": "lombok.core.AST", "target": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.getNodeMap()", "source": "lombok.core.AST", "target": "lombok.core.AST.getNodeMap()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.up()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.getDrivesOnWindows()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.getPackageDeclaration()", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.getPackageDeclaration()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.top()", "source": "lombok.core.AST", "target": "lombok.core.AST.top()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasScript-lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.getStatementTypes()", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.getStatementTypes()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer-hasScript-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.buildJavacArea()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.buildJavacArea()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.getEclipseExecutableName()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasScript-lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "source": "lombok.core.AST", "target": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.equals(java.lang.Object)", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.equals(java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac-hasScript-lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "source": "lombok.javac.Javac", "target": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList()", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.findEclipseOnWindows()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.findEclipseOnWindows()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.getStatementTypes()", "source": "lombok.core.AST", "target": "lombok.core.AST.getStatementTypes()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS-hasScript-lombok.installer.EclipseFinder$OS()", "source": "lombok.installer.EclipseFinder$OS", "target": "lombok.installer.EclipseFinder$OS()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.down()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.down()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.getScrollableTracksViewportWidth()", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportWidth()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.addError(java.lang.String)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.addError(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo-hasScript-lombok.installer.WindowsDriveInfo()", "source": "lombok.installer.WindowsDriveInfo", "target": "lombok.installer.WindowsDriveInfo()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData-hasScript-lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleData", "target": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.up()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.up()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor-hasScript-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST(java.lang.String)", "source": "lombok.core.AST", "target": "lombok.core.AST(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil-hasScript-lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "source": "lombok.core.TransformationsUtil", "target": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasScript-lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter-hasScript-lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.handlers.HandleGetter", "target": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac-hasScript-lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "source": "lombok.javac.Javac", "target": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows-hasScript-lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleSneakyThrows", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.getName()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.getName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException-hasScript-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.getFileName()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.getFileName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.top()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter-hasScript-lombok.eclipse.handlers.HandleGetter()", "source": "lombok.eclipse.handlers.HandleGetter", "target": "lombok.eclipse.handlers.HandleGetter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString-hasScript-lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "source": "lombok.javac.handlers.HandleToString", "target": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary-hasScript-lombok.core.TypeLibrary.addType(java.lang.String)", "source": "lombok.core.TypeLibrary", "target": "lombok.core.TypeLibrary.addType(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor-hasScript-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.directUp()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.directUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.down()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.directUp()", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.directUp()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-hasScript-lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasScript-lombok.eclipse.TransformEclipseAST.<clinit>()", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.<clinit>()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.getFileName()", "source": "lombok.core.AST", "target": "lombok.core.AST.getFileName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.buildChrome(java.awt.Container)", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.buildChrome(java.awt.Container)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized-hasScript-lombok.eclipse.handlers.HandleSynchronized()", "source": "lombok.eclipse.handlers.HandleSynchronized", "target": "lombok.eclipse.handlers.HandleSynchronized()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor-hasScript-lombok.javac.apt.Processor$AnnotationVisitor()", "source": "lombok.javac.apt.Processor$AnnotationVisitor", "target": "lombok.javac.apt.Processor$AnnotationVisitor()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo-hasScript-lombok.installer.WindowsDriveInfo.getLogicalDrives()", "source": "lombok.installer.WindowsDriveInfo", "target": "lombok.installer.WindowsDriveInfo.getLogicalDrives()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo-hasScript-lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "source": "lombok.installer.WindowsDriveInfo", "target": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.core.AST", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.PrintAST-hasScript-lombok.core.PrintAST.printContent()", "source": "lombok.core.PrintAST", "target": "lombok.core.PrintAST.printContent()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup-hasScript-lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "source": "lombok.javac.handlers.HandleCleanup", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer(boolean)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer(boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter-hasScript-lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "source": "lombok.javac.handlers.HandleGetter", "target": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.getPreferredScrollableViewportSize()", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.getPreferredScrollableViewportSize()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.<clinit>()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.<clinit>()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.EqualsAndHashCode-hasScript-lombok.EqualsAndHashCode.callSuper()", "source": "lombok.EqualsAndHashCode", "target": "lombok.EqualsAndHashCode.callSuper()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows-hasScript-lombok.javac.handlers.HandleSneakyThrows()", "source": "lombok.javac.handlers.HandleSneakyThrows", "target": "lombok.javac.handlers.HandleSneakyThrows()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.setTop(lombok.core.AST$Node)", "source": "lombok.core.AST", "target": "lombok.core.AST.setTop(lombok.core.AST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter-hasScript-lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleGetter", "target": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.getImportStatements()", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.getImportStatements()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.addWarning(java.lang.String)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.addWarning(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData-hasScript-lombok.eclipse.handlers.HandleData()", "source": "lombok.eclipse.handlers.HandleData", "target": "lombok.eclipse.handlers.HandleData()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.getScrollableTracksViewportHeight()", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportHeight()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasScript-lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows-hasScript-lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleSneakyThrows", "target": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.get()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.get()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.toFQ(java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasScript-lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.toString()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.toString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasScript-lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version-hasScript-lombok.core.Version.getVersion()", "source": "lombok.core.Version", "target": "lombok.core.Version.getVersion()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation(java.lang.String)", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary-hasScript-lombok.core.TypeLibrary.findCompatible(java.lang.String)", "source": "lombok.core.TypeLibrary", "target": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasScript-lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary-hasScript-lombok.core.TypeLibrary()", "source": "lombok.core.TypeLibrary", "target": "lombok.core.TypeLibrary()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter-hasScript-lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleGetter", "target": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.EqualsAndHashCode-hasScript-lombok.EqualsAndHashCode.exclude()", "source": "lombok.EqualsAndHashCode", "target": "lombok.EqualsAndHashCode.exclude()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel-hasScript-lombok.AccessLevel()", "source": "lombok.AccessLevel", "target": "lombok.AccessLevel()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasScript-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.getOS()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.buildEclipseArea()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.buildEclipseArea()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasScript-lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.fieldsOf(java.lang.Class)", "source": "lombok.core.AST", "target": "lombok.core.AST.fieldsOf(java.lang.Class)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasScript-lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess-hasScript-lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "source": "lombok.core.AST$FieldAccess", "target": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.getName()", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.getName()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version-hasScript-lombok.core.Version()", "source": "lombok.core.Version", "target": "lombok.core.Version()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasScript-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized-hasScript-lombok.javac.handlers.HandleSynchronized()", "source": "lombok.javac.handlers.HandleSynchronized", "target": "lombok.javac.handlers.HandleSynchronized()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer(boolean)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil-hasScript-lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "source": "lombok.core.SpiLoadUtil", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.getComponentType(java.lang.reflect.Type)", "source": "lombok.core.AST", "target": "lombok.core.AST.getComponentType(java.lang.reflect.Type)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.singleton(java.lang.Object)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.singleton(java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.getProbableFQType(java.lang.String)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.getPath()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.getPath()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor-hasScript-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException-hasScript-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasScript-lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult-hasScript-lombok.javac.handlers.PKG$MemberExistsResult()", "source": "lombok.javac.handlers.PKG$MemberExistsResult", "target": "lombok.javac.handlers.PKG$MemberExistsResult()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter-hasScript-lombok.eclipse.handlers.HandleSetter()", "source": "lombok.eclipse.handlers.HandleSetter", "target": "lombok.eclipse.handlers.HandleSetter()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "source": "lombok.core.AST", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasScript-lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.getImportStatements()", "source": "lombok.core.AST", "target": "lombok.core.AST.getImportStatements()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac-hasScript-lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "source": "lombok.javac.Javac", "target": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer-hasScript-lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.skipPrintAST()", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.skipPrintAST()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.reparse()", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.reparse()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.setHandled()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.setHandled()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasScript-lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.SneakyThrows-hasScript-lombok.SneakyThrows.value()", "source": "lombok.SneakyThrows", "target": "lombok.SneakyThrows.value()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasScript-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.getInstance()", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.getInstance()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString-hasScript-lombok.ToString.exclude()", "source": "lombok.ToString", "target": "lombok.ToString.exclude()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST-hasScript-lombok.eclipse.handlers.HandlePrintAST()", "source": "lombok.eclipse.handlers.HandlePrintAST", "target": "lombok.eclipse.handlers.HandlePrintAST()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.rebuild()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.rebuild()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.getNodeFor(java.lang.Object)", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST-hasScript-lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandlePrintAST", "target": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem-hasScript-lombok.eclipse.EclipseAST$LombokProblem.getCategoryID()", "source": "lombok.eclipse.EclipseAST$LombokProblem", "target": "lombok.eclipse.EclipseAST$LombokProblem.getCategoryID()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-hasScript-lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasScript-lombok.core.AST$Node.getImportStatements()", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.getImportStatements()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.propagateProblems()", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.propagateProblems()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.install(java.util.List)", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.install(java.util.List)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows-hasScript-lombok.eclipse.handlers.HandleSneakyThrows()", "source": "lombok.eclipse.handlers.HandleSneakyThrows", "target": "lombok.eclipse.handlers.HandleSneakyThrows()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-hasScript-lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler-hasScript-lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAnnotationHandler", "target": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-hasScript-lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-hasScript-lombok.javac.apt.Processor()", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-hasScript-lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasScript-lombok.installer.Installer.buildUninstallArea()", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.buildUninstallArea()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST-hasScript-lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandlePrintAST", "target": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasScript-lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-hasScript-lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-hasScript-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData-hasScript-lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleData", "target": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException-hasScript-lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)", "source": "lombok.installer.EclipseLocation$InstallException", "target": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows-hasScript-lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "source": "lombok.javac.handlers.HandleSneakyThrows", "target": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup-hasScript-lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleCleanup", "target": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasScript-lombok.eclipse.handlers.HandleToString()", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized-hasScript-lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleSynchronized", "target": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil-hasScript-lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "source": "lombok.core.TransformationsUtil", "target": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-hasScript-lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer-hasScript-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasScript-lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST", "target": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasScript-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasScript-lombok.installer.EclipseLocation.checkForLombok()", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.checkForLombok()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasScript-lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasScript-lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-hasScript-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.JavacAST$Node", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup-hasScript-lombok.javac.handlers.HandleCleanup()", "source": "lombok.javac.handlers.HandleCleanup", "target": "lombok.javac.handlers.HandleCleanup()", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink-hasScript-lombok.installer.Installer$JHyperLink(java.lang.String)", "source": "lombok.installer.Installer$JHyperLink", "target": "lombok.installer.Installer$JHyperLink(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasScript-lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem-hasScript-lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "source": "lombok.eclipse.EclipseAST$ParseProblem", "target": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-hasScript-lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException-hasScript-lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)", "source": "lombok.installer.EclipseLocation$NotAnEclipseException", "target": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasScript-lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-hasScript-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "hasScript", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.install(java.util.List)-invokes-lombok.installer.EclipseLocation.install()", "source": "lombok.installer.Installer.install(java.util.List)", "target": "lombok.installer.EclipseLocation.install()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)-invokes-lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "source": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)", "target": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.EclipseFinder.findEclipses()", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.EclipseFinder.findEclipses()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)-invokes-lombok.core.AST.fieldsOf(java.lang.Class)", "source": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST.fieldsOf(java.lang.Class)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-invokes-lombok.installer.Installer.handleException(java.lang.Throwable)", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.handleException(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.rebuild()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.rebuild()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()-invokes-lombok.eclipse.HandlerLibrary.skipPrintAST()", "source": "lombok.eclipse.TransformEclipseAST.go()", "target": "lombok.eclipse.HandlerLibrary.skipPrintAST()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.PrintAST.printContent()", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.PrintAST.printContent()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.Eclipse.toQualifiedName(char[][])", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-invokes-lombok.installer.EclipseLocation.getTargetDirs()", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseLocation.getTargetDirs()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.getPackageDeclaration()", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.getPackageDeclaration()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.javac.JavacAST$Node.getName()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.JavacAST$Node.getName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getPackageDeclaration()-invokes-lombok.core.AST.getPackageDeclaration()", "source": "lombok.core.AST$Node.getPackageDeclaration()", "target": "lombok.core.AST.getPackageDeclaration()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()-invokes-lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "source": "lombok.eclipse.TransformEclipseAST.go()", "target": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-invokes-lombok.installer.Installer.buildHowIWorkArea()", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.buildHowIWorkArea()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.core.AST$Node.recursiveSetHandled()", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST$Node.recursiveSetHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 10, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.TypeLibrary.addType(java.lang.String)", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.TypeLibrary.addType(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.getName()", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.getName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor()-invokes-lombok.javac.JavacASTAdapter()", "source": "lombok.javac.apt.Processor$AnnotationVisitor()", "target": "lombok.javac.JavacASTAdapter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.getImportStatements()", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.getImportStatements()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])-invokes-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok.sneakyThrow(java.lang.Throwable)-invokes-lombok.Lombok.sneakyThrow0(java.lang.Throwable)", "source": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "target": "lombok.Lombok.sneakyThrow0(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.core.AST$Node.directUp()", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Node.directUp()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getPackageDeclaration()", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getPackageDeclaration()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacAST.top()", "source": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.reparse()-invokes-lombok.core.AST$Node.rebuild()", "source": "lombok.eclipse.EclipseAST.reparse()", "target": "lombok.core.AST$Node.rebuild()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()-invokes-lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "source": "lombok.eclipse.TransformEclipseAST.go()", "target": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-invokes-lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.<clinit>()-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.TransformEclipseAST.<clinit>()", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.load()-invokes-lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "source": "lombok.eclipse.HandlerLibrary.load()", "target": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-invokes-lombok.core.Version.getVersion()", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.core.Version.getVersion()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)-invokes-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)-invokes-lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)-invokes-lombok.installer.EclipseLocation.checkForLombok()", "source": "lombok.installer.EclipseLocation(java.lang.String)", "target": "lombok.installer.EclipseLocation.checkForLombok()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.top()-invokes-lombok.core.AST.top()", "source": "lombok.javac.JavacAST.top()", "target": "lombok.core.AST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.rebuild()-invokes-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST$Node.rebuild()", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)-invokes-lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-invokes-lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-invokes-lombok.core.AST$Node.getName()", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.AST$Node.getName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()-invokes-lombok.eclipse.HandlerLibrary.skipAllButPrintAST()", "source": "lombok.eclipse.TransformEclipseAST.go()", "target": "lombok.eclipse.HandlerLibrary.skipAllButPrintAST()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "source": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.rebuild()-invokes-lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "source": "lombok.core.AST$Node.rebuild()", "target": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.rebuild()", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.rebuild()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.core.TypeLibrary.addType(java.lang.String)", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.core.TypeLibrary.addType(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-invokes-lombok.javac.HandlerLibrary.skipAllButPrintAST()", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.HandlerLibrary.skipAllButPrintAST()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getNodeFor(java.lang.Object)-invokes-lombok.core.AST.get(java.lang.Object)", "source": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "target": "lombok.core.AST.get(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)-invokes-lombok.eclipse.EclipseAST.propagateProblems()", "source": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "target": "lombok.eclipse.EclipseAST.propagateProblems()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.reparse()-invokes-lombok.eclipse.EclipseAST.propagateProblems()", "source": "lombok.eclipse.EclipseAST.reparse()", "target": "lombok.eclipse.EclipseAST.propagateProblems()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)-invokes-lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "source": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getImportStatements()-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.EclipseAST.getImportStatements()", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.fieldsOf(java.lang.Class)", "source": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.fieldsOf(java.lang.Class)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-invokes-lombok.core.AST$Node.up()", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.AST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.JavacAST.top()", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-invokes-lombok.core.Version.getVersion()", "source": "lombok.installer.Installer()", "target": "lombok.core.Version.getVersion()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.Installer.install(java.util.List)", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.install(java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)-invokes-lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String)-invokes-lombok.core.AST$Node.getPackageDeclaration()", "source": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "target": "lombok.core.AST$Node.getPackageDeclaration()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.rebuild()-invokes-lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "source": "lombok.core.AST$Node.rebuild()", "target": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)-invokes-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)-invokes-lombok.core.AST$Node.addError(java.lang.String)", "source": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "target": "lombok.core.AST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.ToString.exclude()", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.ToString.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.core.AST$Node.getFileName()", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.core.AST$Node.getFileName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-invokes-lombok.installer.Installer.buildUninstallArea()", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.buildUninstallArea()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getPackageDeclaration()-invokes-lombok.eclipse.Eclipse.toQualifiedName(char[][])", "source": "lombok.eclipse.EclipseAST.getPackageDeclaration()", "target": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.ToString.includeFieldNames()", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.ToString.includeFieldNames()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-invokes-lombok.core.TypeLibrary.addType(java.lang.String)", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.core.TypeLibrary.addType(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "source": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)-invokes-lombok.installer.EclipseLocation.hasLombok()", "source": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "target": "lombok.installer.EclipseLocation.hasLombok()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getPackageDeclaration()-invokes-lombok.javac.JavacAST.top()", "source": "lombok.javac.JavacAST.getPackageDeclaration()", "target": "lombok.javac.JavacAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "label": "invokes", "properties": {"weight": 9, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-invokes-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok()-invokes-lombok.installer.EclipseLocation.getTargetDirs()", "source": "lombok.installer.EclipseLocation.checkForLombok()", "target": "lombok.installer.EclipseLocation.getTargetDirs()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.EclipseFinder.getEclipseExecutableName()", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)-invokes-lombok.installer.Installer$EclipsesList.fireSelectionChange()", "source": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "target": "lombok.installer.Installer$EclipsesList.fireSelectionChange()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)-invokes-lombok.core.AST.getComponentType(java.lang.reflect.Type)", "source": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "target": "lombok.core.AST.getComponentType(java.lang.reflect.Type)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-invokes-lombok.javac.JavacAST$Node.getSymbolTable()", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.JavacAST$Node.getSymbolTable()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)-invokes-lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "source": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "target": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-invokes-lombok.core.AST$Node.rebuild()", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "lombok.core.AST$Node.rebuild()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseAST$Node.isCompleteParse()", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST$Node.isCompleteParse()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-invokes-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.Synchronized.value()", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.Synchronized.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.getPackageDeclaration()", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.getPackageDeclaration()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-invokes-lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.up()-invokes-lombok.core.AST$Node.up()", "source": "lombok.eclipse.EclipseAST$Node.up()", "target": "lombok.core.AST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.Getter.value()", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.Getter.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildUninstallArea()-invokes-lombok.installer.Installer.doUninstall()", "source": "lombok.installer.Installer.buildUninstallArea()", "target": "lombok.installer.Installer.doUninstall()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.EclipseLocation.hasLombok()", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.EclipseLocation.hasLombok()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.core.AST(java.lang.String)", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.core.AST(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.ToString.callSuper()", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.ToString.callSuper()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.down()-invokes-lombok.core.AST$Node.down()", "source": "lombok.javac.JavacAST$Node.down()", "target": "lombok.core.AST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.show()-invokes-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.Installer.show()", "target": "lombok.installer.EclipseFinder.getOS()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)-invokes-lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.EqualsAndHashCode.exclude()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.EqualsAndHashCode.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.toName(java.lang.String)-invokes-lombok.javac.JavacAST.toName(java.lang.String)", "source": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "target": "lombok.javac.JavacAST.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.recursiveSetHandled()-invokes-lombok.core.AST$Node.recursiveSetHandled()", "source": "lombok.core.AST$Node.recursiveSetHandled()", "target": "lombok.core.AST$Node.recursiveSetHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[])-invokes-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.Installer.main(java.lang.String[])", "target": "lombok.installer.EclipseFinder.getOS()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-invokes-lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacAST$Node.top()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[])-invokes-lombok.installer.Installer.show()", "source": "lombok.installer.Installer.main(java.lang.String[])", "target": "lombok.installer.Installer.show()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.directUp()", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.directUp()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows()-invokes-lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "source": "lombok.installer.EclipseFinder.findEclipseOnWindows()", "target": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)-invokes-lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)-invokes-lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "source": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.propagateProblems()-invokes-lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "source": "lombok.eclipse.EclipseAST.propagateProblems()", "target": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.<clinit>()-invokes-lombok.eclipse.HandlerLibrary.load()", "source": "lombok.eclipse.TransformEclipseAST.<clinit>()", "target": "lombok.eclipse.HandlerLibrary.load()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getDrivesOnWindows()-invokes-lombok.installer.WindowsDriveInfo.getLogicalDrives()", "source": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "target": "lombok.installer.WindowsDriveInfo.getLogicalDrives()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseAST.reparse()", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.reparse()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])-invokes-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)-invokes-lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)-invokes-lombok.installer.EclipseLocation.hasLombok()", "source": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "target": "lombok.installer.EclipseLocation.hasLombok()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)-invokes-lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "target": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)-invokes-lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "source": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.ToString.exclude()", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.ToString.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-invokes-lombok.eclipse.EclipseAST.singleton(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseAST.singleton(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.fireSelectionChange()-invokes-lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "source": "lombok.installer.Installer$EclipsesList.fireSelectionChange()", "target": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.Installer.uninstall(java.util.List)", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.uninstall(java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.Installer.handleException(java.lang.Throwable)", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.handleException(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacAST$Node.top()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])-invokes-lombok.installer.WindowsDriveInfo.getLogicalDrives()", "source": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "target": "lombok.installer.WindowsDriveInfo.getLogicalDrives()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.core.AST.setTop(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.core.AST.setTop(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.fireSelectionChange()-invokes-lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "source": "lombok.installer.Installer$EclipsesList.fireSelectionChange()", "target": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-invokes-lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean)-invokes-lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "source": "lombok.javac.JavacASTVisitor$Printer(boolean)", "target": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getLogicalDrives()-invokes-lombok.installer.WindowsDriveInfo.getLogicalDrives0()", "source": "lombok.installer.WindowsDriveInfo.getLogicalDrives()", "target": "lombok.installer.WindowsDriveInfo.getLogicalDrives0()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getEclipseExecutableName()-invokes-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "target": "lombok.installer.EclipseFinder.getOS()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.EqualsAndHashCode.exclude()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.EqualsAndHashCode.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[])-invokes-lombok.installer.Installer.printHeadlessInfo()", "source": "lombok.installer.Installer.main(java.lang.String[])", "target": "lombok.installer.Installer.printHeadlessInfo()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.Setter.value()", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.Setter.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.core.AST(java.lang.String)", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.core.AST(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-invokes-lombok.core.AST$Node.calculateIsStructurallySignificant()", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.calculateIsStructurallySignificant()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.PrintAST.outfile()", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.PrintAST.outfile()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)-invokes-lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "source": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)-invokes-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.core.AST.fieldsOf(java.lang.Class)", "source": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.core.AST.fieldsOf(java.lang.Class)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)-invokes-lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "source": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.getImportStatements()", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.getImportStatements()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.ToString.exclude()", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.ToString.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "source": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)-invokes-lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "source": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)", "target": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getPackageDeclaration()-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.JavacAST.getPackageDeclaration()", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)-invokes-lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "source": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "target": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)-invokes-lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "source": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getImportStatements()-invokes-lombok.eclipse.Eclipse.toQualifiedName(char[][])", "source": "lombok.eclipse.EclipseAST.getImportStatements()", "target": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()-invokes-lombok.core.Version.getVersion()", "source": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "target": "lombok.core.Version.getVersion()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-invokes-lombok.installer.Installer.buildChrome(java.awt.Container)", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.buildChrome(java.awt.Container)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getPackageDeclaration()-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.EclipseAST.getPackageDeclaration()", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-invokes-lombok.installer.Installer.buildEclipseArea()", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.buildEclipseArea()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)-invokes-lombok.core.AnnotationValues.toFQ(java.lang.String)", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "target": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getPackageDeclaration()", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getPackageDeclaration()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)-invokes-lombok.core.TypeLibrary.findCompatible(java.lang.String)", "source": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "target": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.Installer.showWhatIDo()", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer.showWhatIDo()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-invokes-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)-invokes-lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.ToString.exclude()", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.ToString.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.propagateProblems()-invokes-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.EclipseAST.propagateProblems()", "target": "lombok.eclipse.EclipseAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.directUp()-invokes-lombok.core.AST$Node.directUp()", "source": "lombok.eclipse.EclipseAST$Node.directUp()", "target": "lombok.core.AST$Node.directUp()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-invokes-lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)-invokes-lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "target": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.core.AST.setTop(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.core.AST.setTop(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)-invokes-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-invokes-lombok.core.AST$Node.rebuild()", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "lombok.core.AST$Node.rebuild()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "source": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getImportStatements()-invokes-lombok.javac.JavacAST.top()", "source": "lombok.javac.JavacAST.getImportStatements()", "target": "lombok.javac.JavacAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.rebuild()-invokes-lombok.core.AST$Node.get()", "source": "lombok.core.AST$Node.rebuild()", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)-invokes-lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "source": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "target": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String)-invokes-lombok.core.AST$Node.getImportStatements()", "source": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "target": "lombok.core.AST$Node.getImportStatements()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-invokes-lombok.javac.HandlerLibrary.skipPrintAST()", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.HandlerLibrary.skipPrintAST()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor()-invokes-lombok.eclipse.EclipseASTAdapter()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor()", "target": "lombok.eclipse.EclipseASTAdapter()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)-invokes-lombok.installer.EclipseLocation.getPath()", "source": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "target": "lombok.installer.EclipseLocation.getPath()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacAST$Node.top()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])-invokes-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getDrivesOnWindows()-invokes-lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "source": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "target": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-invokes-lombok.core.TypeLibrary.findCompatible(java.lang.String)", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)-invokes-lombok.core.AST$Node.get()", "source": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.directUp()-invokes-lombok.core.AST$Node.directUp()", "source": "lombok.javac.JavacAST$Node.directUp()", "target": "lombok.core.AST$Node.directUp()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.EqualsAndHashCode.exclude()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.EqualsAndHashCode.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.core.AST$Node.recursiveSetHandled()", "source": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.core.AST$Node.recursiveSetHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.PrintAST.printContent()", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.PrintAST.printContent()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)-invokes-lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "source": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])-invokes-lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "source": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "target": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.EclipseFinder.getOS()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.Setter.value()", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.Setter.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-invokes-lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.Synchronized.value()", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.Synchronized.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-invokes-lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String)-invokes-lombok.core.AnnotationValues.tryClass(java.lang.String)", "source": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "target": "lombok.core.AnnotationValues.tryClass(java.lang.String)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.up()-invokes-lombok.core.AST$Node.up()", "source": "lombok.javac.JavacAST$Node.up()", "target": "lombok.core.AST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "source": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.isCompleteParse()", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.isCompleteParse()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.getName()", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.getName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)-invokes-lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-invokes-lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])-invokes-lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "source": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "target": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "source": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.EqualsAndHashCode.exclude()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.EqualsAndHashCode.exclude()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.Getter.value()", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.Getter.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)-invokes-lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-invokes-lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)-invokes-lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)-invokes-lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)-invokes-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.reparse()-invokes-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.EclipseAST.reparse()", "target": "lombok.eclipse.EclipseAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.core.AST$Node.getFileName()", "source": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.core.AST$Node.getFileName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.putInMap(lombok.core.AST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-invokes-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.EclipseFinder.getOS()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "source": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.getNodeFor(java.lang.Object)", "source": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)-invokes-lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "source": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "target": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.Data.staticConstructor()", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.Data.staticConstructor()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getImportStatements()", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getImportStatements()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()-invokes-lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "source": "lombok.installer.EclipseFinder.loadWindowsDriveInfoLib()", "target": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fieldsOf(java.lang.Class)-invokes-lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "source": "lombok.core.AST.fieldsOf(java.lang.Class)", "target": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-invokes-lombok.core.AST$Node.get()", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.eclipse.EclipseAST$Node.getName()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.EclipseAST$Node.getName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 6, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.TypeLibrary.addType(java.lang.String)", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.TypeLibrary.addType(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-invokes-lombok.installer.Installer.buildJavacArea()", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer.buildJavacArea()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.doUninstall()-invokes-lombok.installer.EclipseLocation.uninstall()", "source": "lombok.installer.Installer.doUninstall()", "target": "lombok.installer.EclipseLocation.uninstall()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "source": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)-invokes-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.EclipseAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.uninstall()-invokes-lombok.installer.EclipseLocation.getTargetDirs()", "source": "lombok.installer.EclipseLocation.uninstall()", "target": "lombok.installer.EclipseLocation.getTargetDirs()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)-invokes-lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getImportStatements()-invokes-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.EclipseAST.getImportStatements()", "target": "lombok.eclipse.EclipseAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.reparse()-invokes-lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST.reparse()", "target": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])-invokes-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 8, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()-invokes-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "source": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-invokes-lombok.installer.EclipseLocation.getPath()", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.EclipseLocation.getPath()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)-invokes-lombok.core.AST.get(java.lang.Object)", "source": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST.get(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-invokes-lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.JavacAST$Node.getSymbolTable()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.JavacAST$Node.getSymbolTable()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 29, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])-invokes-lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "source": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "target": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)-invokes-lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "source": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "target": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)-invokes-lombok.eclipse.Eclipse.toQualifiedName(char[][])", "source": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "target": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)-invokes-lombok.core.AST$Node.getNodeFor(java.lang.Object)", "source": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "target": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.down()-invokes-lombok.core.AST$Node.down()", "source": "lombok.eclipse.EclipseAST$Node.down()", "target": "lombok.core.AST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)-invokes-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "source": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)-invokes-lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()-invokes-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.EclipseFinder.findEclipses()", "target": "lombok.installer.EclipseFinder.getOS()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.EclipseAST$Node.top()", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)-invokes-lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-invokes-lombok.installer.EclipseFinder.findOurJar()", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseFinder.findOurJar()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()-invokes-lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "source": "lombok.core.AnnotationValues.getInstance()", "target": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)-invokes-lombok.core.AnnotationValues.toFQ(java.lang.String)", "source": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "target": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacAST$Node.top()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)-invokes-lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "source": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)-invokes-lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "source": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "target": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getImportStatements()", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getImportStatements()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.Eclipse.toQualifiedName(char[][])", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.top()-invokes-lombok.core.AST$Node.top()", "source": "lombok.eclipse.EclipseAST$Node.top()", "target": "lombok.core.AST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST.get(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST.get(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.ToString.callSuper()", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.ToString.callSuper()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-invokes-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-invokes-lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)-invokes-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getImportStatements()-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.JavacAST.getImportStatements()", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)-invokes-lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "source": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "target": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()-invokes-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.EclipseAST$ParseProblem.addToCompilationResult()", "target": "lombok.eclipse.EclipseAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 9, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "source": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.Cleanup.value()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.Cleanup.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows()-invokes-lombok.installer.EclipseFinder.getDrivesOnWindows()", "source": "lombok.installer.EclipseFinder.findEclipseOnWindows()", "target": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)-invokes-lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "target": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-invokes-lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-invokes-lombok.installer.EclipseFinder.getOS()", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseFinder.getOS()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)-invokes-lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "target": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.rebuild()", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.rebuild()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.directUp()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.directUp()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.up()", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "source": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)-invokes-lombok.core.AST$Node.get()", "source": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)-invokes-lombok.core.TypeResolver.toSimpleName(java.lang.String)", "source": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.toSimpleName(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.javac.JavacAST$Node.getName()", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.JavacAST$Node.getName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)-invokes-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-invokes-lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.top()-invokes-lombok.core.AST$Node.top()", "source": "lombok.javac.JavacAST$Node.top()", "target": "lombok.core.AST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])-invokes-lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "target": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)-invokes-lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "source": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)-invokes-lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "source": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()-invokes-lombok.installer.EclipseFinder.findEclipseOnWindows()", "source": "lombok.installer.EclipseFinder.findEclipses()", "target": "lombok.installer.EclipseFinder.findEclipseOnWindows()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-invokes-lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.EqualsAndHashCode.callSuper()", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.EqualsAndHashCode.callSuper()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)-invokes-lombok.core.AST$Node.addError(java.lang.String)", "source": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "target": "lombok.core.AST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.eclipse.EclipseAST$Node.getName()", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.EclipseAST$Node.getName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok()-invokes-lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "source": "lombok.installer.EclipseLocation.checkForLombok()", "target": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-invokes-lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String)-invokes-lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "source": "lombok.javac.HandlerLibrary.javacError(java.lang.String)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.JavacAST$Node.down()", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)-invokes-lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "source": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "target": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-invokes-lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.PrintAST.outfile()", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.PrintAST.outfile()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-invokes-lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.top()-invokes-lombok.core.AST.top()", "source": "lombok.eclipse.EclipseAST.top()", "target": "lombok.core.AST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findOurJar()-invokes-lombok.Lombok.sneakyThrow(java.lang.Throwable)", "source": "lombok.installer.EclipseFinder.findOurJar()", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)-invokes-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])-invokes-lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "target": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.show()-invokes-lombok.installer.AppleNativeLook.go()", "source": "lombok.installer.Installer.show()", "target": "lombok.installer.AppleNativeLook.go()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.rebuild()", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.rebuild()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.EqualsAndHashCode.callSuper()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.EqualsAndHashCode.callSuper()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.javac.JavacAST$Node.top()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST$Node.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)-invokes-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-invokes-lombok.javac.JavacAST$Node.toName(java.lang.String)", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)-invokes-lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)", "target": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String)-invokes-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "source": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 5, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-invokes-lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-invokes-lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.load()-invokes-lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "source": "lombok.eclipse.HandlerLibrary.load()", "target": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])-invokes-lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "target": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)-invokes-lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "source": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "target": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-invokes-lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 28, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getImportStatements()-invokes-lombok.core.AST.getImportStatements()", "source": "lombok.core.AST$Node.getImportStatements()", "target": "lombok.core.AST.getImportStatements()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.core.AST.putInMap(lombok.core.AST$Node)", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.setHandled()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.setHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.down()", "source": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.down()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-invokes-lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-invokes-lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-invokes-lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-invokes-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AST$Node.isHandled()", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AST$Node.isHandled()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)-invokes-lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.Data.staticConstructor()", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.Data.staticConstructor()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addType(java.lang.String)-invokes-lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "source": "lombok.core.TypeLibrary.addType(java.lang.String)", "target": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.propagateProblems()-invokes-lombok.core.AST$Node.get()", "source": "lombok.eclipse.EclipseAST.propagateProblems()", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.printHeadlessInfo()-invokes-lombok.core.Version.getVersion()", "source": "lombok.installer.Installer.printHeadlessInfo()", "target": "lombok.core.Version.getVersion()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AnnotationValues.getInstance()", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues.getInstance()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])-invokes-lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "target": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-invokes-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)-invokes-lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "source": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getDrivesOnWindows()-invokes-lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "source": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "target": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-invokes-lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-invokes-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-invokes-lombok.eclipse.TransformEclipseAST.go()", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.go()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.eclipse.EclipseAST$Node.up()", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node.up()", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()-invokes-lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "source": "lombok.core.AnnotationValues.getInstance()", "target": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "label": "invokes", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)-invokes-lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)-invokes-lombok.installer.EclipseFinder.getEclipseExecutableName()", "source": "lombok.installer.EclipseLocation(java.lang.String)", "target": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.javac.JavacAST$Node.addError(java.lang.String)", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.getKind()", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.getKind()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.ToString.includeFieldNames()", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.ToString.includeFieldNames()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getPackageDeclaration()-invokes-lombok.eclipse.EclipseAST.top()", "source": "lombok.eclipse.EclipseAST.getPackageDeclaration()", "target": "lombok.eclipse.EclipseAST.top()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-invokes-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)-invokes-lombok.core.AST.getStatementTypes()", "source": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "target": "lombok.core.AST.getStatementTypes()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])-invokes-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-invokes-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-invokes-lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-invokes-lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()-invokes-lombok.installer.EclipseFinder.findEclipseOnMac()", "source": "lombok.installer.EclipseFinder.findEclipses()", "target": "lombok.installer.EclipseFinder.findEclipseOnMac()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-invokes-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-invokes-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-invokes-lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)-invokes-lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "source": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-invokes-lombok.javac.JavacAST$Node.getTreeMaker()", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.JavacAST$Node.getTreeMaker()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-invokes-lombok.Cleanup.value()", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.Cleanup.value()", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-invokes-lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.core.AST$Node.get()", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.core.AST$Node.get()", "label": "invokes", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-invokes-lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "source": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-invokes-lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-invokes-lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "label": "invokes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)-hasParameter-lombok.core.AST$Node.removeChild(lombok.core.AST$Node).0", "source": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node)", "target": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "source": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)-hasParameter-lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).2", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-hasParameter-lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).1", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).0", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "target": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)-hasParameter-lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).0", "source": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)-hasParameter-lombok.installer.EclipseLocation(java.lang.String).0", "source": "lombok.installer.EclipseLocation(java.lang.String)", "target": "lombok.installer.EclipseLocation(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "source": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).2", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)-hasParameter-lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection).0", "source": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "target": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)-hasParameter-lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment).0", "source": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment)", "target": "lombok.javac.apt.Processor.init(javax.annotation.processing.ProcessingEnvironment).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.toName(java.lang.String)-hasParameter-lombok.javac.JavacAST.toName(java.lang.String).0", "source": "lombok.javac.JavacAST.toName(java.lang.String)", "target": "lombok.javac.JavacAST.toName(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)-hasParameter-lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).1", "source": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "source": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)-hasParameter-lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).1", "source": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "target": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).4", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)-hasParameter-lombok.javac.JavacAST$Node.addWarning(java.lang.String).0", "source": "lombok.javac.JavacAST$Node.addWarning(java.lang.String)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).1", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "source": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)-hasParameter-lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).0", "source": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "target": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).1", "source": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).4", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])-hasParameter-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).0", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "source": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).0", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)-hasParameter-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).4", "source": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])-hasParameter-lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[]).0", "source": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "target": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)-hasParameter-lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager).0", "source": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)-hasParameter-lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map).0", "source": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map)", "target": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)-hasParameter-lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).1", "source": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-hasParameter-lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).0", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-hasParameter-lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)-hasParameter-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).1", "source": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)-hasParameter-lombok.core.AST.getFields(java.lang.Class,java.util.Collection).1", "source": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "target": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)-hasParameter-lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).1", "source": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-hasParameter-lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[]).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-hasParameter-lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).0", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).2", "source": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.tryClass(java.lang.String)-hasParameter-lombok.core.AnnotationValues.tryClass(java.lang.String).0", "source": "lombok.core.AnnotationValues.tryClass(java.lang.String)", "target": "lombok.core.AnnotationValues.tryClass(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)-hasParameter-lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).0", "source": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-hasParameter-lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).0", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)-hasParameter-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).2", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).1", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "target": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "source": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).2", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)-hasParameter-lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).0", "source": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)-hasParameter-lombok.core.AnnotationValues.getRawExpressions(java.lang.String).0", "source": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "target": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)-hasParameter-lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).0", "source": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).0", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "source": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).3", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)-hasParameter-lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression).0", "source": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "target": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)-hasParameter-lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).1", "source": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "target": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).2", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).3", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)-hasParameter-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).3", "source": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).1", "source": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "source": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).1", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)-hasParameter-lombok.javac.HandlerLibrary.javacWarning(java.lang.String).0", "source": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)-hasParameter-lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).1", "source": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)-hasParameter-lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String).0", "source": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "target": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)-hasParameter-lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).1", "source": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])-hasParameter-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).2", "source": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)-hasParameter-lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel).0", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "target": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.toQualifiedName(char[][])-hasParameter-lombok.eclipse.Eclipse.toQualifiedName(char[][]).0", "source": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "target": "lombok.eclipse.Eclipse.toQualifiedName(char[][]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.addWarning(java.lang.String)-hasParameter-lombok.core.AST$Node.addWarning(java.lang.String).0", "source": "lombok.core.AST$Node.addWarning(java.lang.String)", "target": "lombok.core.AST$Node.addWarning(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String)-hasParameter-lombok.core.AnnotationValues.toFQ(java.lang.String).0", "source": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "target": "lombok.core.AnnotationValues.toFQ(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)-hasParameter-lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).0", "source": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)-hasParameter-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).0", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.get(java.lang.Object)-hasParameter-lombok.core.AST.get(java.lang.Object).0", "source": "lombok.core.AST.get(java.lang.Object)", "target": "lombok.core.AST.get(java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "source": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink(java.lang.String)-hasParameter-lombok.installer.Installer$JHyperLink(java.lang.String).0", "source": "lombok.installer.Installer$JHyperLink(java.lang.String)", "target": "lombok.installer.Installer$JHyperLink(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-hasParameter-lombok.installer.Installer.buildChrome(java.awt.Container).0", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer.buildChrome(java.awt.Container).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-hasParameter-lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)-hasParameter-lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).0", "source": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-hasParameter-lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-hasParameter-lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)-hasParameter-lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).1", "source": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "target": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)-hasParameter-lombok.core.AST.getFields(java.lang.Class,java.util.Collection).0", "source": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "target": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "source": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).2", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String)", "target": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).2", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])-hasParameter-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).1", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).0", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)-hasParameter-lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).1", "source": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.singleton(java.lang.Object)-hasParameter-lombok.eclipse.EclipseAST.singleton(java.lang.Object).0", "source": "lombok.eclipse.EclipseAST.singleton(java.lang.Object)", "target": "lombok.eclipse.EclipseAST.singleton(java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "source": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)-hasParameter-lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement).0", "source": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "target": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)-hasParameter-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).1", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).0", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)-hasParameter-lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).0", "source": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "target": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)-hasParameter-lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).2", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "target": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)-hasParameter-lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).0", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)-hasParameter-lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST).0", "source": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).1", "source": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "target": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).2", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "source": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).1", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)-hasParameter-lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).2", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)-hasParameter-lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).1", "source": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "target": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)-hasParameter-lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).0", "source": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "target": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).4", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).0", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])-hasParameter-lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[]).0", "source": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[])", "target": "lombok.eclipse.Eclipse.copyTypes(org.eclipse.jdt.internal.compiler.ast.TypeReference[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "source": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).4", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).2", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)-hasParameter-lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).1", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setTop(lombok.core.AST$Node)-hasParameter-lombok.core.AST.setTop(lombok.core.AST$Node).0", "source": "lombok.core.AST.setTop(lombok.core.AST$Node)", "target": "lombok.core.AST.setTop(lombok.core.AST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)-hasParameter-lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).0", "source": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)-hasParameter-lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).2", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).2", "source": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "source": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).3", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)-hasParameter-lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).2", "source": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "target": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)-hasParameter-lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).0", "source": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])-hasParameter-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).1", "source": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).2", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)-hasParameter-lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).2", "source": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "target": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-hasParameter-lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).0", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)-hasParameter-lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression).0", "source": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression)", "target": "lombok.javac.Javac.calculateGuess(com.sun.tools.javac.tree.JCTree.JCExpression).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).0", "source": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)-hasParameter-lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor).0", "source": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-hasParameter-lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).1", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)-hasParameter-lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).0", "source": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable)", "target": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).0", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)-hasParameter-lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String).0", "source": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "target": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)-hasParameter-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).0", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)-hasParameter-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).1", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)-hasParameter-lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager).0", "source": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager)", "target": "lombok.javac.JavacAST.increaseErrorCount(javax.annotation.processing.Messager).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).1", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).5", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).5", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)-hasParameter-lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).1", "source": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "target": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).8", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).8", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "source": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)-hasParameter-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).0", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)-hasParameter-lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).0", "source": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.addError(java.lang.String)-hasParameter-lombok.core.AST$Node.addError(java.lang.String).0", "source": "lombok.core.AST$Node.addError(java.lang.String)", "target": "lombok.core.AST$Node.addError(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])-hasParameter-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).0", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.toSimpleName(java.lang.String)-hasParameter-lombok.core.TypeResolver.toSimpleName(java.lang.String).0", "source": "lombok.core.TypeResolver.toSimpleName(java.lang.String)", "target": "lombok.core.TypeResolver.toSimpleName(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).2", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).0", "source": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String)-hasParameter-lombok.javac.JavacAST$Node.addError(java.lang.String).0", "source": "lombok.javac.JavacAST$Node.addError(java.lang.String)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)-hasParameter-lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).1", "source": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "target": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).1", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).2", "source": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)-hasParameter-lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).3", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "target": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])-hasParameter-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).2", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).1", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)-hasParameter-lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).0", "source": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object)", "target": "lombok.core.AST$Node.replaceChildNode(java.lang.Object,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)-hasParameter-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).0", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "source": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])-hasParameter-lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[]).0", "source": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "target": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-hasParameter-lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)-hasParameter-lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).0", "source": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "target": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)-hasParameter-lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).0", "source": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess)", "target": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)-hasParameter-lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).0", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)-hasParameter-lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).1", "source": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL)", "target": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)-hasParameter-lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).1", "source": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "target": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).0", "source": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])-hasParameter-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).2", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])-hasParameter-lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[]).0", "source": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "target": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List)-hasParameter-lombok.installer.Installer.uninstall(java.util.List).0", "source": "lombok.installer.Installer.uninstall(java.util.List)", "target": "lombok.installer.Installer.uninstall(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)-hasParameter-lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary).0", "source": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])-hasParameter-lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).1", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[])", "target": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "source": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)-hasParameter-lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).1", "source": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "target": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).1", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)-hasParameter-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).1", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)-hasParameter-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).5", "source": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).5", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).3", "source": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).2", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).4", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).5", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).5", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-hasParameter-lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).1", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.findCompatible(java.lang.String)-hasParameter-lombok.core.TypeLibrary.findCompatible(java.lang.String).0", "source": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "target": "lombok.core.TypeLibrary.findCompatible(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])-hasParameter-lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).0", "source": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[])", "target": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).4", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer(boolean).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)", "target": "lombok.eclipse.EclipseASTVisitor$Printer(boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-hasParameter-lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)-hasParameter-lombok.core.AST.setAndGetAsHandled(java.lang.Object).0", "source": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "target": "lombok.core.AST.setAndGetAsHandled(java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node).0", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).1", "source": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)-hasParameter-lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).1", "source": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader)", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class,java.lang.ClassLoader).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).3", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)-hasParameter-lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).2", "source": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "target": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "source": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)-hasParameter-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).1", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String)", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)-hasParameter-lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor).0", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor)", "target": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).0", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-hasParameter-lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).0", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).1", "source": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)-hasParameter-lombok.core.AnnotationValues.getRawExpression(java.lang.String).0", "source": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)", "target": "lombok.core.AnnotationValues.getRawExpression(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).2", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).1", "source": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok.sneakyThrow(java.lang.Throwable)-hasParameter-lombok.Lombok.sneakyThrow(java.lang.Throwable).0", "source": "lombok.Lombok.sneakyThrow(java.lang.Throwable)", "target": "lombok.Lombok.sneakyThrow(java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)-hasParameter-lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor).0", "source": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.toName(java.lang.String)-hasParameter-lombok.javac.JavacAST$Node.toName(java.lang.String).0", "source": "lombok.javac.JavacAST$Node.toName(java.lang.String)", "target": "lombok.javac.JavacAST$Node.toName(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)-hasParameter-lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).0", "source": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "target": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.putInMap(lombok.core.AST$Node)-hasParameter-lombok.core.AST.putInMap(lombok.core.AST$Node).0", "source": "lombok.core.AST.putInMap(lombok.core.AST$Node)", "target": "lombok.core.AST.putInMap(lombok.core.AST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).3", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)-hasParameter-lombok.core.AnnotationValues.getProbableFQType(java.lang.String).0", "source": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)", "target": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)-hasParameter-lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).1", "source": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "target": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).2", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)-hasParameter-lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).0", "source": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).2", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)-hasParameter-lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST).0", "source": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)-hasParameter-lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).0", "source": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "target": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)-hasParameter-lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).0", "source": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)-hasParameter-lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).0", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "source": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)-hasParameter-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).1", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)-hasParameter-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).0", "source": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)-hasParameter-lombok.installer.Installer.selectedLomboksChanged(java.util.List).0", "source": "lombok.installer.Installer.selectedLomboksChanged(java.util.List)", "target": "lombok.installer.Installer.selectedLomboksChanged(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-hasParameter-lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).0", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)-hasParameter-lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).0", "source": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "target": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)-hasParameter-lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).0", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).2", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).3", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-hasParameter-lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).0", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-hasParameter-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "source": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).0", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)-hasParameter-lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).0", "source": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "target": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).2", "source": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "source": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)-hasParameter-lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String).0", "source": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "target": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)-hasParameter-lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File).0", "source": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "target": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).4", "source": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "source": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "source": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).3", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).2", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)-hasParameter-lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).0", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "target": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)-hasParameter-lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).1", "source": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)-hasParameter-lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression).0", "source": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "target": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)-hasParameter-lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).0", "source": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)-hasParameter-lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel).0", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "target": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "source": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)-hasParameter-lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).0", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "source": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "source": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).6", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).6", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).1", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "source": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)-hasParameter-lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).1", "source": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "target": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).2", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "source": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).3", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).1", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.handleException(java.lang.Throwable)-hasParameter-lombok.installer.Installer.handleException(java.lang.Throwable).0", "source": "lombok.installer.Installer.handleException(java.lang.Throwable)", "target": "lombok.installer.Installer.handleException(java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)-hasParameter-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).0", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).2", "source": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).1", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)-hasParameter-lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).2", "source": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "target": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST(java.lang.String)-hasParameter-lombok.core.AST(java.lang.String).0", "source": "lombok.core.AST(java.lang.String)", "target": "lombok.core.AST(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)-hasParameter-lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).1", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "target": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "source": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[])", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.equals(java.lang.Object)-hasParameter-lombok.installer.EclipseLocation.equals(java.lang.Object).0", "source": "lombok.installer.EclipseLocation.equals(java.lang.Object)", "target": "lombok.installer.EclipseLocation.equals(java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)-hasParameter-lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence).0", "source": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "target": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)-hasParameter-lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).1", "source": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)-hasParameter-lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).1", "source": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)-hasParameter-lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor).0", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor)", "target": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)-hasParameter-lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).1", "source": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int)", "target": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)-hasParameter-lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).1", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "source": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)-hasParameter-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String).0", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)-hasParameter-lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).1", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)-hasParameter-lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues)", "target": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)-hasParameter-lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).2", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-hasParameter-lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).1", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).3", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-hasParameter-lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).1", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-hasParameter-lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).1", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-hasParameter-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "source": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)-hasParameter-lombok.core.SpiLoadUtil.findServices(java.lang.Class).0", "source": "lombok.core.SpiLoadUtil.findServices(java.lang.Class)", "target": "lombok.core.SpiLoadUtil.findServices(java.lang.Class).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-hasParameter-lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-hasParameter-lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary).0", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])-hasParameter-lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[]).0", "source": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "target": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).5", "source": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).5", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).2", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).1", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])-hasParameter-lombok.installer.WindowsDriveInfo.main(java.lang.String[]).0", "source": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "target": "lombok.installer.WindowsDriveInfo.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-hasParameter-lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary).0", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "source": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.str(char[]).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "source": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).2", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-hasParameter-lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).0", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "source": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).1", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).2", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).7", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).7", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).0", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).2", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-hasParameter-lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).3", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)-hasParameter-lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).1", "source": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)-hasParameter-lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation).0", "source": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation)", "target": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "source": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).0", "source": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String)-hasParameter-lombok.javac.HandlerLibrary.javacError(java.lang.String).0", "source": "lombok.javac.HandlerLibrary.javacError(java.lang.String)", "target": "lombok.javac.HandlerLibrary.javacError(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)-hasParameter-lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).1", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name)", "target": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)-hasParameter-lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).0", "source": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)-hasParameter-lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).0", "source": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "target": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-hasParameter-lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)-hasParameter-lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).1", "source": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "target": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "source": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).0", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][]).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][])", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "source": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)-hasParameter-lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element).0", "source": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element)", "target": "lombok.javac.apt.Processor.toUnit(javax.lang.model.element.Element).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).1", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "source": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-hasParameter-lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).0", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "source": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).1", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "source": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)-hasParameter-lombok.eclipse.EclipseAST$Node.addError(java.lang.String).0", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String)", "target": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)-hasParameter-lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "source": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "target": "lombok.eclipse.Eclipse.copyType(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).2", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])-hasParameter-lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][]).0", "source": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][])", "target": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)-hasParameter-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).2", "source": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)-hasParameter-lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).0", "source": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "source": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)-hasParameter-lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem).0", "source": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem)", "target": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "source": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock).0", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.install(java.util.List)-hasParameter-lombok.installer.Installer.install(java.util.List).0", "source": "lombok.installer.Installer.install(java.util.List)", "target": "lombok.installer.Installer.install(java.util.List).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fieldsOf(java.lang.Class)-hasParameter-lombok.core.AST.fieldsOf(java.lang.Class).0", "source": "lombok.core.AST.fieldsOf(java.lang.Class)", "target": "lombok.core.AST.fieldsOf(java.lang.Class).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer).0", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).0", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).5", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).5", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).1", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).1", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).0", "source": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.main(java.lang.String[])-hasParameter-lombok.core.Version.main(java.lang.String[]).0", "source": "lombok.core.Version.main(java.lang.String[])", "target": "lombok.core.Version.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-hasParameter-lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "source": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)-hasParameter-lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).1", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).2", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getComponentType(java.lang.reflect.Type)-hasParameter-lombok.core.AST.getComponentType(java.lang.reflect.Type).0", "source": "lombok.core.AST.getComponentType(java.lang.reflect.Type)", "target": "lombok.core.AST.getComponentType(java.lang.reflect.Type).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)-hasParameter-lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "source": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-hasParameter-lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).0", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).4", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).3", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-hasParameter-lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).2", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "source": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.javac.JavacAST.setElementInConsList(java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)-hasParameter-lombok.installer.EclipseLocation.checkForLombok0(java.io.File).0", "source": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "target": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])-hasParameter-lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[]).0", "source": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[])", "target": "lombok.eclipse.Eclipse.copyTypeParams(org.eclipse.jdt.internal.compiler.ast.TypeParameter[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "source": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)-hasParameter-lombok.javac.HandlerLibrary(javax.annotation.processing.Messager).0", "source": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).1", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])-hasParameter-lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[]).0", "source": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "target": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)-hasParameter-lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition)", "target": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[])-hasParameter-lombok.installer.Installer.main(java.lang.String[]).0", "source": "lombok.installer.Installer.main(java.lang.String[])", "target": "lombok.installer.Installer.main(java.lang.String[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)-hasParameter-lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).0", "source": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "target": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)-hasParameter-lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).1", "source": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)-hasParameter-lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary).0", "source": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).0", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "source": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)-hasParameter-lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).0", "source": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "target": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-hasParameter-lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).0", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-hasParameter-lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "source": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.longToIntForHashCode(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.ast.Reference).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).0", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "source": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)-hasParameter-lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).2", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "target": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)-hasParameter-lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).1", "source": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object)", "target": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)-hasParameter-lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).1", "source": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)-hasParameter-lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame).0", "source": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame)", "target": "lombok.installer.EclipseLocation$NotAnEclipseException.showDialog(javax.swing.JFrame).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addType(java.lang.String)-hasParameter-lombok.core.TypeLibrary.addType(java.lang.String).0", "source": "lombok.core.TypeLibrary.addType(java.lang.String)", "target": "lombok.core.TypeLibrary.addType(java.lang.String).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok.sneakyThrow0(java.lang.Throwable)-hasParameter-lombok.Lombok.sneakyThrow0(java.lang.Throwable).0", "source": "lombok.Lombok.sneakyThrow0(java.lang.Throwable)", "target": "lombok.Lombok.sneakyThrow0(java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-hasParameter-lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).0", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).1", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).2", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)-hasParameter-lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker)", "target": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "source": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)-hasParameter-lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int)", "target": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])-hasParameter-lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "source": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[])", "target": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).1", "source": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).1", "source": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "source": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)-hasParameter-lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List)", "target": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).1", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)-hasParameter-lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).0", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getNodeFor(java.lang.Object)-hasParameter-lombok.core.AST$Node.getNodeFor(java.lang.Object).0", "source": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "target": "lombok.core.AST$Node.getNodeFor(java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)-hasParameter-lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST).0", "source": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST)", "target": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])-hasParameter-lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "source": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[])", "target": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)-hasParameter-lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "source": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "source": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)-hasParameter-lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).0", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-hasParameter-lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).4", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).4", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)-hasParameter-lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "source": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "source": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)-hasParameter-lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-hasParameter-lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).0", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)-hasParameter-lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).2", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable)", "target": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).2", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-hasParameter-lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "source": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)-hasParameter-lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).0", "source": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable)", "target": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)-hasParameter-lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).0", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode.longToIntForHashCode(com.sun.tools.javac.tree.TreeMaker,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)-hasParameter-lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)-hasParameter-lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).1", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection)", "target": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-hasParameter-lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-hasParameter-lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)-hasParameter-lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).1", "source": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "target": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)-hasParameter-lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).1", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int)", "target": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-hasParameter-lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "source": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)-hasParameter-lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).0", "source": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object)", "target": "lombok.javac.JavacAST.replaceInConsList(java.util.List,java.lang.Object,java.lang.Object).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean)-hasParameter-lombok.javac.JavacASTVisitor$Printer(boolean).0", "source": "lombok.javac.JavacASTVisitor$Printer(boolean)", "target": "lombok.javac.JavacASTVisitor$Printer(boolean).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "source": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-hasParameter-lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)-hasParameter-lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).1", "source": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class)", "target": "lombok.core.SpiLoadUtil.findAnnotationClass(java.lang.Class,java.lang.Class).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-hasParameter-lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).5", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).5", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-hasParameter-lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-hasParameter-lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])-hasParameter-lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[]).0", "source": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "target": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[]).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)-hasParameter-lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "source": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-hasParameter-lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-hasParameter-lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "source": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-hasParameter-lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).1", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).1", "label": "hasParameter", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).1-type-boolean", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).5-type-boolean", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).5", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleSetter.generateSetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).2-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.FIELD-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.FIELD", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.printContent-type-boolean", "source": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0-type-long", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS.WINDOWS-type-lombok.installer.EclipseFinder$OS", "source": "lombok.installer.EclipseFinder$OS.WINDOWS", "target": "lombok.installer.EclipseFinder$OS", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).1-type-java.lang.String", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String).0-type-java.lang.String", "source": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).0-type-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class).0", "target": "lombok.javac.JavacAnnotationHandler", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.Cleanup", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.Cleanup", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstallButton-type-lombok.installer.Installer$JHyperLink", "source": "lombok.installer.Installer.uninstallButton", "target": "lombok.installer.Installer$JHyperLink", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel).0-type-lombok.AccessLevel", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel).0", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4-type-boolean", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).1-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.uninstall(java.util.List).0-type-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer.uninstall(java.util.List).0", "target": "lombok.installer.EclipseLocation", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).0-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3-type-boolean", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.JAVAC_EXAMPLE-type-java.lang.String", "source": "lombok.installer.Installer.JAVAC_EXAMPLE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).0-type-lombok.javac.JavacASTVisitor", "source": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).0", "target": "lombok.javac.JavacASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.PRIVATE-type-lombok.AccessLevel", "source": "lombok.AccessLevel.PRIVATE", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.Synchronized", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.Synchronized", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.Cleanup", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.Cleanup", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).0-type-boolean", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.METHOD-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.METHOD", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.ToString", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.ToString", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.addIfNotNull(java.util.Collection,lombok.javac.JavacAST$Node).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.indent-type-int", "source": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.imports-type-java.lang.String", "source": "lombok.core.TypeResolver.imports", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.VERSION-type-java.lang.String", "source": "lombok.core.Version.VERSION", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.INITIALIZER-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.INITIALIZER", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).4-type-boolean", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).0-type-java.lang.String", "source": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.sourceStart-type-int", "source": "lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).2-type-char", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).2", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.SneakyThrows", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.SneakyThrows", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.skipPrintAST-type-boolean", "source": "lombok.eclipse.HandlerLibrary.skipPrintAST", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AST(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.COMPILATION_UNIT-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.COMPILATION_UNIT", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.toFQ(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.eclipsesList-type-lombok.installer.Installer$EclipsesList", "source": "lombok.installer.Installer.eclipsesList", "target": "lombok.installer.Installer$EclipsesList", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).1-type-lombok.core.AST$Kind", "source": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind).1", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.handled-type-boolean", "source": "lombok.core.AST$Node.handled", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.isWarning-type-boolean", "source": "lombok.eclipse.EclipseAST$ParseProblem.isWarning", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0-type-boolean", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.typeLibrary-type-lombok.core.TypeLibrary", "source": "lombok.eclipse.HandlerLibrary.typeLibrary", "target": "lombok.core.TypeLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.completeParse-type-boolean", "source": "lombok.eclipse.EclipseAST.completeParse", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).0-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST).0-type-lombok.eclipse.EclipseAST", "source": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST).0", "target": "lombok.eclipse.EclipseAST", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).1-type-int", "source": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).0-type-java.lang.String", "source": "lombok.core.SpiLoadUtil.readServicesFromUrl(java.util.Collection,java.net.URL).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor).0-type-lombok.javac.JavacASTVisitor", "source": "lombok.javac.JavacAST.traverse(lombok.javac.JavacASTVisitor).0", "target": "lombok.javac.JavacASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.kind-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Node.kind", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting-type-int", "source": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).2-type-java.lang.String", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.toName(java.lang.String).0-type-java.lang.String", "source": "lombok.javac.JavacAST.toName(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0-type-lombok.AccessLevel", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.indent-type-int", "source": "lombok.javac.JavacASTVisitor$Printer.indent", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map).0-type-lombok.core.AST$Node", "source": "lombok.core.AST$Node.gatherAndRemoveChildren(java.util.Map).0", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.ast-type-lombok.core.AST$Node", "source": "lombok.core.AnnotationValues.ast", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).3-type-int", "source": "lombok.core.AST.buildWithCollection(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).0-type-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class).0", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.Data", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.Data", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[]).0-type-char", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0-type-java.lang.String", "source": "lombok.javac.JavacASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).1-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind).1", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-boolean", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).1-type-java.lang.String", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.Throwable).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][]).0-type-char", "source": "lombok.eclipse.handlers.HandleToString.generateQualifiedNameRef(char[][]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.EqualsAndHashCode", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.EqualsAndHashCode", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).1-type-int", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).0-type-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method).0", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).1-type-int", "source": "lombok.javac.handlers.PKG.addAllButOne(com.sun.tools.javac.util.List,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).0-type-boolean", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.toUninstall-type-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer.toUninstall", "target": "lombok.installer.EclipseLocation", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).2-type-char", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).2", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.annotationHandlers-type-java.lang.String", "source": "lombok.javac.HandlerLibrary.annotationHandlers", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).0-type-java.lang.String", "source": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.injectMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary).0-type-lombok.javac.HandlerLibrary", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary).0", "target": "lombok.javac.HandlerLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4-type-boolean", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).1-type-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.returnBool(com.sun.tools.javac.tree.TreeMaker,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2-type-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String).0-type-java.lang.String", "source": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[]).0-type-char", "source": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME-type-char", "source": "lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection).0-type-java.lang.String", "source": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).4-type-int", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).4", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.queuedProblems-type-lombok.eclipse.EclipseAST$ParseProblem", "source": "lombok.eclipse.EclipseAST.queuedProblems", "target": "lombok.eclipse.EclipseAST$ParseProblem", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).0-type-lombok.core.AST$FieldAccess", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object).0", "target": "lombok.core.AST$FieldAccess", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.injectField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).2-type-int", "source": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).1-type-java.lang.String", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.ARGUMENT-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.ARGUMENT", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).1-type-java.lang.String", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0-type-lombok.AccessLevel", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).0", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).3-type-boolean", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary).0-type-lombok.eclipse.HandlerLibrary", "source": "lombok.eclipse.HandlerLibrary.loadVisitorHandlers(lombok.eclipse.HandlerLibrary).0", "target": "lombok.eclipse.HandlerLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).1-type-java.lang.String", "source": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.selectedLomboksChanged(java.util.List).0-type-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer.selectedLomboksChanged(java.util.List).0", "target": "lombok.installer.EclipseLocation", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER-type-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).0-type-char", "source": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0-type-lombok.AccessLevel", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).0-type-boolean", "source": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.disablePrinting-type-int", "source": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).2-type-int", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).2-type-int", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.Getter", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.Getter", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.Data", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.Data", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).0-type-char", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][]).0-type-char", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateQualifiedNameRef(char[][]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler-type-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "target": "lombok.javac.JavacAnnotationHandler", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.ast-type-lombok.eclipse.EclipseAST", "source": "lombok.eclipse.TransformEclipseAST.ast", "target": "lombok.eclipse.EclipseAST", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST).0-type-lombok.javac.JavacAST", "source": "lombok.javac.HandlerLibrary.callASTVisitors(lombok.javac.JavacAST).0", "target": "lombok.javac.JavacAST", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).2-type-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List).2", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String).0-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.values-type-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues.values", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).1-type-int", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException.serialVersionUID-type-long", "source": "lombok.installer.EclipseLocation$UninstallException.serialVersionUID", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node).0-type-lombok.core.AST$Node", "source": "lombok.core.AST$Node.removeChild(lombok.core.AST$Node).0", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).3-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).3", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[]).0-type-java.lang.String", "source": "lombok.installer.Installer.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleGetter.createGetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3-type-boolean", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).2-type-int", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).1-type-java.lang.String", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).1-type-java.lang.String", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1-type-lombok.ToString", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.ToString", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.ANNOTATION-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.ANNOTATION", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.PrintAST", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.PrintAST", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.UNINSTALL_TITLE-type-java.lang.String", "source": "lombok.installer.Installer.UNINSTALL_TITLE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.toSimpleName(java.lang.String).0-type-java.lang.String", "source": "lombok.core.TypeResolver.toSimpleName(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3-type-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.PrintAST", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.PrintAST", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK-type-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).2-type-lombok.core.AST$Kind", "source": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).2", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.MODULE-type-lombok.AccessLevel", "source": "lombok.AccessLevel.MODULE", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).5-type-int", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).5", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.DEFAULT_BUNDLE-type-java.lang.String", "source": "lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER-type-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.printContent-type-boolean", "source": "lombok.javac.JavacASTVisitor$Printer.printContent", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1-type-java.lang.String", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).1-type-java.lang.String", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpression(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.getRawExpression(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).0-type-java.lang.String", "source": "lombok.javac.HandlerLibrary.javacWarning(java.lang.String,java.lang.Throwable).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2-type-boolean", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).0-type-lombok.core.AST$Node", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object).0", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).2-type-java.lang.String", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.SneakyThrows", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.SneakyThrows", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String).0-type-java.lang.String", "source": "lombok.installer.EclipseLocation(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).0-type-java.lang.String", "source": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0-type-java.lang.String", "source": "lombok.javac.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).1-type-java.lang.String", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.install(java.util.List).0-type-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer.install(java.util.List).0", "target": "lombok.installer.EclipseLocation", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.annotationHandlers-type-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.eclipse.HandlerLibrary.annotationHandlers", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.PACKAGE-type-lombok.AccessLevel", "source": "lombok.AccessLevel.PACKAGE", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateEqualsAndHashCodeForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.JAVAC_EXPLANATION-type-java.lang.String", "source": "lombok.installer.Installer.JAVAC_EXPLANATION", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).2-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind).2", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleGetter.generateGetterForField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).2-type-lombok.core.AST$Kind", "source": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).2", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).4-type-boolean", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.EqualsAndHashCode", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.EqualsAndHashCode", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST).0-type-lombok.eclipse.EclipseAST", "source": "lombok.eclipse.HandlerLibrary.callASTVisitors(lombok.eclipse.EclipseAST).0", "target": "lombok.eclipse.EclipseAST", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).1-type-int", "source": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).2-type-java.lang.String", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0-type-java.lang.String", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String).0-type-java.lang.String", "source": "lombok.javac.HandlerLibrary.javacError(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleGetter.generateGetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.TYPE-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.TYPE", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).8-type-int", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).8", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.parent-type-lombok.core.AST$Node", "source": "lombok.core.AST$Node.parent", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).1-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).0-type-char", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).2-type-int", "source": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).4-type-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fileName-type-java.lang.String", "source": "lombok.core.AST.fileName", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.simpleToQualifiedMap-type-java.lang.String", "source": "lombok.core.TypeLibrary.simpleToQualifiedMap", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION-type-java.lang.String", "source": "lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0-type-java.lang.String", "source": "lombok.javac.JavacAST$Node.addError(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.visitorHandlers-type-lombok.javac.JavacASTVisitor", "source": "lombok.javac.HandlerLibrary.visitorHandlers", "target": "lombok.javac.JavacASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.annotationHandlers-type-lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.javac.HandlerLibrary.annotationHandlers", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).2-type-int", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).1-type-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "source": "lombok.eclipse.handlers.HandleSneakyThrows.buildTryCatchBlock(org.eclipse.jdt.internal.compiler.ast.Statement[],lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException).1", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS.UNIX-type-lombok.installer.EclipseFinder$OS", "source": "lombok.installer.EclipseFinder$OS.UNIX", "target": "lombok.installer.EclipseFinder$OS", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).3-type-int", "source": "lombok.core.AST.buildWithArray(java.lang.Class,java.lang.Object,java.util.Collection,int).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG-type-int", "source": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel).0-type-lombok.AccessLevel", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel).0", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.Setter", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.Setter", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitType(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCClassDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.library-type-lombok.core.TypeLibrary", "source": "lombok.core.TypeResolver.library", "target": "lombok.core.TypeLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).0-type-java.lang.String", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).2-type-java.lang.String", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).4-type-int", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).4", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).2-type-int", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleToString.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.JAVAC_TITLE-type-java.lang.String", "source": "lombok.installer.Installer.JAVAC_TITLE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addError(java.lang.String).0-type-java.lang.String", "source": "lombok.javac.JavacAST$Node.addError(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).1-type-boolean", "source": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor).0-type-lombok.eclipse.EclipseASTVisitor", "source": "lombok.eclipse.EclipseAST$Node.traverse(lombok.eclipse.EclipseASTVisitor).0", "target": "lombok.eclipse.EclipseASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.Synchronized", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.Synchronized", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck0(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree,com.sun.tools.javac.util.Name).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.toName(java.lang.String).0-type-java.lang.String", "source": "lombok.javac.JavacAST$Node.toName(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2-type-boolean", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).3-type-boolean", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitStatement(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).1-type-lombok.core.AST$Kind", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind).1", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).3-type-int", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.traverseChildren(lombok.javac.JavacASTVisitor,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2-type-java.lang.String", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0-type-java.lang.String", "source": "lombok.javac.JavacAST$Node.addWarning(java.lang.String,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.main(java.lang.String[]).0-type-java.lang.String", "source": "lombok.installer.WindowsDriveInfo.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createEquals(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.visitorHandlers-type-lombok.eclipse.EclipseASTVisitor", "source": "lombok.eclipse.HandlerLibrary.visitorHandlers", "target": "lombok.eclipse.EclipseASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2-type-boolean", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).2-type-lombok.core.AST$FieldAccess", "source": "lombok.core.AST.buildWithField(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess).2", "target": "lombok.core.AST$FieldAccess", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean).0-type-boolean", "source": "lombok.javac.JavacASTVisitor$Printer(boolean).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).7-type-int", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).7", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement[],char[]).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation).0-type-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer$EclipsesList.addEclipse(lombok.installer.EclipseLocation).0", "target": "lombok.installer.EclipseLocation", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.generateToStringForType(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1-type-java.lang.String", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1-type-lombok.EqualsAndHashCode", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.javac.JavacAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.EqualsAndHashCode", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0-type-java.lang.String", "source": "lombok.javac.JavacASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.handlers-type-lombok.eclipse.HandlerLibrary", "source": "lombok.eclipse.TransformEclipseAST.handlers", "target": "lombok.eclipse.HandlerLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.values-type-java.lang.String", "source": "lombok.core.AnnotationValues.values", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.findCompatible(java.lang.String).0-type-java.lang.String", "source": "lombok.core.TypeLibrary.findCompatible(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.toQualifiedName(char[][]).0-type-char", "source": "lombok.eclipse.Eclipse.toQualifiedName(char[][]).0", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isStructurallySignificant-type-boolean", "source": "lombok.core.AST$Node.isStructurallySignificant", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.main(java.lang.String[]).0-type-java.lang.String", "source": "lombok.core.Version.main(java.lang.String[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.sourceEnd-type-int", "source": "lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).2-type-java.lang.String", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean).0-type-boolean", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean).0", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).0-type-java.lang.String", "source": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).1-type-java.lang.String", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).2-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethodArgument(com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.PKG.injectMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.addWarning(java.lang.String).0-type-java.lang.String", "source": "lombok.javac.JavacAST$Node.addWarning(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).2-type-java.lang.String", "source": "lombok.eclipse.Eclipse.error(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,java.lang.String,java.lang.String,java.lang.Throwable).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1-type-lombok.EqualsAndHashCode", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.EqualsAndHashCode", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0-type-java.lang.String", "source": "lombok.eclipse.EclipseASTVisitor$Printer.forcePrint(java.lang.String,java.lang.Object[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2-type-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.createHashCode(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS.MAC_OS_X-type-lombok.installer.EclipseFinder$OS", "source": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "target": "lombok.installer.EclipseFinder$OS", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).0-type-java.lang.String", "source": "lombok.core.AnnotationValues$AnnotationValue.setWarning(java.lang.String,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).1-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind).1", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1-type-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).1", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.addWarning(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AST$Node.addWarning(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.selected-type-boolean", "source": "lombok.installer.EclipseLocation.selected", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.Getter", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.Getter", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).3-type-boolean", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean).3", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink(java.lang.String).0-type-java.lang.String", "source": "lombok.installer.Installer$JHyperLink(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).2-type-java.lang.String", "source": "lombok.javac.handlers.PKG.chainDots(com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,java.lang.String[]).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).0-type-java.lang.String", "source": "lombok.javac.HandlerLibrary.javacError(java.lang.String,java.lang.Throwable).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).3-type-int", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.generateToStringForType(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).4-type-int", "source": "lombok.core.AST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,java.lang.Object).4", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).1-type-char", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(char[],char[],char[]).1", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.LOCAL-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.LOCAL", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).1-type-java.lang.String", "source": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).2-type-lombok.core.AST$FieldAccess", "source": "lombok.core.AST.buildWithField0(java.lang.Class,java.lang.Object,lombok.core.AST$FieldAccess,java.util.Collection).2", "target": "lombok.core.AST$FieldAccess", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).0-type-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).0", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).0-type-lombok.core.AST$Node", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).0", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitCompilationUnit(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3-type-int", "source": "lombok.eclipse.handlers.HandleSetter.generateSetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String).0-type-java.lang.String", "source": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitType(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).0-type-java.lang.String", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4-type-boolean", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.PUBLIC-type-lombok.AccessLevel", "source": "lombok.AccessLevel.PUBLIC", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).2-type-lombok.core.AST$Node", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node).2", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel.PROTECTED-type-lombok.AccessLevel", "source": "lombok.AccessLevel.PROTECTED", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hasLombok-type-boolean", "source": "lombok.installer.EclipseLocation.hasLombok", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1-type-lombok.core.AnnotationValues", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).1-type-boolean", "source": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean).1", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.tryClass(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.tryClass(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).6-type-int", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int).6", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess.dim-type-int", "source": "lombok.core.AST$FieldAccess.dim", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitAnnotationOnLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException.serialVersionUID-type-long", "source": "lombok.installer.EclipseLocation$NotAnEclipseException.serialVersionUID", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).1-type-lombok.core.AST$Kind", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind).1", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary).0-type-lombok.javac.HandlerLibrary", "source": "lombok.javac.HandlerLibrary.loadVisitorHandlers(lombok.javac.HandlerLibrary).0", "target": "lombok.javac.HandlerLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleToString.createToString(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).0-type-java.lang.String", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.handlers-type-lombok.javac.HandlerLibrary", "source": "lombok.javac.apt.Processor.handlers", "target": "lombok.javac.HandlerLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES-type-java.lang.String", "source": "lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler-type-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.top-type-lombok.core.AST$Node", "source": "lombok.core.AST.top", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind.STATEMENT-type-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind.STATEMENT", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.annotationHandlers-type-java.lang.String", "source": "lombok.eclipse.HandlerLibrary.annotationHandlers", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor).0-type-lombok.javac.JavacASTVisitor", "source": "lombok.javac.JavacAST$Node.traverse(lombok.javac.JavacASTVisitor).0", "target": "lombok.javac.JavacASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.ToString", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.ToString", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.node-type-lombok.core.AST$Node", "source": "lombok.core.AnnotationValues$AnnotationValue.node", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).2-type-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int).2", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0-type-java.lang.String", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.addIfNotNull(java.util.Collection,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleData.createStaticConstructor(java.lang.String,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.UNINSTALL_EXPLANATION-type-java.lang.String", "source": "lombok.installer.Installer.UNINSTALL_EXPLANATION", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).0-type-lombok.core.TypeLibrary", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).0", "target": "lombok.core.TypeLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitLocal(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.LocalDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).3-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).3", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.skipPrintAST-type-boolean", "source": "lombok.javac.HandlerLibrary.skipPrintAST", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.HOW_I_WORK_EXPLANATION-type-java.lang.String", "source": "lombok.installer.Installer.HOW_I_WORK_EXPLANATION", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).5-type-boolean", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean).5", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).1-type-java.lang.String", "source": "lombok.core.AnnotationValues.setWarning(java.lang.String,java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).0-type-lombok.core.AST$Node", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List).0", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).1-type-int", "source": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0-type-long", "source": "lombok.javac.handlers.HandleSetter.createSetter(long,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.TreeMaker).0", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).1-type-lombok.core.AST$Kind", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind).1", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor).0-type-lombok.eclipse.EclipseASTVisitor", "source": "lombok.eclipse.EclipseAST.traverse(lombok.eclipse.EclipseASTVisitor).0", "target": "lombok.eclipse.EclipseASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitLocal(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleData.createConstructor(boolean,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).1-type-lombok.eclipse.EclipseAST", "source": "lombok.eclipse.TransformEclipseAST.setCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST).1", "target": "lombok.eclipse.EclipseAST", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).1-type-int", "source": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).1-type-lombok.core.AST$Kind", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind).1", "target": "lombok.core.AST$Kind", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).4-type-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateCompareFloatOrDouble(com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.JCTree.JCExpression,com.sun.tools.javac.tree.TreeMaker,lombok.javac.JavacAST$Node,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK-type-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary).0-type-lombok.eclipse.HandlerLibrary", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary).0", "target": "lombok.eclipse.HandlerLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME-type-char", "source": "lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3-type-int", "source": "lombok.eclipse.handlers.HandleGetter.generateGetter(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,java.lang.String,int,org.eclipse.jdt.internal.compiler.ast.ASTNode).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethodArgument(org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.endVisitField(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.FieldDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.serialVersionUID-type-long", "source": "lombok.installer.Installer$EclipsesList.serialVersionUID", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.typeLibrary-type-lombok.core.TypeLibrary", "source": "lombok.javac.HandlerLibrary.typeLibrary", "target": "lombok.core.TypeLibrary", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).1-type-lombok.core.AST$FieldAccess", "source": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection).1", "target": "lombok.core.AST$FieldAccess", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner-type-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitAnnotationOnLocal(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.ECLIPSE_TITLE-type-java.lang.String", "source": "lombok.installer.Installer.ECLIPSE_TITLE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME-type-java.lang.String", "source": "lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).3-type-int", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int).3", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).2-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.printMessage(javax.tools.Diagnostic$Kind,java.lang.String,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).2", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitInitializer(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCBlock).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES-type-java.lang.String", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.endVisitMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.OS_NEWLINE-type-java.lang.String", "source": "lombok.installer.EclipseLocation.OS_NEWLINE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).2-type-int", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).1-type-java.lang.String", "source": "lombok.core.AnnotationValues.setError(java.lang.String,java.lang.String,int).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException.serialVersionUID-type-long", "source": "lombok.installer.EclipseLocation$InstallException.serialVersionUID", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor$Printer.visitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.locations-type-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer$EclipsesList.locations", "target": "lombok.installer.EclipseLocation", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setTop(lombok.core.AST$Node).0-type-lombok.core.AST$Node", "source": "lombok.core.AST.setTop(lombok.core.AST$Node).0", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).0-type-java.lang.String", "source": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME-type-java.lang.String", "source": "lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).2", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1-type-lombok.ToString", "source": "lombok.eclipse.handlers.HandleToString.checkForBogusExcludes(lombok.eclipse.EclipseAST$Node,lombok.core.AnnotationValues).1", "target": "lombok.ToString", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4-type-boolean", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0-type-lombok.AccessLevel", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean).0", "target": "lombok.AccessLevel", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).1-type-java.lang.String", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.endVisitCompilationUnit(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCCompilationUnit).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).4-type-int", "source": "lombok.javac.JavacAST.setElementInASTCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,int,com.sun.tools.javac.tree.JCTree).4", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).4-type-boolean", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean).4", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink.serialVersionUID-type-long", "source": "lombok.installer.Installer$JHyperLink.serialVersionUID", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.raws-type-java.lang.String", "source": "lombok.core.AnnotationValues$AnnotationValue.raws", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS-type-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).2-type-char", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).2", "target": "char", "label": "type", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleCleanup.doAssignmentCheck(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,com.sun.tools.javac.util.Name).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0-type-lombok.core.AnnotationValues", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node).0", "target": "lombok.core.AnnotationValues", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS-type-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor.visitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTAdapter.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.nodeMap-type-lombok.core.AST$Node", "source": "lombok.core.AST.nodeMap", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String).0-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).0-type-lombok.eclipse.EclipseASTVisitor", "source": "lombok.eclipse.EclipseAST.traverseChildren(lombok.eclipse.EclipseASTVisitor,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.eclipse.EclipseASTVisitor", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.disableLombok-type-boolean", "source": "lombok.eclipse.TransformEclipseAST.disableLombok", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.HandleCleanup.doAssignmentCheck0(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Statement,char[]).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addType(java.lang.String).0-type-java.lang.String", "source": "lombok.core.TypeLibrary.addType(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitMethodArgument(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Argument,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.addError(java.lang.String).0-type-java.lang.String", "source": "lombok.core.AST$Node.addError(java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2-type-boolean", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode).2", "target": "boolean", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.ECLIPSE_EXPLANATION-type-java.lang.String", "source": "lombok.installer.Installer.ECLIPSE_EXPLANATION", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx-type-int", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.PKG.injectField(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem).0-type-lombok.eclipse.EclipseAST$ParseProblem", "source": "lombok.eclipse.EclipseAST.addProblem(lombok.eclipse.EclipseAST$ParseProblem).0", "target": "lombok.eclipse.EclipseAST$ParseProblem", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0-type-lombok.Setter", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node).0", "target": "lombok.Setter", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).0-type-lombok.core.AST$Node", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String).0", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).0-type-java.lang.String", "source": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).1-type-int", "source": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int).1", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).1-type-java.lang.String", "source": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String).1", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.HOW_I_WORK_TITLE-type-java.lang.String", "source": "lombok.installer.Installer.HOW_I_WORK_TITLE", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).2-type-int", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int).2", "target": "int", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).0-type-java.lang.String", "source": "lombok.core.AnnotationValues$AnnotationValue.setError(java.lang.String,int).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).2-type-java.lang.String", "source": "lombok.javac.handlers.HandleSneakyThrows.buildTryCatchBlock(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,java.lang.String).2", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.handlers.HandleSetter.generateSetterForField(lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem.message-type-java.lang.String", "source": "lombok.eclipse.EclipseAST$ParseProblem.message", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0-type-java.lang.String", "source": "lombok.eclipse.EclipseASTVisitor$Printer.print(java.lang.String,java.lang.Object[]).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).0-type-java.lang.String", "source": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable).0", "target": "java.lang.String", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTVisitor$Printer.visitAnnotationOnType(com.sun.tools.javac.tree.JCTree.JCClassDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseASTVisitor.endVisitInitializer(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Initializer).0", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.serialVersionUID-type-long", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.serialVersionUID", "target": "long", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1-type-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor.visitAnnotationOnMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation).1", "target": "lombok.eclipse.EclipseAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.endVisitStatement(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.apt.Processor$AnnotationVisitor.visitAnnotationOnField(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation).1", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0-type-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacASTAdapter.visitMethodArgument(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCVariableDecl,com.sun.tools.javac.tree.JCTree.JCMethodDecl).0", "target": "lombok.javac.JavacAST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).1-type-lombok.core.AST$Node", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node).1", "target": "lombok.core.AST$Node", "label": "type", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer-hasVariable-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasVariable-lombok.core.AST.identityDetector", "source": "lombok.core.AST", "target": "lombok.core.AST.identityDetector", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess-hasVariable-lombok.core.AST$FieldAccess.dim", "source": "lombok.core.AST$FieldAccess", "target": "lombok.core.AST$FieldAccess.dim", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink-hasVariable-lombok.installer.Installer$JHyperLink.serialVersionUID", "source": "lombok.installer.Installer$JHyperLink", "target": "lombok.installer.Installer$JHyperLink.serialVersionUID", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.FIELD", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.FIELD", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.METHOD", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.METHOD", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized-hasVariable-lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "source": "lombok.eclipse.handlers.HandleSynchronized", "target": "lombok.eclipse.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.LOCAL", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.LOCAL", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasVariable-lombok.eclipse.EclipseAST.queuedProblems", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.queuedProblems", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasVariable-lombok.installer.EclipseLocation.path", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.path", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasVariable-lombok.core.AST$Node.isStructurallySignificant", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.isStructurallySignificant", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult-hasVariable-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.ANNOTATION", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.ANNOTATION", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary-hasVariable-lombok.core.TypeLibrary.simpleToQualifiedMap", "source": "lombok.core.TypeLibrary", "target": "lombok.core.TypeLibrary.simpleToQualifiedMap", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult-hasVariable-lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasVariable-lombok.core.AST$Node.children", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.children", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasVariable-lombok.javac.JavacAST.symtab", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.symtab", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.eclipseArea", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.eclipseArea", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasVariable-lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasVariable-lombok.javac.JavacAST.messager", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.messager", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.installButton", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.installButton", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasVariable-lombok.eclipse.EclipseAST.completeParse", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.completeParse", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasVariable-lombok.javac.JavacASTVisitor$Printer.disablePrinting", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.disablePrinting", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-hasVariable-lombok.installer.EclipseFinder.windowsDriveInfoLibLoaded", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder.windowsDriveInfoLibLoaded", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasVariable-lombok.javac.HandlerLibrary.annotationHandlers", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.annotationHandlers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasVariable-lombok.eclipse.TransformEclipseAST.handlers", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.handlers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail-hasVariable-lombok.core.AnnotationValues$AnnotationValueDecodeFail.serialVersionUID", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.serialVersionUID", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException-hasVariable-lombok.installer.EclipseLocation$InstallException.serialVersionUID", "source": "lombok.installer.EclipseLocation$InstallException", "target": "lombok.installer.EclipseLocation$InstallException.serialVersionUID", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel-hasVariable-lombok.AccessLevel.PUBLIC", "source": "lombok.AccessLevel", "target": "lombok.AccessLevel.PUBLIC", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse-hasVariable-lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "source": "lombok.eclipse.Eclipse", "target": "lombok.eclipse.Eclipse.DEFAULT_BUNDLE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasVariable-lombok.javac.HandlerLibrary.typeLibrary", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.typeLibrary", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasVariable-lombok.core.AST.fileName", "source": "lombok.core.AST", "target": "lombok.core.AST.fileName", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.uninstallArea", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.uninstallArea", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.javacArea", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.javacArea", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS-hasVariable-lombok.installer.EclipseFinder$OS.MAC_OS_X", "source": "lombok.installer.EclipseFinder$OS", "target": "lombok.installer.EclipseFinder$OS.MAC_OS_X", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem-hasVariable-lombok.eclipse.EclipseAST$ParseProblem.message", "source": "lombok.eclipse.EclipseAST$ParseProblem", "target": "lombok.eclipse.EclipseAST$ParseProblem.message", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem-hasVariable-lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "source": "lombok.eclipse.EclipseAST$ParseProblem", "target": "lombok.eclipse.EclipseAST$ParseProblem.sourceStart", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasVariable-lombok.core.AnnotationValues$AnnotationValue.raws", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue.raws", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasVariable-lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue.valueGuesses", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer-hasVariable-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasVariable-lombok.installer.Installer$EclipsesList.locations", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.locations", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel-hasVariable-lombok.AccessLevel.PACKAGE", "source": "lombok.AccessLevel", "target": "lombok.AccessLevel.PACKAGE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasVariable-lombok.eclipse.HandlerLibrary.annotationHandlers", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.annotationHandlers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.ECLIPSE_LOADING_EXPLANATION", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasVariable-lombok.eclipse.EclipseASTVisitor$Printer.out", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.out", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasVariable-lombok.core.AST$Node.parent", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.parent", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasVariable-lombok.core.TypeResolver.library", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver.library", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-hasVariable-lombok.javac.apt.Processor.handlers", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor.handlers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult-hasVariable-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "source": "lombok.javac.handlers.PKG$MemberExistsResult", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_LOMBOK", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasVariable-lombok.installer.EclipseLocation.hasLombok", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.hasLombok", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasVariable-lombok.core.AST.fieldsOfASTClasses", "source": "lombok.core.AST", "target": "lombok.core.AST.fieldsOfASTClasses", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer-hasVariable-lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handler", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.ARGUMENT", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.ARGUMENT", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS-hasVariable-lombok.installer.EclipseFinder$OS.UNIX", "source": "lombok.installer.EclipseFinder$OS", "target": "lombok.installer.EclipseFinder$OS.UNIX", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasVariable-lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.BOOTCLASSPATH_LINE_MATCHER", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil-hasVariable-lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "source": "lombok.core.TransformationsUtil", "target": "lombok.core.TransformationsUtil.KNOWN_BOOLEAN_PREFIXES", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail-hasVariable-lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.owner", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasVariable-lombok.core.AST$Node.handled", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.handled", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasVariable-lombok.eclipse.TransformEclipseAST.ast", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.ast", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException-hasVariable-lombok.installer.EclipseLocation$UninstallException.serialVersionUID", "source": "lombok.installer.EclipseLocation$UninstallException", "target": "lombok.installer.EclipseLocation$UninstallException.serialVersionUID", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.ECLIPSE_EXPLANATION", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.ECLIPSE_EXPLANATION", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasVariable-lombok.core.AnnotationValues.type", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.type", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasVariable-lombok.eclipse.HandlerLibrary.typeLibrary", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.typeLibrary", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasVariable-lombok.javac.JavacAST.nameTable", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.nameTable", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException-hasVariable-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.node", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version-hasVariable-lombok.core.Version.VERSION", "source": "lombok.core.Version", "target": "lombok.core.Version.VERSION", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.ABOUT_LOMBOK_URL", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.ABOUT_LOMBOK_URL", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail-hasVariable-lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail.idx", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.HOW_I_WORK_EXPLANATION", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.HOW_I_WORK_EXPLANATION", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.ECLIPSE_TITLE", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.ECLIPSE_TITLE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS-hasVariable-lombok.installer.EclipseFinder$OS.WINDOWS", "source": "lombok.installer.EclipseFinder$OS", "target": "lombok.installer.EclipseFinder$OS.WINDOWS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue-hasVariable-lombok.core.AnnotationValues$AnnotationValue.node", "source": "lombok.core.AnnotationValues$AnnotationValue", "target": "lombok.core.AnnotationValues$AnnotationValue.node", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasVariable-lombok.javac.HandlerLibrary.messager", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.messager", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasVariable-lombok.javac.JavacASTVisitor$Printer.indent", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.indent", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.loadingExpl", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.loadingExpl", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasVariable-lombok.core.AnnotationValues.cachedInstance", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.cachedInstance", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException-hasVariable-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.exceptionName", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult-hasVariable-lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-hasVariable-lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.handlers.HandleToString.BUILT_IN_TYPES", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasVariable-lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.disablePrinting", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver-hasVariable-lombok.core.TypeResolver.imports", "source": "lombok.core.TypeResolver", "target": "lombok.core.TypeResolver.imports", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized-hasVariable-lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME", "source": "lombok.javac.handlers.HandleSynchronized", "target": "lombok.javac.handlers.HandleSynchronized.STATIC_LOCK_NAME", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasVariable-lombok.javac.HandlerLibrary.skipPrintAST", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.skipPrintAST", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasVariable-lombok.eclipse.EclipseASTVisitor$Printer.printContent", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.printContent", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasVariable-lombok.core.AST.top", "source": "lombok.core.AST", "target": "lombok.core.AST.top", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.UNINSTALL_EXPLANATION", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.UNINSTALL_EXPLANATION", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasVariable-lombok.installer.EclipseLocation.selected", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.selected", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized-hasVariable-lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "source": "lombok.javac.handlers.HandleSynchronized", "target": "lombok.javac.handlers.HandleSynchronized.INSTANCE_LOCK_NAME", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.JAVAC_EXPLANATION", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.JAVAC_EXPLANATION", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-hasVariable-lombok.javac.HandlerLibrary.visitorHandlers", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary.visitorHandlers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList-hasVariable-lombok.installer.Installer$EclipsesList.serialVersionUID", "source": "lombok.installer.Installer$EclipsesList", "target": "lombok.installer.Installer$EclipsesList.serialVersionUID", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasVariable-lombok.javac.JavacAST.treeMaker", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.treeMaker", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel-hasVariable-lombok.AccessLevel.MODULE", "source": "lombok.AccessLevel", "target": "lombok.AccessLevel.MODULE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.TYPE", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.TYPE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-hasVariable-lombok.javac.apt.Processor.trees", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor.trees", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem-hasVariable-lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "source": "lombok.eclipse.EclipseAST$ParseProblem", "target": "lombok.eclipse.EclipseAST$ParseProblem.sourceEnd", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-hasVariable-lombok.javac.JavacAST.log", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST.log", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.toUninstall", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.toUninstall", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer-hasVariable-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.annotationClass", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem-hasVariable-lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID", "source": "lombok.eclipse.EclipseAST$LombokProblem", "target": "lombok.eclipse.EclipseAST$LombokProblem.MARKER_ID", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.eclipsesList", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.eclipsesList", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem-hasVariable-lombok.eclipse.EclipseAST$ParseProblem.isWarning", "source": "lombok.eclipse.EclipseAST$ParseProblem", "target": "lombok.eclipse.EclipseAST$ParseProblem.isWarning", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel-hasVariable-lombok.AccessLevel.PROTECTED", "source": "lombok.AccessLevel", "target": "lombok.AccessLevel.PROTECTED", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException-hasVariable-lombok.installer.EclipseLocation$NotAnEclipseException.serialVersionUID", "source": "lombok.installer.EclipseLocation$NotAnEclipseException", "target": "lombok.installer.EclipseLocation$NotAnEclipseException.serialVersionUID", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.howIWorkArea", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.howIWorkArea", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess-hasVariable-lombok.core.AST$FieldAccess.field", "source": "lombok.core.AST$FieldAccess", "target": "lombok.core.AST$FieldAccess.field", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasVariable-lombok.javac.JavacASTVisitor$Printer.printContent", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.printContent", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasVariable-lombok.core.AST$Node.kind", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.kind", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.appWindow", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.appWindow", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.HOW_I_WORK_TITLE", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.HOW_I_WORK_TITLE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.uninstallBox", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.uninstallBox", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-hasVariable-lombok.eclipse.EclipseASTVisitor$Printer.indent", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor$Printer.indent", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasVariable-lombok.eclipse.HandlerLibrary.skipPrintAST", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.skipPrintAST", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel-hasVariable-lombok.AccessLevel.PRIVATE", "source": "lombok.AccessLevel", "target": "lombok.AccessLevel.PRIVATE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasVariable-lombok.installer.EclipseLocation.OS_NEWLINE", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.OS_NEWLINE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-hasVariable-lombok.eclipse.EclipseAST.compilationUnitDeclaration", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST.compilationUnitDeclaration", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasVariable-lombok.eclipse.TransformEclipseAST.astCacheField", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.astCacheField", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.STATEMENT", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.STATEMENT", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.JAVAC_EXAMPLE", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.JAVAC_EXAMPLE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node-hasVariable-lombok.core.AST$Node.node", "source": "lombok.core.AST$Node", "target": "lombok.core.AST$Node.node", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasVariable-lombok.core.AnnotationValues.ast", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.ast", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-hasVariable-lombok.core.AnnotationValues.values", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues.values", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-hasVariable-lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode.BUILT_IN_TYPES", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.INITIALIZER", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.INITIALIZER", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-hasVariable-lombok.eclipse.HandlerLibrary.visitorHandlers", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary.visitorHandlers", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized-hasVariable-lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME", "source": "lombok.eclipse.handlers.HandleSynchronized", "target": "lombok.eclipse.handlers.HandleSynchronized.STATIC_LOCK_NAME", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-hasVariable-lombok.core.AST.nodeMap", "source": "lombok.core.AST", "target": "lombok.core.AST.nodeMap", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult-hasVariable-lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "source": "lombok.javac.handlers.PKG$MemberExistsResult", "target": "lombok.javac.handlers.PKG$MemberExistsResult.EXISTS_BY_USER", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.uninstallPlaceholder", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.uninstallPlaceholder", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult-hasVariable-lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "source": "lombok.javac.handlers.PKG$MemberExistsResult", "target": "lombok.javac.handlers.PKG$MemberExistsResult.NOT_EXISTS", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.JAVAC_TITLE", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.JAVAC_TITLE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.UNINSTALL_TITLE", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.UNINSTALL_TITLE", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-hasVariable-lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation.JAVA_AGENT_LINE_MATCHER", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-hasVariable-lombok.eclipse.TransformEclipseAST.disableLombok", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST.disableLombok", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-hasVariable-lombok.installer.Installer.uninstallButton", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer.uninstallButton", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind-hasVariable-lombok.core.AST$Kind.COMPILATION_UNIT", "source": "lombok.core.AST$Kind", "target": "lombok.core.AST$Kind.COMPILATION_UNIT", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-hasVariable-lombok.javac.JavacASTVisitor$Printer.out", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor$Printer.out", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-hasVariable-lombok.javac.apt.Processor.processingEnv", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor.processingEnv", "label": "hasVariable", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-instantiates-lombok.javac.handlers.HandleEqualsAndHashCode", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleEqualsAndHashCode", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)-instantiates-lombok.core.AnnotationValues$AnnotationValueDecodeFail", "source": "lombok.core.AnnotationValues.guessToType(java.lang.Object,java.lang.Class,lombok.core.AnnotationValues$AnnotationValue,int)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "label": "instantiates", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.core.TypeResolver", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.TypeResolver", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)-instantiates-lombok.core.AnnotationValues$AnnotationValueDecodeFail", "source": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])-instantiates-lombok.installer.WindowsDriveInfo", "source": "lombok.installer.WindowsDriveInfo.main(java.lang.String[])", "target": "lombok.installer.WindowsDriveInfo", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.eclipse.handlers.HandleGetter", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleGetter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.core.AnnotationValues", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)-instantiates-java.lang.String", "source": "lombok.eclipse.Eclipse.calculateValue(org.eclipse.jdt.internal.compiler.ast.Expression)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-instantiates-lombok.core.AnnotationValues", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.core.TypeLibrary", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.TypeLibrary", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.eclipse.handlers.HandleSetter", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSetter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.go()-instantiates-lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "source": "lombok.eclipse.TransformEclipseAST.go()", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)-instantiates-lombok.eclipse.EclipseAST$ParseProblem", "source": "lombok.eclipse.EclipseAST$Node.addError(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)-instantiates-lombok.installer.EclipseLocation$NotAnEclipseException", "source": "lombok.installer.EclipseLocation(java.lang.String)", "target": "lombok.installer.EclipseLocation$NotAnEclipseException", "label": "instantiates", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)-instantiates-lombok.core.AST$FieldAccess", "source": "lombok.core.AST.getFields(java.lang.Class,java.util.Collection)", "target": "lombok.core.AST$FieldAccess", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.install()-instantiates-lombok.installer.EclipseLocation$InstallException", "source": "lombok.installer.EclipseLocation.install()", "target": "lombok.installer.EclipseLocation$InstallException", "label": "instantiates", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-instantiates-lombok.javac.handlers.HandleGetter", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleGetter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateFieldReference(char[])", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.eclipse.handlers.HandleToString", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleToString", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-instantiates-java.lang.String", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-instantiates-lombok.javac.apt.Processor$AnnotationVisitor", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.apt.Processor$AnnotationVisitor", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-instantiates-lombok.core.TypeResolver", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.core.TypeResolver", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createEquals(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getInstance()-instantiates-lombok.core.AnnotationValues$AnnotationValueDecodeFail", "source": "lombok.core.AnnotationValues.getInstance()", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-instantiates-lombok.core.TypeResolver", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.TypeResolver", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-instantiates-lombok.javac.handlers.HandleToString", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleToString", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleToString.createToString(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 4, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getDrivesOnWindows()-instantiates-lombok.installer.WindowsDriveInfo", "source": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "target": "lombok.installer.WindowsDriveInfo", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)-instantiates-lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.javac.HandlerLibrary.loadAnnotationHandlers(lombok.javac.HandlerLibrary)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-instantiates-lombok.javac.handlers.HandleSetter", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.HandleSetter", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)-instantiates-lombok.eclipse.EclipseAST$LombokProblem", "source": "lombok.eclipse.EclipseAST.addProblemToCompilationResult(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.eclipse.EclipseASTVisitor$Printer", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseASTVisitor$Printer", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getName()-instantiates-java.lang.String", "source": "lombok.eclipse.EclipseAST$Node.getName()", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)-instantiates-java.lang.String", "source": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)-instantiates-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.eclipse.HandlerLibrary.loadAnnotationHandlers(lombok.eclipse.HandlerLibrary)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildChrome(java.awt.Container)-instantiates-lombok.installer.Installer$JHyperLink", "source": "lombok.installer.Installer.buildChrome(java.awt.Container)", "target": "lombok.installer.Installer$JHyperLink", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)-instantiates-lombok.eclipse.EclipseAST$ParseProblem", "source": "lombok.eclipse.EclipseAST$Node.addWarning(java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-instantiates-lombok.javac.JavacASTVisitor$Printer", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "lombok.javac.JavacASTVisitor$Printer", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-instantiates-lombok.installer.Installer$EclipsesList", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer$EclipsesList", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-instantiates-lombok.eclipse.handlers.HandleEqualsAndHashCode", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-instantiates-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-instantiates-lombok.eclipse.TransformEclipseAST", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.TransformEclipseAST", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-instantiates-lombok.core.TypeResolver", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.core.TypeResolver", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)-instantiates-lombok.javac.HandlerLibrary", "source": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-instantiates-lombok.installer.Installer$JHyperLink", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.Installer$JHyperLink", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.main(java.lang.String[])-instantiates-lombok.installer.Installer", "source": "lombok.installer.Installer.main(java.lang.String[])", "target": "lombok.installer.Installer", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-instantiates-lombok.javac.JavacAST", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "lombok.javac.JavacAST", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-instantiates-lombok.eclipse.EclipseAST", "source": "lombok.eclipse.TransformEclipseAST.transform(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-instantiates-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-instantiates-lombok.core.TypeLibrary", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.TypeLibrary", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-instantiates-java.lang.String", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.load()-instantiates-lombok.eclipse.HandlerLibrary", "source": "lombok.eclipse.HandlerLibrary.load()", "target": "lombok.eclipse.HandlerLibrary", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])-instantiates-java.lang.String", "source": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-instantiates-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseAST$Node", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-instantiates-java.lang.String", "source": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.createHashCode(lombok.eclipse.EclipseAST$Node,java.util.Collection,boolean,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer.buildEclipseArea()-instantiates-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer.buildEclipseArea()", "target": "lombok.installer.EclipseLocation", "label": "instantiates", "properties": {"weight": 2, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)-instantiates-java.lang.String", "source": "lombok.eclipse.handlers.HandleData.createConstructor(boolean,lombok.eclipse.EclipseAST$Node,java.util.Collection,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "java.lang.String", "label": "instantiates", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.uninstall()-instantiates-lombok.installer.EclipseLocation$UninstallException", "source": "lombok.installer.EclipseLocation.uninstall()", "target": "lombok.installer.EclipseLocation$UninstallException", "label": "instantiates", "properties": {"weight": 3, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node-specializes-lombok.core.AST$Node", "source": "lombok.javac.JavacAST$Node", "target": "lombok.core.AST$Node", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor-specializes-lombok.javac.JavacASTAdapter", "source": "lombok.javac.apt.Processor$AnnotationVisitor", "target": "lombok.javac.JavacASTAdapter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node-specializes-lombok.core.AST$Node", "source": "lombok.eclipse.EclipseAST$Node", "target": "lombok.core.AST$Node", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter-specializes-lombok.javac.JavacASTVisitor", "source": "lombok.javac.JavacASTAdapter", "target": "lombok.javac.JavacASTVisitor", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-specializes-lombok.core.AST", "source": "lombok.eclipse.EclipseAST", "target": "lombok.core.AST", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleCleanup", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor-specializes-lombok.eclipse.EclipseASTAdapter", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "target": "lombok.eclipse.EclipseASTAdapter", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleSetter", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-specializes-lombok.core.AST", "source": "lombok.javac.JavacAST", "target": "lombok.core.AST", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleData", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandlePrintAST", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleSetter", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleGetter", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleSynchronized", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleData", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleEqualsAndHashCode", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter-specializes-lombok.eclipse.EclipseASTVisitor", "source": "lombok.eclipse.EclipseASTAdapter", "target": "lombok.eclipse.EclipseASTVisitor", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleSneakyThrows", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleToString", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer-specializes-lombok.javac.JavacASTVisitor", "source": "lombok.javac.JavacASTVisitor$Printer", "target": "lombok.javac.JavacASTVisitor", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleToString", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandlePrintAST", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer-specializes-lombok.eclipse.EclipseASTVisitor", "source": "lombok.eclipse.EclipseASTVisitor$Printer", "target": "lombok.eclipse.EclipseASTVisitor", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleSynchronized", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleSneakyThrows", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode-specializes-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleGetter", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup-specializes-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac.handlers.HandleCleanup", "target": "lombok.javac.JavacAnnotationHandler", "label": "specializes", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getFileName()-returnType-java.lang.String", "source": "lombok.core.AST$Node.getFileName()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hashCode()-returnType-int", "source": "lombok.installer.EclipseLocation.hashCode()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.PrintAST.outfile()-returnType-java.lang.String", "source": "lombok.core.PrintAST.outfile()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleToString.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)-returnType-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG.constructorExists(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)-returnType-java.lang.String", "source": "lombok.core.TransformationsUtil.toAllGetterNames(java.lang.CharSequence,boolean)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)-returnType-java.lang.String", "source": "lombok.core.TransformationsUtil.buildName(java.lang.String,java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows()-returnType-lombok.javac.handlers.HandleSneakyThrows", "source": "lombok.javac.handlers.HandleSneakyThrows()", "target": "lombok.javac.handlers.HandleSneakyThrows", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)-returnType-boolean", "source": "lombok.installer.WindowsDriveInfo.isFixedDisk(java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)-returnType-boolean", "source": "lombok.core.AST.replaceStatementInNode(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildArguments(org.eclipse.jdt.internal.compiler.ast.Argument[])", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)-returnType-lombok.eclipse.EclipseAST$LombokProblem", "source": "lombok.eclipse.EclipseAST$LombokProblem(char[],java.lang.String,int,java.lang.String[],int,int,int,int,int)", "target": "lombok.eclipse.EclipseAST$LombokProblem", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.get(java.lang.Object)-returnType-lombok.core.AST$Node", "source": "lombok.core.AST.get(java.lang.Object)", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getPackageDeclaration()-returnType-java.lang.String", "source": "lombok.javac.JavacAST.getPackageDeclaration()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows()-returnType-lombok.eclipse.handlers.HandleSneakyThrows", "source": "lombok.eclipse.handlers.HandleSneakyThrows()", "target": "lombok.eclipse.handlers.HandleSneakyThrows", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.replaceWith(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)-returnType-lombok.core.AnnotationValues", "source": "lombok.core.AnnotationValues(java.lang.Class,java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AnnotationValues", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter()-returnType-lombok.eclipse.handlers.HandleGetter", "source": "lombok.eclipse.handlers.HandleGetter()", "target": "lombok.eclipse.handlers.HandleGetter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.hasLombok()-returnType-boolean", "source": "lombok.installer.EclipseLocation.hasLombok()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getPackageDeclaration()-returnType-java.lang.String", "source": "lombok.eclipse.EclipseAST.getPackageDeclaration()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)-returnType-lombok.core.TypeLibrary", "source": "lombok.core.TypeLibrary.addToMap(java.lang.String,java.lang.String)", "target": "lombok.core.TypeLibrary", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getPackageDeclaration()-returnType-java.lang.String", "source": "lombok.core.AST$Node.getPackageDeclaration()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.Getter.value()-returnType-lombok.AccessLevel", "source": "lombok.Getter.value()", "target": "lombok.AccessLevel", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.Setter.value()-returnType-lombok.AccessLevel", "source": "lombok.Setter.value()", "target": "lombok.AccessLevel", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-returnType-boolean", "source": "lombok.javac.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandlePrintAST()-returnType-lombok.javac.handlers.HandlePrintAST", "source": "lombok.javac.handlers.HandlePrintAST()", "target": "lombok.javac.handlers.HandlePrintAST", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getName()-returnType-java.lang.String", "source": "lombok.eclipse.EclipseAST$Node.getName()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.getImportStatements()-returnType-java.lang.String", "source": "lombok.eclipse.EclipseAST.getImportStatements()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleToString.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)-returnType-lombok.eclipse.TransformEclipseAST", "source": "lombok.eclipse.TransformEclipseAST(lombok.eclipse.EclipseAST)", "target": "lombok.eclipse.TransformEclipseAST", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList()-returnType-lombok.installer.Installer$EclipsesList", "source": "lombok.installer.Installer$EclipsesList()", "target": "lombok.installer.Installer$EclipsesList", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)-returnType-java.lang.String", "source": "lombok.eclipse.EclipseASTVisitor$Printer.str(org.eclipse.jdt.internal.compiler.ast.TypeReference)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildStatements(org.eclipse.jdt.internal.compiler.ast.Statement[])", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()-returnType-boolean", "source": "lombok.javac.JavacAST$Node.calculateIsStructurallySignificant()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleSetter.createSetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter()-returnType-lombok.eclipse.handlers.HandleSetter", "source": "lombok.eclipse.handlers.HandleSetter()", "target": "lombok.eclipse.handlers.HandleSetter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)-returnType-int", "source": "lombok.installer.WindowsDriveInfo.getDriveType(java.lang.String)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildMethod(com.sun.tools.javac.tree.JCTree.JCMethodDecl)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)-returnType-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.util.List,java.util.List)", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleGetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getNodeMap()-returnType-lombok.core.AST$Node", "source": "lombok.core.AST.getNodeMap()", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Kind()-returnType-lombok.core.AST$Kind", "source": "lombok.core.AST$Kind()", "target": "lombok.core.AST$Kind", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST$Node(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.util.List,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG()-returnType-lombok.javac.handlers.PKG", "source": "lombok.javac.handlers.PKG()", "target": "lombok.javac.handlers.PKG", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildCompilationUnit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.PrintAST.printContent()-returnType-boolean", "source": "lombok.core.PrintAST.printContent()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)-returnType-boolean", "source": "lombok.javac.apt.Processor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.SpiLoadUtil()-returnType-lombok.core.SpiLoadUtil", "source": "lombok.core.SpiLoadUtil()", "target": "lombok.core.SpiLoadUtil", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder$OS()-returnType-lombok.installer.EclipseFinder$OS", "source": "lombok.installer.EclipseFinder$OS()", "target": "lombok.installer.EclipseFinder$OS", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getLogicalDrives0()-returnType-int", "source": "lombok.installer.WindowsDriveInfo.getLogicalDrives0()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()-returnType-boolean", "source": "lombok.eclipse.EclipseAST$Node.calculateIsStructurallySignificant()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST$Node.getNodeFor(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-returnType-lombok.javac.JavacAST", "source": "lombok.javac.JavacAST(com.sun.source.util.Trees,com.sun.tools.javac.processing.JavacProcessingEnvironment,com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString.callSuper()-returnType-boolean", "source": "lombok.ToString.callSuper()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)-returnType-lombok.javac.JavacASTVisitor$Printer", "source": "lombok.javac.JavacASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.javac.JavacASTVisitor$Printer", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST$Node.getNodeFor(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.Cleanup.value()-returnType-java.lang.String", "source": "lombok.Cleanup.value()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleSetter.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.isCompleteParse()-returnType-boolean", "source": "lombok.eclipse.EclipseAST$Node.isCompleteParse()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)-returnType-int", "source": "lombok.eclipse.handlers.PKG.toModifier(lombok.AccessLevel)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isHandled()-returnType-boolean", "source": "lombok.core.AST$Node.isHandled()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)-returnType-boolean", "source": "lombok.javac.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG$MemberExistsResult()-returnType-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG$MemberExistsResult()", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-returnType-java.lang.String", "source": "lombok.javac.handlers.PKG.toAllGetterNames(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)-returnType-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues$AnnotationValue(lombok.core.AST$Node,java.lang.String,java.lang.Object)", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)-returnType-boolean", "source": "lombok.javac.handlers.HandleSneakyThrows.handleMethod(lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCMethodDecl,java.util.Collection)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getOS()-returnType-lombok.installer.EclipseFinder$OS", "source": "lombok.installer.EclipseFinder.getOS()", "target": "lombok.installer.EclipseFinder$OS", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleGetter.createGetterForField(lombok.AccessLevel,lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.isStructurallySignificant()-returnType-boolean", "source": "lombok.core.AST$Node.isStructurallySignificant()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer.handle(org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer.handle(lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)-returnType-boolean", "source": "lombok.core.AST.replaceStatementInArray(java.lang.Object,java.lang.Object,java.lang.Object)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getNodeFor(java.lang.Object)-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.getNodeFor(java.lang.Object)", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.top()-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.top()", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.setHandled()-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.setHandled()", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.toSimpleName(java.lang.String)-returnType-java.lang.String", "source": "lombok.core.TypeResolver.toSimpleName(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.top()-returnType-lombok.core.AST$Node", "source": "lombok.core.AST.top()", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version.getVersion()-returnType-java.lang.String", "source": "lombok.core.Version.getVersion()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)-returnType-java.lang.String", "source": "lombok.installer.EclipseFinder.findEclipseOnWindows1(java.io.File)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.getExistingLombokMethod(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)-returnType-lombok.eclipse.EclipseAST$ParseProblem", "source": "lombok.eclipse.EclipseAST$ParseProblem(boolean,java.lang.String,int,int)", "target": "lombok.eclipse.EclipseAST$ParseProblem", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.recursiveSetHandled()-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.recursiveSetHandled()", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getPackageDeclaration()-returnType-java.lang.String", "source": "lombok.core.AST.getPackageDeclaration()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)-returnType-java.lang.String", "source": "lombok.core.AnnotationValues.getProbableFQType(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$JHyperLink(java.lang.String)-returnType-lombok.installer.Installer$JHyperLink", "source": "lombok.installer.Installer$JHyperLink(java.lang.String)", "target": "lombok.installer.Installer$JHyperLink", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString()-returnType-lombok.javac.handlers.HandleToString", "source": "lombok.javac.handlers.HandleToString()", "target": "lombok.javac.handlers.HandleToString", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)-returnType-boolean", "source": "lombok.eclipse.handlers.PKG.nameEquals(char[][],java.lang.String)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem.getCategoryID()-returnType-int", "source": "lombok.eclipse.EclipseAST$LombokProblem.getCategoryID()", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary()-returnType-lombok.core.TypeLibrary", "source": "lombok.core.TypeLibrary()", "target": "lombok.core.TypeLibrary", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildStatement(com.sun.tools.javac.tree.JCTree.JCStatement)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.calculateIsStructurallySignificant()-returnType-boolean", "source": "lombok.core.AST$Node.calculateIsStructurallySignificant()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)-returnType-lombok.core.AST$Node", "source": "lombok.core.AST.buildTree(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getImportStatements()-returnType-java.lang.String", "source": "lombok.core.AST.getImportStatements()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildLocalVar(com.sun.tools.javac.tree.JCTree.JCVariableDecl,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.top()-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST$Node.top()", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer()-returnType-lombok.installer.Installer", "source": "lombok.installer.Installer()", "target": "lombok.installer.Installer", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)-returnType-boolean", "source": "lombok.javac.handlers.HandleToString.generateToString(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildMethods(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[])", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValue.toString()-returnType-java.lang.String", "source": "lombok.core.AnnotationValues$AnnotationValue.toString()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)-returnType-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG.fieldExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)-returnType-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer(lombok.eclipse.EclipseAnnotationHandler,java.lang.Class)", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder()-returnType-lombok.installer.EclipseFinder", "source": "lombok.installer.EclipseFinder()", "target": "lombok.installer.EclipseFinder", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportHeight()-returnType-boolean", "source": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportHeight()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-returnType-java.lang.String", "source": "lombok.eclipse.EclipseAST.toFileName(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)-returnType-lombok.core.AST$Node", "source": "lombok.core.AST.replaceNewWithExistingOld(java.util.Map,lombok.core.AST$Node)", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleCleanup()-returnType-lombok.eclipse.handlers.HandleCleanup", "source": "lombok.eclipse.handlers.HandleCleanup()", "target": "lombok.eclipse.handlers.HandleCleanup", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildStatement(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.top()-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.top()", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)-returnType-lombok.javac.HandlerLibrary", "source": "lombok.javac.HandlerLibrary(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-returnType-lombok.eclipse.EclipseAST", "source": "lombok.eclipse.EclipseAST(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)-returnType-boolean", "source": "lombok.installer.EclipseLocation.checkForLombok0(java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)-returnType-java.lang.String", "source": "lombok.core.TypeResolver.findTypeMatches(lombok.core.AST$Node,java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportWidth()-returnType-boolean", "source": "lombok.installer.Installer$EclipsesList.getScrollableTracksViewportWidth()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)-returnType-lombok.core.AnnotationValues$AnnotationValueDecodeFail", "source": "lombok.core.AnnotationValues$AnnotationValueDecodeFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.String,int)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getEclipseExecutableName()-returnType-java.lang.String", "source": "lombok.installer.EclipseFinder.getEclipseExecutableName()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.directUp()-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.directUp()", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.EqualsAndHashCode.callSuper()-returnType-boolean", "source": "lombok.EqualsAndHashCode.callSuper()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse()-returnType-lombok.eclipse.Eclipse", "source": "lombok.eclipse.Eclipse()", "target": "lombok.eclipse.Eclipse", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.generateMethods(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.up()-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST$Node.up()", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST()-returnType-lombok.eclipse.handlers.HandlePrintAST", "source": "lombok.eclipse.handlers.HandlePrintAST()", "target": "lombok.eclipse.handlers.HandlePrintAST", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.getImportStatements()-returnType-java.lang.String", "source": "lombok.javac.JavacAST.getImportStatements()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)-returnType-lombok.installer.EclipseLocation$NotAnEclipseException", "source": "lombok.installer.EclipseLocation$NotAnEclipseException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$NotAnEclipseException", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor$AnnotationVisitor()-returnType-lombok.javac.apt.Processor$AnnotationVisitor", "source": "lombok.javac.apt.Processor$AnnotationVisitor()", "target": "lombok.javac.apt.Processor$AnnotationVisitor", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode()-returnType-lombok.javac.handlers.HandleEqualsAndHashCode", "source": "lombok.javac.handlers.HandleEqualsAndHashCode()", "target": "lombok.javac.handlers.HandleEqualsAndHashCode", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST(java.lang.String)-returnType-lombok.core.AST", "source": "lombok.core.AST(java.lang.String)", "target": "lombok.core.AST", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)-returnType-boolean", "source": "lombok.core.AST.replaceStatementInField(lombok.core.AST$FieldAccess,java.lang.Object,java.lang.Object,java.lang.Object)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandlePrintAST.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleGetter()-returnType-lombok.javac.handlers.HandleGetter", "source": "lombok.javac.handlers.HandleGetter()", "target": "lombok.javac.handlers.HandleGetter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.toString()-returnType-java.lang.String", "source": "lombok.core.AST$Node.toString()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.getDrivesOnWindows()-returnType-java.lang.String", "source": "lombok.installer.EclipseFinder.getDrivesOnWindows()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData()-returnType-lombok.eclipse.handlers.HandleData", "source": "lombok.eclipse.handlers.HandleData()", "target": "lombok.eclipse.handlers.HandleData", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildStatementOrExpression(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-returnType-java.lang.String", "source": "lombok.javac.handlers.PKG.toGetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleToString.generateToString(lombok.eclipse.EclipseAST$Node,lombok.eclipse.EclipseAST$Node,java.util.List,boolean,boolean,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleCleanup.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)-returnType-lombok.core.AnnotationValues", "source": "lombok.javac.Javac.createAnnotation(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "lombok.core.AnnotationValues", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.toFQ(java.lang.String)-returnType-java.lang.String", "source": "lombok.core.AnnotationValues.toFQ(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString.includeFieldNames()-returnType-boolean", "source": "lombok.ToString.includeFieldNames()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)-returnType-boolean", "source": "lombok.javac.HandlerLibrary.handleAnnotation(com.sun.tools.javac.tree.JCTree.JCCompilationUnit,lombok.javac.JavacAST$Node,com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)-returnType-boolean", "source": "lombok.core.TypeResolver.nameConflictInImportList(java.lang.String,java.util.Collection)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.checkForLombok()-returnType-boolean", "source": "lombok.installer.EclipseLocation.checkForLombok()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST$Node(com.sun.tools.javac.tree.JCTree,java.util.List,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)-returnType-java.lang.String", "source": "lombok.core.TransformationsUtil.toSetterName(java.lang.CharSequence)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)-returnType-boolean", "source": "lombok.installer.EclipseFinder.unpackDLL(java.lang.String,java.io.File)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)-returnType-lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer(lombok.javac.JavacAnnotationHandler,java.lang.Class)", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleCleanup()-returnType-lombok.javac.handlers.HandleCleanup", "source": "lombok.javac.handlers.HandleCleanup()", "target": "lombok.javac.handlers.HandleCleanup", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.getPath()-returnType-java.lang.String", "source": "lombok.installer.EclipseLocation.getPath()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)-returnType-java.lang.String", "source": "lombok.core.TypeResolver.makeImportList(java.lang.String,java.util.Collection)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildTree(org.eclipse.jdt.internal.compiler.ast.ASTNode,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac()-returnType-lombok.javac.Javac", "source": "lombok.javac.Javac()", "target": "lombok.javac.Javac", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-returnType-lombok.eclipse.EclipseAST", "source": "lombok.eclipse.TransformEclipseAST.getCache(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "lombok.eclipse.EclipseAST", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.get(org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnWindows()-returnType-java.lang.String", "source": "lombok.installer.EclipseFinder.findEclipseOnWindows()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipses()-returnType-java.lang.String", "source": "lombok.installer.EclipseFinder.findEclipses()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.Javac.annotationTypeMatches(java.lang.Class,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder.findEclipseOnMac()-returnType-java.lang.String", "source": "lombok.installer.EclipseFinder.findEclipseOnMac()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.top()-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.top()", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)-returnType-lombok.core.AST$FieldAccess", "source": "lombok.core.AST$FieldAccess(java.lang.reflect.Field,int)", "target": "lombok.core.AST$FieldAccess", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.Version()-returnType-lombok.core.Version", "source": "lombok.core.Version()", "target": "lombok.core.Version", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.directUp()-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST$Node.directUp()", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.drill(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation(java.lang.String)-returnType-lombok.installer.EclipseLocation", "source": "lombok.installer.EclipseLocation(java.lang.String)", "target": "lombok.installer.EclipseLocation", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildField(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)-returnType-lombok.installer.EclipseLocation$InstallException", "source": "lombok.installer.EclipseLocation$InstallException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$InstallException", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.ToString.exclude()-returnType-java.lang.String", "source": "lombok.ToString.exclude()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.EclipseAnnotationHandler.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.Lombok()-returnType-lombok.Lombok", "source": "lombok.Lombok()", "target": "lombok.Lombok", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor()-returnType-lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "source": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor()", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildField(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()-returnType-java.lang.String", "source": "lombok.eclipse.EclipseAST$LombokProblem.getMarkerType()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)-returnType-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException(java.lang.String,org.eclipse.jdt.internal.compiler.ast.ASTNode)", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo()-returnType-lombok.installer.WindowsDriveInfo", "source": "lombok.installer.WindowsDriveInfo()", "target": "lombok.installer.WindowsDriveInfo", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.JavacAnnotationHandler.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.Data.staticConstructor()-returnType-java.lang.String", "source": "lombok.Data.staticConstructor()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG$MemberExistsResult()-returnType-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG$MemberExistsResult()", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])-returnType-java.lang.String", "source": "lombok.eclipse.EclipseASTVisitor$Printer.str(char[])", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleSynchronized.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.top()-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST$Node.top()", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildFields(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[])", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)-returnType-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG.methodExists(java.lang.String,lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node(java.lang.Object,java.util.List,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSetter()-returnType-lombok.javac.handlers.HandleSetter", "source": "lombok.javac.handlers.HandleSetter()", "target": "lombok.javac.handlers.HandleSetter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleData.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildInitializer(org.eclipse.jdt.internal.compiler.ast.Initializer)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary()-returnType-lombok.eclipse.HandlerLibrary", "source": "lombok.eclipse.HandlerLibrary()", "target": "lombok.eclipse.HandlerLibrary", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.drill(org.eclipse.jdt.internal.compiler.ast.Statement)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.load()-returnType-lombok.eclipse.HandlerLibrary", "source": "lombok.eclipse.HandlerLibrary.load()", "target": "lombok.eclipse.HandlerLibrary", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.down()-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST$Node.down()", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTAdapter()-returnType-lombok.eclipse.EclipseASTAdapter", "source": "lombok.eclipse.EclipseASTAdapter()", "target": "lombok.eclipse.EclipseASTAdapter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTAdapter()-returnType-lombok.javac.JavacASTAdapter", "source": "lombok.javac.JavacASTAdapter()", "target": "lombok.javac.JavacASTAdapter", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.fieldsOf(java.lang.Class)-returnType-lombok.core.AST$FieldAccess", "source": "lombok.core.AST.fieldsOf(java.lang.Class)", "target": "lombok.core.AST$FieldAccess", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)-returnType-int", "source": "lombok.installer.Installer$EclipsesList.getScrollableUnitIncrement(java.awt.Rectangle,int,int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleSynchronized()-returnType-lombok.javac.handlers.HandleSynchronized", "source": "lombok.javac.handlers.HandleSynchronized()", "target": "lombok.javac.handlers.HandleSynchronized", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil()-returnType-lombok.core.TransformationsUtil", "source": "lombok.core.TransformationsUtil()", "target": "lombok.core.TransformationsUtil", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildLocal(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,lombok.core.AST$Kind)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handleMethod(lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,java.util.List)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)-returnType-lombok.installer.EclipseLocation$UninstallException", "source": "lombok.installer.EclipseLocation$UninstallException(java.lang.String,java.lang.Throwable)", "target": "lombok.installer.EclipseLocation$UninstallException", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)-returnType-java.lang.String", "source": "lombok.core.AnnotationValues.getRawExpressions(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)-returnType-boolean", "source": "lombok.eclipse.HandlerLibrary.handle(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,lombok.eclipse.EclipseAST$Node,org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildInitializer(com.sun.tools.javac.tree.JCTree.JCBlock)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)-returnType-java.lang.String", "source": "lombok.javac.handlers.PKG.toSetterName(com.sun.tools.javac.tree.JCTree.JCVariableDecl)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.directUp()-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST$Node.directUp()", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation.equals(java.lang.Object)-returnType-boolean", "source": "lombok.installer.EclipseLocation.equals(java.lang.Object)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor$Printer(boolean)-returnType-lombok.javac.JavacASTVisitor$Printer", "source": "lombok.javac.JavacASTVisitor$Printer(boolean)", "target": "lombok.javac.JavacASTVisitor$Printer", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildType(com.sun.tools.javac.tree.JCTree.JCClassDecl)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG()-returnType-lombok.eclipse.handlers.PKG", "source": "lombok.eclipse.handlers.PKG()", "target": "lombok.eclipse.handlers.PKG", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)-returnType-lombok.core.TypeResolver", "source": "lombok.core.TypeResolver(lombok.core.TypeLibrary,java.lang.String,java.util.Collection)", "target": "lombok.core.TypeResolver", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildExpression(com.sun.tools.javac.tree.JCTree.JCExpression)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.down()-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST$Node.down()", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()-returnType-lombok.installer.EclipseLocation", "source": "lombok.installer.Installer$EclipsesList.getSelectedEclipses()", "target": "lombok.installer.EclipseLocation", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.Eclipse.annotationTypeMatches(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getName()-returnType-java.lang.String", "source": "lombok.core.AST$Node.getName()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)-returnType-lombok.javac.HandlerLibrary", "source": "lombok.javac.HandlerLibrary.load(javax.annotation.processing.Messager)", "target": "lombok.javac.HandlerLibrary", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)-returnType-java.lang.String", "source": "lombok.core.TransformationsUtil.toGetterName(java.lang.CharSequence,boolean)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST$Node.up()-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST$Node.up()", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSynchronized()-returnType-lombok.eclipse.handlers.HandleSynchronized", "source": "lombok.eclipse.handlers.HandleSynchronized()", "target": "lombok.eclipse.handlers.HandleSynchronized", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)-returnType-int", "source": "lombok.javac.handlers.PKG.toJavacModifier(lombok.AccessLevel)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)-returnType-boolean", "source": "lombok.core.AST.setAndGetAsHandled(java.lang.Object)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.get(com.sun.tools.javac.tree.JCTree)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildCompilationUnit(com.sun.tools.javac.tree.JCTree.JCCompilationUnit)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)-returnType-java.lang.String", "source": "lombok.core.TypeResolver.eliminateImpossibleMatches(java.util.Collection)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleGetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.getFileName()-returnType-java.lang.String", "source": "lombok.core.AST.getFileName()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)-returnType-java.lang.String", "source": "lombok.core.AnnotationValues.getProbableFQTypes(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)-returnType-lombok.eclipse.EclipseASTVisitor$Printer", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean)", "target": "lombok.eclipse.EclipseASTVisitor$Printer", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()-returnType-long", "source": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException.getPos()", "target": "long", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.AppleNativeLook()-returnType-lombok.installer.AppleNativeLook", "source": "lombok.installer.AppleNativeLook()", "target": "lombok.installer.AppleNativeLook", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.WindowsDriveInfo.getLogicalDrives()-returnType-java.lang.String", "source": "lombok.installer.WindowsDriveInfo.getLogicalDrives()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.AccessLevel()-returnType-lombok.AccessLevel", "source": "lombok.AccessLevel()", "target": "lombok.AccessLevel", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)-returnType-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG.constructorExists(lombok.javac.JavacAST$Node)", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData()-returnType-lombok.javac.handlers.HandleData", "source": "lombok.javac.handlers.HandleData()", "target": "lombok.javac.handlers.HandleData", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)-returnType-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST.buildTree(com.sun.tools.javac.tree.JCTree,lombok.core.AST$Kind)", "target": "lombok.javac.JavacAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.handlers.PKG.getExistingLombokConstructor(lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleSetter.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.Synchronized.value()-returnType-java.lang.String", "source": "lombok.Synchronized.value()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)-returnType-lombok.eclipse.EclipseASTVisitor$Printer", "source": "lombok.eclipse.EclipseASTVisitor$Printer(boolean,java.io.PrintStream)", "target": "lombok.eclipse.EclipseASTVisitor$Printer", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-returnType-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG.methodExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.add(java.lang.Object,lombok.core.AST$Kind)", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[])", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)-returnType-boolean", "source": "lombok.eclipse.handlers.HandleSneakyThrows.handle(lombok.core.AnnotationValues,org.eclipse.jdt.internal.compiler.ast.Annotation,lombok.eclipse.EclipseAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])-returnType-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST.buildTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])", "target": "lombok.eclipse.EclipseAST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.toQualifiedName(char[][])-returnType-java.lang.String", "source": "lombok.eclipse.Eclipse.toQualifiedName(char[][])", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.up()-returnType-lombok.core.AST$Node", "source": "lombok.core.AST$Node.up()", "target": "lombok.core.AST$Node", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)-returnType-java.lang.String", "source": "lombok.core.AnnotationValues.getRawExpression(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleEqualsAndHashCode()-returnType-lombok.eclipse.handlers.HandleEqualsAndHashCode", "source": "lombok.eclipse.handlers.HandleEqualsAndHashCode()", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)-returnType-int", "source": "lombok.installer.Installer$EclipsesList.getScrollableBlockIncrement(java.awt.Rectangle,int,int)", "target": "int", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleToString()-returnType-lombok.eclipse.handlers.HandleToString", "source": "lombok.eclipse.handlers.HandleToString()", "target": "lombok.eclipse.handlers.HandleToString", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)-returnType-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG.fieldExists(java.lang.String,lombok.eclipse.EclipseAST$Node)", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.TypeLibrary.findCompatible(java.lang.String)-returnType-java.lang.String", "source": "lombok.core.TypeLibrary.findCompatible(java.lang.String)", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)-returnType-boolean", "source": "lombok.javac.handlers.HandleEqualsAndHashCode.generateMethods(lombok.javac.JavacAST$Node,lombok.javac.JavacAST$Node,com.sun.tools.javac.util.List,boolean,boolean)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)-returnType-boolean", "source": "lombok.core.AST.replaceStatementInCollection(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.Collection,java.lang.Object,java.lang.Object)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.EqualsAndHashCode.exclude()-returnType-java.lang.String", "source": "lombok.EqualsAndHashCode.exclude()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "array type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)-returnType-lombok.core.AnnotationValues", "source": "lombok.eclipse.Eclipse.createAnnotation(java.lang.Class,lombok.eclipse.EclipseAST$Node)", "target": "lombok.core.AnnotationValues", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)-returnType-lombok.core.AnnotationValues$AnnotationValueDecodeFail", "source": "lombok.core.AnnotationValues.makeNoDefaultFail(lombok.core.AnnotationValues$AnnotationValue,java.lang.reflect.Method)", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getImportStatements()-returnType-java.lang.String", "source": "lombok.core.AST$Node.getImportStatements()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type argument", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.isCompleteParse()-returnType-boolean", "source": "lombok.eclipse.EclipseAST.isCompleteParse()", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor()-returnType-lombok.javac.apt.Processor", "source": "lombok.javac.apt.Processor()", "target": "lombok.javac.apt.Processor", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST$Node.getKind()-returnType-lombok.core.AST$Kind", "source": "lombok.core.AST$Node.getKind()", "target": "lombok.core.AST$Kind", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST$Node.getName()-returnType-java.lang.String", "source": "lombok.javac.JavacAST$Node.getName()", "target": "java.lang.String", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)-returnType-boolean", "source": "lombok.javac.handlers.HandleData.handle(lombok.core.AnnotationValues,com.sun.tools.javac.tree.JCTree.JCAnnotation,lombok.javac.JavacAST$Node)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)-returnType-boolean", "source": "lombok.eclipse.EclipseAST.isComplete(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)", "target": "boolean", "label": "returnType", "properties": {"weight": 1, "kind": "type", "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.Installer$JHyperLink", "source": "lombok.installer", "target": "lombok.installer.Installer$JHyperLink", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseASTVisitor-contains-lombok.eclipse.EclipseASTVisitor$Printer", "source": "lombok.eclipse.EclipseASTVisitor", "target": "lombok.eclipse.EclipseASTVisitor$Printer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-contains-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST$Node", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-contains-lombok.installer.Installer$JHyperLink", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer$JHyperLink", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseAST", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseAST", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleGetter", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleGetter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.JavacASTVisitor$Printer", "source": "lombok.javac", "target": "lombok.javac.JavacASTVisitor$Printer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseAST$ParseProblem", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseAST$ParseProblem", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.installer", "source": "lombok", "target": "lombok.installer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.Cleanup", "source": "lombok", "target": "lombok.Cleanup", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.HandleSneakyThrows-contains-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "source": "lombok.eclipse.handlers.HandleSneakyThrows", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.Setter", "source": "lombok", "target": "lombok.Setter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "source": "lombok.eclipse", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.PKG", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.PKG", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.eclipse", "source": "lombok", "target": "lombok.eclipse", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-contains-lombok.core.AST$FieldAccess", "source": "lombok.core.AST", "target": "lombok.core.AST$FieldAccess", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleCleanup", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleCleanup", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleSetter", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleSetter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.TransformEclipseAST", "source": "lombok.eclipse", "target": "lombok.eclipse.TransformEclipseAST", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleSynchronized", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleSynchronized", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.EclipseFinder$OS", "source": "lombok.installer", "target": "lombok.installer.EclipseFinder$OS", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.Installer$EclipsesList", "source": "lombok.installer", "target": "lombok.installer.Installer$EclipsesList", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.AST$Kind", "source": "lombok.core", "target": "lombok.core.AST$Kind", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.javac", "source": "lombok", "target": "lombok.javac", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.Getter", "source": "lombok", "target": "lombok.Getter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.handlers", "source": "lombok.javac", "target": "lombok.javac.handlers", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-contains-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.Installer", "source": "lombok.installer", "target": "lombok.installer.Installer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-contains-lombok.installer.EclipseLocation$UninstallException", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation$UninstallException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AnnotationValues-contains-lombok.core.AnnotationValues$AnnotationValueDecodeFail", "source": "lombok.core.AnnotationValues", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.AST$FieldAccess", "source": "lombok.core", "target": "lombok.core.AST$FieldAccess", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.EclipseLocation", "source": "lombok.installer", "target": "lombok.installer.EclipseLocation", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.AppleNativeLook", "source": "lombok.installer", "target": "lombok.installer.AppleNativeLook", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-contains-lombok.core.AST$Node", "source": "lombok.core.AST", "target": "lombok.core.AST$Node", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.ToString", "source": "lombok", "target": "lombok.ToString", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseASTAdapter", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseASTAdapter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.apt", "source": "lombok.javac", "target": "lombok.javac.apt", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.Javac", "source": "lombok.javac", "target": "lombok.javac.Javac", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.AnnotationValues", "source": "lombok.core", "target": "lombok.core.AnnotationValues", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.AccessLevel", "source": "lombok", "target": "lombok.AccessLevel", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseASTVisitor$Printer", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseASTVisitor$Printer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleEqualsAndHashCode", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleEqualsAndHashCode", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacAST-contains-lombok.javac.JavacAST$Node", "source": "lombok.javac.JavacAST", "target": "lombok.javac.JavacAST$Node", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt.Processor-contains-lombok.javac.apt.Processor$AnnotationVisitor", "source": "lombok.javac.apt.Processor", "target": "lombok.javac.apt.Processor$AnnotationVisitor", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.EclipseLocation$NotAnEclipseException", "source": "lombok.installer", "target": "lombok.installer.EclipseLocation$NotAnEclipseException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleSetter", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleSetter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.EclipseFinder", "source": "lombok.installer", "target": "lombok.installer.EclipseFinder", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.Installer-contains-lombok.installer.Installer$EclipsesList", "source": "lombok.installer.Installer", "target": "lombok.installer.Installer$EclipsesList", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.AST$Node", "source": "lombok.core", "target": "lombok.core.AST$Node", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleCleanup", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleCleanup", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.JavacASTVisitor", "source": "lombok.javac", "target": "lombok.javac.JavacASTVisitor", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleSneakyThrows$DeclaredException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.Version", "source": "lombok.core", "target": "lombok.core.Version", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.Data", "source": "lombok", "target": "lombok.Data", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.core", "source": "lombok", "target": "lombok.core", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers.PKG-contains-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers.PKG", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseAST$LombokProblem", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseAST$LombokProblem", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.HandlerLibrary-contains-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.eclipse.HandlerLibrary", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.EclipseLocation$InstallException", "source": "lombok.installer", "target": "lombok.installer.EclipseLocation$InstallException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.PrintAST", "source": "lombok.core", "target": "lombok.core.PrintAST", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.Synchronized", "source": "lombok", "target": "lombok.Synchronized", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.EclipseLocation$UninstallException", "source": "lombok.installer", "target": "lombok.installer.EclipseLocation$UninstallException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.HandlerLibrary", "source": "lombok.eclipse", "target": "lombok.eclipse.HandlerLibrary", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.TransformEclipseAST-contains-lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "source": "lombok.eclipse.TransformEclipseAST", "target": "lombok.eclipse.TransformEclipseAST$AnnotationVisitor", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleToString", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleToString", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.JavacASTAdapter", "source": "lombok.javac", "target": "lombok.javac.JavacASTAdapter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.TypeResolver", "source": "lombok.core", "target": "lombok.core.TypeResolver", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-contains-lombok.installer.EclipseLocation$NotAnEclipseException", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation$NotAnEclipseException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt-contains-lombok.javac.apt.Processor", "source": "lombok.javac.apt", "target": "lombok.javac.apt.Processor", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleToString", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleToString", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.TypeLibrary", "source": "lombok.core", "target": "lombok.core.TypeLibrary", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.PKG$MemberExistsResult", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.PKG$MemberExistsResult", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-contains-lombok.eclipse.EclipseAST$ParseProblem", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST$ParseProblem", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.HandlerLibrary-contains-lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.javac.HandlerLibrary", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.PKG", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.PKG", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.handlers", "source": "lombok.eclipse", "target": "lombok.eclipse.handlers", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseASTVisitor", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseASTVisitor", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseLocation-contains-lombok.installer.EclipseLocation$InstallException", "source": "lombok.installer.EclipseLocation", "target": "lombok.installer.EclipseLocation$InstallException", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseAnnotationHandler", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseAnnotationHandler", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleSneakyThrows", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleSneakyThrows", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.apt-contains-lombok.javac.apt.Processor$AnnotationVisitor", "source": "lombok.javac.apt", "target": "lombok.javac.apt.Processor$AnnotationVisitor", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleData", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleData", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.JavacAST$Node", "source": "lombok.javac", "target": "lombok.javac.JavacAST$Node", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.EqualsAndHashCode", "source": "lombok", "target": "lombok.EqualsAndHashCode", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.Eclipse", "source": "lombok.eclipse", "target": "lombok.eclipse.Eclipse", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.AnnotationValues$AnnotationValue", "source": "lombok.core", "target": "lombok.core.AnnotationValues$AnnotationValue", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.AnnotationValues$AnnotationValueDecodeFail", "source": "lombok.core", "target": "lombok.core.AnnotationValues$AnnotationValueDecodeFail", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.SneakyThrows", "source": "lombok", "target": "lombok.SneakyThrows", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.EclipseAST-contains-lombok.eclipse.EclipseAST$LombokProblem", "source": "lombok.eclipse.EclipseAST", "target": "lombok.eclipse.EclipseAST$LombokProblem", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.JavacASTVisitor-contains-lombok.javac.JavacASTVisitor$Printer", "source": "lombok.javac.JavacASTVisitor", "target": "lombok.javac.JavacASTVisitor$Printer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok-contains-lombok.Lombok", "source": "lombok", "target": "lombok.Lombok", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.SpiLoadUtil", "source": "lombok.core", "target": "lombok.core.SpiLoadUtil", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers.PKG-contains-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers.PKG", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleGetter", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleGetter", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer-contains-lombok.installer.WindowsDriveInfo", "source": "lombok.installer", "target": "lombok.installer.WindowsDriveInfo", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.PKG$MemberExistsResult", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.PKG$MemberExistsResult", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.JavacAnnotationHandler", "source": "lombok.javac", "target": "lombok.javac.JavacAnnotationHandler", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core.AST-contains-lombok.core.AST$Kind", "source": "lombok.core.AST", "target": "lombok.core.AST$Kind", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.JavacAST", "source": "lombok.javac", "target": "lombok.javac.JavacAST", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.eclipse", "target": "lombok.eclipse.HandlerLibrary$AnnotationHandlerContainer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse-contains-lombok.eclipse.EclipseAST$Node", "source": "lombok.eclipse", "target": "lombok.eclipse.EclipseAST$Node", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandlePrintAST", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandlePrintAST", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "source": "lombok.javac", "target": "lombok.javac.HandlerLibrary$AnnotationHandlerContainer", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.eclipse.handlers-contains-lombok.eclipse.handlers.HandleSynchronized", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse.handlers.HandleSynchronized", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleEqualsAndHashCode", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleEqualsAndHashCode", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.AST", "source": "lombok.core", "target": "lombok.core.AST", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac-contains-lombok.javac.HandlerLibrary", "source": "lombok.javac", "target": "lombok.javac.HandlerLibrary", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleData", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleData", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.core-contains-lombok.core.TransformationsUtil", "source": "lombok.core", "target": "lombok.core.TransformationsUtil", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandlePrintAST", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandlePrintAST", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.installer.EclipseFinder-contains-lombok.installer.EclipseFinder$OS", "source": "lombok.installer.EclipseFinder", "target": "lombok.installer.EclipseFinder$OS", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "lombok.javac.handlers-contains-lombok.javac.handlers.HandleSneakyThrows", "source": "lombok.javac.handlers", "target": "lombok.javac.handlers.HandleSneakyThrows", "label": "contains", "properties": {"weight": 1, "metaSrc": "source code"}}}, {"data": {"id": "layer:Presentation Layer-allowedDependency-layer:Service Layer", "source": "layer:Presentation Layer", "target": "layer:Service Layer", "label": "allowedDependency", "properties": {"weight": 1}}}, {"data": {"id": "layer:Service Layer-allowedDependency-layer:Domain Layer", "source": "layer:Service Layer", "target": "layer:Domain Layer", "label": "allowedDependency", "properties": {"weight": 1}}}, {"data": {"id": "layer:Domain Layer-allowedDependency-layer:Data Source Layer", "source": "layer:Domain Layer", "target": "layer:Data Source Layer", "label": "allowedDependency", "properties": {"weight": 1}}}, {"data": {"id": "lombok.installer-dependsOn-lombok.core", "source": "lombok.installer", "target": "lombok.core", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.installer-dependsOn-lombok", "source": "lombok.installer", "target": "lombok", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers-dependsOn-lombok.core", "source": "lombok.javac.handlers", "target": "lombok.core", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers-dependsOn-lombok.javac", "source": "lombok.javac.handlers", "target": "lombok.javac", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.javac.handlers-dependsOn-lombok", "source": "lombok.javac.handlers", "target": "lombok", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt-dependsOn-lombok.core", "source": "lombok.javac.apt", "target": "lombok.core", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.javac.apt-dependsOn-lombok.javac", "source": "lombok.javac.apt", "target": "lombok.javac", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers-dependsOn-lombok.core", "source": "lombok.eclipse.handlers", "target": "lombok.core", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.javac-dependsOn-lombok.core", "source": "lombok.javac", "target": "lombok.core", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.eclipse-dependsOn-lombok.core", "source": "lombok.eclipse", "target": "lombok.core", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.core-dependsOn-lombok", "source": "lombok.core", "target": "lombok", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers-dependsOn-lombok.eclipse", "source": "lombok.eclipse.handlers", "target": "lombok.eclipse", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.eclipse.handlers-dependsOn-lombok", "source": "lombok.eclipse.handlers", "target": "lombok", "label": "dependsOn", "properties": {"description": "(no description)"}}}, {"data": {"id": "lombok.eclipse-dependsOn-lombok", "source": "lombok.eclipse", "target": "lombok", "label": "dependsOn", "properties": {"description": "(no description)"}}}]}}