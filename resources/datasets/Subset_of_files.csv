Changes,General Category
,
"Regression in FileUtils.touch() - no longer creates parent directories. Fixes IO-791. Thanks to Chad Wilson, Gary Gregory.",Bug fix
ByteArrayOrigin should be able convert a byte[] to a ByteArrayInputStream. Thanks to Gary Gregory.,Bug fix
AbstractOriginSupplier.checkOrigin() now throws IllegalStateException instead of NullPointerException. Thanks to Gary Gregory.,Bug fix
"FileAlreadyExistsException in PathUtils.createParentDirectories(Path, LinkOption, FileAttribute...). Fixes IO-796. Thanks to Giacomo Boccardo, Gary Gregory.",Bug fix
"Only read the relevant portion of a file in AbstractOrigin.FileOrigin.getByteArray(long, int) Thanks to Gary Gregory.",Bug fix
"Only read the relevant portion of a file in AbstractOrigin.PathOrigin.getByteArray(long, int) Thanks to Gary Gregory.",Bug fix
"DeferredFileOutputStream throws exception when system temp dir is a symlink. Fixes IO-798. Thanks to Shai Shapira, Gary Gregory.",Bug fix
"ReaderInputStream.Builder.setCharsetEncoder(null) should reset to a default object, not throw an NPE. Thanks to Gary Gregory.",Bug fix
"ReaderInputStream.Builder.setCharset(null) should reset to a default object, not throw an NPE. Thanks to Gary Gregory.",Bug fix
Add CharSequenceInputStream.Builder. Thanks to Gary Gregory.,Add support for a new feature
Add ChunkedOutputStream.Builder. Thanks to Gary Gregory.,Add support for a new feature
Add AbstractStreamBuilder.setOpenOptions(OpenOption...). Thanks to Gary Gregory.,Add support for a new feature
Add some missing conversions to AbstractOrigin subclasses. Thanks to Gary Gregory.,Add support for a new feature
"Add AbstractOrigin.getByteArray(long, int). Thanks to Gary Gregory.",Add support for a new feature
Add and use RandomAccessFiles. Thanks to Gary Gregory.,Add support for a new feature
Add AbstractOrigin.size(). Thanks to Gary Gregory.,Add support for a new feature
Add PathUtils.EMPTY_FILE_ATTRIBUTE_ARRAY. Thanks to Gary Gregory.,Add support for a new feature
Add CharSequenceInputStream.Builder.setCharsetEncoder(CharsetEncoder). Thanks to Gary Gregory.,Add support for a new feature
"Add CharsetEncoders.toCharsetEncoder(CharsetEncoder, Supplier<CharsetEncoder>). Thanks to Gary Gregory.",Add support for a new feature
"Bump commons-parent from 57 to 58. Thanks to Gary Gregory, Dependabot.",Update dependency
,
IOUtils.toByteArray size validation does not match documentation. Fixes IO-697. Thanks to otter606.,Bug fix
Fix Javadoc links to the JRE Javadoc 8. Thanks to Gary Gregory.,Documentation
"FileWriterWithEncoding for an existing file no longer truncates the file. #251. Fixes IO-744. Thanks to RBRi, Gary Gregory.",Bug fix
A null Charset or Charset name in FileWriterWithEncoding constructors uses the default Charset. Thanks to Gary Gregory.,Bug fix
Fix usage of assertNotNull #269. Thanks to Davide Angelocola.,Bug fix
"FilenameUtils directoryContains() should handle files with the same prefix #217. Fixes IO-727. Thanks to trungPa, Gary Gregory.",Bug fix
Drop unnecessary casts and conversions #267. Fixes IO-746. Thanks to Davide Angelocola.,Performance improvement
"FileUtils.moveToDirectory() exception documentation and exception message error. Fixes IO-748. Thanks to Dirk Heinrichs, Gary Gregory, Elango Ravi.",Documentation
-,Maintainability improvement
ThreadMonitor.sleep(Duration) ignores nanoseconds. Thanks to Gary Gregory.,Bug fix
Fix Javadoc in ThreadMonitor#run() method. #273. Thanks to Arturo Bernal.,Documentation
"FileUtils.listFiles() does not list matching files if File parameter is a symbolic link. Fixes IO-749. Thanks to haihuiyang, Gary Gregory.",Bug fix
"Fix typo in Javadocs for FileUtils#convertFileCollectionToFileArray() #276. Thanks to niranjanghule, Gary Gregory.",Documentation
"Avoid Code Duplication: Reuse Sleep from ThreadMonitor #66. Thanks to DaGeRe, Gary Gregory.",Maintainability improvement
"FileUtils.iterateFiles also lists directories. Fixes IO-750. Thanks to Sita Geßner, Sebastian Peters, Gary Gregory.",Bug fix
"Wrong exception message in FileUtils.setLastModified(File, File). Fixes IO-721. Thanks to Dirk Heinrichs, Gary Gregory.",Bug fix
"Infinite loop in ReaderInputStream instead of throwing exception for CodingErrorAction.REPORT. Fixes IO-717. Thanks to Marcono1234, Gary Gregory.",Bug fix
"ReaderInputStream enter infinite loop for too small buffer sizes. Fixes IO-716. Thanks to Marcono1234, Gary Gregory.",Bug fix
"Infinite loop in CharSequenceInputStream.read for 4-byte characters with UTF-8 and 3-byte buffer. Fixes IO-638. Thanks to Thayne McCombs, Gary Gregory.",Bug fix
"PathUtils.setReadOnly(Path, boolean, LinkOption...) should add READ_* file attributes when using POSIX. Fixes IO-638. Thanks to Gary Gregory.",Bug fix
"PathUtils.setReadOnly(Path, boolean, LinkOption...) readOnly argument is always assumed true on POSIX. Fixes IO-638. Thanks to Gary Gregory.",Bug fix
"Prevent IllegalArgumentExceptions in BrokenInputStream/Reader/OutputStream/Writer #278. Fixes IO-729. Thanks to Rob Spoor, Gary Gregory.",Bug fix
"FileUtils.copyURLToFile(URL, File, int, int) leaks its URLConnection. Called by FileUtils.copyURLToFile(URL, File). Thanks to Gary Gregory.",Security improvement
"Fixed ReaderInputStream not calling CharsetEncoder.flush issue #283. Fixes IO-714. Thanks to kevinwang1975, Gary Gregory.",Bug fix
Minor changes #287. Thanks to Arturo Bernal.,Maintainability improvement
-,Maintainability improvement
-,Maintainability improvement
"Update FileWriterWithEncoding to extend ProxyWriter #296. Fixes IO-756. Thanks to wodencafe, Gary Gregory, Bruno P. Kinoshita.",Code redesign
Initialize the message of an IOExceptionList to a default if null. Thanks to Gary Gregory.,Code redesign
"When deleting symlinks, File/PathUtils.deleteDirectory() changes file permissions of the target. Fixes IO-751. Thanks to Gary Gregory, Richard Cyganiak.",Bug fix
"ReaderInputStream maps null Charset, Charset name, and CharsetEncoder to the platform default instead of throwing a NullPointerException. Thanks to Gary Gregory.",Bug fix
CharSequenceInputStream maps null Charset and Charset name to the platform default instead of throwing a NullPointerException. Thanks to Gary Gregory.,Bug fix
"WriterOutputStream maps null Charset, Charset name, and CharsetEncoder name to the platform default instead of throwing a NullPointerException. Thanks to Gary Gregory.",Bug fix
"FileUtils.copyURLToFile should create target parent directories and overwrite target file #319. Thanks to Chad Wilson, Gary Gregory.",Bug fix
"Fix incorrect FilenameUtils Javadoc for null bytes #310. Fixes IO-484. Thanks to Marcono1234, Gary Gregory.",Documentation
Change to uppercase variable constant. #323. Fixes IO-484. Thanks to Arturo Bernal.,Bug fix
"IOCase.isCaseSensitive(IOCase) result is backward #325. Fixes IO-484. Thanks to David Huang, Gary Gregory.",Bug fix
"Deprecate PathUtils.NOFOLLOW_LINK_OPTION_ARRAY in favor of noFollowLinkOptionArray(). Fixes IO-758. Thanks to Marcono1234, Gary Gregory.",Deprecate functionality
"Improve ReaderInputStream documentation #291. Thanks to Marcono1234, Gary Gregory.",Documentation
Fix misleading comments in FileFilterTest #334. Thanks to richarda23.,Maintainability improvement
Add missing Javadoc for exceptions thrown for invalid arguments #339. Thanks to Diego Marcilio.,Documentation
FileFilterTest minor fixes #340. Thanks to richarda23.,Maintainability improvement
-,Code redesign
"IOUtils.write() throws OutOfMemoryError/NegativeArraySizeException while writing big strings #343. Fixes IO-764. Thanks to DaGeRe, Gary Gregory.",Bug fix
-,Bug fix
"Add reserved Windows file names CONIN$ and CONOUT$ to FileSystem #355. Fixes IO-768. Thanks to Marcono1234, Michael Osipov.",Bug fix
"RegexFileFilter is no longer Serializable. Fixes IO-773. Thanks to Dominik Reinarz, Gary Gregory.",Bug fix
"[Javadoc] FileFilterUtils doc does not match impl: missing some file filters. Fixes IO-763. Thanks to Richard Adams, Gary Gregory.",Documentation
"FileSystem.WINDOWS.isReservedFileName doesn't check for file extension. Fixes IO-762. Thanks to Leonidas Chiron, Gary Gregory.",Bug fix
"Confusing Javadoc on IOUtils#resourceToURL() and other resource* methods. Fixes IO-772. Thanks to Dan Ziemba, Gary Gregory.",Documentation
"FileUtils.copyFile methods throw an unnecessary ""Failed to copy full contents from"" exception. Fixes IO-443. Thanks to Dan Ziemba, Gary Gregory.",Bug fix
"Pick up Javadoc from super for override write() methods in AbstractByteArrayOutputStream and ByteArrayOutputStream. Fixes IO-564. Thanks to Hao Zhong, Bernd Eckenfels, Pascal Schumacher, Gary Gregory.",Documentation
Fix minor typos #367. Thanks to Marc Wrobel.,Maintainability improvement
Fix parameters to requireNonNull call in DeferredOutputSteam #368. Fixes IO-776. Thanks to Chris Povirk.,Bug fix
"Fix PathUtils.copyFileToDirectory(URL,Path,CopyOption[]). Thanks to Gary Gregory.",Bug fix
"FileUtils.doCopyFile uses different methods to check the file sizes. Fixes IO-386. Thanks to Sebb, Bernd Eckenfels, zhipengxu, Gary Gregory.",Bug fix
Fix typos #375. Thanks to Michael Ernst.,Maintainability improvement
FilenameUtils.normalize javadoc and tests #383. Fixes IO-611. Thanks to Fedor Urvanov.,Bug fix
-,Documentation
"Better docs in IOUtils and IOUtils.byteArray(int size) #374. Fixes IO-611. Thanks to ArdenL-Liu, Bruno P. Kinoshita, Gary Gregory.",Documentation
"SequenceReader should close readers when its close method is called #391. Fixes IO-782. Thanks to Matteo Di Giovinazzo, Gary Gregory.",Bug fix
"Fix symbolic link file filter #450. Fixes IO-790. Thanks to Miguel Muñoz, Gary Gregory.",Bug fix
"Apply nanoseconds precision for QueueInputStream timeout duration. #453. Fixes IO-790. Thanks to maxxedev, Gary Gregory, Bruno P. Kinoshita.",Code redesign
-,Documentation
Fix overflow for FileUtilsTest constants #456. Thanks to Marcono1234.,Bug fix
Serialization is deprecated and will be removed in 3.0. Thanks to Gary Gregory.,Code redesign
"FileSystemUtils.performCommand(String[], int, Duration): Use Locale.getDefault() instead of ENGLISH. Thanks to Gary Gregory.",Code redesign
Add GitHub coverage.yml. Thanks to Gary Gregory.,Support for external development tool
"Add MemoryMappedFileInputStream #215. Fixes IO-726. Thanks to shollander, Gary Gregory.",Add support for a new feature
Add BrokenReader.INSTANCE. Thanks to Gary Gregory.,Add support for a new feature
Add UncheckedBufferedReader. Thanks to Gary Gregory.,Add support for a new feature
Add UncheckedFilterReader. Thanks to Gary Gregory.,Add support for a new feature
Add UncheckedFilterWriter. Thanks to Gary Gregory.,Add support for a new feature
Add UncheckedFilterInputStream. Thanks to Gary Gregory.,Add support for a new feature
Add UncheckedFilterOutputStream. Thanks to Gary Gregory.,Add support for a new feature
Add BrokenInputStream.INSTANCE. Thanks to Gary Gregory.,Add support for a new feature
Add ClosedInputStream.INSTANCE and deprecate CLOSED_INPUT_STREAM. Thanks to Gary Gregory.,Add support for a new feature
-,Deprecate functionality
Add ClosedReader.INSTANCE and deprecate CLOSED_READER. Thanks to Gary Gregory.,Add support for a new feature
-,Deprecate functionality
Add BrokenWriter.INSTANCE. Thanks to Gary Gregory.,Add support for a new feature
Add ClosedOutputStream.INSTANCE and deprecate CLOSED_OUTPUT_STREAM. Thanks to Gary Gregory.,Add support for a new feature
-,Deprecate functionality
Add ClosedWriter.INSTANCE and deprecate CLOSED_WRITER. Thanks to Gary Gregory.,Add support for a new feature
-,Deprecate functionality
Add NullOutputStream.INSTANCE and deprecate NULL_OUTPUT_STREAM. Thanks to Gary Gregory.,Add support for a new feature
-,Deprecate functionality
Add NullPrintStream.INSTANCE and deprecate NULL_PRINT_STREAM. Thanks to Gary Gregory.,Add support for a new feature
-,Deprecate functionality
Add NullWriter.INSTANCE and deprecate NULL_WRITER. Thanks to Gary Gregory.,Add support for a new feature
-,Deprecate functionality
Add NullInputStream.INSTANCE. Thanks to Gary Gregory.,Add support for a new feature
Add NullReader.INSTANCE. Thanks to Gary Gregory.,Add support for a new feature
"Add PathUtils.readString(Path, Charset). Thanks to Gary Gregory.",Add support for a new feature
"Add FileUtils.newOutputStream(File, boolean). Thanks to Gary Gregory.",Add support for a new feature
"Add PathUtils.newOutputStream(Path, boolean). Thanks to Gary Gregory.",Add support for a new feature
Add UncheckedAppendable. Thanks to Gary Gregory.,Add support for a new feature
Add and reuse UncheckedIOExceptions. Thanks to Gary Gregory.,Add support for a new feature
Add PathUtils.getTempDirectory(). Thanks to Gary Gregory.,Add support for a new feature
Add FileSystem.getNameSeparator(). Thanks to Gary Gregory.,Add support for a new feature
Add FileSystem.normalizeSeparators(). Thanks to Gary Gregory.,Add support for a new feature
"Add PathUtils.isNewer(Path, FileTime, LinkOption...). Thanks to Gary Gregory.",Add support for a new feature
"Add PathUtils.isNewer(Path, Instant, LinkOption...). Thanks to Gary Gregory.",Add support for a new feature
"Add AgeFileFilter.AgeFileFilter(Instant). Add AgeFileFilter.AgeFileFilter(Instant, boolean). Thanks to Gary Gregory.",Add support for a new feature
Add FileUtils.lastModifiedFileTime(File). Thanks to Gary Gregory.,Add support for a new feature
Add FileTimes. Thanks to Gary Gregory.,Add support for a new feature
"Add PathUtils.waitFor(Path, Duration, LinkOption...). Thanks to Gary Gregory.",Add support for a new feature
Add org.apache.commons.io.input.Tailer.getDelayDuration(). Thanks to Gary Gregory.,Add support for a new feature
Add FileUtils.current(). Thanks to Gary Gregory.,Add support for a new feature
"Add and use PathUtils.setLastModifiedTime(Path) for more precision. Add and use PathUtils.setLastModifiedTime(Path, Path) for more precision. Thanks to Gary Gregory.",Add support for a new feature
"Add and use PathUtils.isNewer(Path, ChronoZonedDateTime, LinkOption...) for more precision. Add and use PathUtils.isNewer(Path, Path) for more precision. Add and use FileUtils.isNewer(File, FileTime) for more precision. Thanks to Gary Gregory.",Add support for a new feature
"Add and use PathUtils.isOlder(Path, FileTime, LinkOption...). Add and use PathUtils.isOlder(Path, Instant, LinkOption...). Add and use PathUtils.isOlder(Path, long, LinkOption...). Add and use PathUtils.isOlder(Path, Path). Thanks to Gary Gregory.",Add support for a new feature
Add and use PathUtils.sizeOf(Path). Add and use PathUtils.sizeOfAsBigInteger(Path). Add and use PathUtils.sizeOfDirectory(Path). Add and use PathUtils.sizeOfDirectoryAsBigInteger(Path). Thanks to Gary Gregory.,Add support for a new feature
"Add and use IOCase.value(IOCase, IOCase). Thanks to Gary Gregory.",Add support for a new feature
"Add Tailer.Tailable interface to allow tailing of remote files for example using jCIFS. Thanks to Jon Freedman, Gary Gregory.",Add support for a new feature
Add and use RandomAccessFileMode. Thanks to Gary Gregory.,Add support for a new feature
"Add PathUtils.writeString(Path, CharSequence, Charset, OpenOption...). Thanks to Gary Gregory.",Add support for a new feature
"Add PathUtiFiles.getFileAttributeView() shorthands: - PathUtils.getAclFileAttributeView(Path, LinkOption...) - PathUtils.getDosFileAttributeView(Path, LinkOption...) - PathUtils.getPosixFileAttributeView(Path, LinkOption...) Thanks to Gary Gregory.",Add support for a new feature
Make commons-io a JPMS module by adding module-info.class. Fixes IO-747.,Add support for a new feature
"Add IOUtils method to copy output stream to input stream #281. Fixes IO-753. Thanks to SebastianDietrich, Gary Gregory.",Add support for a new feature
"Add PathUtils.isPosix(Path, LinkOption...). #290 Thanks to Gary Gregory.",Add support for a new feature
"Add PathUtils.readAttributes(Path, Class, LinkOption...). #290 Thanks to Gary Gregory.",Add support for a new feature
"Add IOExceptionList.checkEmpty(List, Object). Thanks to Gary Gregory.",Add support for a new feature
"Add IOBiConsumer, IOTriConsumer, IOComparator, IOUnaryOperator, IOBinaryOperator. Thanks to Gary Gregory.",Add support for a new feature
"Add and reuse IOConsumer forAll(*), forEach(*), and forEachIndexed(*). Thanks to Gary Gregory.",Add support for a new feature
Add CharsetEncoders. Thanks to Gary Gregory.,Add support for a new feature
Add CharsetDecoders. Thanks to Gary Gregory.,Add support for a new feature
"Add PathUtils.createParentDirectories(Path, LinkOption, FileAttribute...). Thanks to Gary Gregory.",Add support for a new feature
Update FileEntry to use FileTime instead of long for file time stamps. Thanks to Gary Gregory.,Code redesign
"Add more tests for IOUtils.contentEqualsIgnoreEOL #137. Fixes IO-680. Thanks to XenoAmess, sebbASF, Gary Gregory.",Quality assurance
Reduce boilerplate through new UncheckedIO class and friends in org.apache.commons.io.function. Thanks to Gary Gregory.,Maintainability improvement
Add PathUtils.touch(Path). Thanks to Gary Gregory.,Add support for a new feature
Add FileSystem.getIllegalFileNameCodePoints(). Thanks to Gary Gregory.,Add support for a new feature
"Add FileUtils.isFileNewer(File, ChronoLocalDate, OffsetTime). Add FileUtils.isFileNewer(File, OffsetDateTime). Add FileUtils.isFileOlder(File, ChronoLocalDate, OffsetTime). Add FileUtils.isFileOlder(File, OffsetDateTime). Thanks to Isira Seneviratne, Gary Gregory.",Add support for a new feature
Add IOBiConsumer.noop(). Thanks to Gary Gregory.,Add support for a new feature
Add IOUtils.closeQuietly(Iterable<Closeable>). Add IOUtils.closeQuietly(Stream<Closeable>). Thanks to Gary Gregory.,Add support for a new feature
"Add Charsets.toCharset(Charset, Charset). Add Charsets.toCharset(String, Charset). Thanks to Gary Gregory.",Add support for a new feature
"Add XmlStreamWriter(OutputStream, Charset). Thanks to Gary Gregory.",Add support for a new feature
Add PathUtils.getLastModifiedFileTime(*). Thanks to Gary Gregory.,Add support for a new feature
"Add IOBiFunction, IOTriFunction, IOQuadFunction, IOPredicate, IOIterator, IOSpliterator, IOBaseStream, IOStream, FilesUncheck. Thanks to Gary Gregory.",Add support for a new feature
Add IOUtils.consume(Reader). Thanks to Gary Gregory.,Add support for a new feature
Add IOSupplier.asSupplier(). Thanks to Gary Gregory.,Add support for a new feature
Add IOFunction.asFunction(). Thanks to Gary Gregory.,Add support for a new feature
Add IOConsumer.asConsumer(). Thanks to Gary Gregory.,Add support for a new feature
Add TimestampedObserver.isClosed(). Thanks to Gary Gregory.,Add support for a new feature
IOExceptionList implements Iterable. Thanks to Gary Gregory.,Add support for a new feature
"Add support for Appendable to HexDump #418. Fixes IO-784. Thanks to Fredrik Kjellberg, Gary Gregory.",Add support for a new feature
"Add and use ThreadUtils. Thanks to DaGeRe, Gary Gregory.",Add support for a new feature
Add UnsynchronizedFilterInputStream. Fixes IO-786. Thanks to Gary Gregory.,Add support for a new feature
"Add UnsynchronizedBufferedInputStream. Fixes IO-786. Thanks to Gary Gregory, Benoit Tellier.",Add support for a new feature
Add FileSystem.getBlockSize(). Thanks to Gary Gregory.,Add support for a new feature
Add builders and avoid creating more constructors for all permutations of current options. Thanks to Gary Gregory.,Add support for a new feature
-,Maintainability improvement
"Refactor using new Supplier API IOUtils.toString(IOSupplier<InputStream>, Charset[, IOSupplier<String>]). Thanks to Gary Gregory, maxxedev.",Maintainability improvement
"Refactor using new Supplier API org.apache.commons.io.file.PathUtils.copy(IOSupplier<InputStream>, Path, CopyOption...). Thanks to Gary Gregory, maxxedev.",Maintainability improvement
"Bump actions/cache from 2.1.6 to 3.0.10 #307, #337, #393. Thanks to Dependabot, Gary Gregory.",Update dependency
-,Update dependency
"Bump actions/checkout from 2.3.4 to 3.1.0 #286, #298, #330, #392. Thanks to Dependabot, Gary Gregory.",Update dependency
-,Update dependency
"Bump actions/setup-java from 2 to 3.6.0 #346, #397. Thanks to Dependabot.",Update dependency
Bump github/codeql-action from 1 to 2 #353. Thanks to Dependabot.,Update dependency
"Bump Maven Javadoc plugin from 3.2.0 to 3.4.1. Thanks to Dependabot, Gary Gregory.",Update dependency
-,Update dependency
"Bump spotbugs-maven-plugin from 4.2.3 to 4.7.3.0 #250, #259, #272, #274, #285, #288, #289, #305, #315, #326, #338, #360, #366, #370, #380, #395, #403. Thanks to Dependabot.",Update dependency
"Bump spotbugs from 4.5.2 to 4.7.3 #313, #317, #357, #382, #398. Thanks to Gary Gregory, Dependabot.",Update dependency
-,Update dependency
Bump JUnit from 5.7.2 to 5.8.2. Thanks to Gary Gregory.,Update dependency
"Bump maven-enforcer-plugin from 3.0.0-M3 to 3.3.0 #255, #363, #431, #446. Thanks to Dependabot.",Update dependency
"Bump checkstyle from 8.44 to 9.3 #256, #257, #266, #279, #292. #308. Thanks to Dependabot, Gary Gregory.",Update dependency
-,Update dependency
"Bump junit-bom from 5.8.0-M1 to 5.9.1 #260, #271, #275, #309, #386. Thanks to Dependabot.",Update dependency
"Bump mockito-inline from 3.11.2 to 4.11.0 #262, #264, #282, #306, #314, #331, #348, #359, #381, #399, #405, #414, #420. Thanks to Dependabot, Gary Gregory.",Update dependency
"Bump jmh.version from 1.32 to 1.36 #258, #316, #342, #404. Thanks to Dependabot.",Update dependency
"Bump moditect-maven-plugin from 1.0.0.RC1 to 1.0.0.Final #280, #439, #445. Thanks to Dependabot.",Update dependency
"Bump junit-pioneer from 1.4.2 to 1.9.1 #304. #335, #362, #402, #406, #409. Thanks to Dependabot, Gary Gregory.",Update dependency
-,Update dependency
Bump japicmp-maven-plugin from 0.15.3 to 0.16.0. Thanks to Gary Gregory.,Update dependency
"Bump commons-parent from 52 to 57 #388, #415, #421, #184. Thanks to Gary Gregory, Dependabot.",Update dependency
-,Update dependency
Bump jacoco-maven-plugin from 0.8.7 to 0.8.8. Thanks to Gary Gregory.,Update dependency
Bump maven-antrun-plugin from 3.0.0 to 3.1.0 #354. Thanks to Dependabot.,Update dependency
Bump commons.surefire.version 3.0.0-M5 to 3.0.0-M7. Thanks to Gary Gregory.,Update dependency
Bump PMD from 6.44.0 to 6.52.0. Thanks to Gary Gregory.,Update dependency
Bump maven-pmd-plugin from 3.16.0 to 3.19.0. Thanks to Gary Gregory.,Update dependency
Bump apache-rat from 0.13 to 0.14. Thanks to Gary Gregory.,Update dependency
Bump exec-maven-plugin from 3.0.0 to 3.1.0 #369. Thanks to Dependabot.,Update dependency
Bump maven-checkstyle-plugin from 3.1.2 to 3.2.0 #376. Thanks to Dependabot.,Update dependency
Bump apache-rat-plugin from 0.14 to 0.15 #387. Thanks to Dependabot.,Update dependency
Bump default buffer size for CharSequenceInputStream to IOUtils#DEFAULT_BUFFER_SIZE. Thanks to Gary Gregory.,Code redesign
Bump default buffer size for ChunkedOutputStream to IOUtils#DEFAULT_BUFFER_SIZE. Thanks to Gary Gregory.,Code redesign
Bump default buffer size for ChunkedWriter to IOUtils#DEFAULT_BUFFER_SIZE. Thanks to Gary Gregory.,Code redesign
Bump default buffer size for ReaderInputStream to IOUtils#DEFAULT_BUFFER_SIZE. Thanks to Gary Gregory.,Code redesign
Bump default buffer size for WriterOutputStream to IOUtils#DEFAULT_BUFFER_SIZE. Thanks to Gary Gregory.,Code redesign
,
FileUtils.listFiles does not list matching files if File parameter is a symbolic link. Fixes IO-741. Thanks to Zach Sherman.,Bug fix
FileUtils#deleteDirectory(File) exception Javadoc inaccurate update #245. Fixes IO-724. Thanks to liran2000.,Documentation
Minor changes #243. Thanks to Arturo Bernal.,Maintainability improvement
-,Maintainability improvement
-,Maintainability improvement
-,Maintainability improvement
Replace construction of FileInputStream and FileOutputStream objects with Files NIO APIs. #221. Thanks to Arturo Bernal.,Code redesign
Fix IndexOutOfBoundsException in IOExceptionList constructors. Thanks to Gary Gregory.,Bug fix
"Remove IOException from the method signatures that no longer throw IOException. This maintains binary compatibility but not source compatibility. - FilenameUtils directoryContains(String, String) - BoundedReader BoundedReader(java.io.Reader, int) - IOUtils lineIterator(java.io.InputStream, Charset) lineIterator(java.io.InputStream, String) toByteArray(String) toInputStream(CharSequence, String) toInputStream(String, String) toString(byte[]) toString(byte[], String) Thanks to Gary Gregory.",Maintainability improvement
Add SymbolicLinkFileFilter. Thanks to Gary Gregory.,Add support for a new feature
Add test to make sure the setter of AndFileFilter works correctly #244. Thanks to trncate.,Quality assurance
Add XmlStreamReader(Path). Thanks to Gary Gregory.,Add support for a new feature
Bump mockito-inline from 3.11.0 to 3.11.2 #247. Thanks to Dependabot.,Update dependency
Bump jmh.version from 1.27 to 1.32 #237. Thanks to Dependabot.,Update dependency
,
"RegexFileFilter uses the path and file name instead of just the file name. Fixes IO-733. Thanks to Jim Sellers, Gary Gregory.",Bug fix
The OSGi manifest now contains sun.* import packages #239. Fixes IO-734. Thanks to Eric Norman.,Update dependency
Sanitize double slash after prefix #79. Fixes IO-585. Thanks to Adam McClenaghan.,Bug fix
Add and use RegexFileFilter.toString(). Thanks to Gary Gregory.,Add support for a new feature
"Add and use RegexFileFilter.RegexFileFilter(Pattern, Function<Path>, String>) Thanks to Gary Gregory.",Add support for a new feature
Add and use IOCase.isCaseSensitive(IOCase). Thanks to Gary Gregory.,Add support for a new feature
Bump actions/cache from 2.1.5 to 2.1.6 #238. Thanks to Dependabot.,Update dependency
Bump junit-pioneer from 1.4.1 to 1.4.2 #240. Thanks to Dependabot.,Update dependency
"Bump checkstyle from 8.42 to 8.44 #241, #248. Thanks to Dependabot.",Update dependency
Bump mockito-inline from 3.10.0 to 3.11.0 #242. Thanks to Dependabot.,Update dependency
,
"IOUtils.toByteArray(InputStream) Javadoc does not match code. Fixes IO-686. Thanks to Alan Moffat, Gary Gregory.",Documentation
FileUtils: Remove Instant->ZonedDateTime->Instant round-trip. Fixes IO-689. Thanks to Uwe Schindler.,Bug fix
"Make FilenameUtils.equals() not throw an exception #154. Thanks to Michael Ernst, Gary Gregory.",Bug fix
"Un-deprecate IOUtils.closeQuietly() methods. Thanks to Jan Peter Stotz, Bernd Eckenfels, Gary Gregory.",Code redesign
"FileUtils#copyDirectory(File, File, FileFilter, preserveFileDate) clean up #163. Thanks to Michiel Kalkman.",Performance improvement
AccumulatorPathVisitor does not track directories properly. Thanks to Gary Gregory.,Bug fix
"FileUtils.iterateFiles runs out of memory when executed for a directory with large number of files. Re-implement FileUtils' iterateFiles(), iterateFilesAndDirs(), listFiles(), listFilesAndDirs() to use NIO file tree walking instead of IO file listings to avoid memory consumption issues on large file trees. Fixes IO-597. Thanks to Gary Gregory, Arvind, Rob Spoor.",Code redesign
FileUtils.forceDelete(File) actually forces deletion of read-only files as it did in version 2.6. Thanks to Gary Gregory.,Bug fix
"PathUtils.deleteFile() no longer throws a NoSuchFileException when applied on a symbolic link pointing to a file that doesn't exist. Fixes IO-692. Thanks to Matthew Rooney, Emmanuel Bourg.",Bug fix
"Behavior change in FileUtils.copyDirectory() file last modified timestamp preservation. Match Javadoc to code. Fixes IO-694. Thanks to Tan Yee Fan, Gary Gregory.",Documentation
"Fix getPrefixLength method for Linux filename #179. Fixes IO-600. Thanks to Abhyankar Chaubey, Gary Gregory.",Bug fix
"Wrong logging in FileUtils.setLastModified. Fixes IO-699. Thanks to tza, Gary Gregory.",Documentation
"IOUtils.toByteArray(InputStream) Javadoc does not match code. Fixes IO-686. Thanks to Alan Moffat, Sebb, Gary Gregory.",Documentation
"CopyUtils deprecation message gives wrong version. Fixes IO-688. Thanks to Michael Ernst, Gary Gregory.",Documentation
Make PathUtils.setReadOnly deal with LinuxDosFileAttributeView #186. Fixes IO-701. Thanks to Gary Gregory.,Bug fix
"FileUtils.forceDelete does not delete invalid links. #187. Fixes IO-702. Thanks to Boris Unckel, Gary Gregory.",Bug fix
"IOUtils.toByteArray(null) no longer throws a NullPointerException. Fixes IO-690. Thanks to Chris Heisterkamp, Gary Gregory.",Bug fix
"MarkShieldInputStream#reset should throw UnsupportedOperationException. Fixes IO-705. Thanks to Hao Zhong, Gary Gregory.",Bug fix
"LockableFileWriter.close() should fail when the lock file cannot be deleted. Fixes IO-705. Thanks to Hao Zhong, Gary Gregory.",Bug fix
"Fix infinite loops in ObservableInputStream read(*) when an exception is caught but not re-thrown. Fixes IO-705. Thanks to Hao Zhong, Gary Gregory.",Bug fix
"Fixed error of copying directories between different file systems #203. Fixes IO-719. Thanks to Andrew Shcheglov, Gary Gregory.",Bug fix
"Fix Typos in JavaDoc, Comments and Tests #201. Thanks to Felix Rilling.",Documentation
-,Maintainability improvement
"FileUtils.checksumCRC32 and FileUtils.checksum are not thread safe. Fixes IO-718. Thanks to Robert Cooper, Gary Gregory.",Bug fix
Fix error about usage of DirectBuffer in JRE 16/17 #205. Fixes IO-720. Thanks to XenoAmess.,Bug fix
"Prevent infinite loop with AbstractCharacterFilterReader if EOF is filtered out #226. Thanks to Rob Spoor, Gary Gregory.",Bug fix
"Check for long streams in IOUtils.toByteArray #175. Fixes IO-429. Thanks to Ivan Leskin, Ivan Leskin.",Bug fix
Add FileSystemProviders class. Thanks to Gary Gregory.,Add support for a new feature
Let org.apache.commons.io.filefilter classes work with java.nio.file.Files.walk* APIs. Thanks to Gary Gregory.,Code redesign
"Let org.apache.commons.io.filefilter classes work with java.nio.file.Files#newDirectoryStream(Path, DirectoryStream.Filter). Thanks to Gary Gregory.",Code redesign
"Add and adapt ReadAheadInputStream and BufferedFileChannelInputStream from Apache Spark. Fixes IO-510. Thanks to Gary Gregory, Apache Spark, David Mollitor.",Add support for a new feature
"Add PathUtils.createParentDirectories(Path, FileAttribute...). Thanks to Gary Gregory.",Add support for a new feature
"Add factory methods to CloseShieldInputStream, CloseShieldReader, CloseShieldOutputStream, CloseShieldWriter, #173. Thanks to Rob Spoor, Gary Gregory.",Add support for a new feature
"Add QueueInputStream and QueueOutputStream as simpler alternatives to PipedInputStream and PipedOutputStream #171. Thanks to maxxedev, Gary Gregory.",Add support for a new feature
Add StandardLineSeparator. Thanks to Gary Gregory.,Add support for a new feature
Replace magic numbers with constants with the new IOUtils.CR and LF. Thanks to Gary Gregory.,Maintainability improvement
Add FileSystem#supportsDriveLetter(). Thanks to Gary Gregory.,Add support for a new feature
Add FileUtils.delete(File). Thanks to Gary Gregory.,Add support for a new feature
"Add FileUtils.moveFile(File, File, CopyOption...) #185. Fixes IO-700. Thanks to Gary Gregory.",Add support for a new feature
Add FileUtils.isEmptyDirectory(File). Fixes IO-700. Thanks to Gary Gregory.,Add support for a new feature
Add FileUtils.lastModified[Unchecked](File) to workaround https://bugs.openjdk.java.net/browse/JDK-8177809. Thanks to Gary Gregory.,Bug fix
"Add null safe variants of isDirectory and isRegularFile. Fixes IO-709. Thanks to Boris Unckel, Gary Gregory.",Add support for a new feature
"Add and use IOExceptionList(String, List). Thanks to Gary Gregory.",Add support for a new feature
"Add and use ObservableInputStream.ObservableInputStream(InputStream, Observer...). Thanks to Gary Gregory.",Add support for a new feature
Make ObservableInputStream.getObservers() public. Thanks to Gary Gregory.,Code redesign
Add TimestampedObserver. Fixes IO-706. Thanks to Gary Gregory.,Add support for a new feature
Add and use IOUtils.byteArray(*). Thanks to Gary Gregory.,Add support for a new feature
Make public and reuse IOUtils.EMPTY_BYTE_ARRAY. Thanks to Gary Gregory.,Code redesign
-,Maintainability improvement
"Add IOUtils.copy(URL, File). Thanks to Gary Gregory.",Add support for a new feature
"Add copy(URL, OutputStream). Thanks to Gary Gregory.",Add support for a new feature
"Add DeferredFileOutputStream.toInputStream() #206. Fixes IO-651. Thanks to jmark109, Gary Gregory.",Add support for a new feature
"Add CharacterSetFilterReader.CharacterSetFilterReader(Reader, Integer...). Thanks to Gary Gregory.",Add support for a new feature
"Add AbstractCharacterFilterReader(Reader, IntPredicate), #227. Add CharacterFilterReader(Reader, IntPredicate), #227. Add CharacterFilterReaderIntPredicateTest, #227. Thanks to Rob Spoor, Gary Gregory.",Add support for a new feature
Add IOConsumer.noop(). Thanks to Gary Gregory.,Add support for a new feature
"Add constructor ThresholdingOutputStream(int, IOConsumer, IOFunction) and make the class concrete. Thanks to Gary Gregory.",Add support for a new feature
"Add constructor accepting collection of file alteration observers #236. Thanks to nstdspace, Gary Gregory.",Add support for a new feature
Update junit-jupiter from 5.6.2 to 5.7.0 #153. Thanks to Dependabot.,Update dependency
"Update mockito-core from 3.5.9 to 3.10.0, #152, #155, #157, #166, #167, #169, #182. Thanks to Dependabot.",Update dependency
"Bump mockito-inline from 3.7.0 to 3.10.0 #188, #207, #230. Thanks to Dependabot.",Update dependency
"Update commons.jacoco.version 0.8.5 to 0.8.7, fixes Java 15 builds and up. Thanks to Gary Gregory.",Update dependency
"Update spotbugs from 4.1.2 to 4.5.0, #158, #164, #165, #180, #199, #213, #224, #302. Thanks to Dependabot.",Update dependency
"Bump spotbugs-maven-plugin from 4.0.4 to 4.2.3, #161, #172, #223. Thanks to Dependabot.",Update dependency
"Update org.junit-pioneer:junit-pioneer 0.9.0 -> 1.4,1, #159, #162, #170, #189, #191, #210, #229. Thanks to Gary Gregory, Dependabot.",Update dependency
-,Update dependency
"Update actions/checkout from v2.3.2 to v2.3.4, #156, #168. Thanks to Dependabot.",Update dependency
"Bump actions/setup-java from v1.4.2 to v2 #160. Thanks to Dependabot, Gary Gregory.",Update dependency
-,Update dependency
Update maven-surefire-plugin from 2.22.2 to 3.0.0-M5. Thanks to Gary Gregory.,Update dependency
"Minor improvements, #176, 177, #190. Thanks to Arturo Bernal.",Maintainability improvement
-,Maintainability improvement
-,Maintainability improvement
-,Performance improvement
-,Maintainability improvement
-,Maintainability improvement
-,Performance improvement
-,Maintainability improvement
-,Performance improvement
-,Maintainability improvement
Update commons.japicmp.version 0.14.4 -> 0.15.3. Thanks to Gary Gregory.,Update dependency
Tiny performance improvement in FileUtils#moveDirectoryToDirectory() #174. Thanks to Michiel Kalkman.,Performance improvement
"Bump checkstyle from 8.38 to 8.42 #689, #209, #225. Thanks to Dependabot.",Update dependency
Bump maven-checkstyle-plugin from 3.1.1 to 3.1.2 #198. Thanks to Dependabot.,Update dependency
Bump jimfs from 1.1 to 1.2 #183. Thanks to Dependabot.,Update dependency
"Improve performance of IOUtils.contentEquals(InputStream, InputStream). Thanks to XenoAmess, Gary Gregory.",Performance improvement
"Improve performance of IOUtils.contentEquals(Reader, Reader). Thanks to XenoAmess, Gary Gregory.",Performance improvement
"Bump actions/cache from v2 to v2.1.5 #202, #228. Thanks to Dependabot.",Update dependency
"Bump junit-bom from 5.7.0 to 5.7.2 #200, #232. Thanks to Dependabot.",Update dependency
Update from Apache Commons Lang 3.11 to 3.12.0. Thanks to Gary Gregory.,Update dependency
Minor improvements #233. Thanks to Arturo Bernal.,Maintainability improvement
-,Maintainability improvement
-,Maintainability improvement
-,Maintainability improvement
Simplify Assertions in tests #234. Thanks to Arturo Bernal.,Maintainability improvement
,
Add org.apache.commons.io.input.CircularInputStream. Thanks to Gary Gregory.,Add support for a new feature
"Add org.apache.commons.io.file.PathUtils.cleanDirectory(Path, FileVisitOption...). Thanks to Gary Gregory.",Add support for a new feature
"Add org.apache.commons.io.file.PathUtils.deleteDirectory(Path, FileVisitOption...). Thanks to Gary Gregory.",Add support for a new feature
Add NullAppendable. Thanks to Gary Gregory.,Add support for a new feature
"CharSequenceReader.skip should return 0 instead of EOF on stream end #123. Thanks to Rob Spoor, Jochen Wiedmann.",Bug fix
Implement CharSequenceReader.ready() #122. Thanks to Rob Spoor.,Code redesign
"Fix code smells; fix typos #115. Fixes IO-669. Thanks to XenoAmess, Gary Gregory.",Maintainability improvement
-,Maintainability improvement
"Add caching for required charsets #120. Thanks to Jerome Wolff, Gary Gregory.",Performance improvement
Make some simplifications #121. Fixes IO-673. Thanks to Jerome Wolff.,Maintainability improvement
-,Maintainability improvement
InfiniteCircularInputStream is not infinite if its input buffer contains -1. Fixes IO-674. Thanks to Gary Gregory.,Bug fix
InfiniteCircularInputStream throws a divide-by-zero exception when reading if its input buffer is size 0. Fixes IO-675. Thanks to Gary Gregory.,Bug fix
FileSystem.getCurrent() does not return the correct enum. Fixes IO-677. Thanks to Gary Gregory.,Bug fix
input.AbstractCharacterFilterReader passes count of chars read #132. Fixes IO-679. Thanks to proneel.,Bug fix
Add PathUtils.getAclEntryList(Path). Thanks to Gary Gregory.,Add support for a new feature
"Null-guard IOUtils.close(Closeable, IOConsumer). Thanks to Gary Gregory.",Add support for a new feature
Add ReversedLinesFileReader.readLines(int). Thanks to Gary Gregory.,Add support for a new feature
Add ReversedLinesFileReader.toString(int). Thanks to Gary Gregory.,Add support for a new feature
"Add PathUtils.delete(Path, DeleteOption...). Add PathUtils.deleteDirectory(Path, DeleteOption...). Add PathUtils.deleteFile(Path, DeleteOption...). Add PathUtils.setReadOnly(Path, boolean, LinkOption...). Add CleaningPathVisitor.CleaningPathVisitor(PathCounters, DeleteOption[], String...). Add DeletingPathVisitor.DeletingPathVisitor(PathCounters, DeleteOption[], String...). Fixes IO-684. Thanks to Gary Gregory, Robin Jansohn.",Add support for a new feature
CircularBufferInputStream.read() fails to convert byte to unsigned int. Fixes IO-683.,Bug fix
Fix SpotBugs issues in org.apache.commons.io.FileUtils. Thanks to Gary Gregory.,Bug fix
Add RandomAccessFileInputStream. Thanks to Gary Gregory.,Add support for a new feature
IOUtils.close(Closeable) should allow a list of closeables. Fixes IO-681.,Bug fix
Copying a File sets last modified date to 01 January 1970. Fixes IO-672.,Bug fix
Add IOUtils.consume(InputStream). Thanks to Gary Gregory.,Add support for a new feature
"Add isFileNewer() and isFileOlder() methods that support the Java 8 Date/Time API. #124. Fixes IO-676. Thanks to Isira Seneviratne, Gary Gregory.",Add support for a new feature
"Prevent NullPointerException in ReversedLinesFileReader constructors #117. Fixes IO-676. Thanks to Michael Ernst, Gary Gregory.",Bug fix
"Add a MarkShieldInputStream #119. Thanks to Adam Retter, Gary Gregory.",Add support for a new feature
Deprecate IOUtils.LINE_SEPARATOR in favor of Java 7's System.lineSeparator(). Thanks to Gary Gregory.,Deprecate functionality
Replace FindBugs with SpotBugs. Thanks to Gary Gregory.,Add support for a new feature
-,Code redesign
maven-checkstyle-plugin 3.1.0 -> 3.1.1. Thanks to Gary Gregory.,Update dependency
Update tests from org.apache.commons:commons-lang3 3.10 to 3.11. Thanks to Gary Gregory.,Update dependency
Update commons-parent from 50 to 51 #129. Thanks to Gary Gregory.,Update dependency
Update actions/checkout from v1 to v2.3.1 #126. Thanks to Gary Gregory.,Update dependency
"Update junit-pioneer from 0.6.0 to 0.9.0, #127, #135, #138. Thanks to Gary Gregory.",Update dependency
"Update mockito-core from 3.3.3 to 3.5.9 #128, #133, #145, #149, #151. Thanks to Gary Gregory.",Update dependency
"Update spotbugs from 4.0.6 to 4.6.0 #134, #332. Thanks to Dependabot.",Update dependency
Update actions/checkout from v2.3.1 to v2.3.2 #140. Thanks to Dependabot.,Update dependency
"Update actions/setup-java from v1.4.0 to v1.4.2 #141, #148. Thanks to Dependabot.",Update dependency
Update com.github.siom79.japicmp:japicmp-maven-plugin 0.14.3 -> 0.14.4. Thanks to Gary Gregory.,Update dependency
,
Some tests fail if the base path contains a space. Fixes IO-589.,Bug fix
"Adding the CircularBufferInputStream, and the PeekableInputStream.",Add support for a new feature
Make methods in ObservableInputStream.Observer public. Fixes IO-582. Thanks to Bruno Palos.,Bug fix
"Thread bug in FileAlterationMonitor#stop(int). Fixes IO-535. Thanks to Svetlin Zarev, Anthony Raymond.",Bug fix
Add org.apache.commons.io.FilenameUtils.isIllegalWindowsFileName(char). Fixes IO-553.,Add support for a new feature
Perform locale independent upper case conversions. Fixes IO-557. Thanks to luccioman.,Bug fix
Missing Javadoc in FilenameUtils causing Travis-CI build to fail. Fixes IO-570. Thanks to Pranet Verma.,Bug fix
"Remove redundant isDirectory() check in org.apache.commons.io.FileUtils.listFilesAndDirs(File, IOFileFilter, IOFileFilter). Fixes IO-571. Thanks to pranet.",Performance improvement
Refactor duplicate code in org.apache.commons.io.FileUtils. Fixes IO-572. Thanks to Pranet Verma.,Maintainability improvement
Add readers to filter out given characters: CharacterSetFilterReader and CharacterFilterReader. Fixes IO-577. Thanks to Gary Gregory.,Add support for a new feature
FilenameUtils.normalize now verifies hostname syntax in UNC path. Fixes IO-559.,Bug fix
"Update org.apache.commons.io.FilenameUtils.isExtension(String, String[]) to use var args. Fixes IO-580.",Add support for a new feature
"FileUtils.copyToFile(InputStream source, File destination) should not close input stream. Fixes IO-554. Thanks to Michele Mariotti.",Bug fix
Add IOUtils copy methods with java.lang.Appendable as the target. Fixes IO-594. Thanks to Gary Gregory.,Bug fix
"FileUtils.doCopyFile(File, File, boolean) can throw ClosedByInterruptException. Fixes IO-604. Thanks to Gary Gregory.",Bug fix
Add class CanExecuteFileFilter. Fixes IO-605. Thanks to Gary Gregory.,Add support for a new feature
Make array declaration in ThresholdingOutputStream consistent with other array declarations in the library #77. Fixes IO-701. Thanks to Raymond Tan.,Bug fix
Support java.nio.Path and non-default file systems for ReversedLinesFileReader (#62). Fixes IO-578. Thanks to Mark Chesney.,Bug fix
Add a convenience NullPrintStream. Fixes IO-608. Thanks to Gary Gregory.,Add support for a new feature
Update from Java 7 to Java 8. Fixes IO-607. Thanks to Gary Gregory.,Code redesign
Remove throws IOException in method isSymlink() #80. Fixes IO-610. Thanks to Sebastian.,Maintainability improvement
"Add class TeeReader. Fixes IO-612. Thanks to Rob Spoor, Gary Gregory.",Add support for a new feature
"Add classes ClosedReader and CloseShieldReader. #84. Fixes IO-613. Thanks to Rob Spoor, Gary Gregory.",Add support for a new feature
"Add classes TaggedWriter, ClosedWriter and BrokenWriter. #86. Fixes IO-614. Thanks to Rob Spoor.",Add support for a new feature
"Add classes TeeWriter, FilterCollectionWriter, ProxyCollectionWriter, IOExceptionList, IOIndexedException. Fixes IO-615. Thanks to Gary Gregory, Rob Spoor.",Add support for a new feature
Add class AppendableWriter. #87. Fixes IO-616. Thanks to Rob Spoor.,Add support for a new feature
"Add class CloseShieldWriter. #83. Fixes IO-617. Thanks to Rob Spoor, Gary Gregory.",Add support for a new feature
"Add classes Added TaggedReader, ClosedReader and BrokenReader. #85. Fixes IO-618. Thanks to Rob Spoor.",Add support for a new feature
Support sub sequences in CharSequenceReader. #91. Fixes IO-619. Thanks to Rob Spoor.,Add support for a new feature
Corrected misleading exception message for FileUtils.copyDirectoryToDirectory. Fixes IO-625. Thanks to Mikko Maunu.,Bug fix
A mistake in the FilenameUtils.concat()'s Javadoc about an absolute path. Fixes IO-626. Thanks to Yuji Konishi.,Documentation
Migration to JUnit Jupiter #97. Fixes IO-628. Thanks to Allon Mureinik.,Add support for a new feature
Deprecate org.apache.commons.io.output.NullOutputStream.NullOutputStream() in favor of org.apache.commons.io.output.NullOutputStream.NULL_OUTPUT_STREAM. Fixes IO-630. Thanks to Gary Gregory.,Deprecate functionality
Add a CountingFileVisitor (as the basis for a forthcoming DeletingFileVisitor). Fixes IO-631. Thanks to Gary Gregory.,Add support for a new feature
Add PathUtils for operations on NIO Path. Fixes IO-632. Thanks to Gary Gregory.,Add support for a new feature
Add DeletingFileVisitor. Fixes IO-633. Thanks to Gary Gregory.,Add support for a new feature
"FileUtils#forceDelete should use Files#delete rather than File#delete so exception messages includes reason for failure. Fixes IO-629. Thanks to Ian Springer, Ian Springer, Gary Gregory.",Maintainability improvement
"Make getCause synchronized and use a Deque instead of a Stack #64. Fixes IO-634. Thanks to Václav Haisman, Bruno P. Kinoshita, Gary Gregory.",Code redesign
-,Performance improvement
Add org.apache.commons.io.IOUtils.close(Closeable). Fixes IO-635. Thanks to Gary Gregory.,Add support for a new feature
"Add and reuse org.apache.commons.io.IOUtils.closeQuitely(Closeable, Consumer<IOException>). Add and reuse org.apache.commons.io.IOUtils.close(Closeable, IOConsumer<IOException>). Fixes IO-636. Thanks to Gary Gregory.",Add support for a new feature
"NPE in org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream) when only one input is null. Fixes IO-640. Thanks to Gary Gregory.",Bug fix
"NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null. Fixes IO-641. Thanks to Gary Gregory.",Bug fix
"NPE in org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader) when only one input is null. Fixes IO-643. Thanks to Gary Gregory.",Bug fix
"NPE in org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(File, File) when only one input is null. Fixes IO-644. Thanks to Gary Gregory.",Bug fix
"Add org.apache.commons.io.file.PathUtils.fileContentEquals(Path, Path, OpenOption...). Fixes IO-645. Thanks to Gary Gregory.",Add support for a new feature
"Add a SequenceReader similar to java.io.SequenceInputStream. Fixes IO-458. Thanks to Gary Gregory, Joshua Gitlin.",Add support for a new feature
Implement directory content equality. 100#. Fixes IO-648. Thanks to Gary Gregory.,Add support for a new feature
Update tests from Apache Commons Lang 3.9 to 3.10. Thanks to Gary Gregory.,Update dependency
Update tests org.junit-pioneer:junit-pioneer 0.3.0 -> 0.6.0. Thanks to Gary Gregory.,Update dependency
Update tests org.junit.jupiter:junit-jupiter 5.5.2 -> 5.6.2. Thanks to Gary Gregory.,Update dependency
Update tests org.mockito:mockito-core 3.0.0 -> 3.3.3. Thanks to Gary Gregory.,Update dependency
"Refactor ByteArrayOutputStream into synchronized and unsynchronized versions #108. Fixes IO-648. Thanks to Adam Retter, Alex Herbert, Gary Gregory.",Add support for a new feature
"Refactor ByteArrayOutputStream into synchronized and unsynchronized versions #108. Fixes IO-662. Thanks to Adam Retter, Gary Gregory.",Add support for a new feature
org.apache.commons.io.FileUtils.copyURLToFile(*) open but do not close streams. Fixes IO-664. Thanks to Gary Gregory.,Bug fix
Normalize internal buffers to 8192 bytes. Fixes IO-666. Thanks to Gary Gregory.,Code redesign
"Ensure that passing a null InputStream results in NPE with tests #112. Fixes IO-665. Thanks to Otto Fowler, Gary Gregory.",Bug fix
commons.jacoco.version 0.8.4 -> 0.8.5. Thanks to Gary Gregory.,Update dependency
com.github.siom79.japicmp:japicmp-maven-plugin 0.14.1 -> 0.14.3. Thanks to Gary Gregory.,Update dependency
"Add functional interfaces IOFunction and IOSupplier #110. Fixes IO-667. Thanks to Adam Retter, Gary Gregory.",Add support for a new feature
"Support sub sequences in CharSequenceReader #91. Thanks to Rob Spoor, Gary Gregory.",Add support for a new feature
Remove deprecated sudo setting. #113. Thanks to dengliming.,Maintainability improvement
,
Make code style of hasBOM() consistent with getBOMCharsetName(). Fixes IO-553. Thanks to Michael Ernst.,Code redesign
ClosedOutputStream#flush should throw. Fixes IO-546. Thanks to Tomas Celaya.,Code redesign
Add Automatic-Module-Name MANIFEST entry for Java 9 compatibility. Fixes IO-551.,Update dependency
"Documentation issue, fix 404 Javadoc issues in the description page. Fixes IO-550. Thanks to Jimi Adrian.",Documentation
FileUtils#readFileToByteArray: optimize reading of files with known size. Fixes IO-542. Thanks to Ilmars Poikans.,Performance improvement
"Throw a IllegalArgumentException instead of NullPointerException in FileSystemUtils.freeSpaceWindows(). Fixes IO-547. Thanks to Nikhil Shinde, Michael Ernst, Gary Greory.",Bug fix
Add convenience methods for copyToDirectory. Fixes IO-367. Thanks to James Sawle.,Add support for a new feature
Javadoc contradictory for FileFilterUtils.ageFileFilter(cutoff) and the filter it constructs: AgeFileFilter(cutoff). Fixes IO-442. Thanks to Simon Robinson.,Documentation
FileUtilTestCase.testForceDeleteDir() should not delete testDirectory parent. Fixes IO-534.,Bug fix
fix Tailer.run race condition runaway logging. Fixes IO-528. Thanks to Dave Moten.,Bug fix
getPrefixLength return -1 if Unix file contains colon. Fixes IO-483. Thanks to Marko Vasic.,Bug fix
FileUtilsTestCase#testContentEqualsIgnoreEOL fails on Windows. Fixes IO-520.,Bug fix
.gitattributes not correctly applied. Fixes IO-516. Thanks to Jason Pyeron.,Bug fix
"Allow Specifying Initial Buffer Size of DeferredFileOutputStream. Fixes IO-515. Thanks to Brett Lounsbury, Gary Gregory.",Memory improvement
ThresholdingOutputStream.thresholdReached() results in FileNotFoundException. Fixes IO-512. Thanks to Ralf Hauser.,Bug fix
"After a few unit tests, a few newly created directories not cleaned completely. Fixes IO-511. Thanks to Ahmet Celik.",Bug fix
Exceptions are suppressed incorrectly when copying files. Fixes IO-502. Thanks to Christian Schulte.,Bug fix
Update platform requirement to Java 7. Fixes IO-503.,Code redesign
BOMInputStream shouldn't sort array of BOMs in-place. Fixes IO-537. Thanks to Borys Zibrov.,Bug fix
Deprecate methods FileSystemUtils.freeSpaceKb(). Fixes IO-506. Thanks to Christian Schulte.,Deprecate functionality
Make LineIterator implement Closeable to support try-with-resources statements. Fixes IO-505. Thanks to Christian Schulte.,Code redesign
Deprecated of all IOUtils.closeQuietly() methods and use try-with-resources internally. Fixes IO-504. Thanks to Christian Schulte.,Deprecate functionality
Add infinite circular input stream. Fixes IO-493. Thanks to Piotr Turski.,Add support for a new feature
Add a ByteOrderParser class. Fixes IO-507.,Add support for a new feature
Add ObservableInputStream. Fixes IO-518.,Add support for a new feature
Add MessageDigestCalculatingInputStream. Fixes IO-519.,Add support for a new feature
Add convenience methods for reading class path resources. Fixes IO-513. Thanks to Behrang Saeedzadeh.,Add support for a new feature
Remove org.apache.commons.io.Java7Support. Fixes IO-514.,Maintainability improvement
"Implement special case handling for NTFS ADS names: FilenameUtils.getExtension(String), and FilenameUtils.indexOfExtension(String) are now throwing an IllegalArgumentException, if the file name in question appears to identify an alternate data stream (Windows only). Fixes IO-567.",Bug fix
,
"Typo: In an IOUtils.java comment it says ""focussed"" instead of ""focused"". Fixes IO-492. Thanks to Santiago Castro.",Documentation
Converted all test cases to JUnit 4. Fixes IO-433.,Add support for a new feature
Add ValidatingObjectInputStream for controlled deserialization. Fixes IO-487.,Add support for a new feature
adds an endOfFileReached method to the TailerListener. Fixes IO-446. Thanks to Jeffrey Barrus.,Add support for a new feature
FilenameUtils should handle embedded null bytes. Fixes IO-484. Thanks to Philippe Arteau.,Bug fix
Changed/Corrected algorithm for waitFor. Fixes IO-481.,Bug fix
Support for additional encodings in ReversedLinesFileReader. Fixes IO-471. Thanks to Leandro Reis.,Add support for a new feature
BOMInputStream.skip returns wrong count if stream contains no BOM. Fixes IO-428. Thanks to Stefan Gmeiner.,Bug fix
Setter method for threshold on ThresholdingOutputStream. Fixes IO-425. Thanks to Craig Swank.,Add support for a new feature
FileUtils.waitFor(...) swallows thread interrupted status. Fixes IO-488. Thanks to Björn Buchner.,Add support for a new feature
Support for symlinks with missing target. Added support for JDK7 symlink features when present. Fixes IO-452. Thanks to David Standish.,Bug fix
Added testcase to show this was fixed with IO-423. Fixes IO-466.,Quality assurance
"Correct exception message in FileUtils.getFile(File, String...). Fixes IO-479. Thanks to Zhouce Chen.",Bug fix
Introduce new class AppendableOutputStream. Fixes IO-406. Thanks to Niall Pemberton.,Add support for a new feature
Update to JUnit 4.12. Fixes IO-465. Thanks to based2.,Add support for a new feature
IOExceptionWithCause no longer needed. Fixes IO-462.,Deprecate functionality
Add WindowsLineEndingInputStream and UnixLineEndingInputStream. Fixes IO-459. Thanks to Kristian Rosenvold.,Add support for a new feature
"Add a BoundedReader, a wrapper that can be used to constrain access to an underlying stream when used with mark/reset - to avoid overflowing the mark limit of the underlying buffer. Fixes IO-457. Thanks to Kristian Rosenvold.",Add support for a new feature
Regression in FileUtils.readFileToString from 2.0.1. Fixes IO-453. Thanks to Steven Christou.,Bug fix
ant test fails - resources missing from test classpath. Fixes IO-451. Thanks to David Standish.,Bug fix
"Document that FileUtils.deleteDirectory, directoryContains and cleanDirectory may throw an IllegalArgumentException in case the passed directory does not exist or is not a directory. Fixes IO-435. Thanks to Dominik Stadler.",Documentation
Add API IOUtils.closeQuietly(Closeable...). Fixes IO-426.,Add support for a new feature
"Javadoc fixes, mostly to appease 1.8.0. Fixes IO-424. Thanks to Ville Skyttä.",Documentation
Deprecate Charsets Charset constants in favor of Java 7's java.nio.charset.StandardCharsets. Fixes IO-422.,Deprecate functionality
Readfully() That Returns A Byte Array. Fixes IO-410. Thanks to Beluga Behr.,Add support for a new feature
Overload IOUtils buffer methods to accept buffer size. Fixes IO-395. Thanks to Beluga Behr.,Add support for a new feature
FileUtils.sizeOfDirectory can throw IllegalArgumentException. Fixes IO-389. Thanks to Austin Doupnik.,Bug fix
FileUtils.sizeOfDirectoryAsBigInteger can overflow. Ensure that recursive calls all use BigInteger. Fixes IO-390.,Bug fix
"Chunked IO for large arrays. Added writeChunked(byte[], OutputStream) and writeChunked(char[] Writer) Added ChunkedOutputStream, ChunkedWriter. Fixes IO-382.",Memory improvement
FileUtils.doCopyFile can potentially loop forever Exit loop if no data to copy. Fixes IO-385.,Bug fix
FileUtils.doCopyFile caches the file size; needs to be documented Added Javadoc; show file lengths in exception message. Fixes IO-383.,Documentation
Convert IOCase to a Java 1.5+ Enumeration [N.B. this is binary compatible]. Fixes IO-239.,Code redesign
Add Methods for Buffering Streams/Writers To IOUtils Added overloaded buffer() methods - see also IO-330. Fixes IO-233.,Add support for a new feature
IOUtils#toBufferedOutputStream/toBufferedWriter to conditionally wrap the output Added overloaded buffer() methods - see also IO-233. Fixes IO-330.,Add support for a new feature
"Add FileUtils.copyInputStreamToFile API with option to leave the source open. See copyInputStreamToFile(final InputStream source, final File destination, boolean closeSource). Fixes IO-381.",Add support for a new feature
FileUtils.copyInputStreamToFile should document it closes the input source. Fixes IO-380. Thanks to claudio_ch.,Documentation
Tailer erroneously considers file as new. Fix to use file.lastModified() rather than System.currentTimeMillis(). Fixes IO-279.,Bug fix
CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size. Fix code so skip relates to the encoded bytes; reset now re-encodes the data up to the point of the mark. Fixes IO-356.,Bug fix
CharSequenceInputStream - add tests for available() Fix code so it really does reflect a minimum available. Fixes IO-379.,Quality assurance
getPrefixLength returns null if filename has leading slashes Javadoc: add examples to show correct behavior; add unit tests. Fixes IO-328.,Documentation
FileUtils.listFilesAndDirs includes original dir in results even when it doesn't match filter Javadoc: clarify that original dir is included in the results. Fixes IO-299.,Documentation
Add ByteArrayOutputStream.toInputStream(). Fixes IO-346.,Add support for a new feature
ClassLoaderObjectInputStream does not handle primitive typed members. Fixes IO-368.,Bug fix
A constant for holding the BOM character (U+FEFF). Fixes IO-341.,Add support for a new feature
Deprecate all methods that use the default encoding. Fixes IO-314.,Deprecate functionality
"When a file is rotated, finish reading previous file prior to starting new one. Fixes IO-338.",Bug fix
Commons IO Tailer does not respect UTF-8 Charset. Fixes IO-354.,Bug fix
What should happen in FileUtils.sizeOf[Directory] when an overflow takes place? Added Javadoc. Fixes IO-323.,Documentation
FileUtils.moveDirectory can produce misleading error message on failure. Fixes IO-372.,Maintainability improvement
FilenameUtils.splitOnTokens(String text) check for '**' could be simplified. Fixes IO-375.,Maintainability improvement
WildcardFileFilter ctors should not use null to mean IOCase.SENSITIVE when delegating to other ctors. Fixes IO-374.,Bug fix
"IOUtils.contentEquals* methods returns false if input1 == input2, should return true. Fixes IO-362. Thanks to mmadson, ggregory.",Bug fix
Add API FileUtils.forceMkdirsParent(). Fixes IO-361.,Add support for a new feature
Add API Charsets.requiredCharsets(). Fixes IO-360.,Add support for a new feature
"Add IOUtils.skip and skipFully(ReadableByteChannel, long). Fixes IO-359. Thanks to yukoba.",Add support for a new feature
"Add IOUtils.read and readFully(ReadableByteChannel, ByteBuffer buffer). Fixes IO-358. Thanks to yukoba.",Add support for a new feature
[Tailer] InterruptedException while the thread is sleeping is silently ignored. Fixes IO-357. Thanks to mortenh.,Bug fix
"Add API IOUtils.copy(InputStream, OutputStream, int). Fixes IO-353. Thanks to ggregory.",Add support for a new feature
Add API with array offset and length argument to FileUtils.writeByteArrayToFile. Fixes IO-349. Thanks to scop.,Add support for a new feature
Spelling fixes. Fixes IO-352. Thanks to scop.,Maintainability improvement
Missing information in IllegalArgumentException thrown by org.apache.commons.io.FileUtils#validateListFilesParameters. Fixes IO-348. Thanks to plcstpierre.,Maintainability improvement
Supply a hook method allowing Tailer actively determining stop condition. Fixes IO-345. Thanks to mkresse.,Add support for a new feature
Improper Javadoc comment for FilenameUtils.indexOfExtension. Fixes IO-436. Thanks to christoph.schneegans.,Documentation
Make IOUtils.EOF public and reuse it in various classes. Fixes IO-437.,Code redesign
,
org.apache.commons.io.comparator Javadoc is inconsistent with real code. Fixes IO-343. Thanks to igorlash.,Documentation
Yottabyte (YB) incorrectly defined in FileUtils. Fixes IO-336. Thanks to rleavelle.,Bug fix
Tailer locks file from deletion/rename on Windows. Fixes IO-269. Thanks to sebb.,Bug fix
"Tailer erroneously considers file as new. Fixes IO-279. Thanks to Sergio Bossa, Chris Baron.",Bug fix
Tailer#readLines - incorrect CR handling. Fixes IO-335.,Bug fix
FileUtils.toURLs throws NPE for null parameter; document the behavior. Fixes IO-334.,Documentation
Export OSGi packages at version 1.x in addition to 2.x. Fixes IO-333. Thanks to fmeschbe.,Code redesign
Add XmlStreamReader support for UTF-32. Fixes IO-320. Thanks to ggregory.,Add support for a new feature
BOMInputStream wrongly detects UTF-32LE_BOM files as UTF-16LE_BOM files in method getBOM(). Fixes IO-331. Thanks to ggregory.,Bug fix
Improve tailer's reading performance. Fixes IO-332. Thanks to liangly.,Performance improvement
Improve Tailer performance with buffered reads (see IO-332). Fixes IO-279.,Performance improvement
FileUtils.writeLines uses unbuffered IO. Fixes IO-329. Thanks to tivv.,Performance improvement
Add byteCountToDisplaySize(BigInteger). Fixes IO-327. Thanks to ggregory.,Add support for a new feature
"Add new FileUtils.sizeOf[Directory] APIs to return BigInteger. Fixes IO-326. Thanks to ggregory, kinow.",Add support for a new feature
Add IOUtils.toByteArray methods to work with URL and URI. Fixes IO-325. Thanks to raviprak.,Add support for a new feature
Add missing Charset sister APIs to method that take a String charset name. Fixes IO-324. Thanks to raviprak.,Add support for a new feature
FileUtils.sizeOfDirectory follows symbolic links. Fixes IO-319. Thanks to raviprak.,Bug fix
,
Add and use class Charsets. Fixes IO-322. Thanks to ggregory.,Add support for a new feature
ByteOrderMark UTF_32LE is incorrect. Fixes IO-321. Thanks to ggregory.,Bug fix
Add Charset sister APIs to method that take a String charset name. Fixes IO-318. Thanks to ggregory.,Add support for a new feature
,
Add IOUtils.toBufferedReader(Reader). Fixes IO-313. Thanks to ggregory.,Add support for a new feature
Allow applications to provide buffer (or size) for copyLarge methods. Fixes IO-308. Thanks to Manoj Mokashi.,Add support for a new feature
IOUtils.read(InputStream/Reader) ignores the offset parameter. Fixes IO-311. Thanks to Robert Muir.,Bug fix
"CharSequenceInputStream(CharSequence s, Charset charset, int bufferSize) ignores bufferSize. Fixes IO-312.",Bug fix
"New copyLarge() method in IOUtils that takes additional offset, length arguments. Fixes IO-305. Thanks to Manoj Mokashi.",Add support for a new feature
FileUtils.moveDirectoryToDirectory removes source directory if destination is a sub-directory. Fixes IO-300.,Bug fix
"ReaderInputStream#read(byte[] b, int off, int len) should check for valid parameters. Fixes IO-307.",Bug fix
"Use terabyte (TB), petabyte (PB) and exabyte (EB) in FileUtils.byteCountToDisplaySize(long size). Fixes IO-287. Thanks to Ron Kuris, Gary Gregory.",Add support for a new feature
"ReaderInputStream#read(byte[] b, int off, int len) should always return 0 for length == 0. Fixes IO-306.",Bug fix
FileUtils.listFiles() doesn't return directories. Fixes IO-173. Thanks to Marcos Vinícius da Silva.,Add support for a new feature
"""FileUtils#deleteDirectoryOnExit(File)"" does not work. Fixes IO-276. Thanks to nkami.",Bug fix
BoundedInputStream.read() treats max differently from BoundedInputStream.read(byte[]...). Fixes IO-273. Thanks to sebb.,Bug fix
CharSequenceInputStream to efficiently stream content of a CharSequence. Fixes IO-297. Thanks to Oleg Kalnichevski.,Add support for a new feature
ReaderInputStream optimization: more efficient reading of small chunks of data. Fixes IO-296. Thanks to Oleg Kalnichevski.,Memory improvement
Various methods of class 'org.apache.commons.io.FileUtils' incorrectly suppress 'java.io.IOException'. Fixes IO-298. Thanks to Christian Schulte.,Bug fix
The second constructor of Tailer class does not pass 'delay' to the third one. Fixes IO-304. Thanks to liangly.,Bug fix
TeeOutputStream does not call branch.close() when main.close() throws an exception. Fixes IO-303. Thanks to fabian.barney.,Bug fix
"ArrayIndexOutOfBoundsException in BOMInputStream when reading a file without BOM multiple times. Fixes IO-302. Thanks to jsteuerwald, detinho.",Bug fix
Add IOUtils.closeQuietly(Selector) necessary. Fixes IO-301. Thanks to kaykay.unique.,Add support for a new feature
IOUtils.closeQuietly() should take a ServerSocket as a parameter. Fixes IO-292. Thanks to sebb.,Code redesign
Add read/readFully methods to IOUtils. Fixes IO-290. Thanks to sebb.,Add support for a new feature
Supply a ReversedLinesFileReader. Fixes IO-288. Thanks to Georg Henzler.,Add support for a new feature
Add new function FileUtils.directoryContains. Fixes IO-291. Thanks to ggregory.,Add support for a new feature
"FileUtils.contentEquals and IOUtils.contentEquals - Add option to ignore ""line endings"" Added contentEqualsIgnoreEOL methods to both classes. Fixes IO-275. Thanks to CJ Aspromgos.",Add support for a new feature
,
Use standard Maven directory layout. Fixes IO-285. Thanks to ggregory.,Code redesign
Add IOUtils API toString for URL and URI to get contents. Fixes IO-284. Thanks to ggregory.,Add support for a new feature
"Add API FileUtils.copyFile(File input, OutputStream output). Fixes IO-282. Thanks to ggregory.",Add support for a new feature
Dubious use of mkdirs() return code. Fixes IO-280. Thanks to sebb.,Bug fix
ReaderInputStream enters infinite loop when it encounters an unmappable character. Fixes IO-277.,Bug fix
FileUtils.moveFile() Javadoc should specify FileExistsException thrown. Fixes IO-264.,Documentation
FileAlterationObserver has no getter for FileFilter. Fixes IO-262.,Add support for a new feature
Add FileUtils.getFile API with varargs parameter. Fixes IO-261.,Add support for a new feature
ClassLoaderObjectInputStream does not handle Proxy classes. Fixes IO-260.,Bug fix
FileAlterationMonitor.stop(boolean allowIntervalToFinish). Fixes IO-259.,Add support for a new feature
Add new APPEND parameter for writing string into files. Fixes IO-182.,Add support for a new feature
Tailer returning partial lines when reaching EOF before EOL. Fixes IO-274. Thanks to Frank Grimes.,Bug fix
FileUtils.copyFile() throws IOException when copying large files to a shared directory (on Windows). Fixes IO-266. Thanks to Igor Smereka.,Bug fix
FileSystemUtils.freeSpaceKb throws exception for Windows volumes with no visible files. Improve coverage by also looking for hidden files. Fixes IO-263. Thanks to Gil Adam.,Bug fix
,
IO-256] - Provide thread factory for FileAlternationMonitor,Add support for a new feature
[IO-257] - BOMInputStream.read(byte[]) can return 0 which it should not,Bug fix
*[IO-258] - XmlStreamReader consumes the stream during encoding detection,Bug fix
,
"Deprecations from 1.4
---------------------
- IOUtils
  - write(StringBuffer, Writer) in favour of write(CharSequence, Writer)
  - write(StringBuffer, OutputStream)  in favour of write(CharSequence, OutputStream)
  - write(StringBuffer, OutputStream, String) in favour of write(CharSequence, OutputStream, String",Deprecate functionality
"Deprecations from 1.4

- FileFilterUtils
  - andFileFilter(IOFileFilter, IOFileFilter) in favour of and(IOFileFilter...) 
  - orFileFilter(IOFileFilter, IOFileFilter)  in favour of or(IOFileFilter...)",Deprecate functionality
 Move minimum Java requirement from Java 1.3 to Java 5,Code redesign
* [IO-178] New BOMInputStream and ByteOrderMark implementations - to detect and optionally exclude an initial Byte Order mark (BOM),Add support for a new feature
* [IO-197] New BoundedInputStream (copied from Apache JackRabbit),Add support for a new feature
* [IO-193] New Broken Input and Output streams,Add support for a new feature
* [IO-132] New File Listener/Monitor facility,Add support for a new feature
* [IO-158] New ReaderInputStream and WriterOutputStream implementations,Add support for a new feature
* [IO-139] New StringBuilder Writer implementation,Add support for a new feature
* [IO-192] New Tagged Input and Output streams,Add support for a new feature
"* [IO-177] New Tailer class - simple implementation of the Unix ""tail -f"" functionality",Add support for a new feature
* [IO-162] New XML Stream Reader/Writer implementations (from ROME via plexus-utils),Add support for a new feature
* [IO-142] Comparators - add facility to sort file lists/arrays,Add support for a new feature
* [IO-186] Comparators - new Composite and Directory File Comparator implementations,Add support for a new feature
* [IO-176] DirectoryWalker - add filterDirectoryContents() callback method for filtering directory contents,Add support for a new feature
* [IO-210] FileFilter - new Magic Number FileFilter,Add support for a new feature
* [IO-221] FileFilterUtils - add methods for suffix and prefix filters which take an IOCase object,Add support for a new feature
* [IO-232] FileFilterUtils - add method for name filters which take an IOCase object,Add support for a new feature
* [IO-229] FileFilterUtils - add varargs and() and or() methods,Add support for a new feature
* [IO-198] FileFilterUtils - add ability to apply file filters to collections and arrays,Add support for a new feature
* [IO-156] FilenameUtils - add normalize() and normalizeNoEndSeparator() methods which allow the separator character to be specified,Add support for a new feature
* [IO-194] FileSystemUtils - add freeSpaceKb() method with no input arguments,Add support for a new feature
* [IO-185] FileSystemUtils - add freeSpaceKb() methods that take a timeout parameter - fixes freeSpaceWindows() blocks,Add support for a new feature
* [IO-155] FileUtils - use NIO to copy files,Code redesign
* [IO-168] FileUtils - add new isSymlink() method,Add support for a new feature
* [IO-219] FileUtils - throw FileExistsException when moving a file or directory if the destination already exists,Code redesign
* [IO-234] FileUtils - add Methods for retrieving System User/Temp directories/paths,Add support for a new feature
* [IO-208] FileUtils - add timeout (connection and read) support for copyURLToFile() method,Add support for a new feature
* [IO-238] FileUtils - add sizeOf(File) method,Add support for a new feature
* [IO-181] LineIterator now implements Iterable,Code redesign
* [IO-224] IOUtils - add closeQuietly(Closeable) and closeQuietly(Socket) methods,Add support for a new feature
* [IO-203] IOUtils - add skipFully() method for InputStreams,Add support for a new feature
* [IO-137] IOUtils and ByteArrayOutputStream - add toBufferedInputStream() method to avoid unnecessary array allocation/copy,Add support for a new feature
* [IO-195] Proxy streams/Reader/Writer - provide exception handling methods,Add support for a new feature
* [IO-211] Proxy Input/Output streams - add pre/post processing support,Add support for a new feature
* [IO-242] Proxy Reader/Writer - add pre/post processing support,Add support for a new feature
* [IO-214] ByteArrayOutputStream - fix inconsistent synchronization of fields,Bug fix
* [IO-201] Counting Input/Output streams - fix inconsistent synchronization,Bug fix
* [IO-159] FileCleaningTracker - fix remove() never returns null,Bug fix
* [IO-220] FileCleaningTracker - fix Vector performs badly under load,Bug fix
* [IO-167] FilenameUtils - fix case-insensitive string handling in FilenameUtils and FilesystemUtils,Bug fix
* [IO-179] FilenameUtils - fix StringIndexOutOfBounds exception in getPathNoEndSeparator(),Bug fix
* [IO-248] FilenameUtils - fix getFullPathNoEndSeparator() returns empty while path is a one level directory,Bug fix
* [IO-246] FilenameUtils - fix wildcardMatch gives incorrect results,Bug fix
* [IO-187] FileSystemUtils - fix freeSpaceKb() doesn't work with relative paths on Linux,Bug fix
* [IO-160] FileSystemUtils - fix freeSpace() fails on solaris,Bug fix
* [IO-209] FileSystemUtils - fix freeSpaceKb() fails to return correct size for a windows mount point,Bug fix
* [IO-163] FileUtils - fix toURLs() using deprecated method of conversion to URL,Bug fix
* [IO-168] FileUtils - fix Symbolic links followed when deleting directory,Bug fix
* [IO-231] FileUtils - fix wrong exception message generated in isFileNewer() method,Bug fix
* [IO-207] FileUtils - fix race condition in forceMkdir() method,Bug fix
* [IO-217] FileUtils - fix copyDirectoryToDirectory() makes infinite loops,Bug fix
* [IO-166] FileUtils - fix URL decoding in toFile(URL),Bug fix
* [IO-190] FileUtils - fix copyDirectory not preserving lastmodified date on subdirectories,Bug fix
* [IO-240] FileFilterUtils - ensure cvsFilter and svnFilter are only created once.,Bug fix
* [IO-175] IOUtils - fix copyFile() issues with very large files,Bug fix
* [IO-191] Improvements from static analysis,Maintainability improvement
* [IO-216] LockableFileWriter - delete files quietly when an exception is thrown during initialization,Bug fix
* [IO-243] SwappedDataInputStream - fix readBoolean is inverted,Bug fix
* [IO-235] Tests - remove unused YellOnFlushAndCloseOutputStream from CopyUtilsTest,Maintainability improvement
* [IO-161] Tests - fix FileCleaningTrackerTestCase hanging,Bug fix
* [IO-183 FilenameUtils.getExtension() method documentation improvements,Documentation
* [IO-226 FileUtils.byteCountToDisplaySize() documentation corrections,Documentation
* [IO-205 FileUtils.forceMkdir() documentation improvements,Documentation
* [IO-215 FileUtils copy file/directory improve documentation regarding preserving the last modified date,Documentation
* [IO-189 HexDump.dump() method documentation improvements,Documentation
* [IO-171 IOCase document that it assumes there are only two OSes: Windows and Unix,Documentation
* [IO-223 IOUtils.copy() documentation corrections,Documentation
* [IO-247 IOUtils.closeQuietly() improve documentation with examples,Documentation
* [IO-202 NotFileFilter documentation corrections,Documentation
* [IO-206 ProxyInputStream - fix misleading parameter names,Maintainability improvement
* [IO-212 ProxyInputStream.skip() documentation corrections,Documentation
,
"Deprecations from 1.3.2
-----------------------
- FileCleaner deprecated in favour of FileCleaningTracker [see IO-116]",Deprecate functionality
- forceDelete of orphaned Softlinks does not work [IO-147],Bug fix
- Infinite loop on FileUtils.copyDirectory when the destination directory is within,Bug fix
- Add a copyDirectory() method that makes use of FileFilter [IO-105],Add support for a new feature
- Add moveDirectory() and moveFile() methods [IO-77],Add support for a new feature
 HexDump's use of static StringBuffers isn't thread-safe [IO-136],Bug fix
- Add a deleteQuietly method [IO-135],Add support for a new feature
- Add file name extension separator constants[IO-149],Add support for a new feature
- Add a new IOException implementation with constructors which take a cause,Add support for a new feature
- Add new Tee input stream implementation,Add support for a new feature
- Add new File Writer implementation that accepts an encoding,Add support for a new feature
"- Add new Reader implementation that handles any CharSequence (String,StringBuffer, StringBuilder or CharBuffer)",Add support for a new feature
- Add a reset() method which sets the count of the bytes written back to zero.,Add support for a new feature
- Add support for temporary files,Add support for a new feature
- Add a new write(InputStream) method [IO-152],Add support for a new feature
"- New Closed Input/Output stream implementations [IO-122], - AutoCloseInputStream - automatically closes and discards the underlying input stream
- ClosedInputStream - returns -1 for any read attempts
- ClosedOutputStream - throws an IOException for any write attempts
- CloseShieldInputStream - prevents the underlying input stream from being closed.
- CloseShieldOutputStream - prevents the underlying output stream from being closed.",Add support for a new feature
- Add Singleton Constants to several stream classes [IO-143],Add support for a new feature
- Add facility to specify case sensitivity on prefix matching,Add support for a new feature
- Add facility to specify case sensitivity on suffix matching,Add support for a new feature
- Add new regular expression file filter implementation,Add support for a new feature
- Make IOFileFilter implementations Serializable [IO-131],Code redesign
- Improve IOFileFilter toString() methods [IO-120],Maintainability improvement
"- Make fields final so classes are immutable/threadsafe [IO-133] - changes to Age, Delegate, Name, Not, Prefix, Regex, Size, Suffix and Wildcard IOFileFilter implementations.",Maintainability improvement
- Add a compare method to IOCase [IO-144],Add support for a new feature
"- Add a package of java.util.Comparator implementations for files [IO-145] - DefaultFileComparator - compare files using the default File.compareTo(File) method.
- ExtensionFileComparator - compares files using file name extensions.
- LastModifiedFileComparator - compares files using the last modified date/time.
- NameFileComparator - compares files using file names.
- PathFileComparator - compares files using file paths.
- SizeFileComparator - compares files using file sizes.",Add support for a new feature
,
"- Created the FileCleaningTracker, basically a non-static version of the FileCleaner, which can be controlled by the user. [IO-116]",Add support for a new feature
- The FileCleaner is deprecated.,Deprecate functionality
"- Some tests, which are implicitly assuming a Unix-like file system, are now skipped on Windows. [IO-115]",Bug fix
- EndianUtils - Both readSwappedUnsignedInteger(...) methods could return negative numbers due to int/long casting. [IO-117],Bug fix
,
- FileUtils  NPE in openOutputStream(File) when file has no parent in path [IO-112],Bug fix
- readFileToString(File) is not static [IO-113],Bug fix
,
"WildcardFilter deprecated, replaced by WildcardFileFilter",Deprecate functionality
"ileSystemUtils.freeSpace deprecated, replaced by freeSpaceKb",Deprecate functionality
LineIterator now implements Iterator,Bug fix
"- FileSystemUtils.freeSpace/freeSpaceKb [IO-83]
  - These should now work on AIX and HP-UX",Bug fix
"- FileSystemUtils.freeSpace/freeSpaceKb [IO-90]
  - Avoid infinite looping in Windows",Bug fix
"- FileSystemUtils.freeSpace/freeSpaceKb [IO-90]
 - Catch more errors with nice messages",Bug fix
"- FileSystemUtils.freeSpace [IO-91]
  - This is now documented not to work on SunOS 5",Documentation
"- FileSystemUtils [IO-93]
  - Fixed resource leak leading to 'Too many open files' error",Bug fix
" FileUtils.touch [IO-100]
  - The touch method previously gave no indication when the file could not
    be touched successfully (such as due to access restrictions) - it now
    throws an IOException if the last modified date cannot be changed",Bug fix
"- FileCleaner
  - This now handles the situation where an error occurs when deleting the file",Bug fix
"- IOUtils.copy [IO-84]
  - Copy methods could return inaccurate byte/char count for large streams",Bug fix
"- Added a new copyLarge(InputStream, OutputStream) method that returns a long",Add support for a new feature
"- Added a new copyLarge(Reader, Writer) method that returns a long",Add support for a new feature
"- CountingInputStream/CountingOutputStream [IO-84]
  - Methods were declared as int thus the count was inaccurate for large streams",Bug fix
- new long based methods getByteCount()/resetByteCount() added,Add support for a new feature
- existing methods changed to throw an exception if the count is greater than an int,Bug fix
"- FileBasedTestCase
  - Fixed bug in compare content methods identified by GNU classpath",Bug fix
"- EndianUtils.writeSwappedLong(byte[], int) [IO-101]
  - An int overrun in the bit shifting when it should have been a long",Bug fix
"- EndianUtils.writeSwappedLong(InputStream) [IO-102]
  - The return of input.read(byte[]) was not being checked to ensure all 8 bytes were read",Bug fix
DirectoryWalker,Add support for a new feature
IOCase,Add support for a new feature
"FilenameUtils
  - New methods to handle case-sensitivity",Add support for a new feature
- wildcardMatch - new method that has IOCase as a parameter,Add support for a new feature
- equals - new method that has IOCase as a parameter,Add support for a new feature
- FileUtils [IO-108] - new default encoding methods for:,Add support for a new feature
" FileUtils.openOutputStream  [IO-107]
  - new method to open a FileOutputStream, creating parent directories if required",Add support for a new feature
" FileUtils.isFileOlder
  - new methods to check if a file is older (i.e. isFileOlder()) - counterparts
    to the existing isFileNewer() methods.",Add support for a new feature
"- FileUtils.checksum, FileUtils.checksumCRC32
  - new methods to create a checksum of a file",Add support for a new feature
"- FileUtils.copyFileToDirectory  [IO-104]
  - new variant that optionally retains the file date",Add support for a new feature
FileDeleteStrategy,Add support for a new feature
"- FileCleaner    [IO-56,IO-70]",Add support for a new feature
 FileCleaner.exitWhenFinished,Add support for a new feature
WildcardFileFilter,Add support for a new feature
"NameFileFilter
  - Ability to control case-sensitivity",Add support for a new feature
"FileFileFilter
  - New IOFileFilter implementation",Add support for a new feature
"- CanReadFileFilter
  - New IOFileFilter implementation",Add support for a new feature
"CanWriteFileFilter
  - New IOFileFilter implementation",Add support for a new feature
"- HiddenFileFilter
  - New IOFileFilter implementation",Add support for a new feature
"- EmptyFileFilter
  - New IOFileFilter implementation",Add support for a new feature
- TrueFileFilter/FalseFileFilter/DirectoryFileFilter,Add support for a new feature
"FileFilterUtils.makeDirectoryOnly/makeFileOnly
  - two new methods that decorate a file filter to make it apply to
    directories only or files only",Add support for a new feature
 NullWriter,Add support for a new feature
NullInputStream,Add support for a new feature
 NullReader,Add support for a new feature
" ByteArrayOutputStream  [IO-97]
  - Performance enhancements",Performance improvement
,
"- FileSystemUtils.freeSpace(drive)
  Fix to allow Windows based command to function in French locale",Bug fix
"- FileUtils.read*
  Increase certainty that files are closed in case of error",Bug fix
"- LockableFileWriter
  Locking mechanism was broken and only provided limited protection [38942]
  File deletion and locking in case of constructor error was broken",Bug fix
 AgeFileFilter/SizeFileFilter,Add support for a new feature
FileSystemUtils.freeSpaceKb(drive),Add support for a new feature
"FileUtils.contentEquals(File,File) Performance improved by adding length and file location checking",Performance improvement
"- FileUtils.iterateFiles
  Two new method to provide direct access to iterators over files",Add support for a new feature
"- FileUtils.lineIterator
  IOUtils.lineIterator
  New methods to provide an iterator over the lines in a file [38083]",Add support for a new feature
"- FileUtils.copyDirectoryToDirectory
  New method to copy a directory to within another directory [36315]",Add support for a new feature
,
- CopyUtils has been deprecated.,Deprecate functionality
"- FileUtils - touch()  [29821]
    Now creates the file if it did not previously exist",Bug fix
"- FileUtils - toFile(URL)  [32575]
    Now handles escape syntax such as %20",Bug fix
"- FileFilterUtils - makeCVSAware(IOFileFilter)  [33023]
    Fixed bug that caused method to be completely broken",Bug fix
"- CountingInputStream  [33336]
    Fixed bug that caused the count to reduce by one at the end of the stream",Bug fix
"- CountingInputStream - skip(long)  [34311]
    Bytes from calls to this method were not previously counted",Bug fix
"- NullOutputStream  [33481]
    Remove unnecessary synchronization",Bug fix
"- AbstractFileFilter - accept(File, String)  [30992]
    Fixed broken implementation",Bug fix
"- FileUtils  [36801]
    Previously threw NPE when listing files in a security restricted directory
    Now throw IOException with a better message",Bug fix
"- FileUtils - writeStringToFile()
    Null encoding now correctly uses the platform default",Bug fix
FilenameUtils - new class,Add support for a new feature
FileSystemUtils - new class,Add support for a new feature
IOUtils - new public constants,Add support for a new feature
"IOUtils - toByteArray(Reader,encoding)",Add support for a new feature
IOUtils - toCharArray(InputStream)  [28979],Add support for a new feature
IOUtils - readLines(InputStream),Add support for a new feature
ziOUtils - toInputStream(String),Add support for a new feature
" IOUtils - writeLines(Collection,lineEnding,OutputStream)",Add support for a new feature
IOUtils - write(...),Add support for a new feature
IOUtils - copy(...),Add support for a new feature
"IOUtils - contentEquals(Reader,Reader)",Add support for a new feature
FileUtils - toFiles(URL[]),Add support for a new feature
FileUtils - copyDirectory(),Add support for a new feature
FileUtils - readFileToByteArray(File),Add support for a new feature
"FileUtils - writeByteArrayToFile(File,byte[])",Add support for a new feature
"FileUtils - readLines(File,encoding)",Add support for a new feature
"FileUtils - writeLines(File,encoding,List)",Add support for a new feature
FileUtils - EMPTY_FILE_ARRAY,Add support for a new feature
ConditionalFileFilter - new interface,Add support for a new feature
"AndFileFilter, OrFileFilter",Add support for a new feature
WildcardFilter,Add support for a new feature
FileFilterUtils - makeSVNAware(IOFileFilter),Add support for a new feature
ClassLoaderObjectInputStream,Add support for a new feature
"CountingInputStream,CountingOutputStream - resetCount() ",Add support for a new feature
DeferredFileOutputStream - writeTo(OutputStream),Add support for a new feature
DeferredFileOutputStream,Add support for a new feature
LockableFileWriter - encoding support,Add support for a new feature
IOUtils and EndianUtils are no longer final,Code redesign
,
,
Pull request #1687: Mark ThreadGroups created by FailOnTimeout as daemon groups,Bug fix
Pull request $1691: Only create ThreadGroups if FailOnTimeout.lookForStuckThread is true.,Bug fix
Pull request #1654: Fix for issue #1192: NotSerializableException with AssumptionViolatedException,Bug fix
,
Security fix: TemporaryFolder now limits access to temporary folders on Java 1.7 or later,Security improvement
Pull request #1669: Make FrameworkField constructor public,Code redesign
,
Pull request #1054: Improved error message for assertArrayEquals when multi-dimensional arrays have different lengths,Maintainability improvement
Pull request #1154 and #1504 Add assertThrows,Add support for a new feature
-,Maintainability improvement
Pull request #1300: Show contents of actual array when array lengths differ,Code redesign
Pull request #1315: assertArrayEquals shouldn't throw an NPE when test suites are compiled/run across versions of junit,Bug fix
Pull request #1150: Deprecate Assert#assertThat,Deprecate functionality
Pull request #1037: BlockJUnit4ClassRunner#createTest now accepts FrameworkMethod,Code redesign
Pull request #1082: Ensure exceptions from BlockJUnit4ClassRunner.methodBlock() don't result in unrooted tests,Bug fix
Pull request #1286: Provide better feedback to the user in case of invalid test classes,Maintainability improvement
Pull request #1252: Restore ability use ParentRunner lost in separate class loader,Bug fix
Pull request #1377: Description produced by Request.classes() shouldn't be null,Bug fix
Issue #1290: Tests expecting AssumptionViolatedException are now correctly marked as passed,Bug fix
Pull request #1465: Provide helpful message if parameter cannot be set.,Maintainability improvement
Issue #1329: Support assumptions in @Parameters method,Bug fix
Pull request #1449: Parameterized runner reuses TestClass instance,Memory improvement
"Pull request #1130: Add Ordering, Orderable and @OrderWith",Add support for a new feature
Pull request #1408: Suites don't have to be public,Bug fix
Pull request #1638: Never reorder classes annotated with @FixMethodOrder,Bug fix
Pull request #1044: Strict verification of resource deletion in TemporaryFolder rule,Add support for a new feature
Issue #1100: StopWatch does not need to be abstract.,Code redesign
Issue #1157: TestName: Make 'name' field volatile,Code redesign
Issue #1223: TemporaryFolder doesn't work for parallel test execution in several JVMs,Bug fix
Pull request #1305: Add ErrorCollector.checkThrows,Add support for a new feature
Issue #1303: Prevent following symbolic links when deleting temporary directories,Bug fix
Issue #1295: Javadoc for RuleChain contains errors,Documentation
Pull request #1313: RuleChain.around() rejects null arguments,Bug fix
Pull request #1397: Change generics on ExpectedException.expectCause(),Bug fix
Pull request #1443: ExpectedException.isAnyExceptionExpected() is now public,Bug fix
Pull request #1395: Wrap assumption violations in ErrorCollector,Bug fix
-,Bug fix
Pull request #1402: TemporaryFolder.newFolder(String) supports paths with slashes,Bug fix
Pull requests #1406 (part 1) and #1568: Improve error message when TemporaryFolder.newFolder(String) fails,Bug fix
-,Maintainability improvement
Pull request #1406 (part 2): TemporaryFolder.newFolder(String...) supports path separator,Bug fix
Pull request #1406 (part 3): TemporaryFolder.newFolder(String...) fails for empty array,Bug fix
Pull request #1335: Fix ExternalResource: the test failure could be lost,Bug fix
Pull request #1435: @BeforeParam/@AfterParam method annotations for Parameterized tests.,Add support for a new feature
Pull request #1460: Handle assumption violations in the @Parameters method for Parameterized tests.,Bug fix
Pull request #1445 and Pull request #1335: Declarative ordering of rules.,Add support for a new feature
-,Deprecate functionality
-,Documentation
Pull request #1517: Timeout rule destroys its ThreadGroups at the end,Bug fix
Pull request #1633: Deprecate ExpectedException.none(),Deprecate functionality
Pull request #1413: Ignore bridge methods when scanning for annotated methods,Bug fix
Pull request #1612: Make @ValidateWith only applicable to annotation types,Bug fix
Pull request #1118: Add suite start/finish events to listener,Add support for a new feature
Pull request #1359: Fixes how MultipleFailureException stack traces are printed,Code redesign
Pull request #1376: Initializing MultipleFailureException with an empty list will now fail the test,Bug fix
Pull request #1371: Update MultipleFailureException.assertEmpty() to wrap assumption failure,Code redesign
Issue #1290: @Test(expected = AssumptionViolatedException.class) passes for AssumptionViolatedException,Bug fix
Pull request #1227: Behave better if the SecurityManager denies access to junit.properties,Bug fix
"Pull request #1571: Set ""junit"" as ""Automatic-Module-Name""",Code redesign
Pull request #1028: Trim stack trace,Code redesign
Pull request #1403: Restore CategoryFilter constructor,Code redesign
Pull request #1530: Add Result#getAssumptionFailureCount,Add support for a new feature
Pull request #1292: Fix ResultMatchers#hasFailureContaining,Bug fix
Pull request #1380: Fix Assume#assumeNotNull,Bug fix
Pull request #1557: MaxCore always closes stream of history file,Bug fix
,
Pull request #611: Assert.assertNotEquals() for float parameters,Add support for a new feature
Pull request #632: Assert.assertArrayEquals() for boolean[] parameters.,Add support for a new feature
Pull request #918: Avoid potentially expensive reflection-based loop in Assert.assertArrayEquals(),Performance improvement
Pull request #647: Support command-line --filter param.,Add support for a new feature
Pull request #763: Allow custom test runners to create their own TestClasses and customize the scanning of annotations.,Add support for a new feature
Pull request #817: Support for context hierarchies,Add support for a new feature
Pull request #716: Fix annotation collection from superclasses of JUnit3 tests.,Bug fix
Pull request #625 (commit 72af03c49f): Make RunNotifier code concurrent.,Bug fix
Pull request #684: Adding AnnotationValidator framework and validation checks for @Category.,Add support for a new feature
Pull request #583: Pull request #720: Fix handling of AssertionError and AssumptionViolatedException in ExpectedException rule.,Bug fix
-,Bug fix
Pull request #818: Pull request #993: External version of AssumptionViolatedException,Bug fix
-,Maintainability improvement
Pull request #985: Change AssumptionViolatedException to not set the cause to null; fixes issue #494,Bug fix
Pull request #542: Customized failure message for ExpectedException,Add support for a new feature
Pull request #1013: Make ErrorCollector#checkSucceeds generic,Code redesign
Pull request #823: Throw TestFailedOnTimeoutException instead of plain Exception on timeout,Bug fix
Pull request #742: Pull request #986: Timeout exceptions now include stack trace from stuck thread (experimental),Add support for a new feature
Pull request #544: New constructor and factories in Timeout,Add support for a new feature
-,Add support for a new feature
-,Deprecate functionality
Pull request #549: fixes for #544 and #545,Bug fix
-,Bug fix
Pull request #876: The timeout rule never times out if you pass in a timeout of zero.,Bug fix
Pull request #702: Support more return types for the @Parameters method of the Parameterized runner,Add support for a new feature
Pull request #773: Allow configurable creation of child runners of parameterized suites,Add support for a new feature
Pull request #552: Pull request #937: Stopwatch rule,Add support for a new feature
Pull request #932: Allow static @Rules also annotated with @ClassRule,Code redesign
Pull request #956: DisableOnDebug rule,Add support for a new feature
Pull request #974: Updated TemporaryFolder.newFolder() to give an error message if a path contains a slash.,Bug fix
Pull request #1015: Methods annotated with Rule can return a MethodRule.,Bug fix
Pull request #1020: Added validation that @ClassRule should only be implementation of TestRule.,Bug fix
Pull request #1021: JavaDoc of TemporaryFolder: folder not guaranteed to be deleted.,Documentation
Pull request #529: @DataPoints-annotated methods can now yield null values,Bug fix
Pull request #572: Ensuring no-generic-type-parms validator called/tested for theories,Bug fix
Pull request #607: Improving theory failure messages,Maintainability improvement
Pull request #601: Allow use of Assume in tests run by Theories runner,Bug fix
Pull request #623: Ensure data points array fields and methods are public and static in Theory classes.,Bug fix
"Pull request #621: Added mechanism for matching specific data points in theories to specific parameters, by naming data points.",Add support for a new feature
Pull request #654: Auto-generation of enum and boolean data points,Add support for a new feature
Pull request #651: Improvements to Theory parameter and DataPoint type matching,Bug fix
-,Bug fix
Pull request #639: Failing theory datapoint methods now cause theory test failures,Bug fix
Pull request #658: Iterables can now be used as data points,Add support for a new feature
Pull request #566: Enables inheritance on Category by adding @Inherited,Code redesign
Pull request #503: Configurable Categories,Add support for a new feature
[Pull request #879:] (#879) Add the default 'Implementation-*' headers to the manifest,Maintainability improvement
Pull request #511: Maven project junit:junit:jar,Support for external development tool
Pull request #776: Add support for Travis CI,Support for external development tool
Pull request #921: Apply Google Code Style,Maintainability improvement
Pull request #939 Renamed license file,Bug fix
Pull request #962: Do not include thread start time in test timeout measurements.,Performance improvement
,
Matchers: Upgrade to Hamcrest 1.3,Add support for a new feature
Parameterized Tests,Add support for a new feature
Test execution order,Code redesign
Maven artifacts,Code redesign
MethodRule is no longer deprecated.,Code redesign
Both @Rule and @ClassRule can now be used on methods that return a TestRule.,Code redesign
ExpectedException now always prints the stacktrace of the actual exception in case of failure.,Maintainability improvement
"A parent folder can be specified for TemporaryFolder. In addition, the newFile/newFolder methods will now fail when the file or folder could not be created.",Add support for a new feature
TestWatcher has a new template method called skipped that is invoked when a test is skipped due to a failed assumption.,Add support for a new feature
assertNotEquals has been added to Assert.,Add support for a new feature
assertEquals has been overloaded in order to check whether two floats are equal given a certain float delta.,Add support for a new feature
Most methods in Assume now allow to pass a custom message.,Add support for a new feature
,
junit-dep has correct contents,Bug fix
RuleChain,Add support for a new feature
"TemporaryFolder#newFolder(String... folderNames) creates recursively deep temporary folders [@rodolfoliviero, closing gh-283]",Code redesign
"TemporaryFolder#newFile() creates a randomly named new file, and #newFolder() creates a randomly named new folder [@Daniel Rothmaler, closing gh-299]",Code redesign
"The Theories runner does not anticipate theory parameters that have generic types, as reported by github#64.",Bug fix
"TemporaryFolder should not create files in the current working directory if applying the rule fails [@orfjackal, fixing gh-278]",Bug fix
"TestWatcher and TestWatchman should not call failed for AssumptionViolatedExceptions [@stefanbirkner, fixing gh-296]",Bug fix
"Assert documentation [@stefanbirkner, fixing gh-134]",Documentation
"ClassRule [@stefanbirkner, fixing gh-254]",Documentation
"Parameterized [@stefanbirkner, fixing gh-89]",Documentation
"Parameterized, again [@orfjackal, fixing gh-285]",Documentation
"Useless code in RunAfters [@stefanbirkner, fixing gh-289]",Performance improvement
"Parameterized test classes should be able to have @Category annotations [@dsaff, fixing gh-291]",Bug fix
"Error count should be initialized in junit.tests.framework.TestListenerTest [@stefanbirkner, fixing gh-225]",Bug fix
"AssertionFailedError constructor shouldn't call super with null message [@stefanbirkner, fixing gh-318]",Bug fix
"Clearer error message for non-static inner test classes [@stefanbirkner, fixing gh-42]",Bug fix
"Description, Result and Failure are Serializable [@ephox-rob, closing gh-101]",Code redesign
"FailOnTimeout is reusable, allowing for retrying Rules [@stefanbirkner, closing gh-265]",Bug fix
"New ErrorCollector.checkThat overload, that allows you to specify a reason [@drothmaler, closing gh-300]",Add support for a new feature
,
ClassRule,Add support for a new feature
"In JUnit 4.9, fields that can be annotated with either @Rule or @ClassRule should be of type TestRule.",Code redesign
-,Deprecate functionality
"Maven bundles have, in the past, been uploaded by kind volunteers. Starting with this release, the JUnit team is attempting to perform this task ourselves.",Code redesign
The Common Public License that JUnit is released under is now included in the source repository.,Code redesign
github#98: assumeTrue() does not work with expected exceptions,Bug fix
github#74: Categories + Parameterized,Bug fix
github#38: ParentRunner filters more than once,Bug fix
github#248: protected BlockJUnit4ClassRunner#rules method removed from 4.8.2,Bug fix
github#187: Accidental dependency on Java 6,Bug fix
"github#163: Bad comparison failure message when using assertEquals(String, String)",Bug fix
github#227: ParentRunner now assumes that getChildren() returns a modifiable list,Bug fix
"Backed out unused folder ""experimental-use-of-antunit"", replaced by bash-based script at build_tests.sh",Maintainability improvement
Various Javadoc fixes,Documentation
"Made MultipleFailureException public, to assist extension writers.",Code redesign
"github#240: Add ""test"" target to build.xml, for faster ant-driven testing.",Maintainability improvement
github#247: Give InitializationError a useful message,Bug fix
,
github#96: TestSuite(MyTestCase.class) should dynamically detect if MyTestCase is a TestCase,Bug fix
,
github#61: Category annotations on classes were not honored.,Bug fix
,
"From a given set of test classes, the Categories runner runs only the classes and methods that are annotated with either the category given with the @IncludeCategory annotation, or a subtype of that category.",Add support for a new feature
github#16: thread safety of Result counting,Bug fix
,
The TemporaryFolder Rule allows creation of files and folders that are guaranteed to be deleted when the test method finishes (whether it passes or fails):,Add support for a new feature
"ExternalResource is a base class for Rules (like TemporaryFolder) that set up an external resource before a test (a file, socket, server, database connection, etc.), and guarantee to tear it down afterward:",Add support for a new feature
"The ErrorCollector Rule allows execution of a test to continue after the first problem is found (for example, to collect all the incorrect rows in a table, and report them all at once):",Add support for a new feature
"Verifier is a base class for Rules like ErrorCollector, which can turn otherwise passing test methods into failing tests if a verification check is failed",Add support for a new feature
"TestWatchman is a base class for Rules that take note of the testing action, without modifying it. For example, this class will keep a log of each passing and failing test:",Add support for a new feature
The TestName Rule makes the current test name available inside test methods:,Add support for a new feature
The Timeout Rule applies the same timeout to all test methods in a class:,Add support for a new feature
The ExpectedException Rule allows in-test specification of expected exception types and messages:,Add support for a new feature
Tests that time out now show the stack trace of the test thread.,Code redesign
"Due to typing incompatibilities, JUnit is still including the 1.1 release of hamcrest. ",Code redesign
Javadocs now link to online JDK javadocs (bug 2090230),Documentation
Parameterized runner javadocs improved (bug 2186792),Documentation
Fixed Javadoc code sample for AfterClass (2126279),Documentation
"Fixed Javadoc for assertArraysEqual(float[], float[])",Documentation
Fixed: BaseTestRunner.getTest() requires class to extend TestCase (1812200),Bug fix
Fixed: Suite does not allow for inheritance in annotations (2783118),Bug fix
Fixed: ParallelComputer skipped tests that took longer than 2 seconds,Bug fix
,
"JUnit now includes a new experimental Core, MaxCore. MaxCore remembers the results of previous test runs in order to run new tests out of order.",Add support for a new feature
JUnitCore now includes an experimental method that allows you to specify a model of the Computer that runs your tests.,Add support for a new feature
"Arrays of doubles can be compared, using a delta allowance for equality:",Add support for a new feature
Filter.matchDescription API,Add support for a new feature
A couple classes and packages that once had empty javadoc have been doc'ed.,Documentation
Added how to run JUnit from the command line to the cookbook.,Documentation
junit-4.x.zip now contains build.xml,Code redesign
Fixed overly permissive @DataPoint processing (2191102),Bug fix
Fixed bug in test counting after an ignored method (2106324),Bug fix
,
"We are releasing junit-4.5.jar, which contains all the classes necessary to run JUnit, and junit-dep-4.5.jar, which leaves out hamcrest classes, for developers who already use hamcrest outside of JUnit.",Code redesign
Test classes whose only test methods are inherited from superclasses now run.,Bug fix
"Optimization to annotation processing can cut JUnit overhead by more than half on large test classes, especially when using Theories. [Bug 1796847]",Bug fix
"Correct results when comparing the string ""null"" with potentially null values. [Bug 1857283]",Bug fix
"Annotating a class with @RunWith(JUnit4.class) will always invoke the default JUnit 4 runner in the current version of JUnit. This default changed from JUnit4ClassRunner in 4.4 to BlockJUnit4ClassRunner in 4.5 (see below), and may change again.",Code redesign
BlockJUnit4Runner is a new implementation of the standard JUnit 4 test class functionality. In contrast to JUnit4ClassRunner (the old implementation):,Add support for a new feature
"ParentRunner is a base class for runners that iterate over a list of ""children"", each an object representing a test or suite to run. ParentRunner provides filtering, sorting, @BeforeClass, @AfterClass, and method validation to subclasses.",Add support for a new feature
"TestClass wraps a class to be run, providing efficient, repeated access to all methods with a given annotation.",Add support for a new feature
The new RunnerBuilder API allows extending the behavior of Suite-like custom runners.,Add support for a new feature
AssumptionViolatedException.toString() is more informative,Maintainability improvement
Parameterized.eachOne() has been removed,Code redesign
New runner Enclosed runs all static inner classes of an outer class.,Add support for a new feature
"@Before and @After methods are run before and after each set of attempted parameters on a Theory, and each set of parameters is run on a new instance of the test class.",Add support for a new feature
Exposed API's ParameterSignature.getType() and ParameterSignature.getAnnotations(),Add support for a new feature
An array of data points can be introduced by a field or method marked with the new annotation @DataPoints,Add support for a new feature
The Theories custom runner has been refactored to make it faster and easier to extend,Maintainability improvement
-,Performance improvement
"Source has been split into directories src/main/java and src/test/java, making it easier to exclude tests from builds, and making JUnit more maven-friendly",Code redesign
"Test classes in org.junit.tests have been organized into subpackages, hopefully making finding tests easier.",Code redesign
ResultMatchers has more informative descriptions.,Documentation
TestSystem allows testing return codes and other system-level interactions.,Add support for a new feature
"Removed Request.classes(String, Class<?>...) factory method",Code redesign
Each test method and test class can be annotated as belonging to a category:,Add support for a new feature
"Tests with failed assumptions are now marked as Ignored, rather than silently passing. This may change behavior in some client tests, and also will require some new support on the part of IDE's.",Code redesign
,
assertThat,Add support for a new feature
"To allow compatibility with a wide variety of possible matchers, we have decided to include the classes from hamcrest-core, from the Hamcrest project. This is the first time that third-party classes have been included in JUnit.",Add support for a new feature
The support for Theories,Add support for a new feature
Annotated descriptions,Add support for a new feature
"Bug fix (1715326): assertEquals now compares all Numbers using their native implementation of equals. This assertion, which passed in 4.3, will now fail:",Bug fix
"Non-integer Numbers (Floats, Doubles, BigDecimals, etc), which were compared incorrectly in 4.3, are now fixed",Bug fix
"assertEquals(long, long) and assertEquals(double, double) have been re-introduced to the Assert class, to take advantage of Java's native widening conversions. Therefore, this still passes:",Code redesign
"The default runner for JUnit 4 test classes has been refactored. The old version was named TestClassRunner, and the new is named JUnit4ClassRunner",Maintainability improvement
The rules for determining which runner is applied by default to a test class have been simplified:,Maintainability improvement
Bug fix (1739095): Filters and Sorters work correctly on test classes that contain a suite method like:,Bug fix
Bug fix (1745048): @After methods are now correctly called after a test method times out.,Bug fix
,
Regression,Bug fix
Regression,Bug fix
,
"Changes in array equality. Using assertEquals to compare array contents is now deprecated. In the future, assertEquals will revert to its pre-4.0 meaning of comparing objects based on Java's Object.equals semantics. To compare array contents, use the new, more reliable Assert.assertArrayEquals methods.",Code redesign
-,Deprecate functionality
"The @Ignore annotation can now be applied to classes, to ignore the entire class, instead of individual methods.",Add support for a new feature
"Originally, developers who wanted to use a static suite() method from JUnit 3.x with a JUnit 4.x runner had to annotate the class with @RunWith(AllTests.class). In the common case, this requirement has been removed. However, when such a class is wrapped with a JUnit4TestAdapter (which we believe is rare), the results may not be as expected.",Code redesign
"Improved error messages for array comparison(""arrays first differed at element [1][0]"")",Maintainability improvement
Bug fix: Inaccessible base class is caught at test construction time.,Bug fix
Bug fix: Circular suites are caught at test construction time.,Bug fix
Bug fix: Test constructors that throw exceptions are reported correctly.,Bug fix
"Sources now are in a separate ""src"" directory (this means a big break in the CVS history)",Code redesign
"Improved documentation in Request, RunWith",Documentation
,
Bug fix: Inaccessible base class is caught at test construction time.,Bug fix
Bug fix: Circular suites are caught at test construction time.,Bug fix
"Improved error messages for array comparison(""arrays first differed at element [1][0]"")",Maintainability improvement
Test constructors that throw exceptions are reported correctly.,Bug fix
,
"Bug fix: listeners now get a correct test running time, rather than always being told 0 secs.",Bug fix
The @RunWith annotation is now inherited by subclasses: all subclasses of an abstract test class will be run by the same runner.,Code redesign
The build script fails if the JUnit unit tests fail,Bug fix
The faq has been updated,Documentation
"Javadoc has been improved, with more internal links, and package descriptions added (Thanks, Matthias Schmidt!)",Documentation
An acknowledgements.txt file has been created to credit outside contributions,Documentation
"The Enclosed runner, which runs all of the static inner classes of a given class, has been added to org.junit.runners.",Code redesign
,
"The architecture of JUnit 4.0 is a substantial departure from that of earlier releases. Instead of tagging test classes by subclassing junit.framework.TestCase and tagging test methods by starting their name with ""test"", you now tag test methods with the @Test annotation.",Code redesign
,
JDBC Appender should use JNDI Manager and JNDI access should be limited. Backport fix for CVE-2021-44832.,Bug fix
Add support for specifying an SSL configuration for SmtpAppender. Backport fix for CVE-2020-9488 to allow SSL/TLS hostname verification. Fixes LOG4J2-2819.,Add support for a new feature
,
"Limit JNDI to the java protocol only. JNDI will remain disabled by default. Rename JNDI enablement property from 'log4j2.enableJndi' to 'log4j2.enableJndiLookup', 'log4j2.enableJndiJms', and 'log4j2.enableJndiContextSelector'. Fixes LOG4J2-3242.",Code redesign
Fix string substitution recursion. Fixes LOG4J2-3230.,Bug fix
Pattern layout no longer enables lookups within message text. Fixes LOG4J2-3198.,Bug fix
,
Incorrectly defined compressionType parameter to GelfLayout. Fixes LOG4J2-1009. Thanks to Mikael Ståldal.,Bug fix
"org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.extractPath(URL) incorrectly converts '+' characters to spaces. Fixes LOG4J2-1008. Thanks to Ralph Goers, Gary Gregory.",Bug fix
"org.apache.logging.log4j.core.util#fileFromUri(URI uri) incorrectly converts '+' characters to spaces. Fixes LOG4J2-1007. Thanks to Ralph Goers, Gary Gregory.",Bug fix
JUL Logger.throwing is mis-mapped to ERROR when it should be TRACE. Fixes LOG4J2-1003. Thanks to Dan Armbrust.,Bug fix
System.out no longer works after the Console appender and JANSI are initialized. Fixes LOG4J2-965. Thanks to Khotyn Huang.,Bug fix
Make org.apache.logging.log4j.core.Logger#updateConfiguration protected. Fixes LOG4J2-998. Thanks to Mariano Gonzalez.,Code redesign
Move UTF-8 constant from Charsets to Constants class. Remove Charsets class. Fixes LOG4J2-995.,Code redesign
Deadlock would occur if appender thread creates a new Logger during reconfiguration. Fixes LOG4J2-993.,Bug fix
Async root logger config should default includeLocation to false. Fixes LOG4J2-991. Thanks to Ryan Rupp.,Bug fix
AbstractFilter should not implement equals() and hashCode(). Fixes LOG4J2-985. Thanks to Sean Dawson.,Code redesign
PatternLayout %highlight to support noConsoleNoAnsi like %style. Fixes LOG4J2-984. Thanks to Jonas Höpfner.,Add support for a new feature
Truncate from the end of text format modifier. Fixes LOG4J2-926. Thanks to David Ohana.,Add support for a new feature
Numerical overflow in BurstFilter not handled correctly. Fixes LOG4J2-980. Thanks to Mikhail Mazurskiy.,Bug fix
Incorrect unlock in ProviderUtil. Fixes LOG4J2-981. Thanks to Mikhail Mazurskiy.,Bug fix
KeyStoreConfiguration.createKeyStoreConfiguration() ignores keyManagerFactoryAlgorithm. Fixes LOG4J2-966. Thanks to Gary Gregory.,Bug fix
Using monitorInterval with YAML config file format causes JSONParseException. Fixes LOG4J2-976. Thanks to Matt Quinn.,Bug fix
StringFormattedMessage serialization is incorrect. Fixes LOG4J2-964. Thanks to Jonne Jyrylä.,Bug fix
A new StatusLoggerAdmin listener is added to StatusLogger every time the log is reconfigured. Fixes LOG4J2-947. Thanks to Stefan Wehner.,Add support for a new feature
SyslogLayout contains extra space. Fixes LOG4J2-968. Thanks to Paul D Johe.,Bug fix
log4j2.component.properties not read for all properties. Fixes LOG4J2-967. Thanks to Stefan Wehner.,Bug fix
Another bad priority in Syslog messages. Fixes LOG4J2-971. Thanks to Paul D Johe.,Bug fix
org.apache.logging.log4j.core.net.ssl.TlsSyslogInputStreamReader does not need to create temp Integer objects. Fixes LOG4J2-972. Thanks to Gary Gregory.,Code redesign
Typo in EventLogger documentation. Fixes LOG4J2-974. Thanks to Daniel Galán y Martins.,Documentation
Update LMAX Disruptor from 3.3.0 to 3.3.2. Fixes LOG4J2-988. Thanks to Gary Gregory.,Update dependency
Migrate tests from Logback 1.1.2 to 1.1.3. Fixes LOG4J2-987. Thanks to Gary Gregory.,Update dependency
Update tests to use ActiveMQ from 5.10 to 5.11.1. Fixes LOG4J2-988. Thanks to Gary Gregory.,Update dependency
Update Jackson from 2.5.1 to 2.5.3. Fixes LOG4J2-1004.,Update dependency
Update Slf4j from 1.7.7 to 1.7.12. Fixes LOG4J2-1005.,Update dependency
,
"(JMX) To avoid memory leaks when web applications are restarted, JMX notifications are sent from the caller thread in web applications. For non-web applications notifications are sent from a background thread as before. Fixes LOG4J2-938. Thanks to Mauro Molinari.",Memory improvement
Missing toUpperCase(Locale.ENGLISH). Fixes LOG4J2-957. Thanks to fatih guleryuz.,Bug fix
"Manual refers to Route ""AppenderRef"" attribute, should be ""ref"". Fixes LOG4J2-956. Thanks to David Kellerman.",Documentation
"Documentation: clarify system properties to control status logger, improve troubleshooting FAQ entry. Fixes LOG4J2-955.",Documentation
Incorrect attribute name in PropertiesRewritePolicy example. Fixes LOG4J2-950. Thanks to Joel Edwards.,Documentation
Log4j Flume appender is not adding millisecond to the event headers when the event is logged at 000 milliseconds. Fixes LOG4J2-944. Thanks to Vinayaka Ramachandra.,Bug fix
Allow JSON layout to create one compact log record per line. Fixes LOG4J2-941. Thanks to Konstantinos Liakos.,Add support for a new feature
HTML layout should not use attribute minimalization for hr noshade. Fixes LOG4J2-933. Thanks to ppiman at gmail.com.,Code redesign
Specify the SyslogAppender connect timeout value as part of the configuration. The SyslogAppender takes a new parameter connectTimeoutMillis. Fixes LOG4J2-895.,Code redesign
Specify the SocketAppender connect timeout value as part of the configuration. The SyslogAppender takes a new parameter connectTimeoutMillis. Fixes LOG4J2-899.,Code redesign
Log4j 1.2 Bridge doesn't map level ALL correctly in Category.getEffectiveLevel(). Fixes LOG4J2-924. Thanks to Ryan Rupp.,Bug fix
ConsoleAppender is missing @PluginFactory annotation at createAppender method. Fixes LOG4J2-931. Thanks to Robert Gacki.,Bug fix
Logging system fails to initialize if XInclude API is not available. Fixes LOG4J2-919. Thanks to David Johle.,Bug fix
ThrowableProxy.getExtendedStackTraceAsString causes NullpointerException. Fixes LOG4J2-914. Thanks to Kaj Bjurman.,Bug fix
XML configuration does not report full error message for XInclude parser configuration problems. Fixes LOG4J2-912.,Bug fix
ClassLoaderContextSelector uses ClassLoader.toString() as a key Fixes LOG4J2-903. Thanks to Mauro Molinari.,Bug fix
"ThrowableProxy throws NoClassDefFoundError. Fixes LOG4J2-834. Thanks to Nikita Koval, Leonard Broman, Thiago Kronig.",Bug fix
NullPointerException on filter when mapping JUL to Log4j2. Fixes LOG4J2-893.,Bug fix
JUL adapter does not map Log4j'2 FATAL level to a JUL level. Fixes LOG4J2-892.,Bug fix
AbstractLifecycle should not implement equals() and hashCode(). Fixes LOG4J2-881. Thanks to Mariano Gonzalez.,Bug fix
Javadoc for org.apache.log4j.BasicConfigurator.configure() is incorrect. Fixes LOG4J2-897.,Documentation
AbstractLifecycle should not implement equals() and hashCode(). Fixes LOG4J2-891.,Bug fix
[docs] Using Log4j 2 in Web Applications: Update example (Log4jWebLifeCycle is not visible). Fixes LOG4J2-946. Thanks to artemonster.,Documentation
"Update docs for SyslogAppender: ""No structured id name was supplied"" Fixes LOG4J2-901. Thanks to Tihomir Meščić, Siegfried Greisinger.",Documentation
Update from Jackson 2.5.0 to 2.5.1. Fixes LOG4J2-958.,Update dependency
Update from Jackson 2.4.4 to 2.5.0. Fixes LOG4J2-925.,Update dependency
Update Jackson from 2.4.3 to 2.4.4. Fixes LOG4J2-910.,Update dependency
Update Jackson from 2.4.2 to 2.4.3. Fixes LOG4J2-881.,Update dependency
Update maven-core from 3.1.0 to 3.2.3. Fixes LOG4J2-882.,Update dependency
Update tests from org.apache.felix.framework 4.2.1 to 4.4.1. Fixes LOG4J2-883.,Update dependency
Update org.eclipse.osgi from 3.6.0 to 3.7.1. Fixes LOG4J2-884.,Update dependency
Update Apache Flume from 1.5.0.1 to 1.5.2. Fixes LOG4J2-900.,Update dependency
,
Some typo fixes and enhancements for the site. Fixes LOG4J2-676. Thanks to Stefan Bodewig.,Bug fix
Add ShutdownCallbackRegistry interface for customizable shutdown callback handling. This is particularly useful for application servers that wish to integrate with Log4j 2. Fixes LOG4J2-868.,Add support for a new feature
Documentation: fixed missing closing parenthesis in code example. Fixes LOG4J2-866. Thanks to Gerard Weatherby.,Documentation
Fixed classloader issue that prevented Log4j from finding the implementation when used in a custom Ant task. Fixes LOG4J2-862. Thanks to Michael Sutherland.,Bug fix
Supported filtering on custom log levels in configuration. Fixes LOG4J2-589.,Add support for a new feature
Documentation: fix broken links on left navigation Extending Log4j Configuration sub-menu. Fixes LOG4J2-861.,Documentation
"Documentation: add sections on the JUL Adapter, IO Streams and NoSQL Appenders to the Maven and Ivy page. Fixes LOG4J2-856.",Documentation
Documentation: clarified why log4j-core is a compile time dependency in Maven and Ivy page. Fixes LOG4J2-797. Thanks to Andreas Rytina.,Documentation
Documentation: fix broken links on Appenders manual page. Fixes LOG4J2-855.,Documentation
Prevent NPE when configuration with AsyncLogger/AsyncRoot is reloaded. Fixes LOG4J2-807.,Bug fix
Add a Java lookup to provide nicely formatted runtime version information. Fixes LOG4J2-848.,Add support for a new feature
Move reflection utility class to API's private utility classes. Fixes LOG4J2-809.,Code redesign
Add 2.1.0 to compatible versions in Log4j API ProviderUtil and update Log4jAPIVersion to 2.1.0 in core META-INF/log4j-provider.properties. Fixes LOG4J2-845.,Update dependency
Documentation: added Runtime Dependencies link to left nav-bar on site. Fixes LOG4J2-833.,Documentation
Documentation: added section on XInclude to user manual Configuration page. Fixes LOG4J2-816.,Documentation
Documentation: fixed minor issues with Log4j2 web site/documentation. Fixes LOG4J2-678. Thanks to Matt Sicker.,Documentation
Update JMH to 1.1 from 0.7.2. Fixes LOG4J2-844.,Update dependency
Migrate JpaHyperSqlAppenderTest JUnit performance test to log4j-perf. Fixes LOG4J2-843.,Code redesign
Migrate JpaH2AppenderTest JUnit performance test to log4j-perf. Fixes LOG4J2-842.,Code redesign
Migrate JdbcHyperSqlAppenderTest JUnit performance test to log4j-perf. Fixes LOG4J2-841.,Code redesign
Migrate JdbcH2AppenderTest JUnit performance test to log4j-perf. Fixes LOG4J2-840.,Code redesign
Respect external interrupt signal to allow application shutdown after joining AsyncAppender thread. Fixes LOG4J2-830.,Bug fix
"MarkerManager Log4jMarker.hasParents() returns opposite of correct result. Fixes LOG4J2-813. Thanks to David Erichsen, Brandon Barry.",Bug fix
Documentation: fixed capitalization inconsistency in user manual example config. Fixes LOG4J2-785.,Documentation
"Fixed issue in RollingFile filePattern: backslashes are path separators, not escape characters. Fixes LOG4J2-829.",Bug fix
Add the Log4j IOStreams component. Fixes LOG4J2-547.,Add support for a new feature
Added Memory-Mapped File Appender. Fixes LOG4J2-431. Thanks to Claude Mamo.,Add support for a new feature
ThrowableProxy fails if a class in logged stack trace throws java.lang.Error from initializer Fixes LOG4J2-832. Thanks to Seth Leger.,Bug fix
"Documentation: updated FAQ ""which jars"" diagrams for JUL bridge and 2.1 version. Fixes LOG4J2-831.",Documentation
Support use of TypeConverter classes through the standard Plugin system. Fixes LOG4J2-827.,Add support for a new feature
"Avoid ConverterKey plugin clashes by using a more predictable plugin loading infrastructure. Plugins have been segmented into three parts: class path, user-specified packages, and OSGi bundles. Fixes LOG4J2-745. Thanks to Scott Harrington.",Maintainability improvement
Fixed plugin scanning redundancy causing massive slowdowns in certain environments. Fixes LOG4J2-798. Thanks to Scott Harrington.,Bug fix
Reduced CachedClock thread contention. Fixes LOG4J2-753.,Bug fix
Fixed memory leak in Tomcat 6 caused by clock background threads unintentionally started by Tomcat after web application stop. Fixes LOG4J2-819. Thanks to Gary Gregory.,Memory improvement
Add simple validation constraint annotations for the Plugin system. Fixes LOG4J2-825.,Add support for a new feature
"Implement a GELF layout. Fixes LOG4J2-428. Thanks to Mark Paluch, Mikael Ståldal.",Add support for a new feature
FlumePersistentManager now handles LockConflictExceptions in Berkeley Db when sending a batch. Fixes LOG4J2-391. Thanks to Kamal Bahadur.,Bug fix
Remove invalid Oracle Maven repository. Fixes LOG4J2-782.,Code redesign
Update Spring Framework to 3.2.11.RELEASE from 3.2.8.RELEASE. Fixes LOG4J2-780.,Update dependency
Unify the two JMS appenders into a single appender. Configurations written for 2.0 will still work in 2.1+. Fixes LOG4J2-815.,Code redesign
Add java.util.logging implementation based on log4j-api. See log4j-jul documentation for more details. Fixes LOG4J2-608.,Add support for a new feature
Fixed issue where log4j-to-slf4j did not work correctly with SLF4J Simple Logger. Fixes LOG4J2-796.,Bug fix
SimpleLogger throws ArrayIndexOutOfBoundsException for an empty array. Fixes LOG4J2-811. Thanks to Yogesh Rao.,Bug fix
Fix OSGi Import-Package problem with the JMS API. Fixes LOG4J2-663. Thanks to Florian Brunner.,Bug fix
Add support for custom SLF4J Markers in log4j-slf4j-impl module. Fixes LOG4J2-793.,Add support for a new feature
"PatternLayout should use platform character encoding by default, not UTF-8. Fixes LOG4J2-783. Thanks to Minglei Lee.",Bug fix
Add lookup for application main arguments. Fixes LOG4J2-771.,Add support for a new feature
Add lookup for JVM arguments. Fixes LOG4J2-787.,Add support for a new feature
Update Jackson to 2.4.2 from 2.4.1 (for XML and JSON processing). Fixes LOG4J2-790.,Update dependency
Incomplete documentation for JSONLayout. Fixes LOG4J2-766. Thanks to Bruno P. Kinoshita.,Documentation
All life cycle implementations should be serializable. This is still work in progress. Fixes LOG4J2-800.,Code redesign
org.apache.logging.log4j.core.Logger should be serializable. This is still work in progress. Fixes LOG4J2-801.,Code redesign
Update javax.mail to 1.5.2 from 1.5.0. Fixes LOG4J2-810.,Update dependency
Update org.eclipse.persistence.jpa to 2.5.2 from 2.5.1. Fixes LOG4J2-822.	,Update dependency
"FlumeAppender: maxDelay not in seconds, but milliseconds. Add time scale to some settings, for example maxDelayMillis instead of maxDelay. The old names are aliased for compatibility. Fixes LOG4J2-867.",Bug fix
,
Update Apache Flume to 1.5.0.1 from 1.5.0. Fixes LOG4J2-775.,Update dependency
Site: log4j-core component pages were still using the old logo. Fixes LOG4J2-773.,Bug fix
"Documentation improvement: link to dependency tree from log4j-core component page, link to log4j-core component page from FAQ page. Fixes LOG4J2-760.",Documentation
"Resolved race condition that caused log file rotation to fail with error: ""Unable to create directory ..."" Fixes LOG4J2-679.",Bug fix
Prevent application from hanging when PatternLayout configuration has opening '{' but no closing '}'. Fixes LOG4J2-726.,Bug fix
Startup takes a long time if you have empty packages attribute. Fixes LOG4J2-769. Thanks to Scott Harrington.,Bug fix
Improved asynchronous loggers and appenders to ensure the formatted message does not change even if parameters are modified by the application. (ParameterizedMessage was already safe.) Improved documentation. Fixes LOG4J2-763. Thanks to Stephen Connolly.,Performance improvement
Emit warning message to console if no configuration file found. Fixes LOG4J2-729.,Bug fix
Improve warning message when missing log4j-core in the classpath. Fixes LOG4J2-765.,Maintainability improvement
Clarified in documentation that Commons Logging jar is required when using log4j-jcl. Fixes LOG4J2-722.,Documentation
Clarified in documentation that SLF4J API jar is required when using log4j-slf4j-impl. Fixes LOG4J2-723.,Documentation
Allow Log4jContextFactory subclasses to specify a custom ContextSelector. Fixes LOG4J2-730.,Bug fix
"Fixed various minor site/documentation issues, mostly versioning related. Fixes LOG4J2-759.",Documentation
Prevent JUnit test from creating unnecessary Log4j2Plugins.dat during build. Fixes LOG4J2-756. Thanks to Scott Harrington.,Code redesign
,
Avoid unnecessary Clock calls when TimestampMessage is logged. Fixes LOG4J2-744. Thanks to Scott Harrington.,Maintainability improvement
Improved error message if configuration file not found. Fixes LOG4J2-704.,Maintainability improvement
Webapp configuration page has incorrect class name. Fixes LOG4J2-750. Thanks to Mike Calmus.,Documentation
Retain the default date pattern after fixing the ISO8601 pattern. Fixes LOG4J2-749. Thanks to Scott Harrington.,Maintainability improvement
DatePatternConverter ISO8601_PATTERN now conforms to ISO8601. Fixes LOG4J2-670.,Maintainability improvement
Reinstate the package configuration attribute for discovering custom plugins. Fixes LOG4J2-741.,Bug fix
XInclude not working with relative path. Fixes LOG4J2-742. Thanks to Pascal Chollet.,Bug fix
Fixed typo in webapp manual regarding sample web.xml file. Fixes LOG4J2-740. Thanks to Kosta Krauth.,Documentation
RollingFileManager deadlock if async action thread fails to start. Fixes LOG4J2-738. Thanks to Timothy Stack.,Bug fix
Fixed log4j-bom so that it won't specify a default scope on any third party dependencies. Fixes LOG4J2-736.,Bug fix
Fixed log4j-bom so that it won't interfere with spring-bom and others. Fixes LOG4J2-735.,Bug fix
Updated documentation regarding extensions to LoggerContextFactory and Log4j 2 providers. Fixes LOG4J2-731.,Documentation
Fixed ClassLoader issues in loading Log4j providers in an OSGi environment. Fixes LOG4J2-373.,Bug fix
Added WebLoggerContextUtils class to log4j-web for helper methods useful for asynchronous servlets. Fixes LOG4J2-725.,Add support for a new feature
Added documentation for Custom Levels and Custom Loggers. Fixes LOG4J2-710.,Documentation
Correctly handle NetworkOnMainThreadException thrown on Android during Log4j2 initialization. Fixes LOG4J2-719.,Bug fix
Automatically disable log4j JMX when detecting we are running on Android. Fixes LOG4J2-716.,Bug fix
Fixed AbstractDatabaseManager to close connection on writeInternal error. Fixes LOG4J2-657. Thanks to Stefan Wehner.,Bug fix
Android: java.lang.VerifyError: org/apache/logging/log4j/core/util/Closer Fixes LOG4J2-713. Thanks to Nelson Melina.,Bug fix
"Android: Could not find class 'javax.naming.InitialContext', referenced from method org.apache.logging.log4j.core.lookup.JndiLookup.lookup. Fixes LOG4J2-703. Thanks to Nelson Melina.",Bug fix
Update to LMAX Disruptor 3.3.0 from 3.2.1. Fixes LOG4J2-732.,Update dependency
Update to latest Jackson jars from the 2.4.1.X line. Fixes LOG4J2-733.,Update dependency
,
Fixed issue where Async Logger does not log thread context stack data. API change: added method getImmutableStackOrNull() to ThreadContext.ContextStack interface. Fixes LOG4J2-705.,Bug fix
Update docs to clarify how to use formatter logger and standard logger together. Fixes LOG4J2-631.,Documentation
Added support for generating custom logger wrappers that replace the existing log levels and extended logger wrappers that add custom log levels to the existing ones. Fixes LOG4J2-519.,Add support for a new feature
LoggerConfigs with no Level now inherit the Level from their parent. Fixes LOG4J2-441.,Bug fix
RegexFilter does not match multiline log messages. Fixes LOG4J2-696.	,Bug fix
PatternLayout manual page missing documentation on header/footer. Fixes LOG4J2-699.,Documentation
"Fixed Serialization error with SocketAppender and Async Loggers. (Fixed in RC2, but wasn't included in release notes.) Fixes LOG4J2-625.",Bug fix
"JMX GUI: fixed occasional ArrayIndexOutOfBoundsException after pressing ""reconfigure with XML below"". (Fixed in RC2, but wasn't included in release notes.) Fixes LOG4J2-538.",Bug fix
AsyncLoggerContextSelector should ensure that different AsyncLoggerContext objects created by web app classloaders have unique names. Fixes LOG4J2-666.,Bug fix
Fix annotation processor warnings on JDK 1.7+. Fixes LOG4J2-683. Thanks to Jurriaan Mous.,Bug fix
Fix strange compilation error that popped up in a test class. Fixes LOG4J2-694.,Bug fix
Update documentation to specify only Maven 3 is supported. Fixes LOG4J2-692.,Documentation
"Log4j Web test dependencies should be in scope ""test"" in the pom. Fixes LOG4J2-690. Thanks to Philip Helger.",Code redesign
Special characters (tab and so on) in PatternLayout do not work. Fixes LOG4J2-682. Thanks to Scott Harrington.,Bug fix
Make org.apache.logging.log4j.core.layout.AbstractLayout immutable. Fixes LOG4J2-685.,Bug fix
	Core's OptionConverter support for \b is broken (affects PatternLayout). Fixes LOG4J2-686.,Bug fix
Rename org.apache.logging.log4j.core.util.Closer.closeSilent() to closeSilently(). Fixes LOG4J2-687.,Maintainability improvement
Make org.apache.logging.log4j.core.layout.PatternLayout immutable. Fixes LOG4J2-688.,Update dependency
Update Jackson to 2.4.1. Fixes LOG4J2-689.,Update dependency
Some exceptions are not logged when configuration problems are detected. Fixes LOG4J2-707.,Bug fix
Update Apache Commons Logging to 1.2 from 1.1.3. Fixes LOG4J2-709.	,Update dependency
,
RollingFile and RollingRandomAccessFile now write the layout footer before rollover. Fixes LOG4J2-675.,Code redesign
RollingRandomAccessFile now writes the layout header after rollover. Fixes LOG4J2-581. Thanks to Alexander Khokhlov.,Code redesign
RollingFileManager now correctly honours the bufferedIO configuration after rollover. Fixes LOG4J2-622. Thanks to Farooq Khan.,Bug fix
Made RollingFileAppender buffer size configurable. Fixes LOG4J2-674.,Code redesign
Improved documentation regarding log4j status logger. Fixes LOG4J2-141. Thanks to Joern Huxhorn.,Documentation
"Fixed issue with ""Reconfigure using XML below"" function in JMX Client GUI. ConfigurationSource is now a top-level class and can be obtained with Configuration.getConfigurationSource(). LoggerContext.getConfiguration().getConfigurationSource() provides a reliable public method for obtaining a logger context's configuration location and content. Fixes LOG4J2-539. Thanks to Colin Froggatt.",Bug fix
Invalid XML configuration files do not prevent the config file from being checked again. Fixes LOG4J2-619. Thanks to Scott Harrington.,Bug fix
"JMX: Updating a Logger's level via jConsole now correctly takes effect. Fixes LOG4J2-637. Thanks to Mansoor Sajjad, Jon Wilmoth.",Bug fix
Correctly process log events when combining AsyncLoggers with AsyncAppender. Fixes LOG4J2-668.,Bug fix
Prevent NPE when combining AsyncLoggers with AsyncLoggerConfigs. Fixes LOG4J2-669.,Bug fix
Create an appender to route log events to the ServletContext log. Fixes LOG4J2-42.,Add support for a new feature
upport default value for missing key in look ups with fallbacking to looking in the properties map. Fixes LOG4J2-419. Thanks to Woonsan Ko.,Add support for a new feature
FlumeAvroManager now always uses a client type of default_failover. Fixes LOG4J2-563. Thanks to Michael Friedmann.,Code redesign
Allow configuration files to be located as Servlet Context resources. Fixes LOG4J2-554.,Code redesign
Reset rollover time when size rollover is triggered. Fixes LOG4J2-535.,Bug fix
Moved plugin cache file to META-INF for OSGi compatibility. Fixes LOG4J2-664.,Code redesign
Fix NPE that can be caused by a null ThreadContextClassLoader. Fixes LOG4J2-640.,Bug fix
Add Vagrantfile for testing in GNU+Linux. Fixes LOG4J2-655.,Add support for a new feature
Log4j 2 throws ArrayIndexOutOfBoundsException. Fixes LOG4J2-651.,Bug fix
Add log4j-perf module to provide a home for all log4j performance tests. Add support for JMH microbenchmark performance tests. Fixes LOG4J2-654.,Add support for a new feature
Add support for default plugin values and attributes. Fixes LOG4J2-652.,Add support for a new feature
Add support for types other than String for plugin factory values/attributes. Fixes LOG4J2-598.,Add support for a new feature
Refactor Log4jLogEvent to lazily create ThrowableProxy. Fixes LOG4J2-250.,Maintainability improvement
Upgrade to Flume 1.5.0. Fixes LOG4J2-647.,Update dependency
Implement a SecureSocketAppender and secure server (SSL/TLS). Fixes LOG4J2-644.,Add support for a new feature
Merge the TLS Syslog appender into the Syslog appender. Fixes LOG4J2-646.,Code redesign
Perform reconfiguration in a separate thread to prevent deadlocks. Fixes LOG4J2-620.,Bug fix
Override commons-logging dependency version in tests. Fixes LOG4J2-641.	,Bug fix
Prevent NPE in AsyncLogger and AsyncLoggerConfig if logger is used after log4j has been shut down. Fixes LOG4J2-639. Thanks to Mck SembWever.	,Bug fix
FailoverAppender was not resetting its status after the primary appender recovered. Fixes LOG4J2-469.,Bug fix
Generate MDC properties as a JSON map in JSONLayout. Fixes LOG4J2-623.,Add support for a new feature
Made RollingRandomAccessFileAppender buffer size configurable. Fixes LOG4J2-566. Thanks to Luigi Alice.,Code redesign
"Resolved issue where AsyncAppender dropped events if queue still contained events when application is stopped. Fixes LOG4J2-520. Thanks to JavaTech, Andre Bogus.",Bug fix
Resolved a problem with the previous solution for LOG4J2-392 that resulted in dropped events when using AsyncLoggerConfig with slow appenders when application is stopped. Fixes LOG4J2-392. Thanks to Andre Bogus.	,Bug fix
The OSGi version of log4j-web imports Servlet 2.5 at minimum instead of 3.0. Fixes LOG4J2-613.,Update dependency
Unit tests are now less verbose during the build process. Fixes LOG4J2-602.,Quality assurance
Fix shutdown thread memory leak in servlet containers. Fixes LOG4J2-570.,Memory improvement
"Use Clock to generate all log event timestamps, not just for Async Loggers. Fixes LOG4J2-628.",Bug fix
Document the system properties used in Log4J 2. Fixes LOG4J2-629.,Documentation
	Make Throwable transient in ThrowableProxy. Fixes LOG4J2-542.,Code redesign
Update SLF4J to 1.7.7. Fixes LOG4J2-617.,Update dependency
Update Jackson to 2.3.3. Fixes LOG4J2-616.,Update dependency
"During shutdown, a NullPointerException could be thrown due to the NullConfiguration class no longer being available to the ClassLoader. Fixes LOG4J2-440.",Bug fix
Cyclic dependency with log4j-slf4j-impl in OSGi. Fixes LOG4J2-346.,Bug fix
The log4j-1.2-api module didn't export any packages to OSGi. Fixes LOG4J2-345.,Bug fix
Password data from the NoSQL plugins no longer shows up in cleartext in debug logging. Fixes LOG4J2-605.,Bug fix
A StringIndexOutOfBounds exception could occur during property substitution. Fixes LOG4J2-448. Thanks to X86core.,Bug fix
"StatusLogger was not skipping multiple instances of the FQCN class, causing messages from classes in the Verbose list to be printed. Fixes LOG4J2-597.",Bug fix
Add support for multiple parents to Markers. Fixes LOG4J2-585. Thanks to Bruce Brouwer.,Add support for a new feature
Introduce Java annotation processor as the new plugin pre-caching mechanism. This is available in log4j-core. All custom plugins created before this should be re-built against the current log4j-core. Fixes LOG4J2-595.,Add support for a new feature
Renamed SLF4J logger class to Log4jLogger. Fixes LOG4J2-564.,Maintainability improvement
Rework Level comparison APIs. Fixes LOG4J2-579.,Maintainability improvement
Add org.apache.logging.log4j.Logger.getLevel(). Fixes LOG4J2-576.,Add support for a new feature
Make Blocking the default WaitStrategy for Async Loggers. Fixes LOG4J2-574.,Code redesign
Introduce ExtendedLogger interface to facilitate implementing and extending Loggers. Fixes LOG4J2-555. Thanks to Bruce Brouwer.,Add support for a new feature
SyslogAppenderTest and RFC5424LayoutTest were failing in Java 8. Fixes LOG4J2-560.,Bug fix
Allow spaces around commas in Configuration's package attribute. Fixes LOG4J2-561. Thanks to vibin.,Bug fix
Have Logger API expose a PrintWriter instead of custom LoggerStream. Fixes LOG4J2-547. Thanks to Bruce Brouwer.,Code redesign
Add EncodingPatternConverter to escape newlines and HTML special characters. Fixes LOG4J2-439. Thanks to Bruce Brouwer.,Add support for a new feature
	Allow header and footer to be specified as lookup patterns in PatternLayout. Fixes LOG4J2-496.,Code redesign
	Add equals and hashcode to Log4jLogEvent. Fixes LOG4J2-499.	,Add support for a new feature
SLf4JLogger is now Serializable. Fixes LOG4J2-410. Thanks to Ivlin Zeng.	,Code redesign
Add support for configuration via YAML. Fixes LOG4J2-427. Thanks to Alexander Reelsen.,Add support for a new feature
Add DateLookup and ThreadContextLookup to default lookups. Fixes LOG4J2-378.,Add support for a new feature
Add support to add a LoggerConfig. Document two ways to modify the configuration. Fixes LOG4J2-468.,Add support for a new feature
Rename org.apache.logging.log4j.core.net.SocketServer to TCPSocketServer and refactor with UDP. Fixes LOG4J2-582.,Maintainability improvement
	Update Jackson to 2.3.2 from 2.2.2. Fixes LOG4J2-592.,Update dependency
,
Removed the DataSourceConnectionSource and the <DriverManager> plugin for the JDBC Appender. It is not safe to use. Please use the DataSource or factory connection sources backed by a connection pool.	,Code redesign
Renamed the org.apache.logging.log4j.core.appender.db.nosql.mongo package to org.apache.logging.log4j.core.appender.db.nosql.mongodb.,Maintainability improvement
Renamed the org.apache.logging.log4j.core.appender.db.nosql.couch package to org.apache.logging.log4j.core.appender.db.nosql.couchdb.,Maintainability improvement
(JMX - ObjectNames changed!) Unloading one web application unloads JMX MBeans for all web applications. Fixes LOG4J2-500.,Bug fix
Space Level numbers by 100 instead of 1. Fixes LOG4J2-507.,Bug fix
Fixed bugs where rolled log files were overwritten by RollingFile appender with composite time and size based policies. Fixes LOG4J2-531. Thanks to Geoff Ballinger.,Bug fix
Changed the MongoDBConnection to add a MongoDB encoding hook instead of a decoding hook. Fixes LOG4J2-475. Thanks to Matt Sicker.,Code redesign
	Fixed the JPAAppender's overuse of transactions by connecting (borrowing from pool) on new write internal or on flush. Fixes LOG4J2-489.,Bug fix
Fixed failure of JDBC and JPA appender to properly release database connections by connecting (borrowing from pool) on new write internal or on flush. Fixes LOG4J2-457.,Bug fix
Fixed problem with JDBC and JPA appender connectivity in WebSphere by connecting (borrowing from pool) on new write internal or on flush. Fixes LOG4J2-442.,Bug fix
Ensured the JDBCAppender commits transactions after a single write or a flush of multiple writes. Fixes LOG4J2-438.,Bug fix
Fixed inability to recover from lost database connection in database appenders by connecting (borrowing from pool) on new write internal or on flush. Fixes LOG4J2-407.,Bug fix
(JMX) JMX Client GUI should dynamically update when LoggerContext MBeans are registered/unregistered in MBean server. Fixes LOG4J2-530.,Bug fix
"Stop AsyncLoggerConfig Disruptor thread(s), then AsyncAppender thread(s) first before stopping other appenders. Fixes LOG4J2-511. Thanks to James Pretorius.",Bug fix
"Stop AsyncLoggerConfig Disruptor thread(s), then AsyncAppender thread(s) first before stopping other appenders. Fixes LOG4J2-392. Thanks to ilynaf, Andre Bogus.",Bug fix
"(OSGi) logging.log4j-1.2-api doesn't export the log4j API 1.2. Dependent bundles can not be resolved. Fixes LOG4J2-345. Thanks to Roland Weiglhofer, Matt Sicker.",Bug fix
LocalizedMessage serialization is broken. Fixes LOG4J2-523.,Bug fix
"	Fixed issues with time-based file rollover (monthly, weekly, hourly and every minute). Fixes LOG4J2-385. Thanks to Ace Funk, Porfirio Partida.",Bug fix
"Added a ServletContext attribute that, when set to ""true"", disables Log4j's auto-initialization in Servlet 3.0+ web applications. Fixes LOG4J2-452.",Add support for a new feature
"Exposed Log4j web support interface and methods and the LoggerContext through ServletContext attributes so that threads not affected by filters (such as asynchronous threads) can utilize the LoggerContext. Also updated the Log4j filter so that it supports async. Fixes LOG4J2-512. Thanks to Chandra Sekhar Kakarla, Matt Sicker.",Bug fix
"Created a utility to properly escape backslashes before creating URIs, and changed URI creation to use the utility instead of instantiating URI directly. Fixes LOG4J2-409. Thanks to Frank Steinmann, Thomas Neidhart.",Add support for a new feature
"Changed the Servlet 3.0 auto-initializer to add the filter by class to get around a WebLogic bug. Fixes LOG4J2-344. Thanks to Keir Lawson, Tomasz Wladzinski.",Code redesign
Changed the Servlet 3.0 auto-initializer so that it does nothing in a Servlet 2.5 or older application. This ensures behavioral consistency across containers. This includes additional fixes to abort initialization if a duplicate filter already exists and to check the actual Servlet EFFECTIVE version. Fixes LOG4J2-359. Thanks to Abhinav Shah.,Code redesign
"Switch in log4j-1.2-api Category.getEffectiveLevel has no cases for FATAL, OFF. Fixes LOG4J2-517.",Bug fix
Add support for custom logging levels. Fixes LOG4J2-41. Thanks to Nick Williams.,Add support for a new feature
	(JMX) Unregister all log4j JMX MBeans when the LoggerContext is stopped to allow web application classes to be GC-ed on undeploy. Fixes LOG4J2-406. Thanks to Kerrigan Joseph.,Bug fix
Configuration was being processed twice at startup. Fixes LOG4J2-405.,Bug fix
"ThreadContext now uses plain ThreadLocal by default, unless system property isThreadContextMapInheritable has value ""true"". Fixes LOG4J2-479. Thanks to MK.",Code redesign
Configure properties and setup Interpolator before processing rest of configuration. Fixes LOG4J2-398.,Maintainability improvement
Add Stream interface to Loggers. Fixes LOG4J2-481. Thanks to Matt Sicker.,Add support for a new feature
Update EasyMock to version 3.2. Fixes LOG4J2-490. Thanks to Matt Sicker.,Update dependency
hostName property was not being set until after the first configuration element. Fixes LOG4J2-470.,Bug fix
	Support arrays as sub-elements of a JSON configuration. Fixes LOG4J2-464.,Add support for a new feature
"	(JMX) Fixed MalformedObjectNameException if context name contains '=' or newline characters. Fixes LOG4J2-492. Thanks to Shaddy Baddah, Herlani Junior.",Bug fix
"(OSGi) Fix NPE during shutdown. Fixes LOG4J2-377. Thanks to Roland Weiglhofer, Matt Sicker.",Bug fix
"Fixed documentation for MyApp example application in the Automatic Configuration section Fixes LOG4J2-463. Thanks to Michael Diamond, Matt Sicker.",Documentation
"Fixed error in documentation code example in manual/eventlogging.html Fixes LOG4J2-408. Thanks to Dongqing Hu, Matt Sicker.",Documentation
"Fixed typo in documentation: system property should be log4j2.loggerContextFactory Fixes LOG4J2-451. Thanks to Vinay Pothnis, Matt Sicker.",Documentation
"	(JMX) Fixed issue where log4j2 LoggerContext did not show up in JMX GUI or JConsole. Fixes LOG4J2-443. Thanks to Colin Froggatt, Tudor Har.",Bug fix
Fixed issue where toString methods that perform logging could deadlock AsyncAppender. Fixes LOG4J2-485.,Bug fix
ResolverUtil cannot find packages in file URLs which include the '+' character. Fixes LOG4J2-445. Thanks to Anthony Baldocchi.,Bug fix
	Use the formatted Message in RFC5424Layout for non-StructuredDataMessages. Fixes LOG4J2-430. Thanks to David Gstir.,Bug fix
Set external context when constructing the LoggerContext. Fixes LOG4J2-459.,Bug fix
Cannot load log4j2 config file if path contains plus '+' characters. Fixes LOG4J2-466. Thanks to Jan Tepke.,Bug fix
"	Fix LogEvent to never return null Level, fixes LevelPatternConverter.format may throw NPE. Fixes LOG4J2-462. Thanks to Daisuke Baba.",Bug fix
"Fix LogEvent to never return null Level, fixes ThresholdFilter throws NPE. Fixes LOG4J2-465. Thanks to Daisuke Baba.",Bug fix
Fixed issue where toString methods that perform logging could deadlock AsyncLogger. Fixes LOG4J2-471. Thanks to Anthony Baldocchi.,Bug fix
"Documentation fix: The attribute of Route to refer to an appender is ""ref"" not ""AppenderRef"". Fixes LOG4J2-482. Thanks to Hongdi Ren.",Documentation
Added option to toggle Thread name caching in AsyncLogger. Fixes LOG4J2-467. Thanks to Anthony Baldocchi.,Add support for a new feature
The message and ndc fields are not JavaScript escaped in JSONLayout. Fixes LOG4J2-478. Thanks to Michael Friedmann..,Bug fix
RingBufferLogEvent should return Message timestamp for TimestampMessage messages. Fixes LOG4J2-455. Thanks to Robin Zhang Tao.,Code redesign
NPE in ClassLoaderContextSelector. Fixes LOG4J2-477. Thanks to Tal Liron.,Bug fix
	TimeBasedTriggeringPolicy should use event time millis. Fixes LOG4J2-454. Thanks to Robin Zhang Tao.,Code redesign
BaseConfiguration class does not properly implement Configuration interface. Fixes LOG4J2-472. Thanks to Tal Liron.,Bug fix
"XMLLayout does not include marker name. Fixes LOG4J2-447. Thanks to Jeff Hudren, Mark Paluch, Scott Deboy.",Bug fix
Update Flume Appender to use Flume 1.4.0. Fixes LOG4J2-453.	,Update dependency
"(JMX) Added MBeans for instrumenting AsyncAppenders and AsyncLogger RingBuffers, exposing queue size, remaining capacity and other attributes. Fixes LOG4J2-423.",Add support for a new feature
Resolved memory leak by releasing reference to ThreadLocal when AsyncLogger is stopped. Fixes LOG4J2-323.,Memory improvement
"Resolved memory leak by populating AsyncLoggerConfigHelper ring buffer via EventTranslatorTwoArg, eliminating the need for a ThreadLocal. Fixes LOG4J2-425.",Memory improvement
Create a lookup for resource bundle substitution. Fixes LOG4J2-420.,Add support for a new feature
Fix Event Level / LoggerConfig Level table at the architecture documentation page. Fixes LOG4J2-417.,Bug fix
Format log event time as UNIX time (seconds or milliseconds). Fixes LOG4J2-415.,Maintainability improvement
"	@EnterpriseNumber"" was missing in the ID of structured data when RFC5424Layout is used Fixes LOG4J2-404. Thanks to Kamal Bahadur.",Bug fix
Fixed issue that prevented Log4J from working in Google App Engine. Fixes LOG4J2-379.,Bug fix
Configure FileAppender buffer size. Fixes LOG4J2-401.,Code redesign
Configure RandomAccessFileAppender buffer size. Fixes LOG4J2-402.,Code redesign
Rename package org.apache.logging.log4j.core.appender.rolling.helper to org.apache.logging.log4j.core.appender.rolling.action. Fixes LOG4J2-528.,Maintainability improvement
Resource leak in Flume appender when it cannot create a BerkeleyDB db. Fixes LOG4J2-532.,Memory improvement
PatternLayout option to not output ANSI escape codes if no Console is available. Fixes LOG4J2-413.,Bug fix
,
Renamed FastFileAppender and FastRollingFileAppender to RandomAccessFileAppender and RollingRandomAccessFileAppender. Configurations using the Fast(Rolling)File element no longer work and should be modified to use the (Rolling)RandomAccessFile element. Fixes LOG4J2-317.,Maintainability improvement
"Changed the ""suppressExceptions"" configuration attribute for all Appenders to ""ignoreExceptions"" to avoid confusion with Java 7 suppressed exceptions. Also renamed the Appender#isExceptionSuppressed() method to Appender#ignoreExceptions() to avoid the same confusion. All Appenders by default internally log and then ignore exceptions encountered while logging. Setting ""ignoreExceptions"" to ""false"" on an Appender causes it to allow exceptions to propagate to the caller. You must set ""ignoreExceptions"" to ""false"" for Appenders you are wrapping in the Failover Appender.",Code redesign
"Changed the (relatively new) PatternLayout configuration attribute ""suppressExceptions"" to ""alwaysWriteExceptions"" to more correctly indicate what it does. As such, the meaning of this attribute has reversed (previous ""true""s should become ""false""s, and vice versa). Since this was an undocumented attribute up until now, it's unlikely this change will affect any users.",Code redesign
Fix table of contents generation in pdf. Fixes LOG4J2-226.,Documentation
Allow classpath scheme when specifying configuration file location as a system property. Fixes LOG4J2-395. Thanks to Abhinav Shah.,Add support for a new feature
Initialize PluginManager once during configuration. Move advertisement setup into BaseConfiguration. Fixes LOG4J2-393.,Maintainability improvement
FlumePersistentManager now handles LockConflictExceptions in Berkeley Db. Fixes LOG4J2-391. Thanks to Kamal Bahadur.,Bug fix
Allow the default file rollover strategy to define the compression level. Fixes LOG4J2-399.,Add support for a new feature
Add TLSAppender. Also added missing license headers to several files. Fixes LOG4J2-338. Thanks to Tibor Benke.,Add support for a new feature
Use rollover date when substituting ${date} in the filePattern. Fixes LOG4J2-380.,Code redesign
Added FAQ page to the site. Fixes LOG4J2-253.,Documentation
Add a diagram to the site (FAQ page) that explains when to use which jar. Fixes LOG4J2-362.,Documentation
Centralized reflective use of Reflection#getCallerClass and properly handled its instability in various versions of Java. Fixes LOG4J2-322.,Code redesign
Reset the Configuration if the ClassLoaderContextSelector creates a LoggerContext without a configuration location and then is later provided one. Fixes LOG4J2-293.,Bug fix
Changed the ConfigurationFactory to recognize and properly use the classpath: URI scheme in addition to the classloader: URI scheme. Fixes LOG4J2-293. Thanks to Abhinav Shah.,Code redesign
Changed the Servlet 3.0 auto-initializer so that it does nothing in a Servlet 2.5 or older application. This ensures behavioral consistency across containers. Fixes LOG4J2-359. Thanks to Abhinav Shah.,Code redesign
Add more options to PatternLayout to display more detailed information about a Throwable. Fixes LOG4J2-374. Thanks to Tibor Benke.,Add support for a new feature
[Pattern Layout] Customize level names by length. Fixes LOG4J2-383.,Maintainability improvement
[Pattern Layout] Customize level names to lower-case. Fixes LOG4J2-384.	,Maintainability improvement
Add support for multiple SD-ELEMENTs in a RFC 5424 syslog message. Fixes LOG4J2-355. Thanks to Tibor Benke.,Add support for a new feature
Cleaned up tests and cleared up documentation for the JPA appender following the resolution of EclipseLink issue #412454.,Maintainability improvement
Fixed issue where SMTPAppender did not send mails with error or fatal level without prior info event. Fixes LOG4J2-310. Thanks to Olivier Lemasle.,Bug fix
	Add PatternLayout constructor to Log4j 1.2 bridge for Velocity. Fixes LOG4J2-368.,Add support for a new feature
Match artifact ids with Maven module names. Fixes LOG4J2-333. Thanks to Hervé Boutemy.,Maintainability improvement
Add WebLookup to retrieve information from the ServletContext. Fixes LOG4J2-364. Thanks to David Nault.,Add support for a new feature
JMS appenders send two messages for one append. Fixes LOG4J2-367. Thanks to David Parry.,Bug fix
Double stack trace logging when using %throwable in %style and %highlight. Fixes LOG4J2-319.,Bug fix
Allow Plugins to have aliases. Fixes LOG4J2-360.,Add support for a new feature
	NoSQLAppender using MongoDB provider ignores username and password attributes Fixes LOG4J2-358.,Bug fix
Create a JSON Layout. Fixes LOG4J2-356.,Add support for a new feature
Removed unnecessary generics from Appender interface and implementing classes. Fixes LOG4J2-343. Thanks to Henning Schmiedehausen.,Maintainability improvement
[OSGi] wrong Fragment-Host in manifest files. Fixes LOG4J2-351. Thanks to Roland Weiglhofer.,Bug fix
AsyncLogger errors after multiple calls to LoggerContext.reconfigure(). Fixes LOG4J2-336. Thanks to Andre Bogus.,Bug fix
Give the AsyncAppender thread a more descriptive name for easier debugging/profiling. Fixes LOG4J2-347. Thanks to David Phillips.,Maintainability improvement
	Modified documentation to refer to SLF4J Binding instead of SLF4J Bridge. Fixes LOG4J2-332. Thanks to Hervé Boutemy.,Documentation
Ignore xml:base attributes. Fixes LOG4J2-342.,Bug fix
Insure jars and distributions only have a single License and Notice file. Fixes LOG4J2-309.,Maintainability improvement
Enable XInclude for XML configurations. Fixes LOG4J2-341.	,Code redesign
JPAAppender stops logging because META-INF/log4j-provider.properties is left open. Fixes LOG4J2-320.,Bug fix
FlumePersistentManager's writer thread had high CPU usage. Fixes LOG4J2-335.,Performance improvement
"Removed erroneous check for affected MongoDB records, which always returns zero on inserts. Fixes LOG4J2-331.",Maintainability improvement
Added a BSON Transformer so that MongoDB can persist Log4j events. Fixes LOG4J2-330.,Add support for a new feature
StatusLogger now only creates StatusData objects if they are the appropriate logging level. Fixes LOG4J2-329.,Bug fix
FlumePersistentManager was calling Berkeley DB's count method too frequently. Fixes LOG4J2-328.,Performance improvement
Additional fix to make AsyncAppender threads daemon threads and improve their thread name. Fixes LOG4J2-280.,Bug fix
The slf4j-ext jar is now an optional dependency of the SLF4J bridge. Fixes LOG4J2-165.,Support for external development tool
Allow shutdown hook to be disabled in the configuration. Fixes LOG4J2-318.,Add support for a new feature
RoutingAppender's default Route can now be an appender reference. Fixes LOG4J2-166.,Bug fix
Add JNDILookup plugin. Fixes LOG4J2-313. Thanks to Woonsan Ko.,Add support for a new feature
Add getThrowable method to ThrowableProxy. Fixes LOG4J2-299.,Add support for a new feature
ThrowableProxy no longer extends Throwable. Fixes LOG4J2-216.,Maintainability improvement
Synchronized flush() and close() methods in the XxxFileManager and OutputStreamManager classes. Fixes LOG4J2-311.,Code redesign
"	XML layout improvements (compact vs. pretty, namespace, namespace prefix, root element). Fixes LOG4J2-312.",Maintainability improvement
	Update Java Mail dependency to 1.5.0 from 1.4.7. Fixes LOG4J2-388.,Update dependency
Update JDBC tests to use H2 database 1.3.173 from 1.3.172. Fixes LOG4J2-325.,Update dependency
Update commons-logging to 1.1.3 from 1.1.1. Fixes LOG4J2-366.,Update dependency
Update HSQLDB dependency to 2.3.0 from 2.2.9. Fixes LOG4J2-390.,Update dependency
Clarified which library versions were used in Async Loggers performance test. Fixes LOG4J2-308.,Update dependency
Updated Async Loggers' LMAX Disruptor library from 3.0.1 to 3.2.0. Fixes LOG4J2-307.,Update dependency
Update JSON Jackson library to 2.2.2 from 2.2.1. Fixes LOG4J2-306.,Update dependency
Update Jackson dependency to 1.9.13 from 1.9.11. Fixes LOG4J2-387.,Update dependency
Ease porting from 1.x Logger.getRootLogger(): add LogManager.getRootLogger(). Fixes LOG4J2-305.,Maintainability improvement
Fixed Async Loggers memory leak. Fixes LOG4J2-304.,Memory improvement
"Fixed JDBC, JPA, and NoSQL appenders so that the failover appender properly fails over on error. Fixes LOG4J2-291.",Bug fix
	Improved site by adding quick jump-off page and menu for Javadoc links for all components.,Documentation
Logger.info(Message) Javadoc is incorrect. Fixes LOG4J2-397. Thanks to Yonatan Graber.,Documentation
,
"Improved logging initialization in Servlet containers, especially Servlet 3.0 and newer where Log4j now initializes and deinitializes automatically with no deployment descriptor configuration. Fixes LOG4J2-270.",Maintainability improvement
Added toString methods to ThreadContextStack/Map implementation classes. Fixes LOG4J2-302.,Add support for a new feature
Add printf methods to Logger API. Fixes LOG4J2-301.,Add support for a new feature
WriterThread was ending when no agents are available which caused an OutOfMemoryError. Fixes LOG4J2-300.,Memory improvement
Allow the default status level to be specified as a system property. Fixes LOG4J2-282.,Code redesign
Filter calls from Avro or Flume to be ignored by the FlumeAppender. Fixes LOG4J2-278.,Code redesign
FlumePersistentManager now calls Berkeley DB from threads to avoid encountering interrupts in the application. Fixes LOG4J2-279.,Bug fix
Wasted work in FlumePersistentManager.createManager. Fixes LOG4J2-296.,Bug fix
Wasted work in TestConfigurator.testEnvironment. Fixes LOG4J2-297.,Bug fix
Wasted work in StyleConverterTest.setupClass. Fixes LOG4J2-298.,Bug fix
AsyncLogger threads are now daemon threads and won't prevent the JVM from shutting down anymore. Fixes LOG4J2-280.,Bug fix
Fast(Rolling)FileAppender now correctly handles messages exceeding the buffer size. Fixes LOG4J2-295.,Bug fix
FastRollingFileAppender with TimeBasedTriggeringPolicy now works correctly if append=false. Fixes LOG4J2-271.,Bug fix
FastRollingFileAppender with TimeBasedTriggeringPolicy now works correctly if append=false. Fixes LOG4J2-267.,Bug fix
Fast(Rolling)FileAppender now correctly appends to (does not overwrite) existing file. Fixes LOG4J2-292.,Bug fix
LogManager.getLogger can now be called without a logger name or with a null logger name. Fixes LOG4J2-294.,Code redesign
Upgrade javadoc plugin to 2.9.1 to fix javadoc security issue. Fixes LOG4J2-289.,Update dependency
Update JUnit to 4.11 from 4.7. Fixes LOG4J2-288.,Update dependency
Update test H2 JDBC driver to 1.172 from 1.171. Fixes LOG4J2-286.,Update dependency
Update Jansi jar to 1.11 from 1.9. Fixes LOG4J2-285.,Update dependency
Update Log4j 1 dependency to 1.2.17 from 1.2.16. Fixes LOG4J2-284.,Update dependency
"Update NoSQL dependencies: lightcouch 0.0.6 from 0.0.5, mongodb 2.11.2 from 2.11.1. Fixes LOG4J2-386.",Update dependency
Remove dependency on Apache ORO jar. Fixes LOG4J2-283.,Remove support for external development tool
Wasted work in RollingAppenderSizeTest.testAppender() and others. Fixes LOG4J2-277.,Maintainability improvement
Fix NullPointerException (regression due to fix for LOG4J2-228) Fixes LOG4J2-139.,Bug fix
Include arbitrary message fields in RFC-5424 structured data. Fixes LOG4J2-168. Thanks to Scott Severtson.,Add support for a new feature
FlumeAvroManager fails to notify client of failing event if Flume RPCClient cannot be created. Fixes LOG4J2-275.,Bug fix
Wasted work in UUIDUtil initialization. Fixes LOG4J2-274.,Bug fix
Wasted work in XMLLayout.toSerializable(). Fixes LOG4J2-273.,Bug fix
,
	Allow context parameters in Log4jContextListener to include properties. Fixes LOG4J2-249.,Add support for a new feature
Do not allow a charset on RFC5424Layout - use UTF-8. Fixes LOG4J2-263.,Maintainability improvement
StringFormattedMessage and MessageFormatMessage now will accept a Throwable as their last argument and pass it on. Fixes LOG4J2-242.,Code redesign
Allow custom LogEventFactories. Fixes LOG4J2-243.,Add support for a new feature
Add support for interceptors in the embedded Flume Appender. Fixes LOG4J2-262. Thanks to Edward Sargisson.,Add support for a new feature
Use transaction when batch size is 1. Fixes LOG4J2-269.,Bug fix
Add guid to FlumeEvent headers for non-Map Messages. Fixes LOG4J2-268.,Add support for a new feature
Data buffer is reset in finally clause. Fixes LOG4J2-246.,Bug fix
UDP now sends one event per packet. Fixes LOG4J2-228.,Bug fix
"Method name changes in interface org.apache.logging.log4j.spi.ThreadContextMap: getContext() to getCopy(), get() to getImmutableMapOrNull().",Maintainability improvement
Improve ThreadContext performance with copy-on-write map and stack. Fixes LOG4J2-154.,Performance improvement
"Add missing ""not"" to error message. Fixes LOG4J2-261. Thanks to Edward Sargisson.",Bug fix
Break up core into multiple osgi jars. Fixes LOG4J2-10. Thanks to Timothy Ward.,Code redesign
Remove LoggerContext when LoggerContext is stopped. Fixes LOG4J2-223.,Bug fix
XML layout does not specify charset in content type. Fixes LOG4J2-260.,Bug fix
HTML layout does not specify charset in content type. Fixes LOG4J2-259.,Bug fix
HTML layout does not output meta element for charset. Fixes LOG4J2-258.,Bug fix
XML layout ignores charset for the XML processing intruction's encoding attribute. Fixes LOG4J2-257.,Bug fix
"Multi-byte character strings are now assumed to be in the platform default encoding, not UTF-8. Fixes LOG4J2-255.",Bug fix
Mark OutputStream in OutputStreamManager as volatile. Mark header and footer as final. Fixes LOG4J2-254.,Code redesign
Rewrite Appender was ignoring filters on referenced appenders. Fixes LOG4J2-244.,Bug fix
Avoid EmptyStack exception if getCallerClass and SecurityManager are not available. Fixes LOG4J2-245.,Bug fix
"New JDBC, JPA, and NoSQL database Appenders. Fixes LOG4J2-229. Thanks to Nick Williams.",Add support for a new feature
SocketServer.isActive should be volatile because it is accessed from different threads. Fixes LOG4J2-247.,Code redesign
"Provide configuration information (location, content type, content if possible) via a registered Advertiser. Fixes LOG4J2-251.",Maintainability improvement
,
Logger.getParent() was not returning the correct Logger. Fixes LOG4J2-231.,Bug fix
"Renamed Plugin annotation attribute from ""type"" to ""category"". Fixes LOG4J2-201.",Maintainability improvement
Moved JMX Client GUI classes into separate jmx-gui submodule. Fixes LOG4J2-237.,Maintainability improvement
"Fix: install default root logger if not configured (this is unchanged), but make sure to include configured named loggers. Clarified documentation. Fixes LOG4J2-219. Thanks to Peter DePasquale.",Bug fix
Use OSGi version format in Fragment-Host Fixes LOG4J2-159.,Code redesign
RegexFilter threw a NullPointerException when used as a context-wide filter. Fixes LOG4J2-234.,Bug fix
Add support for interpolating Environment variables when processing the configuration. Fixes LOG4J2-192.,Add support for a new feature
"Removed dependency on tools jar from core module, made jconsole dependency optional. Fixes LOG4J2-235. Thanks to Sebastian Oerding.",Remove support for external development tool
Fixed link to log4j-user mailing list. Fixes LOG4J2-233.,Documentation
Improved error reporting when misconfigured. Fixes LOG4J2-230. Thanks to Wojciech Zaręba.,Maintainability improvement
Disruptor will now shutdown during Tomcat shutdown. Fixes LOG4J2-222. Thanks to Steven Yang.,Code redesign
Renamed AsynchAppender to AsyncAppender. Plugin name became Async (was Asynch).,Maintainability improvement
Removed CheckStyle false positives for NewlineAtEndOfFile and whitespace following '*' at end of line in javadoc.,Performance improvement
Moved Clock interface to package org.apache.logging.log4j.core.helpers.,Maintainability improvement
Documentation updates to clarify use and impact of location in pattern layouts. Fixes LOG4J2-225.,Documentation
The FlumeAppender failed to start if the Flume RPCClient could not connect to any Flume agents. Fixes LOG4J2-224.,Bug fix
Fix LoggerContext start and stop to eliminate IllegalStateException and NoClassDefFound errors. Fixes LOG4J2-223.,Bug fix
Remove hundreds of compiler warnings. Fixes LOG4J2-221. Thanks to Nick Williams.,Performance improvement
Various small documentation fixes. Fixes LOG4J2-215.,Documentation
Ensure PluginManager streams are always closed. Fixes LOG4J2-217. Thanks to Fabien Sanglard.,Bug fix
,
Fix deadlock in SocketAppender. Added option to not wait for socket reconnect. Fixes LOG4J2-205.,Bug fix
Add JMX support. Fixes LOG4J2-207. Thanks to Remko Popma.,Add support for a new feature
Removing extra spaces in entry and exit method output. Fixes LOG4J2-211. Thanks to Nick Williams.,Performance improvement
Async documentation update. Fixes LOG4J2-214. Thanks to Remko Popma.,Documentation
"Loggers without a ""."" had no parent logger. Fixes LOG4J2-212.",Bug fix
Move async subproject into core. Fixes LOG4J2-208. Thanks to Remko Popma.,Maintainability improvement
Call LoggerContext.stop when the application is shutdown. Fixes LOG4J2-212.,Bug fix
MapMessage was not enclosing key value in quotes when generating XML. Fixes LOG4J2-210. Thanks to Arkin Yetis.,Bug fix
FlumeAvroManager now uses Flume RPCClient. Fixes LOG4J2-198.,Code redesign
	FlumeAvroManager now uses Flume RPCClient. Fixes LOG4J2-196.,Code redesign
Use the Maven group ID org.apache.logging.log4j for all artifacts. Fixes LOG4J2-207.,Maintainability improvement
	Add tag library. Fixes LOG4J2-187. Thanks to Nick Williams.,Add support for a new feature
Unit tests now create files in the target directory. Fixes LOG4J2-195. Thanks to Remko Popma.,Bug fix
RollingFastFileAppender (in log4j-async) did not roll over. Fixes LOG4J2-193. Thanks to Remko Popma.,Bug fix
Highlight subprojects in sub-navigation. Fixes LOG4J2-199. Thanks to Remko Popma.,Maintainability improvement
LoggerContext method renamed to removeFilter from removeFiler. Fixes LOG4J2-200. Thanks to Remko Popma.,Maintainability improvement
ThrowableFormatOptionsTest failed on Windows due to CR/LF issue. Fixes LOG4J2-194. Thanks to Remko Popma.,Bug fix
BaseConfiguration addLoggerAppender saved appender using the Logger name. Fixes LOG4J2-190. Thanks to Werner.,Bug fix
Move Throwable pattern converter options processing to ThrowableFormatOptions class. Fixes LOG4J2-160. Thanks to Joanne Polsky.,Maintainability improvement
Allowed Loggers access to the properties in the LoggerConfig. Fixes LOG4J2-157. Thanks to Remko Popma.,Add support for a new feature
Added ability to include or exclude location information. Fixes LOG4J2-153. Thanks to Remko Popma.,Add support for a new feature
Allow Logger and LoggerContext to be subclassed. Fixes LOG4J2-151. Thanks to Remko Popma.,Add support for a new feature
Add methods is/setEndOfBatch to LogEvent. Fixes LOG4J2-164. Thanks to Remko Popma.,Add support for a new feature
Add support for asynchronous loggers. Fixes LOG4J2-163. Thanks to Remko Popma.,Add support for a new feature
The blocking parameter did not work properly on AsynchAppender. Fixes LOG4J2-189. Thanks to Werner.,Bug fix
AppenderRefs on AsynchAppender didn't support the level and filter elements. Fixes LOG4J2-188. Thanks to Werner.,Bug fix
Avoid IllegalArgumentException in AsynchAppender. Fixes LOG4J2-176. Thanks to Remko Popma.,Bug fix
Add Logger interface APIs to log at given levels. Fixes LOG4J2-179.,Add support for a new feature
OutputStreamManager now adds the layout header whenever the OutputStream is set. Fixes LOG4J2-181.,Code redesign
Fix NullPointerException in DatagramOutputStream when flush is called from multiple threads. Fixes LOG4J2-177. Thanks to Remko Popma.,Bug fix
Added FlumePersistentManager which writes to BerkeleyDB and then writes to Flume asynchronously.,Add support for a new feature
Plugin cache should be reset when addPackages is called. Fixes LOG4J2-175.,Bug fix
Expose file appender configuration details via an advertisement mechanism. Fixes LOG4J2-155.,Bug fix
Add Fragment-Host to MANIFEST.MF for log4j-core. Fixes LOG4J2-159. Thanks to Jan Winter.,Add support for a new feature
Configurator throws a ClassCastException if LogManager returns a SimpleLoggerContext. Fixes LOG4J2-167.,Bug fix
ConfigurationFactory was adding factories on every call. Fixes LOG4J2-169.,Performance improvement
Modify ClassLoaderContextSelector to use the first ClassLoader in the child parent hierarchy that has a Context with a configuration to allow JSPs to use the WebApp's context and configuration. Fixes LOG4J2-161.,Maintainability improvement
Add RFC 5424 compliant escaping rules to RFC5424Layout. Fixes LOG4J2-158. Thanks to Scott Severtson.,Add support for a new feature
,
LocalizedMessageTest fails on linux system. Fixes LOG4J2-156. Thanks to Andreas Born.,Bug fix
RollingFileAppender's FileRenameAction was throwing a NullPointerException if no directory was specified on the target file name. Fixes LOG4J2-152. Thanks to Remko Popma.,Bug fix
Convert all System.getProperty calls to use PropertiesUtil to suppress SecurityExceptions. Fixes LOG4J2-150.,Code redesign
ThreadContextMapFilter was matching on the key instead of the value of the key. Fixes LOG4J2-147. Thanks to William Burns.,Bug fix
Allow FlumeAvroManager to initialize even if it cannot connect to an agent.,Add support for a new feature
SMTPAppender will only cache filtered events. Fixes LOG4J2-149. Thanks to Scott Severtson.,Bug fix
Add missing serial version IDs. Fixes LOG4J2-145.,Add support for a new feature
NullPointerException in RFC5424Layout. Fixes LOG4J2-144.,Bug fix
"MessagePatternConverter now returns ""null"" if the log message is null. Fixes LOG4J2-143.",Bug fix
Serialized LogEvents were not reset in the output stream causing them to deserialize incorrectly. Fixes LOG4J2-142.,Bug fix
Fix null pointer exception in SocketAppender if no protocol is specified. The protocol will default to TCP for the SocketAppender and UDP for the SyslogAppender. Fixes LOG4J2-139.,Bug fix
Added Log4j 2 to SLF4J adapter.,Add support for a new feature
Typo in documentation of SocketAppender. Fixes LOG4J2-140. Thanks to Joern Huxhorn.,Documentation
Fix hang in Dumbster SMTP test server. Fixes LOG4J2-137.,Quality assurance
Allow newlines to be escaped in Syslog and RFC5424 layouts. Allow Throwables to be included in the output from RFC5424Layout. Fixes LOG4J2-136. Thanks to Scott Severtson.,Add support for a new feature
Add SMTPAppender. Fixes LOG4J2-131. Thanks to Scott Severtson.,Add support for a new feature
PatternLayout should format throwables without requiring a converter. Fixes LOG4J2-130.,Bug fix
Added hostName and contextName to property map.,Add support for a new feature
BaseConfiguration does not close the first appender. Fixes LOG4J2-135. Thanks to Ingo Feltes.,Bug fix
Add MessageFormatMessage and FormattedMessage.,Add support for a new feature
"Use %red, %white, %blue, and so on in the console appender. Fixes LOG4J2-134.",Bug fix
Allow custom message creation via a message factory. Fixes LOG4J2-133.,Add support for a new feature
AbstractLogger.catching(Throwable) checks for DEBUG level but logs at ERROR level. Fixes LOG4J2-132.,Bug fix
RoutingAppender was only creating a single appender for the default Route. Fixes LOG4J2-129.,Bug fix
Allow JMS appenders to recover if the queue or topic is unavailable. Fixes LOG4J2-126.,Add support for a new feature
Add follow attribute to Console Appender. Fixes LOG4J2-128.,Add support for a new feature
AbstractLogger methods were not passing Markers to the isEnabled methods. Fixes LOG4J2-127.,Bug fix
Added Flume Appender samples.,Add support for a new feature
Add unit test to verify exceptions are thrown when the socket connection fails. Fixes LOG4J2-122.,Quality assurance
JMSQueue and JMSTopic Appenders did not allow name to be specified. Fixes LOG4J2-125.,Bug fix
Enhanced javadoc copyright statement. Fixes LOG4J2-111.,Documentation
Renamed log4j12-api to log4j-1.2-api. Fixes LOG4J2-110.,Maintainability improvement
TCPSocketManager would fail if the initial connection could not be established. Fixes LOG4J2-120.,Bug fix
A broken socket connection would cause the TCPSocketManager to continuously reconnect. Fixes LOG4J2-119.,Bug fix
The example for ThreadContextMapFilter was incorrect. Fixes LOG4J2-123. Thanks to Olivier Lamy.,Bug fix
File renaming was using the wrong date value. Enhanced DefaultRolloverStrategy to store newest files in highest index as well as lowest. Fixes LOG4J2-116.,Maintainability improvement
ThreadContext Map elements with null values are now ignored when constructing a Flume event and in the RFC5424 Layout. Fixes LOG4J2-115.,Bug fix
StructuredDataFilter createFilter was annotated with PluginAttr instead of PluginElement for the KeyValuePairs. Fixes LOG4J2-113.,Bug fix
StructuredDataMessage was validating the length of the values in the event Map instead of the lengths of the keys. Fixes LOG4J2-114. Thanks to Arkin Yetis.,Bug fix
,
	Fix NullPointerException in ClassLoaderContextSelector when no class is returned from the SecurityManager. Fixes LOG4J2-108.,Bug fix
Add ability to customize the names of the Levels in the LevelPatternConverter. Fixes LOG4J2-105.,Add support for a new feature
	PatternParser was not properly handling adjacent nested options Fixes LOG4J2-107.,Bug fix
	Add support for loading plugins inside the OSGi bundle. Fixes LOG4J2-95.,Add support for a new feature
"Add ThreadContext.push(String format, Object... args) Fixes LOG4J2-85.",Add support for a new feature
The LogEvent was wrapping a ThrowableProxy with another ThrowableProxy when deserializing. Fixes LOG4J2-103. Thanks to Das Archive.,Bug fix
Created combined jar to combine API and Core contents for users who only want the Log4j implementation.,Performance improvement
"Convert LogManager binding to use ""regular"" java properties instead of XML properties to workaround a bug in Oracle's xmlparserv2 jar. Fixes LOG4J2-104.",Bug fix
Added PropertiesRewritePolicy and ability to define properties on a Logger. Fixes LOG4J2-28.,Add support for a new feature
Build pdf of user's guide. Fixes LOG4J2-87.,Documentation
Added font and fontSize parameters to HTMLLayout. Replace newlines in message with br tag. Fixes LOG4J2-29.,Add support for a new feature
Added ability to configure from an InputSource. Fixes LOG4J2-55.,Add support for a new feature
The Facility value was being improperly calculated. Fixes LOG4J2-102. Thanks to Emanuele Colombo.,Bug fix
A NullPointerException would occur if no format value was passed to the SyslogAppender. Fixes LOG4J2-101. Thanks to Emanuele Colombo.,Bug fix
MapRewritePolicy had an extra call to putAll that caused updates to behave like adds. Fixes LOG4J2-99. Thanks to Das Archive.,Bug fix
Avoid NPE when duplicate LoggerContextFactorys are present. Allow factories to specify a weight to allow real implementations to outrank test implementations. Provide a simple default LoggerContextFactory.,Code redesign
Added several missing classes and methods for Log4j 1.x compatibility. Fixes LOG4J2-97.,Add support for a new feature
Interpolator was not stripping Lookup key separator when trying to locate the default value for a variable. Fixes LOG4J2-94. Thanks to Denis Treskunov.,Bug fix
Log4j 1.2 Category.forcedLog was wrapping the message with an ObjectMessage even if the parameter was an ObjectMessage.,Bug fix
,
"Made ParameterizedMessage, StringFormattedMessage and ThreadDumpMessage immutable. LocalizedMessage is immutable except that it will be updated with the logger name when it is added to the LogEvent.",Code redesign
DefaultConfiguration was not starting the Console Appender.,Bug fix
Add interval and modulate options to TimeBasedTriggeringPolicy to allow more fine-grained control of when file rolling should occur. Fixes LOG4J2-35.,Add support for a new feature
Add support for filtering packages from stack traces. Fixes LOG4J2-58.,Add support for a new feature
"If system property ""disableThreadContextStack"" is set pushes to the ThreadContext will be ignored. If system property ""disableThreadContext"" is set both puts and pushes will be ignored. Fixes LOG4J2-84.",Add support for a new feature
"If system property ""disableThreadContextMap"" is set puts to the ThreadContext will be ignored. If system property ""disableThreadContext"" is set both puts and pushes will be ignored. Fixes LOG4J2-83.",Add support for a new feature
Add support for ANSI colors by adding the highlight and style pattern converters. Fix pattern parsing to allow nested patterns.,Add support for a new feature
Converted DynamicThresholdFilter to use KeyValuePair. Fixed bugs in the Map-based filters to allow declaration of multiple values for a key to match the documentation. Fixes LOG4J2-92.,Bug fix
Many logging methods in AbstractLogger were set to an incorrect logging level. catching was using the THROWING marker and was set to debug instead of error. Fixes LOG4J2-88.,Bug fix
Allow the status logging to be directed to stderr or to a file.,Add support for a new feature
Log4j 1.2 adapter's Category class was missing 3 log methods. Fixes LOG4J2-91.,Bug fix
If the ThreadContext stack is empty the LogEvent will contain a null value to reduce the overhead of creating log events and in the size of the serialized object. Changed the ThreadContext stack to use a custom stack interface instead of java.util.Stack as that class is overly heavy. This change will cause an API incompatibility. Fixes LOG4J2-84.,Bug fix
If the ThreadContext map is empty the LogEvent will contain a null value to reduce the overhead of creating log events and in the size of the serialized object. Fixes LOG4J2-83.,Bug fix
Add getFormats to MultiformatMessage and allow StructuredDataMessage to format as XML.,Add support for a new feature
Add documentation on client vs server mode to performance page. Fixes LOG4J2-90.,Documentation
Move variable substitution from PatternLayout to appropriate converters to improve performance.,Maintainability improvement
,
Added AsynchAppender.,Add support for a new feature
PatternLayout was not honoring format modifiers. Fixes LOG4J-81.,Bug fix
Created web module to allow web applications to include the Log4j context listener in WEB-INF/lib even if Log4j is in the container's class path. Allow locating the LoggerContext to include the ClassLoader. Updated the Loader utility to always choose the child ClassLoader. Verified in Jboss 5 and Tomcat.	,Add support for a new feature
MarkerFilter called MarkerManager.getMarker causing the Marker to be created during the processing of the configuration. This prevents the application from creating the Marker with any parents. MarkerWrapper in SLF4J-impl was getting a ClassCastException in instanceOf because the Marker isn't a MarkerWrapper. Fixes LOG4J2-82.,Bug fix
Allow Log4j 2 to be used as the implementation with SLF4J and SLF4J's jcl-over-slf4j by adding filtering to the log method in SLF4JLogger. Fixes LOG4J2-80. Thanks to Oliver Lamy.	,Add support for a new feature
LogFactoryImpl.setAttribute in the Commons Logging bridge got a NullPointerException when passed a null value. It will now remove the attribute. Fixes LOG4J2-78.,Bug fix
RoutingAppender was calling the stop method for each of its referenced Appenders and was calling the stop method of the default Appender a second time. It will now only call the stop method of Appenders it creates. Fixes LOG4J2-77.,Bug fix
RewriteAppender was calling the stop method of the referenced appender causing the referenced appender's manager to have its use count decremented too many times. Fixes LOG4J2-76.,Bug fix
"Logger.error(Marker, Message, Throwable) was internally using Level.TRACE. Fixes LOG4J2-74.	",Bug fix
Enhanced Log4jContextListener to accept a configuration file location. Modified FileConfigurationMonitor to monitor files configured that way. Fixed other reconfiguration related bugs. Tested in JBoss and Tomcat. Fixes LOG4J2-75.,Code redesign
NullPointerException in RollingFileManager when filePattern does not cause the file to be compressed. Fixes LOG4J2-72.,Bug fix
FileRenameAction did not create the parent directories of the archive files causing the rollover to fail. Fixes LOG4J2-71.,Bug fix
Update the versions of SLF4J and Logback.,Update dependency
,
Add getLogger(Class) to LogManager. Fixes LOG4J2-70.,Add support for a new feature
Allow Flume agents to be embedded into the Flume Appender. Fixes LOG4J2-69.	,Add support for a new feature
Add support for formatting using String.format(). Fixes LOG4J2-68.,Add support for a new feature
Allow components besides core to create a PluginMap for faster plugin loading and not having to specify the plugin package in the configuration. Fixes LOG4J2-67.,Add support for a new feature
Fix compilation problems in Java 7. Fixes LOG4J2-64.,Bug fix
Allow variable substitution on the configuration attributes and on the root log level. Fixes LOG4J2-65.,Bug fix
,
Added ability to filter on the AppenderRef by adding either a level or a filter. Fixes LOG4J2-60. Thanks to Shane Kelly.,Add support for a new feature
Level.toLevel would throw an IllegalArgumentException instead of returning the default value. Fixes LOG4J2-56. Thanks to John Owen Atala.,Bug fix
Remove LoggerContext support for custom logger factories. All Loggers returned by LoggerContext should be compatibile and of the same type. Fixes LOG4J2-51. Thanks to John Vasileff.,Code redesign
Make sure all application facing log methods use their own FQCN. This patch resolves a unit test failure for the %C pattern when using the Category logger. Fixes LOG4J2-50. Thanks to John Vasileff.,Bug fix
,
PLATFORM: JDK20 support added. Issue #3353.,Add support for a new feature
BUGFIX: Eclipse 4.27 and VSCode 1.14.0 would ignore lombok.config. Issue #3332.,Bug fix
BUGFIX: @NonNull on a primitive array field on a record wouldn't work. Issue #3366.,Bug fix
FEATURE: Jakarta has some non-null annotations (such as jakarta.annotation.Nonnull) which we now support. Issue #3346.,Add support for a new feature
"BUGFIX: Eclipse didn't find usages of extension methods (@ExtensionMethod) in ""find references"" nor rename-refactoring. Issue #3373",Bug fix
,
PLATFORM: JDK19 support added. Issue #3264.,Add support for a new feature
"BUGFIX: Using the refactor script: ""Rename field"" in a @(Super)Builder-marked file in eclipse or VSCode would cause issues. [Issue #3181] (https://github.com/projectlombok/lombok/issues/3181).",Bug fix
BUGFIX: Using val together with any call to a method that explicitly resolves to a default impl in an interface didn't work in javac. Issue #3242.,Bug fix
,
PLATFORM: JDK18 support added. Issue #3129.,Add support for a new feature
PLATFORM: Using ecj and maven? There's now a command line option to integrate lombok into your build chain. Issue #3143.,Support for external development tool
FEATURE: @ToString has an annotation parameter called onlyExplicitlyIncluded. There's now a config key lombok.toString.onlyExplicitlyIncluded to set this property as well. Issue #2849.,Add support for a new feature
"FEATURE: Turning a field named uShape into a getter is tricky: getUShape or getuShape? The community is split on which style to use. Lombok does getUShape, but if you prefer the getuShape style, add to lombok.config: lombok.accessors.capitalization = beanspec. Issue #2693 Pull Request #2996. Thanks @YonathanSherwin!",Add support for a new feature
"FEATURE: You can now use @Accessors(makeFinal = true) to make final getters, setters, and with-ers. Issue #1456.",Add support for a new feature
BUGFIX: Various save actions and refactor scripts in eclipse work better. Issue #2995 Issue #1309 Issue #2985 Issue #2509.,Bug fix
1309,Bug fix
2985,Bug fix
2509,Bug fix
BUGFIX: Eclipse projects using the jasperreports-plugin will now compile. Issue #1036.,Bug fix
BUGFIX: inner classes in @UtilityClass classes were broken in JDK9+. Issue #3097.,Bug fix
BUGFIX: Delomboking code with @Builder.Default in it would generate different code vs lombok itself. Issue #3053.,Bug fix
BUGFIX: Combining @NonNullByDefault and lombok.addNullAnnotations would generate two @Nullable annotations and thus generate a compiler error. Issue #3120. Thanks @JohnPaulTaylorII!,Bug fix
BUGFIX: Null analysis in eclipse was broken for incremental builds. Issue #3133.,Bug fix
BUGFIX VerifyError would show up in the latest eclipse release when using various refactor scripts. Issue #3134.,Bug fix
BUGFIX: The various @Log annotations can now be placed on inner enums and records. Issue #2990.,Bug fix
"SECURITY: A widely reported security issue with log4j2 (CVE-2021-44228) has absolutely no effect on either lombok itself nor does usage of lombok on its own, or even the usage of lombok's @Log4j2, cause any issues whatsoever: You have to ship your own log4j2 dependency in your app - update that to 2.17 or otherwise mitigate this issue (see the CVE page). To avoid unneccessary warnings from dependency checkers, our dep on log4j2, which is used solely for testing, isn't shipped by us, and cannot be exploited in any way, has been updated to 2.17.1. Issue #3063",Security improvement
"IMPROBABLE BREAKING CHANGE: Lombok now understands a few more annotations that imply ""this field should not ever contain a null reference"". Lombok will thus copy some of these new annotations e.g. to generated getters and the like. Pull Request #2904",Code redesign
,
PLATFORM: JDK17 support added. Issue #2898.,Add support for a new feature
FEATURE: Added the @StandardException feature. Pull Request #2702.,Add support for a new feature
"IMPROBABLE BREAKING CHANGE: If the underlying compiler and --release / --source option is 10 or higher, lombok's val is now replaced by final var. That means compound declarations such as val x = 10, y = 12; now fail (lombok's old val implementation supported it, javac's var does not), but IDE support in particular is more reliable. We decided it was worth the tradeoff.",Code redesign
BUGFIX: Syntax highlighting in VSCode now works reliably when using lombok. Issue #2950.,Bug fix
BUGFIX: Eclipse's organize imports feature would sometimes remove your lombok.val import. Issue #2972.,Bug fix
,
PLATFORM: JDK16 support added. Issue #2681.,Add support for a new feature
"PLATFORM: All lombok features updated to act in a sane fashion with JDK16's record feature. In particular, you can annotate record components with @NonNull to have lombok add null checks to your compact constructor (which will be created if need be).",Code redesign
BUGFIX: Trying to use a lambda expression as parameter to an @ExtensionMethod did not work. Issue #2741. (by @Rawi01).,Bug fix
BUGFIX: @SuperBuilder with an existing constructor caused issues in eclipse. Issue #2704. (by @JanRieke).,Bug fix
BUGFIX: Using @SuperBuilder with a handwritten builder class caused issues. Issue #2701. (by @JanRieke).,Bug fix
BUGFIX: Lombok interacts properly with the new save actions in eclipse 2021-03.,Bug fix
POTENTIAL BUGFIX: lombok + errorprone could cause IllegalArgumentException if using the MissingSummary bug pattern. Issue #2730.,Bug fix
,
"BUGFIX: Various tools using ecj under the hood (including intellij) could cause corrupt class files to be generated. PR #2637, lombok-intellij-plugin issue #969.",Bug fix
969,Bug fix
BUGFIX: Netbeans would not work with 1.18.16 anymore. Issue #2612.,Bug fix
"BUGFIX: @ExtensionMethod support in ecj improved when generics are involved. Issue #2648, PR #2658 thanks to @Rawi01.",Bug fix
PLATFORM: using lombok.config files when compiling with sbt 1.4 now works again. Issue #2645,Bug fix
,
"BUGFIX: Version 1.18.14 could not be installed in Eclipse, it would break Eclipse.",Bug fix
BREAKING CHANGE: mapstruct users should now add a dependency to lombok-mapstruct-binding. This solves compiling modules with lombok (and mapstruct).,Update dependency
IMPROBABLE BREAKING CHANGE: The generated hashcode has changed for classes that include both primitive fields and reference fields.,Code redesign
"FEATURE: Similar to @Builder, you can now configure a @SuperBuilder's 'setter' prefixes via @SuperBuilder(setterPrefix = ""set"") for example. We still discourage doing this. Pull Request #2357.",Add support for a new feature
"FEATURE: If using @Synchronized(""lockVar""), if lockVar is referring to a static field, the code lombok generates no longer causes a warning about accessing a static entity incorrectly. Issue #678",Add support for a new feature
FEATURE: @Jacksonized on a @Builder or @SuperBuilder will configure Jackson to use this builder when deserializing. Pull Request #2387 thanks to @JanRieke. @Jacksonized documentation.,Add support for a new feature
"FEATURE: The checkerframework support has been updated; the relevant annotations were renamed in checkerframework's APIs, lombok now generates the annotations according to their current API names.",Add support for a new feature
FEATURE: Add option to cache hashCode via @EqualsAndHashCode(cacheStrategy = EqualsAndHashCode.CacheStrategy.LAZY). Issue #784 Pull Request #2513 thanks to @andrebrait.,Add support for a new feature
PLATFORM: Added support for compiling projects with OpenJ9 Pull Request #2437,Support for external development tool
PLATFORM: Improved support for recent JVM/javac versions (14 and 15) and new language features.,Add support for a new feature
"PERFORMANCE: Several performance improvements during parsing/compilation, both using javac and Eclipse. Thanks @Rawi01!",Performance improvement
"PERFORMANCE: The generated equals method will first compare primitives, then primitive wrappers and then reference fields. Manual re-ordering is possible using @Include(rank=n). Pull Request #2485, Issue #1543",Performance improvement
BUGFIX: Delombok prints the first this parameter. Issue #2444,Bug fix
BUGFIX: Using val in combination with values whose generics include wildcards that reference themselves would cause a StackOverflowError in javac. Issue #2358.,Bug fix
BUGFIX: Using @SuperBuilder on a class that has some fairly convoluted generics usage would fail with 'Wrong number of type arguments'. Issue #2359 Pull Request #2362,Bug fix
BUGFIX: Various lombok annotations on classes nested inside enums or interfaces would cause errors in eclipse. Issue #2369,Bug fix
BUGFIX: Trying to add @ExtensionMethods with exactly 2 arguments would fail in eclipse. Issue #1441 Pull Request #2376 thanks to @Rawi01.,Bug fix
BUGFIX: Javac sets incorrect annotated type on with methods. Issue #2463,Bug fix
,
,
"PLATFORM: Support for JDK13 (including yield in switch expressions, as well as delombok having a nicer style for arrow-style switch blocks, and text blocks).",Add support for a new feature
PLATFORM: Support for JDK14 (including pattern match instanceof expressions).,Add support for a new feature
"FEATURE: In lombok.config it is possible to import other config files, even from a .zip or .jar.",Add support for a new feature
"FEATURE: You can now configure a builder's 'setter' prefixes via @Builder(setterPrefix = ""set"") for example. We discourage doing this, but if some library you use requires them, have at it. Pull Request #2174, Issue #1805.",Add support for a new feature
"FEATURE: If you use @Builder's @Singular, a plural form is also generated, which has the effect of adding all elements in the passed collection. If you pass a null reference, this would result in a message-less NullPointerException. Now, it results in that exception but with a useful message attached (uses the same config as @NonNull), or alternatively via a parameter on @Singular, you can choose to ignore such a call (add nothing, return immediately); this can be useful when deserializing (e.g. Jackson JSON) and JPA/Hibernate code. Issue #2221. singular documentation.",Add support for a new feature
"FEATURE: Tired of being unable to use @javax.annotation.ParametersAreNonnullByDefault or @org.eclipse.jdt.annotation.NonNullByDefault because then the equals method that lombok generates isn't valid? Fret no more; lombok can now add nullity annotations where relevant. Set the flavour of nullity annotation you prefer in your lombok.config. Applies to the return value of toString, withX, chainable setX, static constructors, build, builder, etcetera, and the parameter of equals, canEqual, and the plural form of @Singular marked fields for builder classes. Issue #788",Add support for a new feature
"BUGFIX: If using the sonarlint plugin in eclipse for projects bound to sonarcloud, you now no longer get internal errors on sonarlint processing. Issue #2351",Bug fix
"BUGFIX: lombok.experimental.Wither has been deprecated (it has been renamed to lombok.With). However, the intent is that lombok still handles the old annotation in case you haven't updated your lombok dep yet. However, only a star import on lombok.experimental.* worked; an explicit one would cause lombok to not generate any with method. Issue #2235",Bug fix
BUGFIX: Referring to an inner class inside the generics on a class marked with @SuperBuilder would cause the error wrong number of type arguments; required 3 Issue #2262; fixed by github user @Lekanich - thank you!,Bug fix
"BUGFIX: Some of the code generated by @Builder did not include this. prefixes when accessing fields. While semantically it didn't matter, if you use the 'add this prefix for field accesses' save action in eclipse, the save action would break. Issue #2327",Bug fix
"BUGFIX: When lombok copies javadoc from fields to relevant methods, it should generate an appropriate @return this line if lombok copies the javadoc to a generated setter that is chainable (returns itself). It didn't do that when generating the 'setters' in a @Builder. Lombok also didn't generate an appropriate @return item for @With methods. The javadoc has also been updated slightly (the this reference in the javadoc is now rendered in a code tag).Issue #2323",Bug fix
"IMPROBABLE BREAKING CHANGE: Lombok now generates qualified types (so, Outer.Inner instead of just Inner) in most type signatures that it generates; this should avoid exotic scenarios where the types lombok puts in signatures end up referring to unintended other types, which can occur if your class implements an interface that itself defines a type with the same name as one defined in your source file. I told you it was exotic. Thanks to Hunter Anderson for doing some preliminary work on this change. Issue #2268",Code redesign
IMPROBABLE BREAKING CHANGE: Running java -jar lombok.jar config -v <files> no longer shows which files do not mention the specified keys. Use --non-mentioned or -n to show them anyway.,Code redesign
,
"PROMOTION: @Wither has been promoted to the main package, renamed to @With. Otherwise, no changes have been made to the annotation. The old experimental annotation will remain for a few versions as a deprecated annotation. If you had lombok.config configuration for this annotation, the configuration keys for this feature have been renamed.",Code redesign
FEATURE: You can now configure a custom logger framework using the new @CustomLog annotation in combination with the lombok.log.custom.declaration configuration key. See the log documentation for more information. Pullrequest #2086 with thanks to Adam Juraszek.,Add support for a new feature
"ENHANCEMENT: Thanks to Mark Haynes, the staticConstructor will now also be generated if a (private) constructor already exists. Issue #2100",Add support for a new feature
ENHANCEMENT: val is now capable of decoding the type of convoluted expressions (particularly if the right hand side involves lambdas and conditional (ternary) expressions). Pull Request #2109 with thanks to Alexander Bulgakov.,Add support for a new feature
"ENHANCEMENT: You can now configure the generated builder class name via the config system, using key lombok.builder.className. See the Builder documentation and SuperBuilder documentation",Add support for a new feature
"ENHANCEMENT: If you mix up eclipse's non-null support, such as @NonNullByDefault, with lombok's @NonNull, you get a bunch of warnings about dead code that are inappropriate. These warnings are now suppressed, thanks to a contribution from Till Brychcy! Pull Request #2155",Bug fix
ENHANCEMENT: @NonNull can now also generate checks using jdk's Objects.requireNonNull or Guava's Preconditions.checkNotNull. Issue #1197,Add support for a new feature
EXPERIMENT: Lombok is working together with checkerframework to enable detection of improper builder use (such as forgetting to set a mandatory property prior to calling build()). This experiment can be turned on by adding checkerframework = true to your lombok.config file.,Add support for a new feature
BUGFIX: Using @JsonProperty or @JsonValue on a field in combination with @Setter or @Data would sometimes throw a ClassCastException during compilation. Issue #2156,Bug fix
BUGFIX: Delombok would turn something like List<byte[]>... in a method parameter to List<byte...>... Issue #2140,Bug fix
BUGFIX: Javac would generate the wrong equals and hashCode if a type-use annotation was put on an array type field Issue #2165,Bug fix
BUGFIX: Eclipse 2019-06 + JDK-12 compatibility + an @Singular builder entry would produce a cascade of error dialogs. Issue #2169,Bug fix
BUGFIX: Javac would throw a NullPointerException if the package-info.java did not contain a package declaration. Issue #2184,Bug fix
"BUGFIX: Javac sets incorrect annotated type on constructor, getter and setter. Issue #2189",Bug fix
"IMPROBABLE BREAKING CHANGE: Stricter validation of configuration keys dealing with identifiers and types (lombok.log.fieldName, lombok.fieldNameConstants.innerTypeName, lombok.copyableAnnotations).",Code redesign
IMPROBABLE BREAKING CHANGE: The fields generated inside builders for fields with defaults (with @Builder on a class with fields marked @Default) now have $value as the name; direct manipulation of these fields is not advised because there is an associated $set variable that also needs to be taken into account. Issue #2115,Code redesign
,
"FEATURE: You can now configure @FieldNameConstants to CONSTANT_CASE the generated constants, using a lombok.config option. See the FieldNameConstants documentation. Issue #2092.",Add support for a new feature
FEATURE: You can now suppress generation of the builder method when using @Builder; usually because you're only interested in the toBuilder method. As a convenience we won't emit warnings about missing @Builder.Default annotations when you do this. Issue #2046,Add support for a new feature
FEATURE: You can now change the access modifier of generated builder classes. Issue #2083.,Add support for a new feature
"FEATURE: When using @NonNull, or any other annotation that would result in a null-check, you can configure to generate an assert statement instead. Issue #2078.",Add support for a new feature
FEATURE: Lombok now knows exactly how to treat @com.fasterxml.jackson.annotation.JsonProperty and will copy it to the right places for example when making builders. Issue #1961 Issue #1981,Add support for a new feature
PLATFORM: A few lombok features (most notably delombok) failed on JDK12. Issue #2082,Bug fix
BUGFIX: var/val on methods that return an intersection type would now work in Eclipse. Issue #1986,Bug fix
BUGFIX: Fix for java6 regression if a field has javadoc. Issue #2066,Bug fix
BUGFIX: Delombok now delomboks java10's own var as var and not as the actual underlying type. Issue #2049,Bug fix
"BUGFIX: If you use @Builder and manually write the build() method in your builder class, javac would error out instead of deferring to your implementation. Issue #2050 Issue #2061",Bug fix
BUGFIX: @SuperBuilder together with @Singular on non-lists would produce an erroneous emptyList call. Issue #2104.,Bug fix
"IMPROBABLE BREAKING CHANGE: For fields and parameters marked non-null, if the method body starts with an assert statement to ensure the value isn't null, no code to throw an exception will be generated.",Code redesign
"IMPROBABLE BREAKING CHANGE: When using ecj to compile java code with @Builder or @SuperBuilder in it, and a builder setter method was generated for a @NonNull-marked method, no explicit null check would be present. However, running javac on the exact same file would produce the null check. Now ecj also produces this null check. Issue #2120.",Code redesign
IMPROBABLE BREAKING CHANGE: We slightly changed the message of the exception lombok generates to handle @NonNull marked parameters. Issue #2122,Code redesign
,
"FEATURE: Javadoc on fields will now also be copied to the Builders' setters. Thanks for the contribution, Emil Lundberg. Issue #2008",Add support for a new feature
FEATURE: The @FieldNameConstants feature now allows you to write the inner type by hand and add whatever you like to it; lombok will add the constants to this class. See the updated FieldNameConstants feature page.,Add support for a new feature
FEATURE: There is now a lombok.config key to configure @ToString's call super behavior; it's just like @EqualsAndHashCode which has had it for a while now. Issue #1918,Add support for a new feature
ENHANCEMENT: The toString generation of enums now contains the name of the enum constant. Issue #1916,Add support for a new feature
"PLATFORM: Due to changes to switch statements in JDK12, lombok wasn't working with the JDK12 preview. Issue #1888",Bug fix
BUGFIX: Using @Delegate in combination @NonNull would give an error in jdk8. Issue #1935,Bug fix
"BUGFIX: Using the new @FieldNameConstants in eclipse would cause errors in the error log view, and error popups if save actions are turned on. Issue #2024",Bug fix
"BUGFIX: Since version 1.18.4, the delombok ant task didn't work and errored with a NoClassDefFoundError. Issue #1932",Bug fix
"BUGFIX: Combining both @Setter and @Wither on the same field, when that field also has javadoc with a --setter-- section or an @param tag, resulted in a race condition where the first handler to get to the field would take that part of the javadoc. This is a step along the way to fixing Issue #1033",Bug fix
"BUGFIX: Compiling multi-module projects would fail on forcing new rounds. Issue #1723, Issue #1858, Issue #1946, Issue #2028",Bug fix
Issue #1858,Bug fix
Issue #1946,Bug fix
Issue #2028,Bug fix
,
PLATFORM: Support for Eclipse Photon. Issue #1831,Bug fix
PLATFORM: Angular IDE is now recognized by the installer Issue #1830,Support for external development tool
PLATFORM: Many improvements for lombok's JDK10/11 support.,Maintainability improvement
BREAKING CHANGE: The @FieldNameConstants feature has been completely redesigned. Issue #1774 FieldNameConstants documentation,Code redesign
"BREAKING CHANGE: Lombok will now always copy specific annotations around (from field to getter, from field to builder 'setter', etcetera): A specific curated list of known annotations where that is the right thing to do (generally, @NonNull style annotations from various libraries), as well as any annotations you explicitly list in the lombok.copyableAnnotations config key in your lombok.config file. Also, lombok is more consistent about copying these annotations. (Previous behaviour: Lombok used to copy any annotation whose simple name was NonNull, Nullable, or CheckForNull). Issue #1570 and Issue #1634",Code redesign
FEATURE: Lombok's @NonNull annotation can now be used on type usages (annotation on type usages has been introduced in JDK 8). @Builder's @Singular annotation now properly deals with annotations on the generics type on the collection: @Singular List<@NonNull String> names; now does the right thing.,Add support for a new feature
"FEATURE: You can now mix @SuperBuilder and toBuilder, and toBuilder no longer throws NullPointerException if a @Singular-marked collection field is null. Issue #1324",Bug fix
"FEATURE: delombok now supports module paths via the --module-path option, and will automatically add lombok itself to the module path. This should make it possible to delombok your modularized projects. Issue #1848",Bug fix
FEATURE: You can pass @args.txt to delombok to read args from the text file; useful if you have really long classpaths you need to pass to delombok. Issue #1795,Add support for a new feature
BUGFIX: @NoArgsConstructor(force=true) would try to initialize already initialized final fields in Eclipse. Issue #1829,Bug fix
"BUGFIX: When using lombok to compile modularized (module-info.java-style) code, if the module name has dots in it, it wouldn't work. Issue #1808",Bug fix
BUGFIX: Errors about lombok not reading a module providing org.mapstruct.ap.spi when trying to use lombok in jigsaw-mode on JDK 11. Issue #1806,Bug fix
BUGFIX: Fix NetBeans compile on save. Issue #1770,Bug fix
"BUGFIX: If you manually write your builder class so you can add a few methods of your own, and those methods refer to generated methods, you'd usually run into various bizarre error messages, but only on JDK9/10/11. This one is hard to describe, but we fixed it. Issue #1907",Bug fix
,
BUGFIX: mapstruct + lombok in eclipse should hopefully work again. Issue #1359 and mapstruct issue #1159,Bug fix
BUGFIX: Equals and hashCode again exclude transient fields by default. Issue #1724,Bug fix
"BUGFIX: Eclipse 'organize imports' feature (either explicitly, or if automatically triggered on saving via 'save actions') would remove the import for lombok.var. Issue #1783",Bug fix
BUGFIX: Lombok and gradle v4.9 didn't work together; that's been fixed. Issue #1716 and gradle-apt-plugin issue #87,Bug fix
"FEATURE: You can now make builders for type hierarchies, using the new (experimental) @SuperBuilder annotation. Thanks for the contribution, Jan Rieke. @SuperBuilder documentation",Add support for a new feature
"FEATURE: @NoArgsConstructor, including forcing one with lombok.config: lombok.noArgsConstructor.extraPrivate=true now take any defaults set with @Builder.Default into account. Issue #1347",Add support for a new feature
,
BREAKING CHANGE: The in 1.16.22 introduced configuration key lombok.noArgsConstructor.extraPrivate is now false by default. Issue #1708,Bug fix
"BUGFIX: Do not generate a private no-args constructor if that breaks the code. Issue #1703, Issue #1704, Issue #1712",Bug fix
Issue #1704,Bug fix
Issue #1712,Bug fix
BUGFIX: Using boolean parameters in lombok annotations would fail. Issue #1709,Bug fix
BUGFIX: Delombok would give an error message. Issue #1705,Bug fix
BUGFIX: Eclipse java10 var support didn't work if lombok was installed in your eclipse. Issue #1676,Bug fix
FEATURE: Google's Flogger (a.k.a. FluentLogger) is now available via @Flogger. Issue #1697,Add support for a new feature
"FEATURE: @FieldNameConstants has been extended to support prefixes and suffixes. By default, the generated constants are prefixed with FIELD_. Docs on @FieldNameConstants.",Add support for a new feature
,
FEATURE: Private no-args constructor for @Data and @Value to enable deserialization frameworks (like Jackson) to operate out-of-the-box. Use lombok.noArgsConstructor.extraPrivate = false to disable this behavior.,Add support for a new feature
"FEATURE: Methods can now be marked for inclusion in toString, equals, and hashCode generation. There is a new mechanism to mark which fields (and now, methods) are to be included or excluded for the generation of these methods: mark the relevant member with for example @ToString.Include or @EqualsAndHashCode.Exclude. ToString documentation EqualsAndHashCode documentation",Add support for a new feature
FEATURE: @Getter and @Setter also allow onMethod and onParam when put on a type. Issue #1653,Add support for a new feature
FEATURE: @FieldNameConstants is a new feature that generates string constants for your field names. Docs on @FieldNameConstants.,Add support for a new feature
"PLATFORM: Lombok can be compiled on JDK10, and should run on JDK10. Issue #1693",Bug fix
PLATFORM: lombok now counts as an incremental annotation processor for gradle. Should speed up your gradle builds considerably! Issue #1580,Performance improvement
PLATFORM: Fix for using lombok together with JDK9+'s new module-info.java feature. Issue #985,Add support for a new feature
BUGFIX: Solved some issues in eclipse that resulted in error 'A save participant caused problems'. Issue #879,Bug fix
BUGFIX: Netbeans on jdk9. Issue #1617,Bug fix
BUGFIX: Netbeans < 9. Issue #1555,Bug fix
"PROMOTION: var has been promoted from experimental to the main package with no changes. The 'old' experimental one is still around but is deprecated, and is an alias for the new main package one. var documentation.",Code redesign
"OLD-CRUFT: lombok.experimental.Builder and lombok.experimental.Value are deprecated remnants of when these features were still in experimental. They are now removed entirely. If your project is dependent on an older version of lombok which still has those; fret not, lombok still processes these annotations. It just no longer includes them in the jar.",Deprecate functionality
,
"PLATFORM: Better support for jdk9 in the new IntelliJ, Netbeans and for Gradle.",Maintainability improvement
"BREAKING CHANGE: lombok config key lombok.addJavaxGeneratedAnnotation now defaults to false instead of true. Oracle broke this annotation with the release of JDK9, necessitating this breaking change.",Code redesign
"BREAKING CHANGE: lombok config key lombok.anyConstructor.suppressConstructorProperties is now deprecated and defaults to true, that is, by default lombok no longer automatically generates @ConstructorProperties annotations. New config key lombok.anyConstructor.addConstructorProperties now exists; set it to true if you want the old behavior. Oracle more or less broke this annotation with the release of JDK9, necessitating this breaking change.",Deprecate functionality
DEVELOPMENT: Compiling lombok on JDK1.9 is now possible.,Maintainability improvement
"BUGFIX: The generated hashCode would break the contract if callSuper=true,of={}. Issue #1505",Bug fix
BUGFIX: delombok no longer prints the synthetic outer-class parameter. Issue #1521,Bug fix
BUGFIX: @Builder.Default now also works when type parameters are present. Issue #1527,Bug fix
BUGFIX: @Builder now also works on method with a generified return type. Issue #1420,Bug fix
"INSTALLER: By default, the lombok installer now inserts an absolute path in eclipse.ini and friends, instead of a relative path. If you want the old behavior, you can use java -jar -Dlombok.installer.fullpath=false lombok.jar.",Code redesign
,
PLATFORM: JDK9 support much improved since v1.16.16; Issue #985,Maintainability improvement
BUGFIX: Lombok now works with Bazel and Error Prone. Issue #1290,Bug fix
"FEATURE: Lombok has a new website! A few very minor changes to the code to be more consistent with it have been added, mostly to the javadoc.",Documentation
,
FEATURE: @Builder.Default lets you configure default values for your fields when using @Builder. See the Builder feature page for more information. Issue #1201,Add support for a new feature
"PLATFORM: JDK9 now supported for compilation (delomboking with java9 not yet possible). Note, you'll have to do some command line wrangling. See Issue #985",Maintainability improvement
"BUGFIX: The onX feature (which lets you add annotations to generated methods) did not work if the annotation you added contained named parameters, and you are compiling with JDK8's javac. We can't fix this (it's a bug in javac), but we have provided an alternate, prettier way to do onX on javac8+. Issue #778 onX documentation",Bug fix
"BUGFIX: @Data and @Value now respect the configuration for field access when generating equals, hashCode and toString. Issue #1329",Bug fix
BUGFIX: @Builder now marks generated builder 'setters' as @Deprecated if the source field is deprecated. Issue #1342,Bug fix
CHANGE: @ConstructorProperties will now also be generated for private and package private constructors. This is useful for Jackson Issue #1180,Code redesign
,
"FEATURE: Generated classes, methods and fields can now also annotated with @lombok.Generated Issue #1014",Add support for a new feature
"PLATFORM: Lombok can now be used together with other annotation processors that are looking for lombok-generated methods, but only if lombok is the first annotation processor executed. The most commonly used annotation processor affected by this change is MapStruct; we've worked with the mapstruct team specifically to allow any order. Other annotation processors might follow the framework we've built to make this possible; point the authors of any such processor to us and we'll get it sorted MapStruct issue #510 Lombok issue #973",Support for external development tool
PLATFORM: Eclipse: Refactor script 'rename field' when lombok has also generated getters and/or setters for this field is nicer now Issue #210,Maintainability improvement
BUGFIX: Something you never encountered. Issue #1274,Bug fix
"DEPRECATION: The configuration key lombok.addGeneratedAnnotation is now deprecated, use lombok.addJavaxGeneratedAnnotation instead.",Deprecate functionality
,
"FEATURE: var is the mutable sister of val. For now experimental, and opt-in using ALLOW in the flagUsage configuration key. Thanks for the contribution, Bulgakov Alexander.",Add support for a new feature
CHANGE: @Value and @FieldDefaults no longer touch static fields Issue #1254,Code redesign
BUGFIX: val in lambda expressions now work as expected Issue #911,Bug fix
BUGFIX: Getter(lazy=true) now emits an error message when used on a transient field Issue #1236,Bug fix
BUGFIX: Annotation Processors that use ecj internally (dagger) no longer give linkage errors Issue #1218,Bug fix
PLATFORM: Red Hat JBoss Developer Studio is now correctly identified by the installer Issue #1164,Bug fix
BUGFIX: delombok: for-loops with initializers that are not local variables would be generated incorrectly Issue #1076,Bug fix
,
FEATURE: Added support for JBoss logger Issue #1103,Add support for a new feature
ENHANCEMENT: Running javac -Xlint:all would generate a warning about unclaimed annotations Issue #1117,Bug fix
BUGFIX: Eclipse Mars would sometimes throw a NullPointerException when using @Delegate Issue #913,Bug fix
ENHANCEMENT: Add support for older maven-compiler-plugin Issue #1138,Bug fix
,
PLATFORM: Starting jdk9 support: No more error message regarding pid,Add support for a new feature
FEATURE: @Builder updates: It now generates clearFieldName() methods if @Singular is used. Issue #967.,Add support for a new feature
FEATURE: @Builder updates: The annotation can now be put on instance methods. Issue #63.,Add support for a new feature
FEATURE: @Builder updates: @Singular now supports guava's ImmutableTable Issue #937.,Add support for a new feature
"FEATURE: A lombok.config key can now be used to make your fields final and/or private... everywhere. We'll be monitoring the performance impact of this for a while. We'll touch every source file if you turn these on, and even if you don't, we have to call into the lombok config system for every file.",Add support for a new feature
FEATURE: A lombok.config key can now be used to set the default behaviour of @EqualsAndHashCode when generating methods for a class that extends something in regards to calling the superclass implementations of equals and hashCode or not. Issue #965.,Add support for a new feature
FEATURE: Putting @Wither on abstract classes now generates something slightly more useful: An abstract wither method. Issue #945.,Add support for a new feature
BUGFIX: @Helper used to only be be legal in pretty specific places; now it works just about everywhere.,Bug fix
BUGFIX: lambdas with 1 argument that has an explicit type did not pretty print correctly. Issue #972.,Bug fix
"BUGFIX: When using delombok, a source file with only @NonNull annotations on parameters as lombok feature would not get properly delomboked. Issue #950.",Bug fix
BUGFIX: @Delegate in javac would generate arrays instead of varargs parameters. Issue #932.,Bug fix
BUGFIX: @Value and @FieldDefaults no longer make uninitialized static fields final. Issue #928.,Bug fix
ENHANCEMENT: @Builder.ObtainVia now has @Retention(SOURCE) Issue #986.,Add support for a new feature
"ENHANCEMENT: Putting @NonNull on a parameter of an abstract method no longer generates a warning, to allow you to use this annotation to document intended behaviour Issue #807.",Bug fix
,
FEATURE: @Helper can be placed on method-local inner classes to make all methods in the class accessible to the rest of the method. Full documentation.,Add support for a new feature
"FEATURE: @Builder(toBuilder = true) is now available. It produces an instance method that creates a new builder, initialized with all the values of that instance. For more, read the Feature page on Builder.",Add support for a new feature
"FEATURE: the hashCode() method generated by lombok via @EqualsAndHashCode, @Data, and @Value is now smarter about nulls; they are treated as if they hash to a magic prime instead of 0, which reduces hash collisions.",Performance improvement
FEATURE: @NoArgsConstructor(force = true) can be used to create no args constructors even if final fields are present.,Add support for a new feature
BUGFIX: Parameterized static methods with @Builder would produce compiler errors in javac. Issue #828.,Bug fix
BUGFIX: The new annotations-on-types feature introduced in JDK8 did not delombok correctly. Issue #855.,Bug fix
PERFORMANCE: the config system caused significant slowdowns in eclipse if the filesystem is very slow (network file system) or has a slow authentication system.,Performance improvement
BUGFIX: Various quickfixes in Eclipse Mars were broken. Issue #861 Issue #866 Issue #870.,Bug fix
-,Bug fix
-,Bug fix
,
BUGFIX: Lombok now works with Eclipse Mars.,Bug fix
BUGFIX: @UtilityClass could result in uninitialized static variables if compiled with ecj/eclipse. Issue #839,Bug fix
"BUGFIX: This version of lombok has a refactored launcher (the one introduced in v1.16.0), which fixes various bugs related to errors in eclipse concerning loading classes, failure to find lombok classes, and errors on ClassLoaders. Probably impacts issues Issue #767 and Issue #826.",Bug fix
-,Bug fix
,
FEATURE: The config key lombok.extern.findbugs.addSuppressFBWarnings can now be used to add findbugs suppress warnings annotations to all code lombok generates. This addresses feature request Issue #737.,Add support for a new feature
"FEATURE: New lombok annotation: @UtilityClass, for making utility classes (not instantiable, contains only static 'function' methods). See the feature documentation for more information.",Add support for a new feature
BUGFIX: The ant delombok task was broken starting with v1.16.0. Note that the task def class has been changed; taskdef lombok.delombok.ant.Tasks$Delombok instead of the old lombok.delombok.ant.DelombokTask. Issue #810.,Bug fix
BUGFIX: val in javac would occasionally fail if used inside inner classes. This is (probably) fixed. Issue #729 and Issue #616.,Bug fix
-,Bug fix
"BUGFIX: Starting with v1.16.0, lombok would fail to execute as an executable jar if it was in a path with spaces in it. Issue #812.",Bug fix
BUGFIX: v1.16.0 did not work in old eclipse versions (such as eclipse indigo). Issue #818.,Bug fix
,
"BUGFIX: @ExtensionMethod was broken in Eclipse using java 8. Issue #777, Issue #782",Bug fix
"BUGFIX: delombok: Using exotic characters in your source files would overzealously backslash-u escape them. Now, all characters are printed unescaped, assuming your chosen encoding can support them. Otherwise, they are escaped. Issue #794",Bug fix
"PROMOTION: @Builder has graduated from experimental to the main package with a few changes (addition of @Singular, removal of the fluent and chain options). The old one still exists and has been deprecated.",Code redesign
"FEATURE: @Builder now supports adding the @Singular annotation to any field/parameter that represents a collection, which results in a method in the generated builder that takes in one element of that collection and adds it. Lombok takes care of generating the appropriate code to produce a compacted immutable version of the appropriate type. In this version, java.util collections and guava's ImmutableCollections are supported. See the feature documentation for more information.",Add support for a new feature
"FEATURE: Added a launcher to the lombok boot process which removes the need for -Xbootclasspath to be in your eclipse.ini file, and removes all non-public API and third party dependencies (such as ASM) from the lombok jar, thus removing them from your IDE's auto complete offerings in any project that uses lombok. For those debugging lombok, the launcher enables hot code replace which makes debugging a lot easier, as previously one was required to shut down the IDE, rebuild the jar, and relaunch. Add -Dshadow.override.lombok=/path/to/lombok/bin to the launch target for hot code replace.",Add support for a new feature
,
PERFORMANCE: The configuration system typically hit the filesystem twice per read configuration key instead of hardly ever. This is a continuation of Issue #717.,Bug fix
,
BUGFIX: Usage of val would break starting with JDK8 release 1.8.0_20. Issue #766,Bug fix
"BUGFIX: Depending on your eclipse project setup, releases v1.14.0 through v1.14.4 could noticably slow down your eclipse. Issue #717.",Bug fix
,
BUGFIX: GWT produces errors in handlers on line 1 in any source files that use lombok; this has been fixed. Issue #734,Bug fix
BUGFIX-IN-PROGRESS: Many pathfinder issues in eclipse (see the bugfix in progress in v1.14.2) have now been fixed. Issue #717,Bug fix
,
BUGFIX: syntax highlighting in eclipse will become weird and auto-complete may stop working amongst other eclipse features in v1.14.0 (regression from v1.12.6). Issue #723,Bug fix
FEATURE: Added @Tolerate; put this annotation on any method or constructor and lombok will skip it when considering whether or not to generate a method or constructor. This is useful if the types of the parameters of your method do not clash with what lombok would generate.,Add support for a new feature
"FEATURE: Added config key lombok.getter.noIsPrefix, which lets you disable use and generation of isFoo(), instead going with getFoo(), for {@code boolean} fields.",Add support for a new feature
BUGFIX: Errors in the eclipse log with IndexOutOfBound: 2 in ASTConverter.convertType. Issue #721,Bug fix
"BUGFIX-IN-PROGRESS: As yet unknown conditions in eclipse result in lots of IllegalArgumentException in the log with message ""Path must include project and resource name"". Also, 'invalid URL' or 'URI not absolute' errors can occur when using exotic file system abstractions such as Jazz. These bugs haven't been fixed, but instead of catastrophic failure, warning logs will be emitted instead. Issue #717",Bug fix
BUGFIX: mvn builds fail with a 'URI not absolute' exception. Issue #718,Bug fix
,
"FEATURE: You can now configure aspects of lombok project wide (or even workspace wide, or just for a single package) via the configuration system. You can configure many things; run java -jar lombok.jar config -gv for the complete list.",Add support for a new feature
"DEPRECATION: @Delegate has been moved to lombok.experimental.Delegate, and corner cases such as recursive delegation (delegating a type that itself has fields or methods annotated with @Delegate) are now error conditions. See the feature documentation for more information.",Deprecate functionality
"FEATURE: It is now possible to put annotations, such as @Nullable, on the one parameter of generated equals() methods by specifying the onParam= option on @EqualsAndHashCode, similar to how that feature already exists for @Setter. Issue #709",Add support for a new feature
CHANGE: suppressConstructorProperties should now be configured via lombok configuration. Issue #694,Code redesign
"CHANGE: The canEqual method generated by @EqualsAndHashCode, @Value and @Data is now protected instead of public. Issue #695",Code redesign
"BUGFIX: Major work on improving support for JDK8, both for javac and eclipse.",Bug fix
BUGFIX: Deadlocks would occasionally occur in eclipse when using lazy getters Issue #625,Bug fix
BUGFIX: Usage of @SneakyThrows with a javac from JDK8 with -target 1.8 would result in a post compiler error. Issue #690,Bug fix
BUGFIX: Switching workspace on some versions of eclipse resulted in a 'duplicate field' error. Issue #701,Bug fix
,
"BUGFIX: Deadlocks would occasionally occur in eclipse during project builds, especially if using the gradle plugin. Issue #680",Bug fix
PLATFORM: Added support for Eclipse Luna. Issue #644,Support for external development tool
PLATFORM: Initial JDK8 support for eclipse's alpha support in kepler. Issue #632,Add support for a new feature
"FEATURE: The various @Log annotations now support the topic parameter, which sets the logger's name. The default remains the fully qualified type name of the class itself. Issue #667.",Add support for a new feature
BUGFIX: Using lombok with IntelliJ and the IBM JDK would result in NPEs during initialization. Issue #683.,Bug fix
BUGFIX: Eclipse quickfix Surround with try/catch block didn't work inside @SneakyThrows annotated methods Issue #511.,Bug fix
BUGFIX: Eclipse refactoring Extract Local Variable didn't work inside @SneakyThrows annotated methods Issue #668.,Bug fix
BUGFIX: {Netbeans} @SneakyThrows would lead to unused import and break refactorings Issue #544.,Bug fix
BUGFIX: Eclipse Organize Imports would generate error: AST must not be null Issue #666.,Bug fix
BUGFIX: Copying javadoc to getters / setters / withers would copy non-relevant sections too. Issue #620.,Bug fix
"ENHANCEMENT: Lombok used to ship with JNA. It added over 800k to the size of lombok.jar and could mess with usage of JNA in your local environment, especially in eclipse. Issue #682",Performance improvement
DETAIL: {Delombok} Inside enum bodies the delombok formatter didn't respect the emptyLines directive Issue #664.,Bug fix
DETAIL: Use smaller primes (<127) for generating hashcodes Issue #660,Performance improvement
,
BUGFIX: v1.12.2's delombok turns all operator+assignments into just assignment. Fixed. Issue #633,Bug fix
BUGFIX: {Netbeans} v1.12.2 doesn't well with netbeans. Issue #626,Bug fix
ENHANCEMENT: Delombok now supports varied options for how it formats the resulting source files. This includes scanning the source for things like the preferred indent. Use option --format-help for more information. Issue #643,Add support for a new feature
"DETAIL: The primes lombok generates for use in generated hashCode() methods used to be direct copies from Effective Java. It turns out these particular primes are used so much, they tend to be a bit more collision-prone, so we switched them. Now, '277' is used instead of '31'. The primes for booleans have also been changed. Issue #660",Performance improvement
,
"PLATFORM: Initial JDK8 support, without affecting existing support for JDK6 and 7. Issue #524. While lombok will now work on JDK8 / javac8, and netbeans 7.4 and up, lombok does not (yet) support new language features introduced with java8, such as lambda expressions. Support for these features will be added in a future version.",Add support for a new feature
PLATFORM: Running javac on IBM J9 VM would cause NullPointerExceptions when compiling with lombok. These issues should be fixed. Issue #589.,Bug fix
"CHANGE: [JDK8-related] The canonical way to write onMethod / onParameter / onConstructor annotation now uses a double underscore instead of a single underscore, so, now, the proper way to use this feature is @RequiredArgsConstructor(onConstructor=@__(@Inject)). The old way (single underscore) still works, but generates warnings on javac 8.",Code redesign
BUGFIX: Using @NonNull on an abstract method used to cause exceptions during compilation. Issue #594.,Bug fix
BUGFIX: Using @NonNull on methods that also have @SneakyThrows or @Synchronized caused arbitrary behaviour. Issue #623.,Bug fix
"GERMANY: Major version bumped from 0 to 1, because allegedly this is important. Rest assured, this change is nevertheless backwards compatible.",Update dependency
,
"FEATURE: javadoc on fields will now be copied to generated getters / setters / withers. There are ways to specify separate javadoc for the field, the setter, and the getter, and @param and @return are handled appropriately. Addresses feature request Issue #132. @Getter and @Setter documentation. @Wither documentation.",Add support for a new feature
CHANGE: The desugaring of @Getter(lazy=true) is now less object creation intensive. Documentation has been updated to reflect what the new desugaring looks like. @Getter(lazy=true) documentation.,Code redesign
-,Documentation
"PROMOTION: @Value has been promoted from experimental to the main package with no changes. The 'old' experimental one is still around but is deprecated, and is an alias for the new main package one. @Value documentation.",Code redesign
"FEATURE: {Experimental} @Builder support. One of our earliest feature request issues, Issue #89, has finally been addressed. @Builder documentation.",Add support for a new feature
FEATURE: @NonNull on a method or constructor parameter now generates a null-check statement at the start of your method. This nullcheck will throw a NullPointerException with the name of the parameter as the message. Issue #549,Add support for a new feature
BUGFIX: Usage of Lombok.sneakyThrow() or @SneakyThrows would sometimes result in invalid classes (classes which fail with VerifyError). Issue #543,Bug fix
BUGFIX: Using val in try-with-resources did not work for javac. Issue #555,Bug fix
"BUGFIX: When using @Data, warnings are not generated if certain aspects are not generated because you wrote explicit versions of them. However, this gets confusing with equals / hashCode / canEqual, as nothing is generated if any one of those methods is present. Now, if one of equals or hashCode is present but not the other one (or canEqual is present but equals and/or hashCode is missing), a warning is emitted to explain that lombok will not generate any of the equals / hashCode methods, and that you should either write them all yourself or remove them all. Issue #548",Bug fix
BUGFIX: Possibly fixed a race condition in patcher Issue #566.,Bug fix
,
FEATURE: Major performance improvements in eclipse by profiling the project clean process.,Performance improvement
"CHANGE: {Experimental} The experimental @Value feature no longer implies the also experimental @Wither. If you like your @Value classes to make withers, add @Wither to the class right next to @Value.",Code redesign
"FEATURE: {Experimental} Reintroduced onMethod, onConstructor and onParam to @Getter, @Setter, @Wither, and @XArgsConstructor. These parameters allow you to add annotations to the methods/constructors that lombok will generate. This is a workaround feature: The stability of the feature on future versions of javac is not guaranteed, and if a better way to implement this feature is found, this feature's current incarnation will be removed without a reasonable period of deprecation. Documentation on the onX feature",Add support for a new feature
FEATURE: Added support for Log4j v2.0 via @Log4j2 Issue #505,Add support for a new feature
ENHANCEMENT: The Lombok installer can now find and install lombok into JBoss Developer Studio. The installer will now also look for eclipse and eclipse variants in your home directory. Issue #507,Support for external development tool
"BUGFIX: @ExtensionMethods no longer causes VerifyError exceptions when running eclipse-compiled code if extension methods are called on expressions which are method calls whose return type is a type variable. For example, someList.get(i).extensionMethod() would fail that way. Issue #509",Bug fix
BUGFIX: java 7's try-with-resources statement did not delombok correctly. Issue #532,Bug fix
,
FEATURE: Lombok can be disabled entirely for any given compile run by using JVM switch -Dlombok.disable. This might be useful for code style checkers and such.,Add support for a new feature
FEATURE: Added support for Slf4j extended logger Issue #494,Add support for a new feature
BUGFIX: {Delombok} Running delombok has been causing VerifyError errors when used with javac 1.7 since 0.11.0. Issue #495,Bug fix
BUGFIX: A conflict between lombok and certain eclipse plugins would result in NullPointerExceptions in the log when using @Delegate.,Bug fix
BUGFIX: NullPointerException in lombok.&#8203;javac.&#8203;handlers.&#8203;JavacHandlerUtil.&#8203;upToTypeNode&#8203;(JavacHandlerUtil.java:978) when compiling with @ExtensionMethod in javac and generated constructors are involved. Issue #496,Bug fix
"BUGFIX: @Deprecated on a field that gets a generated setter in eclipse would result in IllegalArgumentException, which you wouldn't see unless you have the error log open. If you have save actions defined, you'd get a popup box with the exception. Now fixed. Issue #481",Bug fix
,
"FEATURE: {Experimental} @Value, @Wither and @FieldDefaults are now available. These are a lot like @Data but geared towards immutable classes. Documentation on @Value, Documentation on @Wither and Documentation on @FieldDefaults.",Add support for a new feature
-,Documentation
BUGFIX: Eclipse would throw an OOME if using @ExtensionMethod. Issue #463,Bug fix
BUGFIX: {Netbeans} @Cleanup and @Synchronized cause far fewer issues in the netbeans editor. Issue #466,Bug fix
BUGFIX: {Installer} Erroneous messages about the installer complaining about needing root access when installing or removing lombok from eclipse installs has been fixed. The installer edge of this problem was actually already fixed in v0.11.2. Issue #436,Bug fix
BUGFIX: @ExtensionMethod had all sorts of issues in javac. Issue #472,Bug fix
"BUGFIX: Generating static constructors with javac when you have fields with generics, i.e. Class<T>, caused errors. Issue #469",Bug fix
"BUGFIX: Minor @ExtensionMethod issues in eclipse, such as the ability to call extension methods on a super reference which is now no longer possible. Issue #479",Bug fix
,
FEATURE: {Experimental} @ExtensionMethod is now available to add extensions to any type in the form of static methods that take as first parameter an object of that type. Documentation on @ExtensionMethod,Add support for a new feature
-,Documentation
FEATURE: ONGOING: Fix for using lombok together with gwt-designer.,Bug fix
ENHANCEMENT: Small performance enhancements in equals and hashCode. Issue #439,Performance improvement
BUGFIX: Eclipse would display an error message regarding an invalid super constructor in the wrong location. Issue #409,Bug fix
BUGFIX: Eclipse refactor script 'rename method arguments' should work more often with lombok-affected methods.,Bug fix
BUGFIX: Using val in an enhanced for loop did not work if the iterable was a raw type.,Bug fix
"BUGFIX: Using @Getter(lazy=true) when the data type is boolean, int, array, or some other type that requires special treatment for hashCode/equals, now works properly with @Data, @EqualsHashCode and @ToString. Issue #449",Bug fix
BUGFIX: SneakyThrows in constructor should not wrap this/super call in try-block Issue #454,Bug fix
BUGFIX: Setting breakpoints on code above the first generated method was not possible. Issue #450,Bug fix
,
"FEATURE: {Experimental} 'fluent' getters and setters (using just fieldName as methodname instead of getFieldName), setters that return this instead of void, and support for fields with prefixes is introduced with this lombok version. Also, the number of parameters of any existing methods with the same name that lombok would generate are now taken into account; previously if you had any method named setX regardless of how many parameters it has, lombok would avoid generating a setX method. Now lombok generates the method if all present setX methods have a number of parameters other than 1. documentation.",Add support for a new feature
FEATURE: The combination of @Delegate and @Getter or @Data will now delegate to the result of a generated getter. Issue #401,Bug fix
FEATURE: Developing android apps on eclipse with lombok is now possible by running java -jar lombok.jar publicApi and including the generated jar in your project. Documentation on using lombok for android development.,Add support for a new feature
-,Documentation
BUGFIX: In NetBeans the generated default constructor would still be generated even if Lombok also generated constructors. Issue #399,Bug fix
BUGFIX: Some classes that contain @SneakyThrows would not compile (throw ClassFormatError). Issue #412,Bug fix
"BUGFIX: delombok: When @Delegate would generate a method with type parameters of the type T extends package.Class, a dot would be prepended to the type name. Issue #414",Bug fix
BUGFIX: @Getter and @Setter now generate deprecated methods for deprecated fields. Fixes Issue #415,Bug fix
BUGFIX: @Delegate would not generate @Deprecated on methods marked deprecated in javadoc. Fixes Issue #421,Bug fix
BUGFIX: Using val with a type like Outer<TypeArgs>.Inner now works. Issue #416,Bug fix
"BUGFIX: @Getter(lazy=true) where the variable type is a primitive and the initializing expression is of a different primitive type that would type coerce implicitly, i.e. ints can be assigned to longs without a cast, didn't work before. Issue #418",Bug fix
"BUGFIX: val is no longer legal inside basic for loops (the old kind, not the foreach kind). These variables should rarely be final, and in practice it wasn't possible to delombok this code properly. Issue #419",Bug fix
BUGFIX: PrettyCommentsPrinter now prints default clause of annotation methods. Fixes Issue #423,Bug fix
,
"FEATURE: @Delegate can now be used on a no-argument method, which works similarly to adding it to fields. See documentation.",Add support for a new feature
-,Documentation
BUGFIX: Eclipse refactoring Extract Interface was broken when using lombok annotation to generate methods. Issue #159,Bug fix
BUGFIX: Eclipse action Sort Members was broken when using lombok annotations to generate methods or fields. Issue #338,Bug fix
BUGFIX: Eclipse action Refactor/Rename on an inner type was broken when using lombok annotations. Issue #389,Bug fix
"BUGFIX: 0.10.6 causes ClassNotFoundErrors when using ecj (and thus, play framework, gwt, etc). Issue #393",Bug fix
BUGFIX: Eclipse parsing was broken when using lombok annotations with parentheses. Issue #398,Bug fix
ENHANCEMENT: Lombok now adds a line to the Eclipse About dialog about itself.,Add support for a new feature
,
"PERFORMANCE: Performance issues (memory leaks) when using lombok in netbeans, introduced in 0.10, have been fixed. Issue #315",Bug fix
"BUGFIX: Eclipse quickfix ""Add unimplemented methods"" would sometimes insert the new method stubs in strange places, especially if @Data was present. Issue #124",Bug fix
"BUGFIX: Eclipse quickfix ""Assign parameter to new field"" would insert it outside the class body if @Data was present. Issue #295",Bug fix
BUGFIX: Renaming a @Data-annotated class in eclipse using Alt+Shift+R no longer mangles the data annotation. Issue #359,Bug fix
"BUGFIX: Using save action 'Use this qualifier for field accesses, only if necessary' did not work together with @Data in certain cases. Issue #374",Bug fix
"BUGFIX: Organize imports, either run manually or as save action, would throw an exception. Issue #381",Bug fix
BUGFIX: Extracted constants would be placed outside the class body when a logging annotation was present. Issue #388,Bug fix
,
"BUGFIX: Using the log field from @Log, etc, now works in static initializers. Issue #368",Bug fix
"BUGFIX: Auto-formatting code containing lombok on eclipse, even via an auto-save action, now works. Issue #163",Bug fix
BUGFIX: Letting eclipse generate various methods when a lombok annotation is present now works. Issue #211,Bug fix
BUGFIX: Renaming a @Data-annotated class in eclipse no longer mangles the data annotation. Issue #359,Bug fix
BUGFIX: Eclipse save action Add final modifier to private fields no longer adds final keyword to @Setter fields. Issue #336,Bug fix
BUGFIX: Mixing labels and lombok.val would cause NPEs in javac. Issue #372,Bug fix
BUGFIX: Writing lombok.val out in full (vs. using an import statement) did not work in eclipse. Issue #373,Bug fix
,
BUGFIX: Delombok will no longer jumble up comments from different files when using -sourcepath option. Issue #357,Bug fix
"BUGFIX: Turns out treating @NotNull as an annotation that indicates lombok should generate nullcheck guards causes all sorts of problems. This has been removed again, and documentation has been updated to reflect this. Issue #360",Bug fix
- ,Documentation
BUGFIX: @EqualsAndHashCode or @Data did not work on non-static inner classes whose outer class has a type variable. It does now. Issue #362,Bug fix
,
BUGFIX: @Delegate in eclipse could cause memory leaks in 0.10.0. Issue #337,Bug fix
BUGFIX: Annotations on enum values were being deleted by delombok. Issue #342,Bug fix
BUGFIX: @AllArgsConstructor was erroneously generating a parameter and an assignment for final variables already assigned in their declaration. Issue #351,Bug fix
ENHANCEMENT: @NotNull is now also recognized as an annotation indicating that lombok should generate nullcheck guards in generated constructors and setters. Issue #344,Bug fix
,
FEATURE: New annotation: @Delegate. This annotation lets lombok generate delegation methods for a given field. More…,Add support for a new feature
FEATURE: Added support for 'val'. Val is an immutable variable that infers its type from the right hand side of the initializing expression. More…,Add support for a new feature
"FEATURE: Added support for several logging frameworks via the @Log, @Slf4j, etc. annotation. More…",Add support for a new feature
FEATURE: Lombok now supports post-compile transformers. Issue #217,Add support for a new feature
"FEATURE: Using @SneakyThrows no longer requires a runtime dependency on lombok.jar. In fact, any call to Lombok.sneakyThrows(ex) is optimized at the bytecode level and no longer requires you to actually have lombok.jar or lombok-runtime.jar on the classpath.",Code redesign
"FEATURE: @XArgsConstructor, @Getter, and @ToString can now be used on enum declarations. Previously, behaviour of these annotations on enums was undefined.",Code redesign
"FEATURE: @Getter/@Setter (and by extension, @Data) in v0.9.3 and earlier would generate getter and setter method names that did not conform to the beanspec, primarily when faced with boolean properties. This has been fixed. In practice this won't affect you unless you have properties named isFoo or hasFoo. Now the setter generated for this will be called setFoo (as the property name is foo) and not setIsFoo. Also, hasFoo is now no longer special; the names would be isHasFoo and setHasFoo. The java bean spec does not give has special meaning.",Maintainability improvement
"FEATURE: @EqualsAndHashCode (and by extension, @Data) now add a canEqual method which improves the sanity of equality amongst a hierarchy of classes. More…",Add support for a new feature
FEATURE: @Getter now supports a lazy=true attribute. More…,Add support for a new feature
ENHANCEMENT: The installer will now find Eclipse installations when they are located in a subdirectory of a directory containing the word 'eclipse' . Issue #283,Bug fix
ENHANCEMENT: Add null check for @Cleanup Issue #227,Code redesign
BUGFIX: Lombok is now compatible with javac 7.,Bug fix
BUGFIX: Hard to reproduce NullPointerException in Eclipse on the getTypeBinding method in the error log has been fixed. Issue #237,Bug fix
BUGFIX: @Setter and @Getter can now be applied to static fields again (was broken in v0.9.3 only). Issue #209,Bug fix
"BUGFIX: delombok added type parameters to constructors that mirror the type's own type parameters. This resulted in delombok turning any generated constructor that takes at least 1 parameter of type 'T' into something that didn't compile, and to boot, a confusing error message ('T is not compatible with T'). This is now fixed. Issue #213",Bug fix
BUGFIX: The Eclipse source generator would place the generated code outside the class Issue #228,Bug fix
"BUGFIX: When using m2eclipse, occasionally you'd see a ClassNotFoundError on JavacProcessingEnvironment. This has been fixed. Issue #250",Bug fix
"BUGFIX: Either all or none of equals, hashCode and canEqual will be generated. Issue #313",Bug fix
BUGFIX: Delombok in output-to-directory mode was generating very long paths on mac and linux. Issue #322,Bug fix
"BUGFIX: Various refactor scripts and save actions bugs have been fixed in eclipse, though most remain.",Bug fix
,
FEATURE: Adding @Getter or @Setter to a class is now legal and is like adding those annotations to every non-static field in it. Issue #202,Add support for a new feature
"FEATURE: Three new annotations, @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor have been added. These split off @Data's ability to generate constructors, and also allow you to finetune what kind of constructor you want. In addition, by using these annotations, you can force generation of constructors even if you have your own. Issue #152",Add support for a new feature
-,Add support for a new feature
-,Add support for a new feature
"FEATURE: Constructors generated by lombok now include a @java.beans.ConstructorProperties annotation. This does mean these constructors no longer work in java 1.5, as this is a java 1.6 feature. The annotation can be suppressed by setting suppressConstructorProperties to true in a @RequiredArgsConstructor or @AllArgsConstructor annotation. Issue #195",Add support for a new feature
"FEATURE: generated toString, equals and hashCode methods will now use this.getX() and other.getX() instead of this.x and other.x if a suitable getter is available. This behaviour is useful for proxied classes, such as the POJOs that hibernate makes. Usage of the getters can be suppressed with @ToString/@EqualsAndHashCode(doNotUseGetters = true). Issue #183",Code redesign
ENHANCEMENT: FindBugs' @CheckForNull is now copied from a field to a setter's parameter and the getter method just like @Nullable. Issue #201,Code redesign
ENHANCEMENT: plugins and @SneakyThrows: Resolving types in annotations now works better especially for classes that aren't in the core java libraries. Issue #161,Bug fix
"ENHANCEMENT: If tools.jar isn't found (required when running delombok), now a useful error message is generated. The search for tools.jar now also looks in JAVA_HOME.",Maintainability improvement
ENHANCEMENT: toString() on inner classes now lists the class name as Outer.Inner instead of just Inner. Issue #206,Code redesign
"ENHANCEMENT: All field accesses generated by lombok are now qualified (like so: this.fieldName). For those who have a warning configured for unqualified field access, those should no longer occur. Issue #121",Code redesign
"ENHANCEMENT: All fields and methods generated by lombok now get @SuppressWarnings(""all"") attached to avoid such warnings as missing javadoc, for those of you who have that warning enabled. Issue #120",Bug fix
"PLATFORMS: Lombok should now run in stand-alone ecj (Eclipse Compiler for Java). This isn't just useful for the few souls actually using this compiler day to day, but various eclipse build tools such as the RCP builder run ecj internally as well. Issue #145",Bug fix
"BUGFIX: Eclipse: @Data and other annotations now don't throw errors when you include fields with bounded wildcard generics, such as List<? extends Number>. Issue #157",Bug fix
BUGFIX: complex enums didn't get delomboked properly. Issue #169,Bug fix
"BUGFIX: delombok now no longer forgets to remove import lombok.AccessLevel;. In netbeans, that import will no longer be flagged erroneously as being unused. Issue #173 and Issue #176",Bug fix
"BUGFIX: While its discouraged, import lombok.*; is supposed to work in the vast majority of cases. In eclipse, however, it didn't. Now it does. Issue #175",Bug fix
"BUGFIX: When @Getter or @Setter is applied to a multiple field declaration, such as @Getter int x, y;, the annotation now applies to all fields, not just the first. Issue #127",Bug fix
"BUGFIX: delombok on most javacs would quit with a NoSuchFieldError if it contains <?> style wildcards anywhere in the source, as well as at least 1 lombok annotation. No longer. Issue #207",Bug fix
"BUILD: dependencies are now fetched automatically via ivy, and most dependencies now include sources by default, which is particularly handy for those working on the lombok sources themselves.",Maintainability improvement
,
preliminary support for lombok on NetBeans! - thanks go to Jan Lahoda from NetBeans. Issue #93,Support for external development tool
"lombok now ships with the delombok tool, which copies an entire directory filled with sources to a new directory, desugaring any java files to what it would look like without lombok's transformations. Compiling the sources in this new directory without lombok support should result in the same class files as compiling the original with lombok support. Great to double check on what lombok is doing, and for chaining the delombok-ed sources to source-based java tools such as Google Web Toolkit or javadoc. lombok.jar itself also provides an ant task for delombok. Full documentation of delombok.",Add support for a new feature
"Lombok now works on openjdk7 (tested with JDK7m5)! For all the folks on the cutting edge, this should be very good news. Issue #134 - thanks go to Jan Lahoda from NetBeans.",Add support for a new feature
lombok now has various command-line accessible utilities bundled with it. Run java -jar lombok.jar --help to see them. Included (aside from the already mentioned delombok):,Add support for a new feature
Ability to create a tiny jar named lombok-runtime.jar with runtime dependencies. The lombok transformations that have a runtime dependency on this jar can be listed as well. Run java -jar lombok.jar createRuntime --help for more information.,Add support for a new feature
"Scriptable command line install and uninstall options. Run java -jar lombok.jar install --help (or uninstall, of course) for more information. Technically this support has been there in earlier versions, but the command line options are now much more lenient, not to mention more visible.",Add support for a new feature
Lombok now works on Springsource Tool Suite. Issue #95,Support for external development tool
"Lombok now works on JDK 1.6.0_0, for those of us who have really old JDK1.6's installed on their system. Issue #156",Bug fix
"Erroneous use of lombok in Eclipse (adding it to a project as an annotation processor, which is not how lombok is to be used on Eclipse) now generates a useful warning message with helpful information, instead of a confusing error hidden in the logs. Issue #126",Maintainability improvement
"FIXED: Regression bug where you would occasionally see errors with the gist 'loader constraint violation: when resolving...', such as when opening the help system, starting the diff editor, or, rarely, opening any java source file. Issue #141",Bug fix
FIXED: @SneakyThrows without any parameters should default to Throwable.class but it didn't do anything in javac. Issue #146,Bug fix
"FIXED: Capitalization is now ignored when scanning for existing methods, so if setURL already exists, then a @Data annotation on a class with a field named url will no longer also generate setUrl. Issue #148",Bug fix
,
"The installer now works much better on linux, in that it auto-finds eclipse in most locations linux users tend to put their eclipse installs, and it can now handle apt-get installed eclipses, which previously didn't work well at all. There's also a hidden feature where the installer can work as a command-line only tool (java -jar lombok.jar install eclipse path/to/eclipse) which also supports uninstall of course. You can now also point at eclipse.ini in case you have a really odd eclipse install, which should always work.",Bug fix
"For lombok developers, the eclipse launch target now works out-of-the-box on snow leopard. Issue #139",Bug fix
,
"The lombok class patching system has been completely revamped; the core business of patching class files has been offloaded in an independent project called 'lombok.patcher', which is now used to patch lombok into eclipse.",Code redesign
Many behind-the-scenes changes to improve lombok's stability and flexibility on eclipse.,Maintainability improvement
Changes to the lombok core API which aren't backwards compatible with lombok series v0.8 but which were necessary to make writing third party processors for lombok a lot easier.,Code redesign
Minor version number bumped due to the above 3 issues.,Update dependency
"Eclipse's ""rename"" refactor script, invoked by pressing CMD/CTRL+SHIFT+R, now works on @Data annotated classes.",Bug fix
The windows installer would fail on boot if you have unformatted drives. Issue #138,Bug fix
The static constructor that @Data can make was being generated as package private when compiling with javac. Issue #136,Bug fix
,
There's now an AccessLevel.NONE that you can use for your @Getter and @Setter annotations to suppress generating setters and getters when you're using the @Data annotation. Address Issue #110,Add support for a new feature
"Both @EqualsAndHashCode and @ToString now support explicitly specifying the fields to use, via the new 'of' parameter. Fields that begin with a '$' are now also excluded by default from equals, hashCode, and toString generation, unless of course you explicitly mention them in the 'of' parameter. Addresses Issue #105",Add support for a new feature
"There's a commonly used @NotNull annotation, from javax.validation (and in earlier versions of hibernate, which is the origin of javax.validation) which does not quite mean what we want it to mean: It is not legal on parameters, and it is checked at runtime after an explicit request for validation. As a workaround, we've removed checking for any annotation named NotNull from the nonnull support of lombok's generated Getters, Setters, and constructors. Issue #116",Bug fix
Fixed yet another issue with @SneakyThrows. This was reported fixed in v0.8.4. but it still didn't work quite as it should. Still falls under the bailiwick of Issue #103,Bug fix
,
"Fixed many issues with @SneakyThrows - in previous versions, using it would sometimes confuse the syntax colouring, and various constructs in the annotated method would cause outright eclipse errors, such as beginning the method with a try block. This also fixes Issue #103",Bug fix
-,Bug fix
"Fixed the David Lynch bug - in eclipse, classes with lombok features used in them would sometimes appear invisible from other source files. It's described in more detail on Issue #114. If you suffered from it, you'll know what this is about.",Bug fix
Fixed the problem where eclipse's help system did not start up on lombokized eclipses. Issue #99,Bug fix
All generated methods now make their parameters (if they have any) final. This should help avoid problems with the 'make all parameters final' save action in eclipse. Issue #113,Code redesign
"Okay, this time really added support for @NonNull and @NotNull annotations. It was reported for v0.8.3 but it wasn't actually in that release. @Nullable annotations are now also copied over to the getter's return type and the setter and constructor's parameters (but, obviously, no check is added). Any @NonNull annotated non-final fields that are not initialized are now also added to the generated constructor by @Data in order to ensure via an explicit null check that they contain a legal value.",Add support for a new feature
"@ToString (and hence, @Data) now default to includeFieldNames=true. Issue #108",Code redesign
,
"@EqualsAndHashCode (and, indirectly, @Data) generate a warning when overriding a class other than java.lang.Object but not setting EqualsAndHashCode's callSuper to true. There are, however, legitimate reasons to do this, so this warning is now no longer generated if you explicitly set callSuper to false. The warning text now also refers to this action if not calling super is intentional.",Bug fix
"If your fields have @NonNull or @NotNull annotations, then generated setters are generated with a null check, and the annotation is copied to the setter's parameter, and the getter's method.",Bug fix
An annoying bug that usually showed up if you had package-info.java files has been fixed. It would cause a NullPointerException at lombok.javac.apt.Processor.toUnit(Processor.java:143),Bug fix
,
"@EqualsAndHashCode and @ToString created; these are subsets of what @Data does (namely: generate toString(), and generate equals() and hashCode() implementations). @Data will still generate these methods, but you can now generate them separately if you wish. As part of this split off, you can now specify for toString generation to include the field names in the produced toString method, and for all 3 methods: You can choose to involve the implementation of the superclass, and you can choose to exclude certain fields. Issue #81",Add support for a new feature
when compiling with javac: warnings on specific entries of an annotation parameter (such as non-existent fields in a @EqualsAndHashCode exclude parameter) now show up on the problematic parameter and not on the entire annotation. Issue #84,Maintainability improvement
,
"Using eclipse's 'find callers' on a @Data annotation will now find callers of the static constructor if you generated it. If not, it still finds callers to hashCode() as before (it's not possible to make eclipse find callers to the normal constructor, though you can just use 'find callers' on the class name, which works fine). Issue #78",Code redesign
"If your field is called 'hasFoo' and its a boolean, and you use @Getter or @Data to generate a getter for it, that getter will now be called 'hasFoo' and not 'isHasFoo' as before. This rule holds for any field prefixed with 'has', 'is', or 'get', AND the character following the prefix is not lowercase (so that 'hashCodeGenerated' is not erroneously identified as already having a prefix!). Similar logic has been added to not generate a getter at all for a field named 'foo' or 'hasFoo' if there is already a method named 'isFoo'. Issue #77",Code redesign
"Starting the lombok installer on mac os X using soylatte instead of apple's JVM now correctly detects being on a mac, and using mac-specific code for finding and installing eclipses. Issue #80",Bug fix
"For non-mac, non-windows installations, the jar file in the -javaagent parameter is now written as an absolute path in eclipse.ini instead of a relative one. For some reason, on at least 1 linux installation, an absolute path is required to make javaagent work. This 'fix' has the unfortunate side-effect of making it impossible to move your eclipse installation around without breaking the pointer to the lombok java agent, so this change has only been introduced for non-windows, non-mac. Thanks to WouterS for spotting this one and helping us out with some research on fixing it. Issue #79",Code redesign
,
